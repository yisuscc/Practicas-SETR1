
Practica6Fase1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3cc  0800a3cc  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d4  0800a3d4  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0800a3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  2000012c  0800a508  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  0800a508  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd1a  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b7  00000000  00000000  0003ceb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00040f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001390  00000000  00000000  000428e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00043c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd69  00000000  00000000  0006e319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f500b  00000000  00000000  0008e082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c88  00000000  00000000  00183090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00189d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a30c 	.word	0x0800a30c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	0800a30c 	.word	0x0800a30c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <ini_acelerometro>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ini_acelerometro(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	// que metemos en el buffer
	// pues los datos a escribir
	buffer[0]= 0x40;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	713b      	strb	r3, [r7, #4]
	// debe escribir en la dirección del esclabo
	// 0xD4
	// el tamaño es de 8 byrtes
	//creo que no hace falta meterle 1000 de timeaout
	// ya qyue no hay que calentarlo
	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 100);
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	2210      	movs	r2, #16
 8000afa:	21d4      	movs	r1, #212	; 0xd4
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ini_acelerometro+0x2c>)
 8000afe:	f001 fbed 	bl	80022dc <HAL_I2C_Mem_Write>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000180 	.word	0x20000180

08000b10 <readAccel>:
int16_t readAccel(uint8_t axis){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	int16_t res = 0 ;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];
	HAL_I2C_Mem_Read(&hi2c2, 0xD4, 0x28+2*axis, I2C_MEMADD_SIZE_8BIT, buffer,2, 100);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3314      	adds	r3, #20
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	21d4      	movs	r1, #212	; 0xd4
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <readAccel+0x70>)
 8000b3c:	f001 fce2 	bl	8002504 <HAL_I2C_Mem_Read>
	res = ((int16_t)(buffer[1]<<8)| buffer[0])*0.061;
 8000b40:	7b7b      	ldrb	r3, [r7, #13]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	7b3b      	ldrb	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fdb7 	bl	80006c0 <__aeabi_i2d>
 8000b52:	a309      	add	r3, pc, #36	; (adr r3, 8000b78 <readAccel+0x68>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	f7ff fb36 	bl	80001c8 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fe16 	bl	8000794 <__aeabi_d2iz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	81fb      	strh	r3, [r7, #14]
	return res;
 8000b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	5a1cac08 	.word	0x5a1cac08
 8000b7c:	3faf3b64 	.word	0x3faf3b64
 8000b80:	20000180 	.word	0x20000180

08000b84 <convert2>:
int16_t convert(int16_t dato){
	return (((dato - (-1000)) * (127 - 0)) /
			(1000 - (-1000))) + 0;
}
int16_t convert2(int16_t dato){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	return dato/100;
 8000b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <convert2+0x28>)
 8000b94:	fb82 1203 	smull	r1, r2, r2, r3
 8000b98:	1152      	asrs	r2, r2, #5
 8000b9a:	17db      	asrs	r3, r3, #31
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	b21b      	sxth	r3, r3
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	51eb851f 	.word	0x51eb851f

08000bb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

	uint8_t dato[3]; // esta es la variable donde vamos a mandar el report
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bb6:	f000 fe42 	bl	800183e <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 8000bba:	f000 f841 	bl	8000c40 <SystemClock_Config>
/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bbe:	f000 f9db 	bl	8000f78 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 8000bc2:	f000 f89f 	bl	8000d04 <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8000bc6:	f000 f8d5 	bl	8000d74 <MX_I2C2_Init>
	MX_QUADSPI_Init();
 8000bca:	f000 f911 	bl	8000df0 <MX_QUADSPI_Init>
	MX_SPI3_Init();
 8000bce:	f000 f935 	bl	8000e3c <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8000bd2:	f000 f971 	bl	8000eb8 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000bd6:	f000 f99f 	bl	8000f18 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8000bda:	f008 fda1 	bl	8009720 <MX_USB_DEVICE_Init>
	ini_acelerometro();
 8000bde:	f7ff ff7f 	bl	8000ae0 <ini_acelerometro>
	/* USER CODE BEGIN 2 */
	HAL_Delay(5000); //retraso para esperar a que el USB se configure
 8000be2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be6:	f000 fe9f 	bl	8001928 <HAL_Delay>
	dato[0] = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	713b      	strb	r3, [r7, #4]
/* USER CODE END 2 */
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
{// leelmos el estado el botón
	if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin)==1){
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <main+0x8c>)
 8000bf4:	f001 fa84 	bl	8002100 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d101      	bne.n	8000c02 <main+0x52>
			dato[0]=0b00100000 ;// Button
 8000bfe:	2320      	movs	r3, #32
 8000c00:	713b      	strb	r3, [r7, #4]
		}
	// leemos eje x
// establecemos el valor de dato[1]

	dato[1]= convert2(readAccel(0));
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff84 	bl	8000b10 <readAccel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffba 	bl	8000b84 <convert2>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	717b      	strb	r3, [r7, #5]
// leemos eje y
//establecemos el valor de dato[2]
dato[2]= convert2(readAccel(1)),
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff7a 	bl	8000b10 <readAccel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffb0 	bl	8000b84 <convert2>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	71bb      	strb	r3, [r7, #6]
USBD_CUSTOM_HID_SendReport_FS(dato,3);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f008 fdc8 	bl	80097c4 <USBD_CUSTOM_HID_SendReport_FS>
 HAL_Delay(100);
 8000c34:	2064      	movs	r0, #100	; 0x64
 8000c36:	f000 fe77 	bl	8001928 <HAL_Delay>
{// leelmos el estado el botón
 8000c3a:	e7d8      	b.n	8000bee <main+0x3e>
 8000c3c:	48000800 	.word	0x48000800

08000c40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2244      	movs	r2, #68	; 0x44
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f009 fb30 	bl	800a2b4 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c66:	f003 fa63 	bl	8004130 <HAL_PWREx_ControlVoltageScaling>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x34>
	Error_Handler();
 8000c70:	f000 fb34 	bl	80012dc <Error_Handler>
}

/** Configure LSE Drive Capability
 */
HAL_PWR_EnableBkUpAccess();
 8000c74:	f003 fa3e 	bl	80040f4 <HAL_PWR_EnableBkUpAccess>
__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c80:	f023 0318 	bic.w	r3, r3, #24
 8000c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000c88:	2314      	movs	r3, #20
 8000c8a:	617b      	str	r3, [r7, #20]
		| RCC_OSCILLATORTYPE_MSI;
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c98:	2360      	movs	r3, #96	; 0x60
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLN = 40;
 8000ca8:	2328      	movs	r3, #40	; 0x28
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cac:	2307      	movs	r3, #7
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fb59 	bl	8004374 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x8c>
	Error_Handler();
 8000cc8:	f000 fb08 	bl	80012dc <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	607b      	str	r3, [r7, #4]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 ff21 	bl	8004b2c <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xb4>
	Error_Handler();
 8000cf0:	f000 faf4 	bl	80012dc <Error_Handler>
}

/** Enable MSI Auto calibration
 */
HAL_RCCEx_EnableMSIPLLMode();
 8000cf4:	f004 fc28 	bl	8005548 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cf8:	bf00      	nop
 8000cfa:	3758      	adds	r7, #88	; 0x58
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
/* USER CODE END DFSDM1_Init 0 */

/* USER CODE BEGIN DFSDM1_Init 1 */

/* USER CODE END DFSDM1_Init 1 */
hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <MX_DFSDM1_Init+0x6c>)
 8000d0c:	601a      	str	r2, [r3, #0]
hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	711a      	strb	r2, [r3, #4]
hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	60da      	str	r2, [r3, #12]
hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	619a      	str	r2, [r3, #24]
hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	621a      	str	r2, [r3, #32]
		DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
hdfsdm1_channel1.Init.Offset = 0;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_DFSDM1_Init+0x68>)
 8000d5a:	f000 ff1b 	bl	8001b94 <HAL_DFSDM_ChannelInit>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_DFSDM1_Init+0x64>
	Error_Handler();
 8000d64:	f000 faba 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN DFSDM1_Init 2 */

/* USER CODE END DFSDM1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000148 	.word	0x20000148
 8000d70:	40016020 	.word	0x40016020

08000d74 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
/* USER CODE END I2C2_Init 0 */

/* USER CODE BEGIN I2C2_Init 1 */

/* USER CODE END I2C2_Init 1 */
hi2c2.Instance = I2C2;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_I2C2_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
hi2c2.Init.Timing = 0x00000E14;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d80:	f640 6214 	movw	r2, #3604	; 0xe14
 8000d84:	605a      	str	r2, [r3, #4]
hi2c2.Init.OwnAddress1 = 0;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	60da      	str	r2, [r3, #12]
hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
hi2c2.Init.OwnAddress2 = 0;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000db2:	f001 f9f8 	bl	80021a6 <HAL_I2C_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C2_Init+0x4c>
	Error_Handler();
 8000dbc:	f000 fa8e 	bl	80012dc <Error_Handler>
}

/** Configure Analogue filter
 */
if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000dc4:	f001 ff70 	bl	8002ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C2_Init+0x5e>
	Error_Handler();
 8000dce:	f000 fa85 	bl	80012dc <Error_Handler>
}

/** Configure Digital filter
 */
if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000dd6:	f001 ffb2 	bl	8002d3e <HAL_I2CEx_ConfigDigitalFilter>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C2_Init+0x70>
	Error_Handler();
 8000de0:	f000 fa7c 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN I2C2_Init 2 */

/* USER CODE END I2C2_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000180 	.word	0x20000180
 8000dec:	40005800 	.word	0x40005800

08000df0 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

/* USER CODE BEGIN QUADSPI_Init 1 */

/* USER CODE END QUADSPI_Init 1 */
/* QUADSPI parameter configuration*/
hqspi.Instance = QUADSPI;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <MX_QUADSPI_Init+0x48>)
 8000df8:	601a      	str	r2, [r3, #0]
hqspi.Init.ClockPrescaler = 2;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
hqspi.Init.FifoThreshold = 4;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	609a      	str	r2, [r3, #8]
hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	60da      	str	r2, [r3, #12]
hqspi.Init.FlashSize = 23;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e0e:	2217      	movs	r2, #23
 8000e10:	611a      	str	r2, [r3, #16]
hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_QUADSPI_Init+0x44>)
 8000e20:	f003 f9ec 	bl	80041fc <HAL_QSPI_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_QUADSPI_Init+0x3e>
	Error_Handler();
 8000e2a:	f000 fa57 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN QUADSPI_Init 2 */

/* USER CODE END QUADSPI_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001d4 	.word	0x200001d4
 8000e38:	a0001000 	.word	0xa0001000

08000e3c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI3_Init 1 */

/* USER CODE END SPI3_Init 1 */
/* SPI3 parameter configuration*/
hspi3.Instance = SPI3;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <MX_SPI3_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e5a:	60da      	str	r2, [r3, #12]
hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6e:	619a      	str	r2, [r3, #24]
hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
hspi3.Init.CRCPolynomial = 7;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_SPI3_Init+0x74>)
 8000e9c:	f004 fd36 	bl	800590c <HAL_SPI_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_SPI3_Init+0x6e>
	Error_Handler();
 8000ea6:	f000 fa19 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN SPI3_Init 2 */

/* USER CODE END SPI3_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000218 	.word	0x20000218
 8000eb4:	40003c00 	.word	0x40003c00

08000eb8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
/* USER CODE END USART1_Init 0 */

/* USER CODE BEGIN USART1_Init 1 */

/* USER CODE END USART1_Init 1 */
huart1.Instance = USART1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART1_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000efc:	f004 fda9 	bl	8005a52 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x52>
	Error_Handler();
 8000f06:	f000 f9e9 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN USART1_Init 2 */

/* USER CODE END USART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000027c 	.word	0x2000027c
 8000f14:	40013800 	.word	0x40013800

08000f18 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
/* USER CODE END USART3_Init 0 */

/* USER CODE BEGIN USART3_Init 1 */

/* USER CODE END USART3_Init 1 */
huart3.Instance = USART3;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f1e:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <MX_USART3_UART_Init+0x5c>)
 8000f20:	601a      	str	r2, [r3, #0]
huart3.Init.BaudRate = 115200;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
huart3.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
huart3.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
huart3.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART3_UART_Init+0x58>)
 8000f5c:	f004 fd79 	bl	8005a52 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART3_UART_Init+0x52>
	Error_Handler();
 8000f66:	f000 f9b9 	bl	80012dc <Error_Handler>
}
/* USER CODE BEGIN USART3_Init 2 */

/* USER CODE END USART3_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000304 	.word	0x20000304
 8000f74:	40004800 	.word	0x40004800

08000f78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	4bbd      	ldr	r3, [pc, #756]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4abc      	ldr	r2, [pc, #752]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4bba      	ldr	r3, [pc, #744]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4bb7      	ldr	r3, [pc, #732]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4ab6      	ldr	r2, [pc, #728]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4bb4      	ldr	r3, [pc, #720]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4bb1      	ldr	r3, [pc, #708]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4ab0      	ldr	r2, [pc, #704]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4bae      	ldr	r3, [pc, #696]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4bab      	ldr	r3, [pc, #684]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4aaa      	ldr	r2, [pc, #680]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4ba8      	ldr	r3, [pc, #672]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	4ba5      	ldr	r3, [pc, #660]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4aa4      	ldr	r2, [pc, #656]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <MX_GPIO_Init+0x30c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOE,
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 718a 	mov.w	r1, #276	; 0x114
 800100c:	489e      	ldr	r0, [pc, #632]	; (8001288 <MX_GPIO_Init+0x310>)
 800100e:	f001 f88f 	bl	8002130 <HAL_GPIO_WritePin>
		M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8001012:	2200      	movs	r2, #0
 8001014:	f248 1104 	movw	r1, #33028	; 0x8104
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f001 f888 	bl	8002130 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB,
 8001020:	2200      	movs	r2, #0
 8001022:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001026:	4899      	ldr	r0, [pc, #612]	; (800128c <MX_GPIO_Init+0x314>)
 8001028:	f001 f882 	bl	8002130 <HAL_GPIO_WritePin>
		ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
				| SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD,
 800102c:	2200      	movs	r2, #0
 800102e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001032:	4897      	ldr	r0, [pc, #604]	; (8001290 <MX_GPIO_Init+0x318>)
 8001034:	f001 f87c 	bl	8002130 <HAL_GPIO_WritePin>
		USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4894      	ldr	r0, [pc, #592]	; (8001290 <MX_GPIO_Init+0x318>)
 8001040:	f001 f876 	bl	8002130 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7110 	mov.w	r1, #576	; 0x240
 800104a:	4892      	ldr	r0, [pc, #584]	; (8001294 <MX_GPIO_Init+0x31c>)
 800104c:	f001 f870 	bl	8002130 <HAL_GPIO_WritePin>
		GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	488d      	ldr	r0, [pc, #564]	; (800128c <MX_GPIO_Init+0x314>)
 8001056:	f001 f86b 	bl	8002130 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 800105a:	2201      	movs	r2, #1
 800105c:	2101      	movs	r1, #1
 800105e:	488a      	ldr	r0, [pc, #552]	; (8001288 <MX_GPIO_Init+0x310>)
 8001060:	f001 f866 	bl	8002130 <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 8001064:	f240 1315 	movw	r3, #277	; 0x115
 8001068:	617b      	str	r3, [r7, #20]
		| ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4882      	ldr	r0, [pc, #520]	; (8001288 <MX_GPIO_Init+0x310>)
 800107e:	f000 fe95 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin
 8001082:	236a      	movs	r3, #106	; 0x6a
 8001084:	617b      	str	r3, [r7, #20]
		| SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001086:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108a:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	487c      	ldr	r0, [pc, #496]	; (8001288 <MX_GPIO_Init+0x310>)
 8001098:	f000 fe88 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : BUTTON_EXTI13_Pin */
GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a6:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4878      	ldr	r0, [pc, #480]	; (8001294 <MX_GPIO_Init+0x31c>)
 80010b4:	f000 fe7a 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
 ARD_A1_Pin ARD_A0_Pin */
GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 80010b8:	233f      	movs	r3, #63	; 0x3f
 80010ba:	617b      	str	r3, [r7, #20]
		| ARD_A1_Pin | ARD_A0_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010bc:	230b      	movs	r3, #11
 80010be:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4872      	ldr	r0, [pc, #456]	; (8001294 <MX_GPIO_Init+0x31c>)
 80010cc:	f000 fe6e 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 80010d0:	2303      	movs	r3, #3
 80010d2:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010e0:	2308      	movs	r3, #8
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f000 fe5d 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80010f2:	f248 1304 	movw	r3, #33028	; 0x8104
 80010f6:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fe4d 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D4_Pin */
GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001112:	2308      	movs	r3, #8
 8001114:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001122:	2301      	movs	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fe3c 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D7_Pin */
GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001134:	2310      	movs	r3, #16
 8001136:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001138:	230b      	movs	r3, #11
 800113a:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f000 fe2f 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800114e:	23e0      	movs	r3, #224	; 0xe0
 8001150:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fe1e 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D3_Pin */
GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4841      	ldr	r0, [pc, #260]	; (800128c <MX_GPIO_Init+0x314>)
 8001186:	f000 fe11 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : ARD_D6_Pin */
GPIO_InitStruct.Pin = ARD_D6_Pin;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118e:	230b      	movs	r3, #11
 8001190:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	483b      	ldr	r0, [pc, #236]	; (800128c <MX_GPIO_Init+0x314>)
 800119e:	f000 fe05 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 80011a2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80011a6:	617b      	str	r3, [r7, #20]
		| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4834      	ldr	r0, [pc, #208]	; (800128c <MX_GPIO_Init+0x314>)
 80011bc:	f000 fdf6 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
 PMOD_IRQ_EXTI12_Pin */
GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 80011c0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011c4:	617b      	str	r3, [r7, #20]
		| ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ca:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <MX_GPIO_Init+0x318>)
 80011d8:	f000 fde8 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 80011dc:	f243 0381 	movw	r3, #12417	; 0x3081
 80011e0:	617b      	str	r3, [r7, #20]
		| PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_GPIO_Init+0x318>)
 80011f6:	f000 fdd9 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80011fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011fe:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4820      	ldr	r0, [pc, #128]	; (8001294 <MX_GPIO_Init+0x31c>)
 8001214:	f000 fdca 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8001218:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800121c:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001222:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <MX_GPIO_Init+0x31c>)
 8001230:	f000 fdbc 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001244:	2305      	movs	r3, #5
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <MX_GPIO_Init+0x318>)
 8001250:	f000 fdac 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin
 8001254:	2378      	movs	r3, #120	; 0x78
 8001256:	617b      	str	r3, [r7, #20]
		| PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <MX_GPIO_Init+0x318>)
 8001270:	f000 fd9c 	bl	8001dac <HAL_GPIO_Init>

/*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8001274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001278:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	e00a      	b.n	8001298 <MX_GPIO_Init+0x320>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000
 800128c:	48000400 	.word	0x48000400
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48000800 	.word	0x48000800
 8001298:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129e:	2304      	movs	r3, #4
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0x360>)
 80012aa:	f000 fd7f 	bl	8001dac <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2017      	movs	r0, #23
 80012b4:	f000 fc37 	bl	8001b26 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012b8:	2017      	movs	r0, #23
 80012ba:	f000 fc50 	bl	8001b5e <HAL_NVIC_EnableIRQ>

HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2028      	movs	r0, #40	; 0x28
 80012c4:	f000 fc2f 	bl	8001b26 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c8:	2028      	movs	r0, #40	; 0x28
 80012ca:	f000 fc48 	bl	8001b5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	48000400 	.word	0x48000400

080012dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0ac      	sub	sp, #176	; 0xb0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2288      	movs	r2, #136	; 0x88
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f008 ffaf 	bl	800a2b4 <memset>
  if(DFSDM1_Init == 0)
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d142      	bne.n	80013e4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fe00 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800137a:	f7ff ffaf 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001388:	6613      	str	r3, [r2, #96]	; 0x60
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80013ae:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013c8:	2306      	movs	r3, #6
 80013ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013d6:	f000 fce9 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a02      	ldr	r2, [pc, #8]	; (80013ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013e2:	6013      	str	r3, [r2, #0]
  }

}
 80013e4:	bf00      	nop
 80013e6:	37b0      	adds	r7, #176	; 0xb0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000038c 	.word	0x2000038c
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48001000 	.word	0x48001000

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ac      	sub	sp, #176	; 0xb0
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2288      	movs	r2, #136	; 0x88
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f008 ff4b 	bl	800a2b4 <memset>
  if(hi2c->Instance==I2C2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_I2C_MspInit+0xb0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d13b      	bne.n	80014a0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800142c:	2300      	movs	r3, #0
 800142e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fd9d 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001440:	f7ff ff4c 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a18      	ldr	r2, [pc, #96]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800145c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001464:	2312      	movs	r3, #18
 8001466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001476:	2304      	movs	r3, #4
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_I2C_MspInit+0xb8>)
 8001484:	f000 fc92 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 800148e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001492:	6593      	str	r3, [r2, #88]	; 0x58
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	37b0      	adds	r7, #176	; 0xb0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005800 	.word	0x40005800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400

080014b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_QSPI_MspInit+0x7c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d128      	bne.n	8001528 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6513      	str	r3, [r2, #80]	; 0x50
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_QSPI_MspInit+0x80>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001506:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800150a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001518:	230a      	movs	r3, #10
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_QSPI_MspInit+0x84>)
 8001524:	f000 fc42 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	a0001000 	.word	0xa0001000
 8001534:	40021000 	.word	0x40021000
 8001538:	48001000 	.word	0x48001000

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_SPI_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d128      	bne.n	80015b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_SPI_MspInit+0x80>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_SPI_MspInit+0x80>)
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_SPI_MspInit+0x80>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_SPI_MspInit+0x80>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_SPI_MspInit+0x80>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_SPI_MspInit+0x80>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800158e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a0:	2306      	movs	r3, #6
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_SPI_MspInit+0x84>)
 80015ac:	f000 fbfe 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40003c00 	.word	0x40003c00
 80015bc:	40021000 	.word	0x40021000
 80015c0:	48000800 	.word	0x48000800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0ae      	sub	sp, #184	; 0xb8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2288      	movs	r2, #136	; 0x88
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 fe65 	bl	800a2b4 <memset>
  if(huart->Instance==USART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a42      	ldr	r2, [pc, #264]	; (80016f8 <HAL_UART_MspInit+0x134>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d13b      	bne.n	800166c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fcb7 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff fe66 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_UART_MspInit+0x138>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_UART_MspInit+0x138>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6613      	str	r3, [r2, #96]	; 0x60
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_UART_MspInit+0x138>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_UART_MspInit+0x138>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <HAL_UART_MspInit+0x138>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_UART_MspInit+0x138>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001640:	23c0      	movs	r3, #192	; 0xc0
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001662:	4619      	mov	r1, r3
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <HAL_UART_MspInit+0x13c>)
 8001666:	f000 fba1 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800166a:	e040      	b.n	80016ee <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_UART_MspInit+0x140>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d13b      	bne.n	80016ee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001676:	2304      	movs	r3, #4
 8001678:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800167a:	2300      	movs	r3, #0
 800167c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fc76 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800168e:	f7ff fe25 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_MspInit+0x138>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_UART_MspInit+0x138>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_UART_MspInit+0x138>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_UART_MspInit+0x138>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <HAL_UART_MspInit+0x138>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_UART_MspInit+0x138>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <HAL_UART_MspInit+0x144>)
 80016ea:	f000 fb5f 	bl	8001dac <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	37b8      	adds	r7, #184	; 0xb8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000400 	.word	0x48000400
 8001704:	40004800 	.word	0x40004800
 8001708:	48000c00 	.word	0x48000c00

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f8c6 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001764:	2020      	movs	r0, #32
 8001766:	f000 fcfb 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800176a:	2040      	movs	r0, #64	; 0x40
 800176c:	f000 fcf8 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001770:	2080      	movs	r0, #128	; 0x80
 8001772:	f000 fcf5 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800177a:	f000 fcf1 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001786:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800178a:	f000 fce9 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800178e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001792:	f000 fce5 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001796:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800179a:	f000 fce1 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800179e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a2:	f000 fcdd 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80017a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017aa:	f000 fcd9 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <OTG_FS_IRQHandler+0x10>)
 80017ba:	f001 fc5f 	bl	800307c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000898 	.word	0x20000898

080017c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f008 fd53 	bl	800a2c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff f9c7 	bl	8000bb0 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001830:	0800a3dc 	.word	0x0800a3dc
  ldr r2, =_sbss
 8001834:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001838:	20000dc0 	.word	0x20000dc0

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f961 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fd42 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_InitTick+0x70>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f96d 	bl	8001b7a <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d809      	bhi.n	80018c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f937 	bl	8001b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_InitTick+0x74>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e007      	b.n	80018d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e004      	b.n	80018d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e001      	b.n	80018d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	20000390 	.word	0x20000390

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000390 	.word	0x20000390

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0ac      	b.n	8001d00 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f8b2 	bl	8001d14 <DFSDM_GetChannelFromInstance>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a55      	ldr	r2, [pc, #340]	; (8001d08 <HAL_DFSDM_ChannelInit+0x174>)
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e09f      	b.n	8001d00 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fbb5 	bl	8001330 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_DFSDM_ChannelInit+0x178>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_DFSDM_ChannelInit+0x178>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_DFSDM_ChannelInit+0x178>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d125      	bne.n	8001c24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001be2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4948      	ldr	r1, [pc, #288]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a46      	ldr	r2, [pc, #280]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bf8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001bfc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	791b      	ldrb	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	493f      	ldr	r1, [pc, #252]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c18:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3c      	ldr	r2, [pc, #240]	; (8001d10 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001c32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001c48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020f 	bic.w	r2, r2, #15
 8001c60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001c88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f002 0207 	and.w	r2, r2, #7
 8001cb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f810 	bl	8001d14 <DFSDM_GetChannelFromInstance>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4904      	ldr	r1, [pc, #16]	; (8001d08 <HAL_DFSDM_ChannelInit+0x174>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000398 	.word	0x20000398
 8001d0c:	20000394 	.word	0x20000394
 8001d10:	40016000 	.word	0x40016000

08001d14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e02b      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <DFSDM_GetChannelFromInstance+0x80>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d102      	bne.n	8001d38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e024      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <DFSDM_GetChannelFromInstance+0x84>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e01d      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <DFSDM_GetChannelFromInstance+0x88>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d102      	bne.n	8001d54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e016      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e00f      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <DFSDM_GetChannelFromInstance+0x90>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d102      	bne.n	8001d70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e008      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <DFSDM_GetChannelFromInstance+0x94>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d102      	bne.n	8001d7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e001      	b.n	8001d82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40016000 	.word	0x40016000
 8001d94:	40016020 	.word	0x40016020
 8001d98:	40016040 	.word	0x40016040
 8001d9c:	40016080 	.word	0x40016080
 8001da0:	400160a0 	.word	0x400160a0
 8001da4:	400160c0 	.word	0x400160c0
 8001da8:	400160e0 	.word	0x400160e0

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e17f      	b.n	80020bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8171 	beq.w	80020b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d005      	beq.n	8001dec <HAL_GPIO_Init+0x40>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 0201 	and.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d118      	bne.n	8001e8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	6939      	ldr	r1, [r7, #16]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80ac 	beq.w	80020b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f76:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x242>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	; (80020e4 <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x23e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x23a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x236>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x232>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x22e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4a      	ldr	r2, [pc, #296]	; (80020f8 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x22a>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00c      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002032:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_GPIO_Init+0x350>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_GPIO_Init+0x350>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x350>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_GPIO_Init+0x350>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae78 	bne.w	8001dbc <HAL_GPIO_Init+0x10>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	48001000 	.word	0x48001000
 80020f4:	48001400 	.word	0x48001400
 80020f8:	48001800 	.word	0x48001800
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f806 	bl	8002190 <HAL_GPIO_EXTI_Callback>
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e08d      	b.n	80022d4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff f913 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2224      	movs	r2, #36	; 0x24
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002206:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	e006      	b.n	800222e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800222c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d108      	bne.n	8002248 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	e007      	b.n	8002258 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002256:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69d9      	ldr	r1, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	f040 80f9 	bne.w	80024f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_I2C_Mem_Write+0x34>
 800230a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0ed      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2C_Mem_Write+0x4e>
 8002326:	2302      	movs	r3, #2
 8002328:	e0e6      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002332:	f7ff faed 	bl	8001910 <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2319      	movs	r3, #25
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fac3 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0d1      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2221      	movs	r2, #33	; 0x21
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4603      	mov	r3, r0
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f9d3 	bl	8002738 <I2C_RequestMemoryWrite>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0a9      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	d90e      	bls.n	80023cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fc3d 	bl	8002c44 <I2C_TransferConfig>
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fc2c 	bl	8002c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fabc 	bl	800296e <I2C_WaitOnTXISFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e07b      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d034      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x1c8>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d130      	bne.n	80024a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa3f 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e04d      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d90e      	bls.n	8002484 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	b2da      	uxtb	r2, r3
 8002472:	8979      	ldrh	r1, [r7, #10]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fbe1 	bl	8002c44 <I2C_TransferConfig>
 8002482:	e00f      	b.n	80024a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	b2da      	uxtb	r2, r3
 8002494:	8979      	ldrh	r1, [r7, #10]
 8002496:	2300      	movs	r3, #0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fbd0 	bl	8002c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d19e      	bne.n	80023ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 faa2 	bl	80029fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01a      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2220      	movs	r2, #32
 80024c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_I2C_Mem_Write+0x224>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	fe00e800 	.word	0xfe00e800

08002504 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	f040 80fd 	bne.w	8002726 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_I2C_Mem_Read+0x34>
 8002532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0f1      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Mem_Read+0x4e>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ea      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800255a:	f7ff f9d9 	bl	8001910 <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2319      	movs	r3, #25
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f9af 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d5      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2222      	movs	r2, #34	; 0x22
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a4:	88f8      	ldrh	r0, [r7, #6]
 80025a6:	893a      	ldrh	r2, [r7, #8]
 80025a8:	8979      	ldrh	r1, [r7, #10]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4603      	mov	r3, r0
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f913 	bl	80027e0 <I2C_RequestMemoryRead>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0ad      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2bff      	cmp	r3, #255	; 0xff
 80025d4:	d90e      	bls.n	80025f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	22ff      	movs	r2, #255	; 0xff
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_I2C_Mem_Read+0x22c>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fb29 	bl	8002c44 <I2C_TransferConfig>
 80025f2:	e00f      	b.n	8002614 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	b2da      	uxtb	r2, r3
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <HAL_I2C_Mem_Read+0x22c>)
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fb18 	bl	8002c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2200      	movs	r2, #0
 800261c:	2104      	movs	r1, #4
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f956 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07c      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d034      	beq.n	80026d4 <HAL_I2C_Mem_Read+0x1d0>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d130      	bne.n	80026d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	2200      	movs	r2, #0
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f927 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04d      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2bff      	cmp	r3, #255	; 0xff
 8002694:	d90e      	bls.n	80026b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	8979      	ldrh	r1, [r7, #10]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fac9 	bl	8002c44 <I2C_TransferConfig>
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fab8 	bl	8002c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d19a      	bne.n	8002614 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f98a 	bl	80029fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e01a      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2220      	movs	r2, #32
 80026f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_I2C_Mem_Read+0x230>)
 8002706:	400b      	ands	r3, r1
 8002708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	80002400 	.word	0x80002400
 8002734:	fe00e800 	.word	0xfe00e800

08002738 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	817b      	strh	r3, [r7, #10]
 800274a:	460b      	mov	r3, r1
 800274c:	813b      	strh	r3, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <I2C_RequestMemoryWrite+0xa4>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa6f 	bl	8002c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f8ff 	bl	800296e <I2C_WaitOnTXISFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e02c      	b.n	80027d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002780:	893b      	ldrh	r3, [r7, #8]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
 800278a:	e015      	b.n	80027b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800278c:	893b      	ldrh	r3, [r7, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	b29b      	uxth	r3, r3
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	69b9      	ldr	r1, [r7, #24]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8e5 	bl	800296e <I2C_WaitOnTXISFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e012      	b.n	80027d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2200      	movs	r2, #0
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f884 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	80002000 	.word	0x80002000

080027e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <I2C_RequestMemoryRead+0xa4>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa1c 	bl	8002c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f8ac 	bl	800296e <I2C_WaitOnTXISFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e02c      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	e015      	b.n	800285e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f892 	bl	800296e <I2C_WaitOnTXISFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e012      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002854:	893b      	ldrh	r3, [r7, #8]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f831 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	80002000 	.word	0x80002000

08002888 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d103      	bne.n	80028a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d007      	beq.n	80028c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	619a      	str	r2, [r3, #24]
  }
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	e031      	b.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d02d      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff f811 	bl	8001910 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d122      	bne.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	429a      	cmp	r2, r3
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	429a      	cmp	r2, r3
 800291c:	d113      	bne.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d0be      	beq.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297a:	e033      	b.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f87f 	bl	8002a84 <I2C_IsErrorOccurred>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e031      	b.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d025      	beq.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe ffba 	bl	8001910 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11a      	bne.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d013      	beq.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d1c4      	bne.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a08:	e02f      	b.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f838 	bl	8002a84 <I2C_IsErrorOccurred>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e02d      	b.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe ff77 	bl	8001910 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11a      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d013      	beq.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d1c8      	bne.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d068      	beq.n	8002b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ab8:	e049      	b.n	8002b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d045      	beq.n	8002b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7fe ff25 	bl	8001910 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_IsErrorOccurred+0x54>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d13a      	bne.n	8002b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afa:	d121      	bne.n	8002b40 <I2C_IsErrorOccurred+0xbc>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b02:	d01d      	beq.n	8002b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d01a      	beq.n	8002b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b1a:	f7fe fef9 	bl	8001910 <HAL_GetTick>
 8002b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b20:	e00e      	b.n	8002b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b22:	f7fe fef5 	bl	8001910 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b19      	cmp	r3, #25
 8002b2e:	d907      	bls.n	8002b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b3e:	e006      	b.n	8002b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d1e9      	bne.n	8002b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d003      	beq.n	8002b64 <I2C_IsErrorOccurred+0xe0>
 8002b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0aa      	beq.n	8002aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d103      	bne.n	8002b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2220      	movs	r2, #32
 8002b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01c      	beq.n	8002c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fe45 	bl	8002888 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <I2C_IsErrorOccurred+0x1bc>)
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	4613      	mov	r3, r2
 8002c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c5c:	7a7b      	ldrb	r3, [r7, #9]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	0d5b      	lsrs	r3, r3, #21
 8002c7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <I2C_TransferConfig+0x60>)
 8002c84:	430b      	orrs	r3, r1
 8002c86:	43db      	mvns	r3, r3
 8002c88:	ea02 0103 	and.w	r1, r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	03ff63ff 	.word	0x03ff63ff

08002ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d138      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e032      	b.n	8002d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d139      	bne.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e033      	b.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd8:	b08f      	sub	sp, #60	; 0x3c
 8002dda:	af0a      	add	r7, sp, #40	; 0x28
 8002ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e116      	b.n	8003016 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f006 fe14 	bl	8009a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fc09 	bl	800663e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	687e      	ldr	r6, [r7, #4]
 8002e34:	466d      	mov	r5, sp
 8002e36:	f106 0410 	add.w	r4, r6, #16
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4a:	1d33      	adds	r3, r6, #4
 8002e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f003 fb1b 	bl	800648a <USB_CoreInit>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0d7      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fbf7 	bl	8006660 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e04a      	b.n	8002f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	333d      	adds	r3, #61	; 0x3d
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	b298      	uxth	r0, r3
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3356      	adds	r3, #86	; 0x56
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3340      	adds	r3, #64	; 0x40
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3344      	adds	r3, #68	; 0x44
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3348      	adds	r3, #72	; 0x48
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3af      	bcc.n	8002e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e044      	b.n	8002fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d3b5      	bcc.n	8002f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	687e      	ldr	r6, [r7, #4]
 8002fba:	466d      	mov	r5, sp
 8002fbc:	f106 0410 	add.w	r4, r6, #16
 8002fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd0:	1d33      	adds	r3, r6, #4
 8002fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd4:	6838      	ldr	r0, [r7, #0]
 8002fd6:	f003 fb8f 	bl	80066f8 <USB_DevInit>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e014      	b.n	8003016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 f851 	bl	80040ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fb3d 	bl	800768e <USB_DevDisconnect>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_Start+0x1c>
 8003036:	2302      	movs	r3, #2
 8003038:	e01c      	b.n	8003074 <HAL_PCD_Start+0x56>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fade 	bl	800661c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f004 faf1 	bl	800764c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b08d      	sub	sp, #52	; 0x34
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fbaf 	bl	80077f6 <USB_GetMode>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 847e 	bne.w	800399c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fb13 	bl	80076d0 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8474 	beq.w	800399a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fb00 	bl	80076d0 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f002 0202 	and.w	r2, r2, #2
 80030e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 faee 	bl	80076d0 <USB_ReadInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d161      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0210 	bic.w	r2, r2, #16
 800310c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	0c5b      	lsrs	r3, r3, #17
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	2b02      	cmp	r3, #2
 8003138:	d124      	bne.n	8003184 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d035      	beq.n	80031b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	6a38      	ldr	r0, [r7, #32]
 800315a:	f004 f925 	bl	80073a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800316a:	441a      	add	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317c:	441a      	add	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	615a      	str	r2, [r3, #20]
 8003182:	e016      	b.n	80031b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0c5b      	lsrs	r3, r3, #17
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b06      	cmp	r3, #6
 800318e:	d110      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003196:	2208      	movs	r2, #8
 8003198:	4619      	mov	r1, r3
 800319a:	6a38      	ldr	r0, [r7, #32]
 800319c:	f004 f904 	bl	80073a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ac:	441a      	add	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0210 	orr.w	r2, r2, #16
 80031c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fa82 	bl	80076d0 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031d6:	f040 80a7 	bne.w	8003328 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fa87 	bl	80076f6 <USB_ReadDevAllOutEpInterrupt>
 80031e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031ea:	e099      	b.n	8003320 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 808e 	beq.w	8003314 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f004 faab 	bl	800775e <USB_ReadDevOutEPInterrupt>
 8003208:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	461a      	mov	r2, r3
 8003222:	2301      	movs	r3, #1
 8003224:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fe65 	bl	8003ef8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	2308      	movs	r3, #8
 8003248:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800324a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fea1 	bl	8003f94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	2310      	movs	r3, #16
 800326c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d030      	beq.n	80032da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d109      	bne.n	8003298 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003296:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	78db      	ldrb	r3, [r3, #3]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f006 fd1a 	bl	8009cfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	2302      	movs	r3, #2
 80032d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	2320      	movs	r3, #32
 80032f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003312:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	f47f af62 	bne.w	80031ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f9cf 	bl	80076d0 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333c:	f040 80a4 	bne.w	8003488 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f004 f9f0 	bl	800772a <USB_ReadDevAllInEpInterrupt>
 800334a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003350:	e096      	b.n	8003480 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 808b 	beq.w	8003474 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fa16 	bl	800779a <USB_ReadDevInEPInterrupt>
 800336e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800339a:	4013      	ands	r3, r2
 800339c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2301      	movs	r3, #1
 80033ae:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f006 fc0b 	bl	8009bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d2:	461a      	mov	r2, r3
 80033d4:	2308      	movs	r3, #8
 80033d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ee:	461a      	mov	r2, r3
 80033f0:	2310      	movs	r3, #16
 80033f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d023      	beq.n	8003462 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800341a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341c:	6a38      	ldr	r0, [r7, #32]
 800341e:	f003 faad 	bl	800697c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f006 fc68 	bl	8009d20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	461a      	mov	r2, r3
 800345e:	2302      	movs	r3, #2
 8003460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800346c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fcba 	bl	8003de8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	3301      	adds	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	f47f af65 	bne.w	8003352 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f004 f91f 	bl	80076d0 <USB_ReadInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349c:	d122      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034c4:	2100      	movs	r1, #0
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f006 fe88 	bl	800a1dc <HAL_PCDEx_LPM_Callback>
 80034cc:	e002      	b.n	80034d4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 fbec 	bl	8009cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f8f1 	bl	80076d0 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f8:	d112      	bne.n	8003520 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f006 fba8 	bl	8009c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800351e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f004 f8d3 	bl	80076d0 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003534:	d121      	bne.n	800357a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003544:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800356a:	2101      	movs	r1, #1
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f006 fe35 	bl	800a1dc <HAL_PCDEx_LPM_Callback>
 8003572:	e002      	b.n	800357a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f006 fb73 	bl	8009c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f004 f8a6 	bl	80076d0 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358e:	f040 80b5 	bne.w	80036fc <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2110      	movs	r1, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 f9e5 	bl	800697c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	e046      	b.n	8003646 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	461a      	mov	r2, r3
 80035c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800361a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	440a      	add	r2, r1
 8003636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	3301      	adds	r3, #1
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d3b3      	bcc.n	80035b8 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003662:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d016      	beq.n	800369a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367c:	f043 030b 	orr.w	r3, r3, #11
 8003680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003692:	f043 030b 	orr.w	r3, r3, #11
 8003696:	6453      	str	r3, [r2, #68]	; 0x44
 8003698:	e015      	b.n	80036c6 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c0:	f043 030b 	orr.w	r3, r3, #11
 80036c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f004 f8b6 	bl	8007858 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f003 ffe5 	bl	80076d0 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d124      	bne.n	800375c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f004 f87b 	bl	8007812 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f003 f9a8 	bl	8006a76 <USB_GetDevSpeed>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	f001 fb87 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8003736:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4620      	mov	r0, r4
 8003742:	f002 fecf 	bl	80064e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f006 fa6b 	bl	8009c22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f003 ffb5 	bl	80076d0 <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10a      	bne.n	8003786 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f006 fa48 	bl	8009c06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f002 0208 	and.w	r2, r2, #8
 8003784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f003 ffa0 	bl	80076d0 <USB_ReadInterrupts>
 8003790:	4603      	mov	r3, r0
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d122      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	e014      	b.n	80037d6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fadb 	bl	8003d86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	3301      	adds	r3, #1
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3e5      	bcc.n	80037ac <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 ff73 	bl	80076d0 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f4:	d13b      	bne.n	800386e <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f6:	2301      	movs	r3, #1
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e02b      	b.n	8003854 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3340      	adds	r3, #64	; 0x40
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	da12      	bge.n	800384e <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	333f      	adds	r3, #63	; 0x3f
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa9c 	bl	8003d86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	429a      	cmp	r2, r3
 800385c:	d3ce      	bcc.n	80037fc <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 ff2c 	bl	80076d0 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d155      	bne.n	8003930 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e045      	b.n	8003916 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d12e      	bne.n	8003910 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da2b      	bge.n	8003910 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d121      	bne.n	8003910 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390c:	6053      	str	r3, [r2, #4]
            break;
 800390e:	e007      	b.n	8003920 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	3301      	adds	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	429a      	cmp	r2, r3
 800391e:	d3b4      	bcc.n	800388a <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800392e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fecb 	bl	80076d0 <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d10a      	bne.n	800395c <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f006 f9fc 	bl	8009d44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800395a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f003 feb5 	bl	80076d0 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d115      	bne.n	800399c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f006 f9ec 	bl	8009d60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	e000      	b.n	800399c <HAL_PCD_IRQHandler+0x920>
      return;
 800399a:	bf00      	nop
    }
  }
}
 800399c:	3734      	adds	r7, #52	; 0x34
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}

080039a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_PCD_SetAddress+0x1a>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e013      	b.n	80039e4 <HAL_PCD_SetAddress+0x42>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fe13 	bl	8007600 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	70fb      	strb	r3, [r7, #3]
 80039fe:	460b      	mov	r3, r1
 8003a00:	803b      	strh	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0f      	bge.n	8003a32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	705a      	strb	r2, [r3, #1]
 8003a30:	e00f      	b.n	8003a52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	3304      	adds	r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a5e:	883a      	ldrh	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	78ba      	ldrb	r2, [r7, #2]
 8003a68:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a7c:	78bb      	ldrb	r3, [r7, #2]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d102      	bne.n	8003a88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_EP_Open+0xaa>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e00e      	b.n	8003ab4 <HAL_PCD_EP_Open+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 f805 	bl	8006ab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da0f      	bge.n	8003af0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3338      	adds	r3, #56	; 0x38
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	705a      	strb	r2, [r3, #1]
 8003aee:	e00f      	b.n	8003b10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 020f 	and.w	r2, r3, #15
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	3304      	adds	r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_PCD_EP_Close+0x6e>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e00e      	b.n	8003b48 <HAL_PCD_EP_Close+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f003 f843 	bl	8006bc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 f8e9 	bl	8006d7c <USB_EPStartXfer>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3338      	adds	r3, #56	; 0x38
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6979      	ldr	r1, [r7, #20]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 f8b8 	bl	8006d7c <USB_EPStartXfer>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d901      	bls.n	8003c34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e04e      	b.n	8003cd2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da0f      	bge.n	8003c5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3338      	adds	r3, #56	; 0x38
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	705a      	strb	r2, [r3, #1]
 8003c5a:	e00d      	b.n	8003c78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_PCD_EP_SetStall+0x82>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e01c      	b.n	8003cd2 <HAL_PCD_EP_SetStall+0xbc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fbd6 	bl	8007458 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f003 fdc8 	bl	8007858 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d901      	bls.n	8003cf8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e042      	b.n	8003d7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	da0f      	bge.n	8003d20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	3338      	adds	r3, #56	; 0x38
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	705a      	strb	r2, [r3, #1]
 8003d1e:	e00f      	b.n	8003d40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_PCD_EP_ClrStall+0x86>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e00e      	b.n	8003d7e <HAL_PCD_EP_ClrStall+0xa4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fbe0 	bl	8007534 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da0c      	bge.n	8003db4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	3338      	adds	r3, #56	; 0x38
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e00c      	b.n	8003dce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fa03 	bl	80071e0 <USB_EPStopXfer>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dde:	7afb      	ldrb	r3, [r7, #11]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3338      	adds	r3, #56	; 0x38
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d901      	bls.n	8003e20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e067      	b.n	8003ef0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d902      	bls.n	8003e3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3303      	adds	r3, #3
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e44:	e026      	b.n	8003e94 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d902      	bls.n	8003e62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3303      	adds	r3, #3
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f003 fa5c 	bl	8007334 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	441a      	add	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	441a      	add	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d809      	bhi.n	8003ebe <PCD_WriteEmptyTxFifo+0xd6>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d203      	bcs.n	8003ebe <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1c3      	bne.n	8003e46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d811      	bhi.n	8003eee <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	6939      	ldr	r1, [r7, #16]
 8003ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eea:	4013      	ands	r3, r2
 8003eec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	333c      	adds	r3, #60	; 0x3c
 8003f10:	3304      	adds	r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <PCD_EP_OutXfrComplete_int+0x98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d124      	bne.n	8003f78 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	6093      	str	r3, [r2, #8]
 8003f4c:	e01a      	b.n	8003f84 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2320      	movs	r3, #32
 8003f68:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f005 fe13 	bl	8009b9c <HAL_PCD_DataOutStageCallback>
 8003f76:	e005      	b.n	8003f84 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f005 fe0c 	bl	8009b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	4f54310a 	.word	0x4f54310a

08003f94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	3304      	adds	r3, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <PCD_EP_OutSetupPacket_int+0x64>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d90e      	bls.n	8003fe8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f005 fdc5 	bl	8009b78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	4f54300a 	.word	0x4f54300a

08003ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
 8004008:	4613      	mov	r3, r2
 800400a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800401a:	883b      	ldrh	r3, [r7, #0]
 800401c:	0419      	lsls	r1, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	430a      	orrs	r2, r1
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
 8004028:	e028      	b.n	800407c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4413      	add	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e00d      	b.n	800405a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	3340      	adds	r3, #64	; 0x40
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4413      	add	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	3301      	adds	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	3b01      	subs	r3, #1
 8004060:	429a      	cmp	r2, r3
 8004062:	d3ec      	bcc.n	800403e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004064:	883b      	ldrh	r3, [r7, #0]
 8004066:	0418      	lsls	r0, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	3b01      	subs	r3, #1
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	4302      	orrs	r2, r0
 8004074:	3340      	adds	r3, #64	; 0x40
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	f043 0303 	orr.w	r3, r3, #3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_PWREx_GetVoltageRange+0x18>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40007000 	.word	0x40007000

08004130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413e:	d130      	bne.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d038      	beq.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2232      	movs	r2, #50	; 0x32
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	0c9b      	lsrs	r3, r3, #18
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004174:	e002      	b.n	800417c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b01      	subs	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004188:	d102      	bne.n	8004190 <HAL_PWREx_ControlVoltageScaling+0x60>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f2      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d110      	bne.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e00f      	b.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d007      	beq.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041b8:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40007000 	.word	0x40007000
 80041d4:	20000000 	.word	0x20000000
 80041d8:	431bde83 	.word	0x431bde83

080041dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ea:	6053      	str	r3, [r2, #4]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40007000 	.word	0x40007000

080041fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7fd fb84 	bl	8001910 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e063      	b.n	80042dc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fd f943 	bl	80014b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800422e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f858 	bl	80042e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	3b01      	subs	r3, #1
 8004248:	021a      	lsls	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	2120      	movs	r1, #32
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f850 	bl	8004304 <QSPI_WaitFlagStateUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d131      	bne.n	80042d2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004278:	f023 0310 	bic.w	r3, r3, #16
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	0611      	lsls	r1, r2, #24
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	430b      	orrs	r3, r1
 800428e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_QSPI_Init+0xe8>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6912      	ldr	r2, [r2, #16]
 800429e:	0411      	lsls	r1, r2, #16
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6952      	ldr	r2, [r2, #20]
 80042a4:	4311      	orrs	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6992      	ldr	r2, [r2, #24]
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042da:	7afb      	ldrb	r3, [r7, #11]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	ffe0f8fe 	.word	0xffe0f8fe

080042e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004314:	e01a      	b.n	800434c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d016      	beq.n	800434c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fd faf7 	bl	8001910 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2204      	movs	r2, #4
 8004338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e00e      	b.n	800436a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	bf14      	ite	ne
 800435a:	2301      	movne	r3, #1
 800435c:	2300      	moveq	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	429a      	cmp	r2, r3
 8004366:	d1d6      	bne.n	8004316 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e3ca      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004386:	4b97      	ldr	r3, [pc, #604]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004390:	4b94      	ldr	r3, [pc, #592]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80e4 	beq.w	8004570 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_RCC_OscConfig+0x4a>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	f040 808b 	bne.w	80044cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f040 8087 	bne.w	80044cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e3a2      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_RCC_OscConfig+0x7c>
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ee:	e005      	b.n	80043fc <HAL_RCC_OscConfig+0x88>
 80043f0:	4b7c      	ldr	r3, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d223      	bcs.n	8004448 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fd55 	bl	8004eb4 <RCC_SetFlashLatencyFromMSIRange>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e383      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004414:	4b73      	ldr	r3, [pc, #460]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a72      	ldr	r2, [pc, #456]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800441a:	f043 0308 	orr.w	r3, r3, #8
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	496d      	ldr	r1, [pc, #436]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004432:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	4968      	ldr	r1, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
 8004446:	e025      	b.n	8004494 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800444e:	f043 0308 	orr.w	r3, r3, #8
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4960      	ldr	r1, [pc, #384]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	495b      	ldr	r1, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd15 	bl	8004eb4 <RCC_SetFlashLatencyFromMSIRange>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e343      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004494:	f000 fc4a 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	4950      	ldr	r1, [pc, #320]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
 80044b0:	4a4e      	ldr	r2, [pc, #312]	; (80045ec <HAL_RCC_OscConfig+0x278>)
 80044b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044b4:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fd f9d9 	bl	8001870 <HAL_InitTick>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d052      	beq.n	800456e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	e327      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d032      	beq.n	800453a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a42      	ldr	r2, [pc, #264]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e0:	f7fd fa16 	bl	8001910 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e8:	f7fd fa12 	bl	8001910 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e310      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044fa:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a36      	ldr	r2, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4931      	ldr	r1, [pc, #196]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	492c      	ldr	r1, [pc, #176]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
 8004538:	e01a      	b.n	8004570 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004546:	f7fd f9e3 	bl	8001910 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454e:	f7fd f9df 	bl	8001910 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e2dd      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004560:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x1da>
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800456e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d074      	beq.n	8004666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x21a>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d10e      	bne.n	80045a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d10b      	bne.n	80045a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d064      	beq.n	8004664 <HAL_RCC_OscConfig+0x2f0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d160      	bne.n	8004664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e2ba      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ae:	d106      	bne.n	80045be <HAL_RCC_OscConfig+0x24a>
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e026      	b.n	800460c <HAL_RCC_OscConfig+0x298>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c6:	d115      	bne.n	80045f4 <HAL_RCC_OscConfig+0x280>
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a02      	ldr	r2, [pc, #8]	; (80045e4 <HAL_RCC_OscConfig+0x270>)
 80045da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x298>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800a384 	.word	0x0800a384
 80045ec:	20000000 	.word	0x20000000
 80045f0:	20000004 	.word	0x20000004
 80045f4:	4ba0      	ldr	r3, [pc, #640]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a9f      	ldr	r2, [pc, #636]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b9d      	ldr	r3, [pc, #628]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a9c      	ldr	r2, [pc, #624]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd f97c 	bl	8001910 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd f978 	bl	8001910 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e276      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462e:	4b92      	ldr	r3, [pc, #584]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x2a8>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd f968 	bl	8001910 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fd f964 	bl	8001910 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e262      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004656:	4b88      	ldr	r3, [pc, #544]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x2d0>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d060      	beq.n	8004734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x310>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d116      	bne.n	80046b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004684:	4b7c      	ldr	r3, [pc, #496]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_OscConfig+0x328>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e23f      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	4973      	ldr	r1, [pc, #460]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b0:	e040      	b.n	8004734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d023      	beq.n	8004702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ba:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6e      	ldr	r2, [pc, #440]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd f923 	bl	8001910 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fd f91f 	bl	8001910 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e21d      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e0:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	495f      	ldr	r1, [pc, #380]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
 8004700:	e018      	b.n	8004734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b5d      	ldr	r3, [pc, #372]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5c      	ldr	r2, [pc, #368]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd f8ff 	bl	8001910 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd f8fb 	bl	8001910 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1f9      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03c      	beq.n	80047ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004748:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474e:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd f8da 	bl	8001910 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd f8d6 	bl	8001910 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e1d4      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCC_OscConfig+0x3ec>
 8004780:	e01b      	b.n	80047ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004782:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004788:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd f8bd 	bl	8001910 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479a:	f7fd f8b9 	bl	8001910 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1b7      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ef      	bne.n	800479a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a6 	beq.w	8004914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6593      	str	r3, [r2, #88]	; 0x58
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCC_OscConfig+0x508>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d118      	bne.n	8004832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <HAL_RCC_OscConfig+0x508>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1d      	ldr	r2, [pc, #116]	; (800487c <HAL_RCC_OscConfig+0x508>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480c:	f7fd f880 	bl	8001910 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd f87c 	bl	8001910 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e17a      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCC_OscConfig+0x508>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x4d8>
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484a:	e029      	b.n	80048a0 <HAL_RCC_OscConfig+0x52c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b05      	cmp	r3, #5
 8004852:	d115      	bne.n	8004880 <HAL_RCC_OscConfig+0x50c>
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	4a03      	ldr	r2, [pc, #12]	; (8004878 <HAL_RCC_OscConfig+0x504>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004874:	e014      	b.n	80048a0 <HAL_RCC_OscConfig+0x52c>
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
 8004880:	4b9c      	ldr	r3, [pc, #624]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a9b      	ldr	r2, [pc, #620]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004890:	4b98      	ldr	r3, [pc, #608]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	4a97      	ldr	r2, [pc, #604]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d016      	beq.n	80048d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd f832 	bl	8001910 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd f82e 	bl	8001910 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e12a      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ed      	beq.n	80048b0 <HAL_RCC_OscConfig+0x53c>
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fd f81b 	bl	8001910 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd f817 	bl	8001910 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e113      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ed      	bne.n	80048de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004902:	7ffb      	ldrb	r3, [r7, #31]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b7a      	ldr	r3, [pc, #488]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	4a79      	ldr	r2, [pc, #484]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80fe 	beq.w	8004b1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	2b02      	cmp	r3, #2
 8004924:	f040 80d0 	bne.w	8004ac8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004928:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d130      	bne.n	800499e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	3b01      	subs	r3, #1
 8004948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d127      	bne.n	800499e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d11f      	bne.n	800499e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004968:	2a07      	cmp	r2, #7
 800496a:	bf14      	ite	ne
 800496c:	2201      	movne	r2, #1
 800496e:	2200      	moveq	r2, #0
 8004970:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004972:	4293      	cmp	r3, r2
 8004974:	d113      	bne.n	800499e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d109      	bne.n	800499e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d06e      	beq.n	8004a7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d069      	beq.n	8004a78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049a4:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049b0:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0ad      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049c0:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a4b      	ldr	r2, [pc, #300]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049cc:	f7fc ffa0 	bl	8001910 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fc ff9c 	bl	8001910 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e09a      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f2:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCC_OscConfig+0x784>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a0c:	0212      	lsls	r2, r2, #8
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0552      	lsls	r2, r2, #21
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0652      	lsls	r2, r2, #25
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a2c:	0912      	lsrs	r2, r2, #4
 8004a2e:	0452      	lsls	r2, r2, #17
 8004a30:	430a      	orrs	r2, r1
 8004a32:	4930      	ldr	r1, [pc, #192]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a50:	f7fc ff5e 	bl	8001910 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fc ff5a 	bl	8001910 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e058      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a76:	e050      	b.n	8004b1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e04f      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d148      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aa0:	f7fc ff36 	bl	8001910 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fc ff32 	bl	8001910 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e030      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x734>
 8004ac6:	e028      	b.n	8004b1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d023      	beq.n	8004b16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <HAL_RCC_OscConfig+0x780>)
 8004ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ada:	f7fc ff19 	bl	8001910 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	e00c      	b.n	8004afc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fc ff15 	bl	8001910 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d905      	bls.n	8004afc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e013      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
 8004af4:	40021000 	.word	0x40021000
 8004af8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_OscConfig+0x7b0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ec      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_OscConfig+0x7b0>)
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	4905      	ldr	r1, [pc, #20]	; (8004b24 <HAL_RCC_OscConfig+0x7b0>)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x7b4>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60cb      	str	r3, [r1, #12]
 8004b14:	e001      	b.n	8004b1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000
 8004b28:	feeefffc 	.word	0xfeeefffc

08004b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0e7      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b40:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d910      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0207 	bic.w	r2, r3, #7
 8004b56:	4970      	ldr	r1, [pc, #448]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cf      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d010      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d908      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4960      	ldr	r1, [pc, #384]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04c      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b5a      	ldr	r3, [pc, #360]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d121      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0a6      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bca:	4b54      	ldr	r3, [pc, #336]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d115      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e09a      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004be2:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e08e      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e086      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c02:	4b46      	ldr	r3, [pc, #280]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4943      	ldr	r1, [pc, #268]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fc fe7c 	bl	8001910 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7fc fe78 	bl	8001910 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e06e      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 020c 	and.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1eb      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d208      	bcs.n	8004c72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	492b      	ldr	r1, [pc, #172]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d210      	bcs.n	8004ca2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 0207 	bic.w	r2, r3, #7
 8004c88:	4923      	ldr	r1, [pc, #140]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCC_ClockConfig+0x1ec>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e036      	b.n	8004d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4918      	ldr	r1, [pc, #96]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4910      	ldr	r1, [pc, #64]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ce0:	f000 f824 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	490b      	ldr	r1, [pc, #44]	; (8004d20 <HAL_RCC_ClockConfig+0x1f4>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x1fc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc fdb3 	bl	8001870 <HAL_InitTick>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40022000 	.word	0x40022000
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	0800a384 	.word	0x0800a384
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000004 	.word	0x20000004

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d121      	bne.n	8004d9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d11e      	bne.n	8004d9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e005      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d88:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	e004      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004db0:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004db2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d134      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d003      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xac>
 8004dd0:	e005      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dd4:	617b      	str	r3, [r7, #20]
      break;
 8004dd6:	e005      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dda:	617b      	str	r3, [r7, #20]
      break;
 8004ddc:	e002      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	617b      	str	r3, [r7, #20]
      break;
 8004de2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	fb03 f202 	mul.w	r2, r3, r2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	0e5b      	lsrs	r3, r3, #25
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	3301      	adds	r3, #1
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e24:	69bb      	ldr	r3, [r7, #24]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3724      	adds	r7, #36	; 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	0800a39c 	.word	0x0800a39c
 8004e3c:	00f42400 	.word	0x00f42400
 8004e40:	007a1200 	.word	0x007a1200

08004e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000000 	.word	0x20000000

08004e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e60:	f7ff fff0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	0800a394 	.word	0x0800a394

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e8c:	f7ff ffda 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0adb      	lsrs	r3, r3, #11
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	0800a394 	.word	0x0800a394

08004eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ecc:	f7ff f922 	bl	8004114 <HAL_PWREx_GetVoltageRange>
 8004ed0:	6178      	str	r0, [r7, #20]
 8004ed2:	e014      	b.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed4:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ede:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eec:	f7ff f912 	bl	8004114 <HAL_PWREx_GetVoltageRange>
 8004ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f04:	d10b      	bne.n	8004f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d919      	bls.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f10:	d902      	bls.n	8004f18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f12:	2302      	movs	r3, #2
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	e013      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f18:	2301      	movs	r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e010      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d902      	bls.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f24:	2303      	movs	r3, #3
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	e00a      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d102      	bne.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f30:	2302      	movs	r3, #2
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e004      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d101      	bne.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 0207 	bic.w	r2, r3, #7
 8004f48:	4909      	ldr	r1, [pc, #36]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d001      	beq.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40022000 	.word	0x40022000

08004f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f80:	2300      	movs	r3, #0
 8004f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d041      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f98:	d02a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f9e:	d824      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fa4:	d008      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004faa:	d81e      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fb6:	e018      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb8:	4b86      	ldr	r3, [pc, #536]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a85      	ldr	r2, [pc, #532]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 facb 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd6:	e00c      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3320      	adds	r3, #32
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbb6 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe8:	e003      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	74fb      	strb	r3, [r7, #19]
      break;
 8004fee:	e000      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff8:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005006:	4973      	ldr	r1, [pc, #460]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800500e:	e001      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d041      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005024:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005028:	d02a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800502a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800502e:	d824      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005034:	d008      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800503a:	d81e      	bhi.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005044:	d010      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005046:	e018      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005048:	4b62      	ldr	r3, [pc, #392]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a61      	ldr	r2, [pc, #388]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005052:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005054:	e015      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fa83 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005066:	e00c      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3320      	adds	r3, #32
 800506c:	2100      	movs	r1, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb6e 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005078:	e003      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	74fb      	strb	r3, [r7, #19]
      break;
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005088:	4b52      	ldr	r3, [pc, #328]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005096:	494f      	ldr	r1, [pc, #316]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80a0 	beq.w	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050cc:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d0:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d6:	6593      	str	r3, [r2, #88]	; 0x58
 80050d8:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e4:	2301      	movs	r3, #1
 80050e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050f4:	f7fc fc0c 	bl	8001910 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050fa:	e009      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fc:	f7fc fc08 	bl	8001910 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d902      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	74fb      	strb	r3, [r7, #19]
        break;
 800510e:	e005      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005110:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d15c      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005122:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	429a      	cmp	r2, r3
 800513e:	d019      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005140:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800514c:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517e:	f7fc fbc7 	bl	8001910 <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005184:	e00b      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fc fbc3 	bl	8001910 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d902      	bls.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	74fb      	strb	r3, [r7, #19]
            break;
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ec      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10c      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	4904      	ldr	r1, [pc, #16]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ca:	e009      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e0:	7c7b      	ldrb	r3, [r7, #17]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d105      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b9e      	ldr	r3, [pc, #632]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	4a9d      	ldr	r2, [pc, #628]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051fe:	4b98      	ldr	r3, [pc, #608]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f023 0203 	bic.w	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	4994      	ldr	r1, [pc, #592]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005220:	4b8f      	ldr	r3, [pc, #572]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f023 020c 	bic.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	498c      	ldr	r1, [pc, #560]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005242:	4b87      	ldr	r3, [pc, #540]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	4983      	ldr	r1, [pc, #524]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005264:	4b7e      	ldr	r3, [pc, #504]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	497b      	ldr	r1, [pc, #492]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005286:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005294:	4972      	ldr	r1, [pc, #456]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a8:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	496a      	ldr	r1, [pc, #424]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ca:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	4961      	ldr	r1, [pc, #388]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ec:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fa:	4959      	ldr	r1, [pc, #356]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800530e:	4b54      	ldr	r3, [pc, #336]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	4950      	ldr	r1, [pc, #320]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	4948      	ldr	r1, [pc, #288]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005352:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	493f      	ldr	r1, [pc, #252]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d028      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005374:	4b3a      	ldr	r3, [pc, #232]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005382:	4937      	ldr	r1, [pc, #220]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d106      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	4b32      	ldr	r3, [pc, #200]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a31      	ldr	r2, [pc, #196]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800539e:	60d3      	str	r3, [r2, #12]
 80053a0:	e011      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f8d8 	bl	8005568 <RCCEx_PLLSAI1_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d028      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053d2:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	491f      	ldr	r1, [pc, #124]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f0:	d106      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053fc:	60d3      	str	r3, [r2, #12]
 80053fe:	e011      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005408:	d10c      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f8a9 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02b      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800544e:	d109      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a02      	ldr	r2, [pc, #8]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545a:	60d3      	str	r3, [r2, #12]
 800545c:	e014      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546c:	d10c      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f877 	bl	8005568 <RCCEx_PLLSAI1_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02f      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a2:	4928      	ldr	r1, [pc, #160]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b2:	d10d      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f854 	bl	8005568 <RCCEx_PLLSAI1_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d014      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	74bb      	strb	r3, [r7, #18]
 80054ce:	e011      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3320      	adds	r3, #32
 80054de:	2102      	movs	r1, #2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f935 	bl	8005750 <RCCEx_PLLSAI2_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ea:	7cfb      	ldrb	r3, [r7, #19]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	490d      	ldr	r1, [pc, #52]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005532:	4904      	ldr	r1, [pc, #16]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800553a:	7cbb      	ldrb	r3, [r7, #18]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000

08005548 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a04      	ldr	r2, [pc, #16]	; (8005564 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40021000 	.word	0x40021000

08005568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005576:	4b75      	ldr	r3, [pc, #468]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d018      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005582:	4b72      	ldr	r3, [pc, #456]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d10d      	bne.n	80055ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
       ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800559a:	4b6c      	ldr	r3, [pc, #432]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
       ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d047      	beq.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
 80055b2:	e044      	b.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d018      	beq.n	80055ee <RCCEx_PLLSAI1_Config+0x86>
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d825      	bhi.n	800560c <RCCEx_PLLSAI1_Config+0xa4>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d002      	beq.n	80055ca <RCCEx_PLLSAI1_Config+0x62>
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d009      	beq.n	80055dc <RCCEx_PLLSAI1_Config+0x74>
 80055c8:	e020      	b.n	800560c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ca:	4b60      	ldr	r3, [pc, #384]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11d      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055da:	e01a      	b.n	8005612 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055dc:	4b5b      	ldr	r3, [pc, #364]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ec:	e013      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ee:	4b57      	ldr	r3, [pc, #348]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fa:	4b54      	ldr	r3, [pc, #336]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560a:	e006      	b.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e004      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561a:	bf00      	nop
    }

    if(status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	430b      	orrs	r3, r1
 8005638:	4944      	ldr	r1, [pc, #272]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d17d      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fc f95e 	bl	8001910 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fc f95a 	bl	8001910 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
        break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800566c:	4b37      	ldr	r3, [pc, #220]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ef      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d160      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005684:	4b31      	ldr	r3, [pc, #196]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	0211      	lsls	r1, r2, #8
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68d2      	ldr	r2, [r2, #12]
 800569a:	0912      	lsrs	r2, r2, #4
 800569c:	0452      	lsls	r2, r2, #17
 800569e:	430a      	orrs	r2, r1
 80056a0:	492a      	ldr	r1, [pc, #168]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	610b      	str	r3, [r1, #16]
 80056a6:	e027      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d112      	bne.n	80056d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ae:	4b27      	ldr	r3, [pc, #156]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6892      	ldr	r2, [r2, #8]
 80056be:	0211      	lsls	r1, r2, #8
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6912      	ldr	r2, [r2, #16]
 80056c4:	0852      	lsrs	r2, r2, #1
 80056c6:	3a01      	subs	r2, #1
 80056c8:	0552      	lsls	r2, r2, #21
 80056ca:	430a      	orrs	r2, r1
 80056cc:	491f      	ldr	r1, [pc, #124]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]
 80056d2:	e011      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6892      	ldr	r2, [r2, #8]
 80056e4:	0211      	lsls	r1, r2, #8
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6952      	ldr	r2, [r2, #20]
 80056ea:	0852      	lsrs	r2, r2, #1
 80056ec:	3a01      	subs	r2, #1
 80056ee:	0652      	lsls	r2, r2, #25
 80056f0:	430a      	orrs	r2, r1
 80056f2:	4916      	ldr	r1, [pc, #88]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056f8:	4b14      	ldr	r3, [pc, #80]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc f904 	bl	8001910 <HAL_GetTick>
 8005708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570a:	e009      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570c:	f7fc f900 	bl	8001910 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d902      	bls.n	8005720 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	73fb      	strb	r3, [r7, #15]
          break;
 800571e:	e005      	b.n	800572c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ef      	beq.n	800570c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	4904      	ldr	r1, [pc, #16]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000

08005750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800575e:	4b6a      	ldr	r3, [pc, #424]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800576a:	4b67      	ldr	r3, [pc, #412]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d10d      	bne.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
       ||
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005782:	4b61      	ldr	r3, [pc, #388]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
       ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d047      	beq.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e044      	b.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d018      	beq.n	80057d6 <RCCEx_PLLSAI2_Config+0x86>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d825      	bhi.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <RCCEx_PLLSAI2_Config+0x62>
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d009      	beq.n	80057c4 <RCCEx_PLLSAI2_Config+0x74>
 80057b0:	e020      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b2:	4b55      	ldr	r3, [pc, #340]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c2:	e01a      	b.n	80057fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d4:	e013      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d6:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057e2:	4b49      	ldr	r3, [pc, #292]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057f2:	e006      	b.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e004      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005802:	bf00      	nop
    }

    if(status == HAL_OK)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10d      	bne.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800580a:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	3b01      	subs	r3, #1
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	430b      	orrs	r3, r1
 8005820:	4939      	ldr	r1, [pc, #228]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d167      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a35      	ldr	r2, [pc, #212]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fc f86a 	bl	8001910 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005840:	f7fc f866 	bl	8001910 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
        break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ef      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d14a      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d111      	bne.n	8005890 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800586c:	4b26      	ldr	r3, [pc, #152]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6892      	ldr	r2, [r2, #8]
 800587c:	0211      	lsls	r1, r2, #8
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	0912      	lsrs	r2, r2, #4
 8005884:	0452      	lsls	r2, r2, #17
 8005886:	430a      	orrs	r2, r1
 8005888:	491f      	ldr	r1, [pc, #124]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	4313      	orrs	r3, r2
 800588c:	614b      	str	r3, [r1, #20]
 800588e:	e011      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6892      	ldr	r2, [r2, #8]
 80058a0:	0211      	lsls	r1, r2, #8
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6912      	ldr	r2, [r2, #16]
 80058a6:	0852      	lsrs	r2, r2, #1
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0652      	lsls	r2, r2, #25
 80058ac:	430a      	orrs	r2, r1
 80058ae:	4916      	ldr	r1, [pc, #88]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc f826 	bl	8001910 <HAL_GetTick>
 80058c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058c6:	e009      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c8:	f7fc f822 	bl	8001910 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
          break;
 80058da:	e005      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4904      	ldr	r1, [pc, #16]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000

0800590c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e095      	b.n	8005a4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800592e:	d009      	beq.n	8005944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	61da      	str	r2, [r3, #28]
 8005936:	e005      	b.n	8005944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb fdec 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005984:	d902      	bls.n	800598c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e002      	b.n	8005992 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800598c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005990:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800599a:	d007      	beq.n	80059ac <HAL_SPI_Init+0xa0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	f003 0204 	and.w	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a28:	ea42 0103 	orr.w	r1, r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e040      	b.n	8005ae6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb fda5 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2224      	movs	r2, #36	; 0x24
 8005a7e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fae1 	bl	8006060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f826 	bl	8005af0 <UART_SetConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e01b      	b.n	8005ae6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005abc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005acc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fb60 	bl	80061a4 <UART_CheckIdleState>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af4:	b08a      	sub	sp, #40	; 0x28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4ba4      	ldr	r3, [pc, #656]	; (8005db0 <UART_SetConfig+0x2c0>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a99      	ldr	r2, [pc, #612]	; (8005db4 <UART_SetConfig+0x2c4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a90      	ldr	r2, [pc, #576]	; (8005db8 <UART_SetConfig+0x2c8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d126      	bne.n	8005bc8 <UART_SetConfig+0xd8>
 8005b7a:	4b90      	ldr	r3, [pc, #576]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d81b      	bhi.n	8005bc0 <UART_SetConfig+0xd0>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0xa0>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005ba1 	.word	0x08005ba1
 8005b94:	08005bb1 	.word	0x08005bb1
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bb9 	.word	0x08005bb9
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba6:	e116      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bae:	e112      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb6:	e10e      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbe:	e10a      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc6:	e106      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a7c      	ldr	r2, [pc, #496]	; (8005dc0 <UART_SetConfig+0x2d0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d138      	bne.n	8005c44 <UART_SetConfig+0x154>
 8005bd2:	4b7a      	ldr	r3, [pc, #488]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d82d      	bhi.n	8005c3c <UART_SetConfig+0x14c>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0xf8>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c3d 	.word	0x08005c3d
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c3d 	.word	0x08005c3d
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c3d 	.word	0x08005c3d
 8005c08:	08005c25 	.word	0x08005c25
 8005c0c:	08005c3d 	.word	0x08005c3d
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c22:	e0d8      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2a:	e0d4      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c32:	e0d0      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e0cc      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c42:	e0c8      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5e      	ldr	r2, [pc, #376]	; (8005dc4 <UART_SetConfig+0x2d4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d125      	bne.n	8005c9a <UART_SetConfig+0x1aa>
 8005c4e:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	d016      	beq.n	8005c8a <UART_SetConfig+0x19a>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d818      	bhi.n	8005c92 <UART_SetConfig+0x1a2>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d00a      	beq.n	8005c7a <UART_SetConfig+0x18a>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d814      	bhi.n	8005c92 <UART_SetConfig+0x1a2>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <UART_SetConfig+0x182>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d008      	beq.n	8005c82 <UART_SetConfig+0x192>
 8005c70:	e00f      	b.n	8005c92 <UART_SetConfig+0x1a2>
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c78:	e0ad      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c80:	e0a9      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c82:	2304      	movs	r3, #4
 8005c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c88:	e0a5      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c90:	e0a1      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c92:	2310      	movs	r3, #16
 8005c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c98:	e09d      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4a      	ldr	r2, [pc, #296]	; (8005dc8 <UART_SetConfig+0x2d8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d125      	bne.n	8005cf0 <UART_SetConfig+0x200>
 8005ca4:	4b45      	ldr	r3, [pc, #276]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cae:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb0:	d016      	beq.n	8005ce0 <UART_SetConfig+0x1f0>
 8005cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb4:	d818      	bhi.n	8005ce8 <UART_SetConfig+0x1f8>
 8005cb6:	2b80      	cmp	r3, #128	; 0x80
 8005cb8:	d00a      	beq.n	8005cd0 <UART_SetConfig+0x1e0>
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d814      	bhi.n	8005ce8 <UART_SetConfig+0x1f8>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <UART_SetConfig+0x1d8>
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d008      	beq.n	8005cd8 <UART_SetConfig+0x1e8>
 8005cc6:	e00f      	b.n	8005ce8 <UART_SetConfig+0x1f8>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cce:	e082      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd6:	e07e      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cde:	e07a      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce6:	e076      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cee:	e072      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a35      	ldr	r2, [pc, #212]	; (8005dcc <UART_SetConfig+0x2dc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d12a      	bne.n	8005d50 <UART_SetConfig+0x260>
 8005cfa:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d08:	d01a      	beq.n	8005d40 <UART_SetConfig+0x250>
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0e:	d81b      	bhi.n	8005d48 <UART_SetConfig+0x258>
 8005d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d14:	d00c      	beq.n	8005d30 <UART_SetConfig+0x240>
 8005d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1a:	d815      	bhi.n	8005d48 <UART_SetConfig+0x258>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <UART_SetConfig+0x238>
 8005d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d24:	d008      	beq.n	8005d38 <UART_SetConfig+0x248>
 8005d26:	e00f      	b.n	8005d48 <UART_SetConfig+0x258>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e052      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d30:	2302      	movs	r3, #2
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e04e      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e04a      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e046      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4e:	e042      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <UART_SetConfig+0x2c4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d13a      	bne.n	8005dd0 <UART_SetConfig+0x2e0>
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <UART_SetConfig+0x2cc>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d68:	d01a      	beq.n	8005da0 <UART_SetConfig+0x2b0>
 8005d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6e:	d81b      	bhi.n	8005da8 <UART_SetConfig+0x2b8>
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d74:	d00c      	beq.n	8005d90 <UART_SetConfig+0x2a0>
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d815      	bhi.n	8005da8 <UART_SetConfig+0x2b8>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <UART_SetConfig+0x298>
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d008      	beq.n	8005d98 <UART_SetConfig+0x2a8>
 8005d86:	e00f      	b.n	8005da8 <UART_SetConfig+0x2b8>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8e:	e022      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d90:	2302      	movs	r3, #2
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e01e      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9e:	e01a      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005da0:	2308      	movs	r3, #8
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da6:	e016      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005da8:	2310      	movs	r3, #16
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dae:	e012      	b.n	8005dd6 <UART_SetConfig+0x2e6>
 8005db0:	efff69f3 	.word	0xefff69f3
 8005db4:	40008000 	.word	0x40008000
 8005db8:	40013800 	.word	0x40013800
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40004400 	.word	0x40004400
 8005dc4:	40004800 	.word	0x40004800
 8005dc8:	40004c00 	.word	0x40004c00
 8005dcc:	40005000 	.word	0x40005000
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a9f      	ldr	r2, [pc, #636]	; (8006058 <UART_SetConfig+0x568>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d17a      	bne.n	8005ed6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d824      	bhi.n	8005e32 <UART_SetConfig+0x342>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x300>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e33 	.word	0x08005e33
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e33 	.word	0x08005e33
 8005e00:	08005e23 	.word	0x08005e23
 8005e04:	08005e33 	.word	0x08005e33
 8005e08:	08005e33 	.word	0x08005e33
 8005e0c:	08005e33 	.word	0x08005e33
 8005e10:	08005e2b 	.word	0x08005e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e14:	f7ff f822 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8005e18:	61f8      	str	r0, [r7, #28]
        break;
 8005e1a:	e010      	b.n	8005e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e1c:	4b8f      	ldr	r3, [pc, #572]	; (800605c <UART_SetConfig+0x56c>)
 8005e1e:	61fb      	str	r3, [r7, #28]
        break;
 8005e20:	e00d      	b.n	8005e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fe ff83 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8005e26:	61f8      	str	r0, [r7, #28]
        break;
 8005e28:	e009      	b.n	8005e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2e:	61fb      	str	r3, [r7, #28]
        break;
 8005e30:	e005      	b.n	8005e3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80fb 	beq.w	800603c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d305      	bcc.n	8005e62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d903      	bls.n	8005e6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e68:	e0e8      	b.n	800603c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	461c      	mov	r4, r3
 8005e70:	4615      	mov	r5, r2
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	022b      	lsls	r3, r5, #8
 8005e7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e80:	0222      	lsls	r2, r4, #8
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	6849      	ldr	r1, [r1, #4]
 8005e86:	0849      	lsrs	r1, r1, #1
 8005e88:	2000      	movs	r0, #0
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	eb12 0a08 	adds.w	sl, r2, r8
 8005e92:	eb43 0b09 	adc.w	fp, r3, r9
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	4659      	mov	r1, fp
 8005ea8:	f7fa fc9c 	bl	80007e4 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eba:	d308      	bcc.n	8005ece <UART_SetConfig+0x3de>
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec2:	d204      	bcs.n	8005ece <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	60da      	str	r2, [r3, #12]
 8005ecc:	e0b6      	b.n	800603c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ed4:	e0b2      	b.n	800603c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ede:	d15e      	bne.n	8005f9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d828      	bhi.n	8005f3a <UART_SetConfig+0x44a>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x400>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fe ffa2 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8005f18:	61f8      	str	r0, [r7, #28]
        break;
 8005f1a:	e014      	b.n	8005f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fe ffb4 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e010      	b.n	8005f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b4d      	ldr	r3, [pc, #308]	; (800605c <UART_SetConfig+0x56c>)
 8005f26:	61fb      	str	r3, [r7, #28]
        break;
 8005f28:	e00d      	b.n	8005f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fe feff 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8005f2e:	61f8      	str	r0, [r7, #28]
        break;
 8005f30:	e009      	b.n	8005f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	61fb      	str	r3, [r7, #28]
        break;
 8005f38:	e005      	b.n	8005f46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d077      	beq.n	800603c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005a      	lsls	r2, r3, #1
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d916      	bls.n	8005f96 <UART_SetConfig+0x4a6>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6e:	d212      	bcs.n	8005f96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f023 030f 	bic.w	r3, r3, #15
 8005f78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	8afb      	ldrh	r3, [r7, #22]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	8afa      	ldrh	r2, [r7, #22]
 8005f92:	60da      	str	r2, [r3, #12]
 8005f94:	e052      	b.n	800603c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f9c:	e04e      	b.n	800603c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d827      	bhi.n	8005ff6 <UART_SetConfig+0x506>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x4bc>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005ff7 	.word	0x08005ff7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	08005ff7 	.word	0x08005ff7
 8005fc8:	08005ff7 	.word	0x08005ff7
 8005fcc:	08005fef 	.word	0x08005fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd0:	f7fe ff44 	bl	8004e5c <HAL_RCC_GetPCLK1Freq>
 8005fd4:	61f8      	str	r0, [r7, #28]
        break;
 8005fd6:	e014      	b.n	8006002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd8:	f7fe ff56 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8005fdc:	61f8      	str	r0, [r7, #28]
        break;
 8005fde:	e010      	b.n	8006002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <UART_SetConfig+0x56c>)
 8005fe2:	61fb      	str	r3, [r7, #28]
        break;
 8005fe4:	e00d      	b.n	8006002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe6:	f7fe fea1 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8005fea:	61f8      	str	r0, [r7, #28]
        break;
 8005fec:	e009      	b.n	8006002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff2:	61fb      	str	r3, [r7, #28]
        break;
 8005ff4:	e005      	b.n	8006002 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006000:	bf00      	nop
    }

    if (pclk != 0U)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d019      	beq.n	800603c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085a      	lsrs	r2, r3, #1
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d909      	bls.n	8006036 <UART_SetConfig+0x546>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006028:	d205      	bcs.n	8006036 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e002      	b.n	800603c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800604c:	4618      	mov	r0, r3
 800604e:	3728      	adds	r7, #40	; 0x28
 8006050:	46bd      	mov	sp, r7
 8006052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006056:	bf00      	nop
 8006058:	40008000 	.word	0x40008000
 800605c:	00f42400 	.word	0x00f42400

08006060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01a      	beq.n	8006176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615e:	d10a      	bne.n	8006176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b098      	sub	sp, #96	; 0x60
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b4:	f7fb fbac 	bl	8001910 <HAL_GetTick>
 80061b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d12e      	bne.n	8006226 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d0:	2200      	movs	r2, #0
 80061d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f88c 	bl	80062f4 <UART_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d021      	beq.n	8006226 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f6:	653b      	str	r3, [r7, #80]	; 0x50
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	647b      	str	r3, [r7, #68]	; 0x44
 8006202:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e6      	bne.n	80061e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e062      	b.n	80062ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b04      	cmp	r3, #4
 8006232:	d149      	bne.n	80062c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800623c:	2200      	movs	r2, #0
 800623e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f856 	bl	80062f4 <UART_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d03c      	beq.n	80062c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	623b      	str	r3, [r7, #32]
   return(result);
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
 800626e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e6      	bne.n	800624e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3308      	adds	r3, #8
 8006286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	64bb      	str	r3, [r7, #72]	; 0x48
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a0:	61fa      	str	r2, [r7, #28]
 80062a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	617b      	str	r3, [r7, #20]
   return(result);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e011      	b.n	80062ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3758      	adds	r7, #88	; 0x58
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	e049      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d045      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fb faff 	bl	8001910 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <UART_WaitOnFlagUntilTimeout+0x30>
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e048      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d031      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d110      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2208      	movs	r2, #8
 800634a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f838 	bl	80063c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2208      	movs	r2, #8
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e029      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006374:	d111      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800637e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f81e 	bl	80063c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e00f      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d0a6      	beq.n	8006306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b095      	sub	sp, #84	; 0x54
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	61fb      	str	r3, [r7, #28]
   return(result);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006434:	2b01      	cmp	r3, #1
 8006436:	d118      	bne.n	800646a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	60bb      	str	r3, [r7, #8]
   return(result);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f023 0310 	bic.w	r3, r3, #16
 800644c:	647b      	str	r3, [r7, #68]	; 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6979      	ldr	r1, [r7, #20]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800647e:	bf00      	nop
 8006480:	3754      	adds	r7, #84	; 0x54
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800648a:	b084      	sub	sp, #16
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	f107 001c 	add.w	r0, r7, #28
 8006498:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fa1d 	bl	80078e8 <USB_CoreReset>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
 80064c4:	e005      	b.n	80064d2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064de:	b004      	add	sp, #16
 80064e0:	4770      	bx	lr
	...

080064e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d165      	bne.n	80065c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4a3e      	ldr	r2, [pc, #248]	; (80065f4 <USB_SetTurnaroundTime+0x110>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d906      	bls.n	800650e <USB_SetTurnaroundTime+0x2a>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a3d      	ldr	r2, [pc, #244]	; (80065f8 <USB_SetTurnaroundTime+0x114>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d202      	bcs.n	800650e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006508:	230f      	movs	r3, #15
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e05c      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4a39      	ldr	r2, [pc, #228]	; (80065f8 <USB_SetTurnaroundTime+0x114>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d306      	bcc.n	8006524 <USB_SetTurnaroundTime+0x40>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a38      	ldr	r2, [pc, #224]	; (80065fc <USB_SetTurnaroundTime+0x118>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d202      	bcs.n	8006524 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800651e:	230e      	movs	r3, #14
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e051      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a35      	ldr	r2, [pc, #212]	; (80065fc <USB_SetTurnaroundTime+0x118>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d306      	bcc.n	800653a <USB_SetTurnaroundTime+0x56>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a34      	ldr	r2, [pc, #208]	; (8006600 <USB_SetTurnaroundTime+0x11c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d202      	bcs.n	800653a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006534:	230d      	movs	r3, #13
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e046      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a30      	ldr	r2, [pc, #192]	; (8006600 <USB_SetTurnaroundTime+0x11c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d306      	bcc.n	8006550 <USB_SetTurnaroundTime+0x6c>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a2f      	ldr	r2, [pc, #188]	; (8006604 <USB_SetTurnaroundTime+0x120>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d802      	bhi.n	8006550 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800654a:	230c      	movs	r3, #12
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e03b      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <USB_SetTurnaroundTime+0x120>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d906      	bls.n	8006566 <USB_SetTurnaroundTime+0x82>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a2b      	ldr	r2, [pc, #172]	; (8006608 <USB_SetTurnaroundTime+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d802      	bhi.n	8006566 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006560:	230b      	movs	r3, #11
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e030      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a27      	ldr	r2, [pc, #156]	; (8006608 <USB_SetTurnaroundTime+0x124>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d906      	bls.n	800657c <USB_SetTurnaroundTime+0x98>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <USB_SetTurnaroundTime+0x128>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d802      	bhi.n	800657c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006576:	230a      	movs	r3, #10
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e025      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a23      	ldr	r2, [pc, #140]	; (800660c <USB_SetTurnaroundTime+0x128>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d906      	bls.n	8006592 <USB_SetTurnaroundTime+0xae>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a22      	ldr	r2, [pc, #136]	; (8006610 <USB_SetTurnaroundTime+0x12c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d202      	bcs.n	8006592 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800658c:	2309      	movs	r3, #9
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e01a      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <USB_SetTurnaroundTime+0x12c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d306      	bcc.n	80065a8 <USB_SetTurnaroundTime+0xc4>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <USB_SetTurnaroundTime+0x130>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d802      	bhi.n	80065a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065a2:	2308      	movs	r3, #8
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e00f      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <USB_SetTurnaroundTime+0x130>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d906      	bls.n	80065be <USB_SetTurnaroundTime+0xda>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a19      	ldr	r2, [pc, #100]	; (8006618 <USB_SetTurnaroundTime+0x134>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d202      	bcs.n	80065be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065b8:	2307      	movs	r3, #7
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e004      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065be:	2306      	movs	r3, #6
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e001      	b.n	80065c8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065c4:	2309      	movs	r3, #9
 80065c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065e0:	431a      	orrs	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	00d8acbf 	.word	0x00d8acbf
 80065f8:	00e4e1c0 	.word	0x00e4e1c0
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	01067380 	.word	0x01067380
 8006604:	011a499f 	.word	0x011a499f
 8006608:	01312cff 	.word	0x01312cff
 800660c:	014ca43f 	.word	0x014ca43f
 8006610:	016e3600 	.word	0x016e3600
 8006614:	01a6ab1f 	.word	0x01a6ab1f
 8006618:	01e84800 	.word	0x01e84800

0800661c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f043 0201 	orr.w	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d115      	bne.n	80066ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800668e:	2001      	movs	r0, #1
 8006690:	f7fb f94a 	bl	8001928 <HAL_Delay>
      ms++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 f8ab 	bl	80077f6 <USB_GetMode>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d01e      	beq.n	80066e4 <USB_SetCurrentMode+0x84>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b31      	cmp	r3, #49	; 0x31
 80066aa:	d9f0      	bls.n	800668e <USB_SetCurrentMode+0x2e>
 80066ac:	e01a      	b.n	80066e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d115      	bne.n	80066e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066c0:	2001      	movs	r0, #1
 80066c2:	f7fb f931 	bl	8001928 <HAL_Delay>
      ms++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f892 	bl	80077f6 <USB_GetMode>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <USB_SetCurrentMode+0x84>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b31      	cmp	r3, #49	; 0x31
 80066dc:	d9f0      	bls.n	80066c0 <USB_SetCurrentMode+0x60>
 80066de:	e001      	b.n	80066e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e005      	b.n	80066f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b32      	cmp	r3, #50	; 0x32
 80066e8:	d101      	bne.n	80066ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f8:	b084      	sub	sp, #16
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e009      	b.n	800672c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3340      	adds	r3, #64	; 0x40
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	2200      	movs	r2, #0
 8006724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3301      	adds	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b0e      	cmp	r3, #14
 8006730:	d9f2      	bls.n	8006718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11c      	bne.n	8006772 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e005      	b.n	800677e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006784:	461a      	mov	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800678a:	2103      	movs	r1, #3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f959 	bl	8006a44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006792:	2110      	movs	r1, #16
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8f1 	bl	800697c <USB_FlushTxFifo>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f91d 	bl	80069e4 <USB_FlushRxFifo>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	461a      	mov	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	461a      	mov	r2, r3
 80067c8:	2300      	movs	r3, #0
 80067ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	461a      	mov	r2, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	e043      	b.n	8006866 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f4:	d118      	bne.n	8006828 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e013      	b.n	800683a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	461a      	mov	r2, r3
 8006820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e008      	b.n	800683a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	461a      	mov	r2, r3
 800685a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800685e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	3301      	adds	r3, #1
 8006864:	613b      	str	r3, [r7, #16]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d3b7      	bcc.n	80067de <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e043      	b.n	80068fc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800688a:	d118      	bne.n	80068be <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	461a      	mov	r2, r3
 80068a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e013      	b.n	80068d0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	461a      	mov	r2, r3
 80068b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e008      	b.n	80068d0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	461a      	mov	r2, r3
 80068f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3301      	adds	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d3b7      	bcc.n	8006874 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006916:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006924:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f043 0210 	orr.w	r2, r3, #16
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <USB_DevInit+0x280>)
 8006938:	4313      	orrs	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f043 0208 	orr.w	r2, r3, #8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d107      	bne.n	8006966 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800695e:	f043 0304 	orr.w	r3, r3, #4
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006972:	b004      	add	sp, #16
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	803c3800 	.word	0x803c3800

0800697c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <USB_FlushTxFifo+0x64>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e01b      	b.n	80069d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	daf2      	bge.n	800698a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	019b      	lsls	r3, r3, #6
 80069ac:	f043 0220 	orr.w	r2, r3, #32
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <USB_FlushTxFifo+0x64>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e006      	b.n	80069d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d0f0      	beq.n	80069b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	00030d40 	.word	0x00030d40

080069e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a11      	ldr	r2, [pc, #68]	; (8006a40 <USB_FlushRxFifo+0x5c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e018      	b.n	8006a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	daf2      	bge.n	80069f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2210      	movs	r2, #16
 8006a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <USB_FlushRxFifo+0x5c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e006      	b.n	8006a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d0f0      	beq.n	8006a14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0306 	and.w	r3, r3, #6
 8006a8e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d002      	beq.n	8006a9c <USB_GetDevSpeed+0x26>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	d102      	bne.n	8006aa2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	75fb      	strb	r3, [r7, #23]
 8006aa0:	e001      	b.n	8006aa6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006aa2:	230f      	movs	r3, #15
 8006aa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d13a      	bne.n	8006b46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d155      	bne.n	8006bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	791b      	ldrb	r3, [r3, #4]
 8006b22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	059b      	lsls	r3, r3, #22
 8006b2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e036      	b.n	8006bb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	2101      	movs	r1, #1
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11a      	bne.n	8006bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d161      	bne.n	8006ca4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf6:	d11f      	bne.n	8006c38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	2101      	movs	r1, #1
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	43db      	mvns	r3, r3
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c58:	4013      	ands	r3, r2
 8006c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	43db      	mvns	r3, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0159      	lsls	r1, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <USB_DeactivateEndpoint+0x1b0>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	e060      	b.n	8006d66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cba:	d11f      	bne.n	8006cfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d12:	041b      	lsls	r3, r3, #16
 8006d14:	43db      	mvns	r3, r3
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	2101      	movs	r1, #1
 8006d32:	fa01 f303 	lsl.w	r3, r1, r3
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d40:	4013      	ands	r3, r2
 8006d42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	0159      	lsls	r1, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	440b      	add	r3, r1
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <USB_DeactivateEndpoint+0x1b4>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	ec337800 	.word	0xec337800
 8006d78:	eff37800 	.word	0xeff37800

08006d7c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 8128 	bne.w	8006fea <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d132      	bne.n	8006e08 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e00:	0cdb      	lsrs	r3, r3, #19
 8006e02:	04db      	lsls	r3, r3, #19
 8006e04:	6113      	str	r3, [r2, #16]
 8006e06:	e092      	b.n	8006f2e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	0cdb      	lsrs	r3, r3, #19
 8006e24:	04db      	lsls	r3, r3, #19
 8006e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e4a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11a      	bne.n	8006e88 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d903      	bls.n	8006e66 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e84:	6113      	str	r3, [r2, #16]
 8006e86:	e01b      	b.n	8006ec0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6919      	ldr	r1, [r3, #16]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	440b      	add	r3, r1
 8006ea0:	1e59      	subs	r1, r3, #1
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eaa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006eac:	4b8d      	ldr	r3, [pc, #564]	; (80070e4 <USB_EPStartXfer+0x368>)
 8006eae:	400b      	ands	r3, r1
 8006eb0:	6939      	ldr	r1, [r7, #16]
 8006eb2:	0148      	lsls	r0, r1, #5
 8006eb4:	6979      	ldr	r1, [r7, #20]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed6:	6939      	ldr	r1, [r7, #16]
 8006ed8:	0148      	lsls	r0, r1, #5
 8006eda:	6979      	ldr	r1, [r7, #20]
 8006edc:	4401      	add	r1, r0
 8006ede:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d11f      	bne.n	8006f2e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f4c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d015      	beq.n	8006f82 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8139 	beq.w	80071d2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	6979      	ldr	r1, [r7, #20]
 8006f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	634b      	str	r3, [r1, #52]	; 0x34
 8006f80:	e127      	b.n	80071d2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d110      	bne.n	8006fb4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e00f      	b.n	8006fd4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68d9      	ldr	r1, [r3, #12]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9a6 	bl	8007334 <USB_WritePacket>
 8006fe8:	e0f3      	b.n	80071d2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007004:	0cdb      	lsrs	r3, r3, #19
 8007006:	04db      	lsls	r3, r3, #19
 8007008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007024:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007028:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800702c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d12f      	bne.n	8007094 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007062:	6939      	ldr	r1, [r7, #16]
 8007064:	0148      	lsls	r0, r1, #5
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	4401      	add	r1, r0
 800706a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800708c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007090:	6113      	str	r3, [r2, #16]
 8007092:	e061      	b.n	8007158 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d125      	bne.n	80070e8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b2:	6939      	ldr	r1, [r7, #16]
 80070b4:	0148      	lsls	r0, r1, #5
 80070b6:	6979      	ldr	r1, [r7, #20]
 80070b8:	4401      	add	r1, r0
 80070ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070e0:	6113      	str	r3, [r2, #16]
 80070e2:	e039      	b.n	8007158 <USB_EPStartXfer+0x3dc>
 80070e4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4413      	add	r3, r2
 80070f2:	1e5a      	subs	r2, r3, #1
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	89fa      	ldrh	r2, [r7, #14]
 8007104:	fb03 f202 	mul.w	r2, r3, r2
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	89fb      	ldrh	r3, [r7, #14]
 800711c:	04d9      	lsls	r1, r3, #19
 800711e:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <USB_EPStartXfer+0x460>)
 8007120:	400b      	ands	r3, r1
 8007122:	6939      	ldr	r1, [r7, #16]
 8007124:	0148      	lsls	r0, r1, #5
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	4401      	add	r1, r0
 800712a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800712e:	4313      	orrs	r3, r2
 8007130:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007148:	6939      	ldr	r1, [r7, #16]
 800714a:	0148      	lsls	r0, r1, #5
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	4401      	add	r1, r0
 8007150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007154:	4313      	orrs	r3, r2
 8007156:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	791b      	ldrb	r3, [r3, #4]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d128      	bne.n	80071b2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d110      	bne.n	8007192 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	e00f      	b.n	80071b2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	1ff80000 	.word	0x1ff80000

080071e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d14a      	bne.n	8007294 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007216:	f040 8086 	bne.w	8007326 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	7812      	ldrb	r2, [r2, #0]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800723c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007260:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3301      	adds	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f242 7210 	movw	r2, #10000	; 0x2710
 800726e:	4293      	cmp	r3, r2
 8007270:	d902      	bls.n	8007278 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
          break;
 8007276:	e056      	b.n	8007326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007290:	d0e7      	beq.n	8007262 <USB_EPStopXfer+0x82>
 8007292:	e048      	b.n	8007326 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ac:	d13b      	bne.n	8007326 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	7812      	ldrb	r2, [r2, #0]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8007302:	4293      	cmp	r3, r2
 8007304:	d902      	bls.n	800730c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	75fb      	strb	r3, [r7, #23]
          break;
 800730a:	e00c      	b.n	8007326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007324:	d0e7      	beq.n	80072f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
}
 8007328:	4618      	mov	r0, r3
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007334:	b480      	push	{r7}
 8007336:	b089      	sub	sp, #36	; 0x24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	460b      	mov	r3, r1
 8007344:	71fb      	strb	r3, [r7, #7]
 8007346:	4613      	mov	r3, r2
 8007348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007352:	88bb      	ldrh	r3, [r7, #4]
 8007354:	3303      	adds	r3, #3
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e018      	b.n	8007392 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	031a      	lsls	r2, r3, #12
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4413      	add	r3, r2
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	461a      	mov	r2, r3
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	3301      	adds	r3, #1
 800737e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3301      	adds	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	3301      	adds	r3, #1
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d3e2      	bcc.n	8007360 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3724      	adds	r7, #36	; 0x24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b08b      	sub	sp, #44	; 0x2c
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073ce:	2300      	movs	r3, #0
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	e014      	b.n	80073fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	601a      	str	r2, [r3, #0]
    pDest++;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	3301      	adds	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	3301      	adds	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	3301      	adds	r3, #1
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	3301      	adds	r3, #1
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	3301      	adds	r3, #1
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	429a      	cmp	r2, r3
 8007404:	d3e6      	bcc.n	80073d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007406:	8bfb      	ldrh	r3, [r7, #30]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01e      	beq.n	800744a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007416:	461a      	mov	r2, r3
 8007418:	f107 0310 	add.w	r3, r7, #16
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
 800742c:	b2da      	uxtb	r2, r3
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	701a      	strb	r2, [r3, #0]
      i++;
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	3301      	adds	r3, #1
 8007436:	623b      	str	r3, [r7, #32]
      pDest++;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	3301      	adds	r3, #1
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800743e:	8bfb      	ldrh	r3, [r7, #30]
 8007440:	3b01      	subs	r3, #1
 8007442:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007444:	8bfb      	ldrh	r3, [r7, #30]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1ea      	bne.n	8007420 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800744c:	4618      	mov	r0, r3
 800744e:	372c      	adds	r7, #44	; 0x2c
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d12c      	bne.n	80074ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db12      	blt.n	80074ac <USB_EPSetStall+0x54>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00f      	beq.n	80074ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	e02b      	b.n	8007526 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db12      	blt.n	8007506 <USB_EPSetStall+0xae>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00f      	beq.n	8007506 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007504:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007524:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d128      	bne.n	80075a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800756e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	791b      	ldrb	r3, [r3, #4]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d003      	beq.n	8007580 <USB_EPClearStall+0x4c>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	791b      	ldrb	r3, [r3, #4]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d138      	bne.n	80075f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e027      	b.n	80075f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d003      	beq.n	80075d2 <USB_EPClearStall+0x9e>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d10f      	bne.n	80075f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800761e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007622:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800767a:	f023 0302 	bic.w	r3, r3, #2
 800767e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076a8:	f023 0303 	bic.w	r3, r3, #3
 80076ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076bc:	f043 0302 	orr.w	r3, r3, #2
 80076c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4013      	ands	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	0c1b      	lsrs	r3, r3, #16
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	b29b      	uxth	r3, r3
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4013      	ands	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800778c:	68bb      	ldr	r3, [r7, #8]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800779a:	b480      	push	{r7}
 800779c:	b087      	sub	sp, #28
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ca:	01db      	lsls	r3, r3, #7
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4013      	ands	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077e8:	68bb      	ldr	r3, [r7, #8]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f003 0301 	and.w	r3, r3, #1
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007848:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	333c      	adds	r3, #60	; 0x3c
 800786a:	3304      	adds	r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4a1c      	ldr	r2, [pc, #112]	; (80078e4 <USB_EP0_OutStart+0x8c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d90a      	bls.n	800788e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007888:	d101      	bne.n	800788e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	e024      	b.n	80078d8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078bc:	f043 0318 	orr.w	r3, r3, #24
 80078c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078d4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	4f54300a 	.word	0x4f54300a

080078e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4a13      	ldr	r2, [pc, #76]	; (800794c <USB_CoreReset+0x64>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e01b      	b.n	800793e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	daf2      	bge.n	80078f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <USB_CoreReset+0x64>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d0f0      	beq.n	800791e <USB_CoreReset+0x36>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	00030d40 	.word	0x00030d40

08007950 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800795c:	2018      	movs	r0, #24
 800795e:	f002 fc8b 	bl	800a278 <USBD_static_malloc>
 8007962:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	32b0      	adds	r2, #176	; 0xb0
 8007974:	2100      	movs	r1, #0
 8007976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800797a:	2302      	movs	r3, #2
 800797c:	e08a      	b.n	8007a94 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	32b0      	adds	r2, #176	; 0xb0
 8007988:	68f9      	ldr	r1, [r7, #12]
 800798a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32b0      	adds	r2, #176	; 0xb0
 8007998:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7c1b      	ldrb	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d11b      	bne.n	80079e2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80079aa:	4b3c      	ldr	r3, [pc, #240]	; (8007a9c <USBD_CUSTOM_HID_Init+0x14c>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	3326      	adds	r3, #38	; 0x26
 80079c0:	2205      	movs	r2, #5
 80079c2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80079c4:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <USBD_CUSTOM_HID_Init+0x150>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80079dc:	2205      	movs	r2, #5
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e01a      	b.n	8007a18 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079e2:	4b2e      	ldr	r3, [pc, #184]	; (8007a9c <USBD_CUSTOM_HID_Init+0x14c>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	f003 020f 	and.w	r2, r3, #15
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	3326      	adds	r3, #38	; 0x26
 80079f8:	2205      	movs	r2, #5
 80079fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80079fc:	4b28      	ldr	r3, [pc, #160]	; (8007aa0 <USBD_CUSTOM_HID_Init+0x150>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007a14:	2205      	movs	r2, #5
 8007a16:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007a18:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <USBD_CUSTOM_HID_Init+0x14c>)
 8007a1a:	7819      	ldrb	r1, [r3, #0]
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	2203      	movs	r2, #3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f002 fa29 	bl	8009e78 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <USBD_CUSTOM_HID_Init+0x14c>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 020f 	and.w	r2, r3, #15
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	3324      	adds	r3, #36	; 0x24
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <USBD_CUSTOM_HID_Init+0x150>)
 8007a42:	7819      	ldrb	r1, [r3, #0]
 8007a44:	2302      	movs	r3, #2
 8007a46:	2203      	movs	r2, #3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f002 fa15 	bl	8009e78 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <USBD_CUSTOM_HID_Init+0x150>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 020f 	and.w	r2, r3, #15
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a66:	2201      	movs	r2, #1
 8007a68:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	33b0      	adds	r3, #176	; 0xb0
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <USBD_CUSTOM_HID_Init+0x150>)
 8007a86:	7819      	ldrb	r1, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f002 fb6d 	bl	800a16c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000086 	.word	0x20000086
 8007aa0:	20000087 	.word	0x20000087

08007aa4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007ab0:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f002 fa1c 	bl	8009ef4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007abc:	4b34      	ldr	r3, [pc, #208]	; (8007b90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 020f 	and.w	r2, r3, #15
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	440b      	add	r3, r1
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007ad6:	4b2e      	ldr	r3, [pc, #184]	; (8007b90 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	3326      	adds	r3, #38	; 0x26
 8007aec:	2200      	movs	r2, #0
 8007aee:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f002 f9fc 	bl	8009ef4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b14:	2200      	movs	r2, #0
 8007b16:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007b30:	2200      	movs	r2, #0
 8007b32:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32b0      	adds	r2, #176	; 0xb0
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01f      	beq.n	8007b86 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	33b0      	adds	r3, #176	; 0xb0
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	32b0      	adds	r2, #176	; 0xb0
 8007b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 fb93 	bl	800a294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	32b0      	adds	r2, #176	; 0xb0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000086 	.word	0x20000086
 8007b94:	20000087 	.word	0x20000087

08007b98 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	32b0      	adds	r2, #176	; 0xb0
 8007bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e0f8      	b.n	8007dbe <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d056      	beq.n	8007c86 <USBD_CUSTOM_HID_Setup+0xee>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	f040 80e8 	bne.w	8007dae <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	3b02      	subs	r3, #2
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d846      	bhi.n	8007c76 <USBD_CUSTOM_HID_Setup+0xde>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <USBD_CUSTOM_HID_Setup+0x58>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c27 	.word	0x08007c27
 8007bf8:	08007c77 	.word	0x08007c77
 8007bfc:	08007c77 	.word	0x08007c77
 8007c00:	08007c77 	.word	0x08007c77
 8007c04:	08007c77 	.word	0x08007c77
 8007c08:	08007c77 	.word	0x08007c77
 8007c0c:	08007c59 	.word	0x08007c59
 8007c10:	08007c37 	.word	0x08007c37
 8007c14:	08007c19 	.word	0x08007c19
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	885b      	ldrh	r3, [r3, #2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]
          break;
 8007c24:	e02e      	b.n	8007c84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fcf6 	bl	8009620 <USBD_CtlSendData>
          break;
 8007c34:	e026      	b.n	8007c84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	609a      	str	r2, [r3, #8]
          break;
 8007c46:	e01d      	b.n	8007c84 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fce5 	bl	8009620 <USBD_CtlSendData>
          break;
 8007c56:	e015      	b.n	8007c84 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007c5e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	88db      	ldrh	r3, [r3, #6]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	bf28      	it	cs
 8007c68:	2302      	movcs	r3, #2
 8007c6a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fd02 	bl	8009678 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007c74:	e006      	b.n	8007c84 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fc60 	bl	800953e <USBD_CtlError>
          ret = USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	75fb      	strb	r3, [r7, #23]
          break;
 8007c82:	bf00      	nop
      }
      break;
 8007c84:	e09a      	b.n	8007dbc <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b0b      	cmp	r3, #11
 8007c8c:	f200 8086 	bhi.w	8007d9c <USBD_CUSTOM_HID_Setup+0x204>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBD_CUSTOM_HID_Setup+0x100>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007dab 	.word	0x08007dab
 8007ca0:	08007d9d 	.word	0x08007d9d
 8007ca4:	08007d9d 	.word	0x08007d9d
 8007ca8:	08007d9d 	.word	0x08007d9d
 8007cac:	08007d9d 	.word	0x08007d9d
 8007cb0:	08007cf3 	.word	0x08007cf3
 8007cb4:	08007d9d 	.word	0x08007d9d
 8007cb8:	08007d9d 	.word	0x08007d9d
 8007cbc:	08007d9d 	.word	0x08007d9d
 8007cc0:	08007d4b 	.word	0x08007d4b
 8007cc4:	08007d75 	.word	0x08007d75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d107      	bne.n	8007ce4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cd4:	f107 030e 	add.w	r3, r7, #14
 8007cd8:	2202      	movs	r2, #2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fc9f 	bl	8009620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ce2:	e063      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fc29 	bl	800953e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf0:	e05c      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b22      	cmp	r3, #34	; 0x22
 8007cfc:	d110      	bne.n	8007d20 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	88db      	ldrh	r3, [r3, #6]
 8007d02:	2b32      	cmp	r3, #50	; 0x32
 8007d04:	bf28      	it	cs
 8007d06:	2332      	movcs	r3, #50	; 0x32
 8007d08:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	33b0      	adds	r3, #176	; 0xb0
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e00d      	b.n	8007d3c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	2b21      	cmp	r3, #33	; 0x21
 8007d2a:	d107      	bne.n	8007d3c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007d2c:	4b26      	ldr	r3, [pc, #152]	; (8007dc8 <USBD_CUSTOM_HID_Setup+0x230>)
 8007d2e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	bf28      	it	cs
 8007d38:	2309      	movcs	r3, #9
 8007d3a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d3c:	8bfb      	ldrh	r3, [r7, #30]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	69b9      	ldr	r1, [r7, #24]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fc6c 	bl	8009620 <USBD_CtlSendData>
          break;
 8007d48:	e030      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d107      	bne.n	8007d66 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fc5e 	bl	8009620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d64:	e022      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fbe8 	bl	800953e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	75fb      	strb	r3, [r7, #23]
          break;
 8007d72:	e01b      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d106      	bne.n	8007d8e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d8c:	e00e      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fbd4 	bl	800953e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	75fb      	strb	r3, [r7, #23]
          break;
 8007d9a:	e007      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fbcd 	bl	800953e <USBD_CtlError>
          ret = USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	75fb      	strb	r3, [r7, #23]
          break;
 8007da8:	e000      	b.n	8007dac <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8007daa:	bf00      	nop
      }
      break;
 8007dac:	e006      	b.n	8007dbc <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fbc4 	bl	800953e <USBD_CtlError>
      ret = USBD_FAIL;
 8007db6:	2303      	movs	r3, #3
 8007db8:	75fb      	strb	r3, [r7, #23]
      break;
 8007dba:	bf00      	nop
  }
  return (uint8_t)ret;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000070 	.word	0x20000070

08007dcc <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	32b0      	adds	r2, #176	; 0xb0
 8007de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e017      	b.n	8007e24 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d110      	bne.n	8007e22 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	7d1b      	ldrb	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <USBD_CUSTOM_HID_SendReport+0x60>)
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f002 f970 	bl	800a0fc <USBD_LL_Transmit>
 8007e1c:	e001      	b.n	8007e22 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000086 	.word	0x20000086

08007e30 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007e38:	2181      	movs	r1, #129	; 0x81
 8007e3a:	4815      	ldr	r0, [pc, #84]	; (8007e90 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007e3c:	f000 fd1d 	bl	800887a <USBD_GetEpDesc>
 8007e40:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007e42:	2101      	movs	r1, #1
 8007e44:	4812      	ldr	r0, [pc, #72]	; (8007e90 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007e46:	f000 fd18 	bl	800887a <USBD_GetEpDesc>
 8007e4a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f042 0202 	orr.w	r2, r2, #2
 8007e5a:	711a      	strb	r2, [r3, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2205      	movs	r2, #5
 8007e64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f042 0202 	orr.w	r2, r2, #2
 8007e74:	711a      	strb	r2, [r3, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2229      	movs	r2, #41	; 0x29
 8007e84:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007e86:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000044 	.word	0x20000044

08007e94 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007e9c:	2181      	movs	r1, #129	; 0x81
 8007e9e:	4815      	ldr	r0, [pc, #84]	; (8007ef4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007ea0:	f000 fceb 	bl	800887a <USBD_GetEpDesc>
 8007ea4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	4812      	ldr	r0, [pc, #72]	; (8007ef4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007eaa:	f000 fce6 	bl	800887a <USBD_GetEpDesc>
 8007eae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f042 0202 	orr.w	r2, r2, #2
 8007ebe:	711a      	strb	r2, [r3, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f042 0202 	orr.w	r2, r2, #2
 8007ed8:	711a      	strb	r2, [r3, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2205      	movs	r2, #5
 8007ee2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2229      	movs	r2, #41	; 0x29
 8007ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007eea:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000044 	.word	0x20000044

08007ef8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007f00:	2181      	movs	r1, #129	; 0x81
 8007f02:	4815      	ldr	r0, [pc, #84]	; (8007f58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007f04:	f000 fcb9 	bl	800887a <USBD_GetEpDesc>
 8007f08:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	4812      	ldr	r0, [pc, #72]	; (8007f58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007f0e:	f000 fcb4 	bl	800887a <USBD_GetEpDesc>
 8007f12:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f042 0202 	orr.w	r2, r2, #2
 8007f22:	711a      	strb	r2, [r3, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f042 0202 	orr.w	r2, r2, #2
 8007f3c:	711a      	strb	r2, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2205      	movs	r2, #5
 8007f46:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2229      	movs	r2, #41	; 0x29
 8007f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007f4e:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000044 	.word	0x20000044

08007f5c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32b0      	adds	r2, #176	; 0xb0
 8007f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f76:	2200      	movs	r2, #0
 8007f78:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32b0      	adds	r2, #176	; 0xb0
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e017      	b.n	8007fda <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32b0      	adds	r2, #176	; 0xb0
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	33b0      	adds	r3, #176	; 0xb0
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	7810      	ldrb	r0, [r2, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	7852      	ldrb	r2, [r2, #1]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32b0      	adds	r2, #176	; 0xb0
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e00f      	b.n	8008022 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32b0      	adds	r2, #176	; 0xb0
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8008014:	7819      	ldrb	r1, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	2302      	movs	r3, #2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f002 f8a6 	bl	800a16c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000087 	.word	0x20000087

08008030 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32b0      	adds	r2, #176	; 0xb0
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800804e:	2303      	movs	r3, #3
 8008050:	e016      	b.n	8008080 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d111      	bne.n	800807e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	33b0      	adds	r3, #176	; 0xb0
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	7810      	ldrb	r0, [r2, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	7852      	ldrb	r2, [r2, #1]
 8008074:	4611      	mov	r1, r2
 8008076:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	220a      	movs	r2, #10
 8008094:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008096:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	2000007c 	.word	0x2000007c

080080a8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e009      	b.n	80080d0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	33b0      	adds	r3, #176	; 0xb0
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e01f      	b.n	8008134 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	79fa      	ldrb	r2, [r7, #7]
 8008126:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 fe27 	bl	8009d7c <USBD_LL_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e025      	b.n	80081a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32ae      	adds	r2, #174	; 0xae
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00f      	beq.n	8008190 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	32ae      	adds	r2, #174	; 0xae
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	f107 020e 	add.w	r2, r7, #14
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	4602      	mov	r2, r0
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fe2f 	bl	8009e14 <USBD_LL_Start>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4611      	mov	r1, r2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f938 	bl	80094ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008268:	461a      	mov	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	2b02      	cmp	r3, #2
 800827c:	d01a      	beq.n	80082b4 <USBD_LL_SetupStage+0x72>
 800827e:	2b02      	cmp	r3, #2
 8008280:	d822      	bhi.n	80082c8 <USBD_LL_SetupStage+0x86>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <USBD_LL_SetupStage+0x4a>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d00a      	beq.n	80082a0 <USBD_LL_SetupStage+0x5e>
 800828a:	e01d      	b.n	80082c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb65 	bl	8008964 <USBD_StdDevReq>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
      break;
 800829e:	e020      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fbcd 	bl	8008a48 <USBD_StdItfReq>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]
      break;
 80082b2:	e016      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc2f 	bl	8008b20 <USBD_StdEPReq>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e00c      	b.n	80082e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fe42 	bl	8009f60 <USBD_LL_StallEP>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
      break;
 80082e0:	bf00      	nop
  }

  return ret;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	460b      	mov	r3, r1
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d16e      	bne.n	80083e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800830a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008312:	2b03      	cmp	r3, #3
 8008314:	f040 8098 	bne.w	8008448 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d913      	bls.n	800834c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	1ad2      	subs	r2, r2, r3
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	4293      	cmp	r3, r2
 800833c:	bf28      	it	cs
 800833e:	4613      	movcs	r3, r2
 8008340:	461a      	mov	r2, r3
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f001 f9b4 	bl	80096b2 <USBD_CtlContinueRx>
 800834a:	e07d      	b.n	8008448 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	2b02      	cmp	r3, #2
 8008358:	d014      	beq.n	8008384 <USBD_LL_DataOutStage+0x98>
 800835a:	2b02      	cmp	r3, #2
 800835c:	d81d      	bhi.n	800839a <USBD_LL_DataOutStage+0xae>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <USBD_LL_DataOutStage+0x7c>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d003      	beq.n	800836e <USBD_LL_DataOutStage+0x82>
 8008366:	e018      	b.n	800839a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	75bb      	strb	r3, [r7, #22]
            break;
 800836c:	e018      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008374:	b2db      	uxtb	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fa64 	bl	8008846 <USBD_CoreFindIF>
 800837e:	4603      	mov	r3, r0
 8008380:	75bb      	strb	r3, [r7, #22]
            break;
 8008382:	e00d      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fa66 	bl	8008860 <USBD_CoreFindEP>
 8008394:	4603      	mov	r3, r0
 8008396:	75bb      	strb	r3, [r7, #22]
            break;
 8008398:	e002      	b.n	80083a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	75bb      	strb	r3, [r7, #22]
            break;
 800839e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d119      	bne.n	80083da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d113      	bne.n	80083da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083b2:	7dba      	ldrb	r2, [r7, #22]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	32ae      	adds	r2, #174	; 0xae
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80083c2:	7dba      	ldrb	r2, [r7, #22]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083ca:	7dba      	ldrb	r2, [r7, #22]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	32ae      	adds	r2, #174	; 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 f97a 	bl	80096d4 <USBD_CtlSendStatus>
 80083e0:	e032      	b.n	8008448 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fa37 	bl	8008860 <USBD_CoreFindEP>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
 80083f8:	2bff      	cmp	r3, #255	; 0xff
 80083fa:	d025      	beq.n	8008448 <USBD_LL_DataOutStage+0x15c>
 80083fc:	7dbb      	ldrb	r3, [r7, #22]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d122      	bne.n	8008448 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b03      	cmp	r3, #3
 800840c:	d117      	bne.n	800843e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800840e:	7dba      	ldrb	r2, [r7, #22]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	32ae      	adds	r2, #174	; 0xae
 8008414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00f      	beq.n	800843e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800841e:	7dba      	ldrb	r2, [r7, #22]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008426:	7dba      	ldrb	r2, [r7, #22]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	32ae      	adds	r2, #174	; 0xae
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	7afa      	ldrb	r2, [r7, #11]
 8008434:	4611      	mov	r1, r2
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	e000      	b.n	800844a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	460b      	mov	r3, r1
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d16f      	bne.n	8008546 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3314      	adds	r3, #20
 800846a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008472:	2b02      	cmp	r3, #2
 8008474:	d15a      	bne.n	800852c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	429a      	cmp	r2, r3
 8008480:	d914      	bls.n	80084ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	1ad2      	subs	r2, r2, r3
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	461a      	mov	r2, r3
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f001 f8dc 	bl	8009656 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f001 fe61 	bl	800a16c <USBD_LL_PrepareReceive>
 80084aa:	e03f      	b.n	800852c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d11c      	bne.n	80084f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d316      	bcc.n	80084f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d20f      	bcs.n	80084f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 f8bd 	bl	8009656 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e4:	2300      	movs	r3, #0
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fe3e 	bl	800a16c <USBD_LL_PrepareReceive>
 80084f0:	e01c      	b.n	800852c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d10f      	bne.n	800851e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 fd1d 	bl	8009f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f001 f8e7 	bl	80096fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d03a      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff fe42 	bl	80081c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008544:	e032      	b.n	80085ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f985 	bl	8008860 <USBD_CoreFindEP>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2bff      	cmp	r3, #255	; 0xff
 800855e:	d025      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d122      	bne.n	80085ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d11c      	bne.n	80085ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008572:	7dfa      	ldrb	r2, [r7, #23]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	32ae      	adds	r2, #174	; 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008582:	7dfa      	ldrb	r2, [r7, #23]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800858a:	7dfa      	ldrb	r2, [r7, #23]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	32ae      	adds	r2, #174	; 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	7afa      	ldrb	r2, [r7, #11]
 8008598:	4611      	mov	r1, r2
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085a2:	7dbb      	ldrb	r3, [r7, #22]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085a8:	7dbb      	ldrb	r3, [r7, #22]
 80085aa:	e000      	b.n	80085ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d014      	beq.n	800861c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6852      	ldr	r2, [r2, #4]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	4611      	mov	r1, r2
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	2200      	movs	r2, #0
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fc28 	bl	8009e78 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2240      	movs	r2, #64	; 0x40
 8008634:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	2200      	movs	r2, #0
 800863c:	2180      	movs	r1, #128	; 0x80
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fc1a 	bl	8009e78 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2240      	movs	r2, #64	; 0x40
 800864e:	621a      	str	r2, [r3, #32]

  return ret;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b04      	cmp	r3, #4
 800868c:	d006      	beq.n	800869c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	b2da      	uxtb	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2204      	movs	r2, #4
 80086a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d106      	bne.n	80086d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d110      	bne.n	8008718 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	32ae      	adds	r2, #174	; 0xae
 8008738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008740:	2303      	movs	r3, #3
 8008742:	e01c      	b.n	800877e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b03      	cmp	r3, #3
 800874e:	d115      	bne.n	800877c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32ae      	adds	r2, #174	; 0xae
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	32ae      	adds	r2, #174	; 0xae
 800876e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	4611      	mov	r1, r2
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32ae      	adds	r2, #174	; 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e01c      	b.n	80087e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d115      	bne.n	80087e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32ae      	adds	r2, #174	; 0xae
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	32ae      	adds	r2, #174	; 0xae
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	4611      	mov	r1, r2
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6852      	ldr	r2, [r2, #4]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	4611      	mov	r1, r2
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008852:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800886c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	b29a      	uxth	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	b29b      	uxth	r3, r3
 800889e:	429a      	cmp	r2, r3
 80088a0:	d920      	bls.n	80088e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088aa:	e013      	b.n	80088d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088ac:	f107 030a 	add.w	r3, r7, #10
 80088b0:	4619      	mov	r1, r3
 80088b2:	6978      	ldr	r0, [r7, #20]
 80088b4:	f000 f81b 	bl	80088ee <USBD_GetNextDesc>
 80088b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d108      	bne.n	80088d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d008      	beq.n	80088e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b29a      	uxth	r2, r3
 80088da:	897b      	ldrh	r3, [r7, #10]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d8e5      	bhi.n	80088ac <USBD_GetEpDesc+0x32>
 80088e0:	e000      	b.n	80088e4 <USBD_GetEpDesc+0x6a>
          break;
 80088e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088e4:	693b      	ldr	r3, [r7, #16]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	881a      	ldrh	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	4413      	add	r3, r2
 8008908:	b29a      	uxth	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	3301      	adds	r3, #1
 800893e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008946:	8a3b      	ldrh	r3, [r7, #16]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b21a      	sxth	r2, r3
 800894c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008950:	4313      	orrs	r3, r2
 8008952:	b21b      	sxth	r3, r3
 8008954:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008956:	89fb      	ldrh	r3, [r7, #14]
}
 8008958:	4618      	mov	r0, r3
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d005      	beq.n	800898a <USBD_StdDevReq+0x26>
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d857      	bhi.n	8008a32 <USBD_StdDevReq+0xce>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <USBD_StdDevReq+0x42>
 8008986:	2b20      	cmp	r3, #32
 8008988:	d153      	bne.n	8008a32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	32ae      	adds	r2, #174	; 0xae
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
      break;
 80089a4:	e04a      	b.n	8008a3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d83b      	bhi.n	8008a26 <USBD_StdDevReq+0xc2>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <USBD_StdDevReq+0x50>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008a1d 	.word	0x08008a1d
 80089bc:	08008a27 	.word	0x08008a27
 80089c0:	08008a13 	.word	0x08008a13
 80089c4:	08008a27 	.word	0x08008a27
 80089c8:	080089e7 	.word	0x080089e7
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	08008a27 	.word	0x08008a27
 80089d4:	080089ff 	.word	0x080089ff
 80089d8:	080089f1 	.word	0x080089f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa3c 	bl	8008e5c <USBD_GetDescriptor>
          break;
 80089e4:	e024      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbcb 	bl	8009184 <USBD_SetAddress>
          break;
 80089ee:	e01f      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fc0a 	bl	800920c <USBD_SetConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
          break;
 80089fc:	e018      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcad 	bl	8009360 <USBD_GetConfig>
          break;
 8008a06:	e013      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fcde 	bl	80093cc <USBD_GetStatus>
          break;
 8008a10:	e00e      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fd0d 	bl	8009434 <USBD_SetFeature>
          break;
 8008a1a:	e009      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fd31 	bl	8009486 <USBD_ClrFeature>
          break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd88 	bl	800953e <USBD_CtlError>
          break;
 8008a2e:	bf00      	nop
      }
      break;
 8008a30:	e004      	b.n	8008a3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fd82 	bl	800953e <USBD_CtlError>
      break;
 8008a3a:	bf00      	nop
  }

  return ret;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d005      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d852      	bhi.n	8008b0c <USBD_StdItfReq+0xc4>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <USBD_StdItfReq+0x26>
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d14e      	bne.n	8008b0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d840      	bhi.n	8008afe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	889b      	ldrh	r3, [r3, #4]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d836      	bhi.n	8008af4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fed9 	bl	8008846 <USBD_CoreFindIF>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2bff      	cmp	r3, #255	; 0xff
 8008a9c:	d01d      	beq.n	8008ada <USBD_StdItfReq+0x92>
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11a      	bne.n	8008ada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008aa4:	7bba      	ldrb	r2, [r7, #14]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32ae      	adds	r2, #174	; 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00f      	beq.n	8008ad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ab4:	7bba      	ldrb	r2, [r7, #14]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008abc:	7bba      	ldrb	r2, [r7, #14]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32ae      	adds	r2, #174	; 0xae
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad2:	e004      	b.n	8008ade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad8:	e001      	b.n	8008ade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ada:	2303      	movs	r3, #3
 8008adc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <USBD_StdItfReq+0xc0>
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fdf1 	bl	80096d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008af2:	e009      	b.n	8008b08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fd21 	bl	800953e <USBD_CtlError>
          break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fd1c 	bl	800953e <USBD_CtlError>
          break;
 8008b06:	e000      	b.n	8008b0a <USBD_StdItfReq+0xc2>
          break;
 8008b08:	bf00      	nop
      }
      break;
 8008b0a:	e004      	b.n	8008b16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fd15 	bl	800953e <USBD_CtlError>
      break;
 8008b14:	bf00      	nop
  }

  return ret;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d007      	beq.n	8008b50 <USBD_StdEPReq+0x30>
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	f200 817f 	bhi.w	8008e44 <USBD_StdEPReq+0x324>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d02a      	beq.n	8008ba0 <USBD_StdEPReq+0x80>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	f040 817a 	bne.w	8008e44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fe83 	bl	8008860 <USBD_CoreFindEP>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b5e:	7b7b      	ldrb	r3, [r7, #13]
 8008b60:	2bff      	cmp	r3, #255	; 0xff
 8008b62:	f000 8174 	beq.w	8008e4e <USBD_StdEPReq+0x32e>
 8008b66:	7b7b      	ldrb	r3, [r7, #13]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f040 8170 	bne.w	8008e4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b6e:	7b7a      	ldrb	r2, [r7, #13]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b76:	7b7a      	ldrb	r2, [r7, #13]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	32ae      	adds	r2, #174	; 0xae
 8008b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8163 	beq.w	8008e4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b88:	7b7a      	ldrb	r2, [r7, #13]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	; 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b9e:	e156      	b.n	8008e4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d008      	beq.n	8008bba <USBD_StdEPReq+0x9a>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	f300 8145 	bgt.w	8008e38 <USBD_StdEPReq+0x318>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 809b 	beq.w	8008cea <USBD_StdEPReq+0x1ca>
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d03c      	beq.n	8008c32 <USBD_StdEPReq+0x112>
 8008bb8:	e13e      	b.n	8008e38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d002      	beq.n	8008bcc <USBD_StdEPReq+0xac>
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d016      	beq.n	8008bf8 <USBD_StdEPReq+0xd8>
 8008bca:	e02c      	b.n	8008c26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <USBD_StdEPReq+0xce>
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b80      	cmp	r3, #128	; 0x80
 8008bd6:	d00a      	beq.n	8008bee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f9bf 	bl	8009f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be2:	2180      	movs	r1, #128	; 0x80
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f9bb 	bl	8009f60 <USBD_LL_StallEP>
 8008bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bec:	e020      	b.n	8008c30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fca4 	bl	800953e <USBD_CtlError>
              break;
 8008bf6:	e01b      	b.n	8008c30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10e      	bne.n	8008c1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00b      	beq.n	8008c1e <USBD_StdEPReq+0xfe>
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	2b80      	cmp	r3, #128	; 0x80
 8008c0a:	d008      	beq.n	8008c1e <USBD_StdEPReq+0xfe>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f9a1 	bl	8009f60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fd58 	bl	80096d4 <USBD_CtlSendStatus>

              break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc88 	bl	800953e <USBD_CtlError>
              break;
 8008c2e:	bf00      	nop
          }
          break;
 8008c30:	e107      	b.n	8008e42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d002      	beq.n	8008c44 <USBD_StdEPReq+0x124>
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d016      	beq.n	8008c70 <USBD_StdEPReq+0x150>
 8008c42:	e04b      	b.n	8008cdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00d      	beq.n	8008c66 <USBD_StdEPReq+0x146>
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b80      	cmp	r3, #128	; 0x80
 8008c4e:	d00a      	beq.n	8008c66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f983 	bl	8009f60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f97f 	bl	8009f60 <USBD_LL_StallEP>
 8008c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c64:	e040      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fc68 	bl	800953e <USBD_CtlError>
              break;
 8008c6e:	e03b      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d136      	bne.n	8008ce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 f9a0 	bl	8009fcc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fd21 	bl	80096d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fde2 	bl	8008860 <USBD_CoreFindEP>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ca0:	7b7b      	ldrb	r3, [r7, #13]
 8008ca2:	2bff      	cmp	r3, #255	; 0xff
 8008ca4:	d01f      	beq.n	8008ce6 <USBD_StdEPReq+0x1c6>
 8008ca6:	7b7b      	ldrb	r3, [r7, #13]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11c      	bne.n	8008ce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008cac:	7b7a      	ldrb	r2, [r7, #13]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cb4:	7b7a      	ldrb	r2, [r7, #13]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	32ae      	adds	r2, #174	; 0xae
 8008cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d010      	beq.n	8008ce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cc4:	7b7a      	ldrb	r2, [r7, #13]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	32ae      	adds	r2, #174	; 0xae
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cda:	e004      	b.n	8008ce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fc2d 	bl	800953e <USBD_CtlError>
              break;
 8008ce4:	e000      	b.n	8008ce8 <USBD_StdEPReq+0x1c8>
              break;
 8008ce6:	bf00      	nop
          }
          break;
 8008ce8:	e0ab      	b.n	8008e42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d002      	beq.n	8008cfc <USBD_StdEPReq+0x1dc>
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d032      	beq.n	8008d60 <USBD_StdEPReq+0x240>
 8008cfa:	e097      	b.n	8008e2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <USBD_StdEPReq+0x1f2>
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b80      	cmp	r3, #128	; 0x80
 8008d06:	d004      	beq.n	8008d12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fc17 	bl	800953e <USBD_CtlError>
                break;
 8008d10:	e091      	b.n	8008e36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da0b      	bge.n	8008d32 <USBD_StdEPReq+0x212>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	3310      	adds	r3, #16
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3304      	adds	r3, #4
 8008d30:	e00b      	b.n	8008d4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	3304      	adds	r3, #4
 8008d4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2202      	movs	r2, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fc61 	bl	8009620 <USBD_CtlSendData>
              break;
 8008d5e:	e06a      	b.n	8008e36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da11      	bge.n	8008d8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	f003 020f 	and.w	r2, r3, #15
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	3324      	adds	r3, #36	; 0x24
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d117      	bne.n	8008db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fbda 	bl	800953e <USBD_CtlError>
                  break;
 8008d8a:	e054      	b.n	8008e36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fbc7 	bl	800953e <USBD_CtlError>
                  break;
 8008db0:	e041      	b.n	8008e36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da0b      	bge.n	8008dd2 <USBD_StdEPReq+0x2b2>
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	3310      	adds	r3, #16
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	3304      	adds	r3, #4
 8008dd0:	e00b      	b.n	8008dea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	4413      	add	r3, r2
 8008de8:	3304      	adds	r3, #4
 8008dea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <USBD_StdEPReq+0x2d8>
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b80      	cmp	r3, #128	; 0x80
 8008df6:	d103      	bne.n	8008e00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e00e      	b.n	8008e1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f917 	bl	800a038 <USBD_LL_IsStallEP>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	e002      	b.n	8008e1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2202      	movs	r2, #2
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fbfb 	bl	8009620 <USBD_CtlSendData>
              break;
 8008e2a:	e004      	b.n	8008e36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb85 	bl	800953e <USBD_CtlError>
              break;
 8008e34:	bf00      	nop
          }
          break;
 8008e36:	e004      	b.n	8008e42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fb7f 	bl	800953e <USBD_CtlError>
          break;
 8008e40:	bf00      	nop
      }
      break;
 8008e42:	e005      	b.n	8008e50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb79 	bl	800953e <USBD_CtlError>
      break;
 8008e4c:	e000      	b.n	8008e50 <USBD_StdEPReq+0x330>
      break;
 8008e4e:	bf00      	nop
  }

  return ret;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b0e      	cmp	r3, #14
 8008e7e:	f200 8152 	bhi.w	8009126 <USBD_GetDescriptor+0x2ca>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <USBD_GetDescriptor+0x2c>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ef9 	.word	0x08008ef9
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08008f51 	.word	0x08008f51
 8008e94:	08009127 	.word	0x08009127
 8008e98:	08009127 	.word	0x08009127
 8008e9c:	080090c7 	.word	0x080090c7
 8008ea0:	080090f3 	.word	0x080090f3
 8008ea4:	08009127 	.word	0x08009127
 8008ea8:	08009127 	.word	0x08009127
 8008eac:	08009127 	.word	0x08009127
 8008eb0:	08009127 	.word	0x08009127
 8008eb4:	08009127 	.word	0x08009127
 8008eb8:	08009127 	.word	0x08009127
 8008ebc:	08009127 	.word	0x08009127
 8008ec0:	08008ec5 	.word	0x08008ec5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee6:	e126      	b.n	8009136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb27 	bl	800953e <USBD_CtlError>
        err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef6:	e11e      	b.n	8009136 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
      break;
 8008f0e:	e112      	b.n	8009136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7c1b      	ldrb	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10d      	bne.n	8008f34 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f20:	f107 0208 	add.w	r2, r7, #8
 8008f24:	4610      	mov	r0, r2
 8008f26:	4798      	blx	r3
 8008f28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	2202      	movs	r2, #2
 8008f30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f32:	e100      	b.n	8009136 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	f107 0208 	add.w	r2, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	701a      	strb	r2, [r3, #0]
      break;
 8008f4e:	e0f2      	b.n	8009136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	885b      	ldrh	r3, [r3, #2]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	f200 80ac 	bhi.w	80090b4 <USBD_GetDescriptor+0x258>
 8008f5c:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <USBD_GetDescriptor+0x108>)
 8008f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fe5 	.word	0x08008fe5
 8008f70:	08009019 	.word	0x08009019
 8008f74:	0800904d 	.word	0x0800904d
 8008f78:	08009081 	.word	0x08009081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00b      	beq.n	8008fa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	7c12      	ldrb	r2, [r2, #16]
 8008f94:	f107 0108 	add.w	r1, r7, #8
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9e:	e091      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 facb 	bl	800953e <USBD_CtlError>
            err++;
 8008fa8:	7afb      	ldrb	r3, [r7, #11]
 8008faa:	3301      	adds	r3, #1
 8008fac:	72fb      	strb	r3, [r7, #11]
          break;
 8008fae:	e089      	b.n	80090c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	7c12      	ldrb	r2, [r2, #16]
 8008fc8:	f107 0108 	add.w	r1, r7, #8
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd2:	e077      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fab1 	bl	800953e <USBD_CtlError>
            err++;
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe2:	e06f      	b.n	80090c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	7c12      	ldrb	r2, [r2, #16]
 8008ffc:	f107 0108 	add.w	r1, r7, #8
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009006:	e05d      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa97 	bl	800953e <USBD_CtlError>
            err++;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3301      	adds	r3, #1
 8009014:	72fb      	strb	r3, [r7, #11]
          break;
 8009016:	e055      	b.n	80090c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7c12      	ldrb	r2, [r2, #16]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
 8009038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903a:	e043      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa7d 	bl	800953e <USBD_CtlError>
            err++;
 8009044:	7afb      	ldrb	r3, [r7, #11]
 8009046:	3301      	adds	r3, #1
 8009048:	72fb      	strb	r3, [r7, #11]
          break;
 800904a:	e03b      	b.n	80090c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	7c12      	ldrb	r2, [r2, #16]
 8009064:	f107 0108 	add.w	r1, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906e:	e029      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa63 	bl	800953e <USBD_CtlError>
            err++;
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	3301      	adds	r3, #1
 800907c:	72fb      	strb	r3, [r7, #11]
          break;
 800907e:	e021      	b.n	80090c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	7c12      	ldrb	r2, [r2, #16]
 8009098:	f107 0108 	add.w	r1, r7, #8
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a2:	e00f      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa49 	bl	800953e <USBD_CtlError>
            err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
          break;
 80090b2:	e007      	b.n	80090c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa41 	bl	800953e <USBD_CtlError>
          err++;
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	3301      	adds	r3, #1
 80090c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090c2:	bf00      	nop
      }
      break;
 80090c4:	e037      	b.n	8009136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	7c1b      	ldrb	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	f107 0208 	add.w	r2, r7, #8
 80090da:	4610      	mov	r0, r2
 80090dc:	4798      	blx	r3
 80090de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e0:	e029      	b.n	8009136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fa2a 	bl	800953e <USBD_CtlError>
        err++;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	3301      	adds	r3, #1
 80090ee:	72fb      	strb	r3, [r7, #11]
      break;
 80090f0:	e021      	b.n	8009136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7c1b      	ldrb	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10d      	bne.n	8009116 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	f107 0208 	add.w	r2, r7, #8
 8009106:	4610      	mov	r0, r2
 8009108:	4798      	blx	r3
 800910a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	2207      	movs	r2, #7
 8009112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009114:	e00f      	b.n	8009136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa10 	bl	800953e <USBD_CtlError>
        err++;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	3301      	adds	r3, #1
 8009122:	72fb      	strb	r3, [r7, #11]
      break;
 8009124:	e007      	b.n	8009136 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fa08 	bl	800953e <USBD_CtlError>
      err++;
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	3301      	adds	r3, #1
 8009132:	72fb      	strb	r3, [r7, #11]
      break;
 8009134:	bf00      	nop
  }

  if (err != 0U)
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11e      	bne.n	800917a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	88db      	ldrh	r3, [r3, #6]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d016      	beq.n	8009172 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009144:	893b      	ldrh	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00e      	beq.n	8009168 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88da      	ldrh	r2, [r3, #6]
 800914e:	893b      	ldrh	r3, [r7, #8]
 8009150:	4293      	cmp	r3, r2
 8009152:	bf28      	it	cs
 8009154:	4613      	movcs	r3, r2
 8009156:	b29b      	uxth	r3, r3
 8009158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	461a      	mov	r2, r3
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa5d 	bl	8009620 <USBD_CtlSendData>
 8009166:	e009      	b.n	800917c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9e7 	bl	800953e <USBD_CtlError>
 8009170:	e004      	b.n	800917c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 faae 	bl	80096d4 <USBD_CtlSendStatus>
 8009178:	e000      	b.n	800917c <USBD_GetDescriptor+0x320>
    return;
 800917a:	bf00      	nop
  }
}
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop

08009184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	889b      	ldrh	r3, [r3, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d131      	bne.n	80091fa <USBD_SetAddress+0x76>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	88db      	ldrh	r3, [r3, #6]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d12d      	bne.n	80091fa <USBD_SetAddress+0x76>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	2b7f      	cmp	r3, #127	; 0x7f
 80091a4:	d829      	bhi.n	80091fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d104      	bne.n	80091c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9bc 	bl	800953e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	e01d      	b.n	8009204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	7bfa      	ldrb	r2, [r7, #15]
 80091cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 ff5b 	bl	800a090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa7a 	bl	80096d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	e009      	b.n	8009204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f8:	e004      	b.n	8009204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f99e 	bl	800953e <USBD_CtlError>
  }
}
 8009202:	bf00      	nop
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	885b      	ldrh	r3, [r3, #2]
 800921e:	b2da      	uxtb	r2, r3
 8009220:	4b4e      	ldr	r3, [pc, #312]	; (800935c <USBD_SetConfig+0x150>)
 8009222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009224:	4b4d      	ldr	r3, [pc, #308]	; (800935c <USBD_SetConfig+0x150>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d905      	bls.n	8009238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f985 	bl	800953e <USBD_CtlError>
    return USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	e08c      	b.n	8009352 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d002      	beq.n	800924a <USBD_SetConfig+0x3e>
 8009244:	2b03      	cmp	r3, #3
 8009246:	d029      	beq.n	800929c <USBD_SetConfig+0x90>
 8009248:	e075      	b.n	8009336 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800924a:	4b44      	ldr	r3, [pc, #272]	; (800935c <USBD_SetConfig+0x150>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d020      	beq.n	8009294 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009252:	4b42      	ldr	r3, [pc, #264]	; (800935c <USBD_SetConfig+0x150>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800925c:	4b3f      	ldr	r3, [pc, #252]	; (800935c <USBD_SetConfig+0x150>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fe ffb7 	bl	80081d6 <USBD_SetClassConfig>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d008      	beq.n	8009284 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f962 	bl	800953e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2202      	movs	r2, #2
 800927e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009282:	e065      	b.n	8009350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fa25 	bl	80096d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2203      	movs	r2, #3
 800928e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009292:	e05d      	b.n	8009350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa1d 	bl	80096d4 <USBD_CtlSendStatus>
      break;
 800929a:	e059      	b.n	8009350 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <USBD_SetConfig+0x150>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d112      	bne.n	80092ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092ac:	4b2b      	ldr	r3, [pc, #172]	; (800935c <USBD_SetConfig+0x150>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092b6:	4b29      	ldr	r3, [pc, #164]	; (800935c <USBD_SetConfig+0x150>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7fe ffa6 	bl	800820e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa06 	bl	80096d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092c8:	e042      	b.n	8009350 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <USBD_SetConfig+0x150>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d02a      	beq.n	800932e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fe ff94 	bl	800820e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092e6:	4b1d      	ldr	r3, [pc, #116]	; (800935c <USBD_SetConfig+0x150>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092f0:	4b1a      	ldr	r3, [pc, #104]	; (800935c <USBD_SetConfig+0x150>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fe ff6d 	bl	80081d6 <USBD_SetClassConfig>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00f      	beq.n	8009326 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f918 	bl	800953e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7fe ff79 	bl	800820e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009324:	e014      	b.n	8009350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9d4 	bl	80096d4 <USBD_CtlSendStatus>
      break;
 800932c:	e010      	b.n	8009350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f9d0 	bl	80096d4 <USBD_CtlSendStatus>
      break;
 8009334:	e00c      	b.n	8009350 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f900 	bl	800953e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <USBD_SetConfig+0x150>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fe ff62 	bl	800820e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	73fb      	strb	r3, [r7, #15]
      break;
 800934e:	bf00      	nop
  }

  return ret;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	200003b8 	.word	0x200003b8

08009360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	88db      	ldrh	r3, [r3, #6]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d004      	beq.n	800937c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f8e2 	bl	800953e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800937a:	e023      	b.n	80093c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	dc02      	bgt.n	800938e <USBD_GetConfig+0x2e>
 8009388:	2b00      	cmp	r3, #0
 800938a:	dc03      	bgt.n	8009394 <USBD_GetConfig+0x34>
 800938c:	e015      	b.n	80093ba <USBD_GetConfig+0x5a>
 800938e:	2b03      	cmp	r3, #3
 8009390:	d00b      	beq.n	80093aa <USBD_GetConfig+0x4a>
 8009392:	e012      	b.n	80093ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3308      	adds	r3, #8
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f93c 	bl	8009620 <USBD_CtlSendData>
        break;
 80093a8:	e00c      	b.n	80093c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3304      	adds	r3, #4
 80093ae:	2201      	movs	r2, #1
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f934 	bl	8009620 <USBD_CtlSendData>
        break;
 80093b8:	e004      	b.n	80093c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8be 	bl	800953e <USBD_CtlError>
        break;
 80093c2:	bf00      	nop
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	3b01      	subs	r3, #1
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d81e      	bhi.n	8009422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	88db      	ldrh	r3, [r3, #6]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d004      	beq.n	80093f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f8a5 	bl	800953e <USBD_CtlError>
        break;
 80093f4:	e01a      	b.n	800942c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f043 0202 	orr.w	r2, r3, #2
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	330c      	adds	r3, #12
 8009416:	2202      	movs	r2, #2
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f900 	bl	8009620 <USBD_CtlSendData>
      break;
 8009420:	e004      	b.n	800942c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f88a 	bl	800953e <USBD_CtlError>
      break;
 800942a:	bf00      	nop
  }
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	885b      	ldrh	r3, [r3, #2]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d107      	bne.n	8009456 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f940 	bl	80096d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009454:	e013      	b.n	800947e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	885b      	ldrh	r3, [r3, #2]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d10b      	bne.n	8009476 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	889b      	ldrh	r3, [r3, #4]
 8009462:	0a1b      	lsrs	r3, r3, #8
 8009464:	b29b      	uxth	r3, r3
 8009466:	b2da      	uxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f930 	bl	80096d4 <USBD_CtlSendStatus>
}
 8009474:	e003      	b.n	800947e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f860 	bl	800953e <USBD_CtlError>
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009496:	b2db      	uxtb	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	2b02      	cmp	r3, #2
 800949c:	d80b      	bhi.n	80094b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d10c      	bne.n	80094c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f910 	bl	80096d4 <USBD_CtlSendStatus>
      }
      break;
 80094b4:	e004      	b.n	80094c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f840 	bl	800953e <USBD_CtlError>
      break;
 80094be:	e000      	b.n	80094c2 <USBD_ClrFeature+0x3c>
      break;
 80094c0:	bf00      	nop
  }
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff fa17 	bl	8008928 <SWAPBYTE>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461a      	mov	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fa0a 	bl	8008928 <SWAPBYTE>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff f9fd 	bl	8008928 <SWAPBYTE>
 800952e:	4603      	mov	r3, r0
 8009530:	461a      	mov	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	80da      	strh	r2, [r3, #6]
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009548:	2180      	movs	r1, #128	; 0x80
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fd08 	bl	8009f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fd04 	bl	8009f60 <USBD_LL_StallEP>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d036      	beq.n	80095e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800957a:	6938      	ldr	r0, [r7, #16]
 800957c:	f000 f836 	bl	80095ec <USBD_GetLen>
 8009580:	4603      	mov	r3, r0
 8009582:	3301      	adds	r3, #1
 8009584:	b29b      	uxth	r3, r3
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4413      	add	r3, r2
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
  idx++;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	3301      	adds	r3, #1
 800959e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4413      	add	r3, r2
 80095a6:	2203      	movs	r2, #3
 80095a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	3301      	adds	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095b0:	e013      	b.n	80095da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	4413      	add	r3, r2
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]
    idx++;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	3301      	adds	r3, #1
 80095c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	4413      	add	r3, r2
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	3301      	adds	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e7      	bne.n	80095b2 <USBD_GetString+0x52>
 80095e2:	e000      	b.n	80095e6 <USBD_GetString+0x86>
    return;
 80095e4:	bf00      	nop
  }
}
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095fc:	e005      	b.n	800960a <USBD_GetLen+0x1e>
  {
    len++;
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	3301      	adds	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3301      	adds	r3, #1
 8009608:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f5      	bne.n	80095fe <USBD_GetLen+0x12>
  }

  return len;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	2100      	movs	r1, #0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fd58 	bl	800a0fc <USBD_LL_Transmit>

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fd47 	bl	800a0fc <USBD_LL_Transmit>

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2203      	movs	r2, #3
 8009688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 fd62 	bl	800a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	2100      	movs	r1, #0
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fd51 	bl	800a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2204      	movs	r2, #4
 80096e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096e4:	2300      	movs	r3, #0
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fd06 	bl	800a0fc <USBD_LL_Transmit>

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2205      	movs	r2, #5
 8009706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800970a:	2300      	movs	r3, #0
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fd2b 	bl	800a16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009724:	2200      	movs	r2, #0
 8009726:	4912      	ldr	r1, [pc, #72]	; (8009770 <MX_USB_DEVICE_Init+0x50>)
 8009728:	4812      	ldr	r0, [pc, #72]	; (8009774 <MX_USB_DEVICE_Init+0x54>)
 800972a:	f7fe fcd7 	bl	80080dc <USBD_Init>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009734:	f7f7 fdd2 	bl	80012dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009738:	490f      	ldr	r1, [pc, #60]	; (8009778 <MX_USB_DEVICE_Init+0x58>)
 800973a:	480e      	ldr	r0, [pc, #56]	; (8009774 <MX_USB_DEVICE_Init+0x54>)
 800973c:	f7fe fcfe 	bl	800813c <USBD_RegisterClass>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009746:	f7f7 fdc9 	bl	80012dc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800974a:	490c      	ldr	r1, [pc, #48]	; (800977c <MX_USB_DEVICE_Init+0x5c>)
 800974c:	4809      	ldr	r0, [pc, #36]	; (8009774 <MX_USB_DEVICE_Init+0x54>)
 800974e:	f7fe fcab 	bl	80080a8 <USBD_CUSTOM_HID_RegisterInterface>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009758:	f7f7 fdc0 	bl	80012dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800975c:	4805      	ldr	r0, [pc, #20]	; (8009774 <MX_USB_DEVICE_Init+0x54>)
 800975e:	f7fe fd23 	bl	80081a8 <USBD_Start>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009768:	f7f7 fdb8 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800976c:	bf00      	nop
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200000cc 	.word	0x200000cc
 8009774:	200003bc 	.word	0x200003bc
 8009778:	2000000c 	.word	0x2000000c
 800977c:	200000bc 	.word	0x200000bc

08009780 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009784:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009786:	4618      	mov	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009794:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009796:	4618      	mov	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	460a      	mov	r2, r1
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	4613      	mov	r3, r2
 80097ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80097b0:	4803      	ldr	r0, [pc, #12]	; (80097c0 <CUSTOM_HID_OutEvent_FS+0x20>)
 80097b2:	f7fe fc17 	bl	8007fe4 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80097b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	200003bc 	.word	0x200003bc

080097c4 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80097d0:	887b      	ldrh	r3, [r7, #2]
 80097d2:	461a      	mov	r2, r3
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	4804      	ldr	r0, [pc, #16]	; (80097e8 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80097d8:	f7fe faf8 	bl	8007dcc <USBD_CUSTOM_HID_SendReport>
 80097dc:	4603      	mov	r3, r0
 80097de:	b25b      	sxtb	r3, r3
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	200003bc 	.word	0x200003bc

080097ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	6039      	str	r1, [r7, #0]
 80097f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2212      	movs	r2, #18
 80097fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097fe:	4b03      	ldr	r3, [pc, #12]	; (800980c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	200000ec 	.word	0x200000ec

08009810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2204      	movs	r2, #4
 8009820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009822:	4b03      	ldr	r3, [pc, #12]	; (8009830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	2000010c 	.word	0x2000010c

08009834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	; (8009868 <USBD_FS_ProductStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	; (800986c <USBD_FS_ProductStrDescriptor+0x38>)
 800984c:	f7ff fe88 	bl	8009560 <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	; (8009868 <USBD_FS_ProductStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	; (800986c <USBD_FS_ProductStrDescriptor+0x38>)
 8009858:	f7ff fe82 	bl	8009560 <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000698 	.word	0x20000698
 800986c:	0800a324 	.word	0x0800a324

08009870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	4904      	ldr	r1, [pc, #16]	; (8009890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009880:	4804      	ldr	r0, [pc, #16]	; (8009894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009882:	f7ff fe6d 	bl	8009560 <USBD_GetString>
  return USBD_StrDesc;
 8009886:	4b02      	ldr	r3, [pc, #8]	; (8009890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20000698 	.word	0x20000698
 8009894:	0800a344 	.word	0x0800a344

08009898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	221a      	movs	r2, #26
 80098a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098aa:	f000 f855 	bl	8009958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098ae:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000110 	.word	0x20000110

080098bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4907      	ldr	r1, [pc, #28]	; (80098f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098d2:	4808      	ldr	r0, [pc, #32]	; (80098f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098d4:	f7ff fe44 	bl	8009560 <USBD_GetString>
 80098d8:	e004      	b.n	80098e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098de:	4805      	ldr	r0, [pc, #20]	; (80098f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098e0:	f7ff fe3e 	bl	8009560 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20000698 	.word	0x20000698
 80098f4:	0800a358 	.word	0x0800a358

080098f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d105      	bne.n	8009916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4907      	ldr	r1, [pc, #28]	; (800992c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800990e:	4808      	ldr	r0, [pc, #32]	; (8009930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009910:	f7ff fe26 	bl	8009560 <USBD_GetString>
 8009914:	e004      	b.n	8009920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800991a:	4805      	ldr	r0, [pc, #20]	; (8009930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800991c:	f7ff fe20 	bl	8009560 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20000698 	.word	0x20000698
 8009930:	0800a36c 	.word	0x0800a36c

08009934 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	220c      	movs	r2, #12
 8009944:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009946:	4b03      	ldr	r3, [pc, #12]	; (8009954 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	20000100 	.word	0x20000100

08009958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800995e:	4b0f      	ldr	r3, [pc, #60]	; (800999c <Get_SerialNum+0x44>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <Get_SerialNum+0x48>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <Get_SerialNum+0x4c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800997e:	2208      	movs	r2, #8
 8009980:	4909      	ldr	r1, [pc, #36]	; (80099a8 <Get_SerialNum+0x50>)
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 f814 	bl	80099b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009988:	2204      	movs	r2, #4
 800998a:	4908      	ldr	r1, [pc, #32]	; (80099ac <Get_SerialNum+0x54>)
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f000 f80f 	bl	80099b0 <IntToUnicode>
  }
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	1fff7590 	.word	0x1fff7590
 80099a0:	1fff7594 	.word	0x1fff7594
 80099a4:	1fff7598 	.word	0x1fff7598
 80099a8:	20000112 	.word	0x20000112
 80099ac:	20000122 	.word	0x20000122

080099b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	4613      	mov	r3, r2
 80099bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
 80099c6:	e027      	b.n	8009a18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	0f1b      	lsrs	r3, r3, #28
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d80b      	bhi.n	80099e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	0f1b      	lsrs	r3, r3, #28
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	4619      	mov	r1, r3
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	440b      	add	r3, r1
 80099e0:	3230      	adds	r2, #48	; 0x30
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	e00a      	b.n	80099fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	0f1b      	lsrs	r3, r3, #28
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	4619      	mov	r1, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	440b      	add	r3, r1
 80099f8:	3237      	adds	r2, #55	; 0x37
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	011b      	lsls	r3, r3, #4
 8009a02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	3301      	adds	r3, #1
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	3301      	adds	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
 8009a18:	7dfa      	ldrb	r2, [r7, #23]
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d3d3      	bcc.n	80099c8 <IntToUnicode+0x18>
  }
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b0ac      	sub	sp, #176	; 0xb0
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	605a      	str	r2, [r3, #4]
 8009a42:	609a      	str	r2, [r3, #8]
 8009a44:	60da      	str	r2, [r3, #12]
 8009a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	2288      	movs	r2, #136	; 0x88
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fc2f 	bl	800a2b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a5e:	f040 8085 	bne.w	8009b6c <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009a68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009a70:	2301      	movs	r3, #1
 8009a72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009a78:	2318      	movs	r3, #24
 8009a7a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009a7c:	2307      	movs	r3, #7
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009a80:	2302      	movs	r3, #2
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009a84:	2302      	movs	r3, #2
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009a88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a8c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a8e:	f107 0314 	add.w	r3, r7, #20
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fb fa6e 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8009a9e:	f7f7 fc1d 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009aa2:	4b34      	ldr	r3, [pc, #208]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa6:	4a33      	ldr	r2, [pc, #204]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009aae:	4b31      	ldr	r3, [pc, #196]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8009aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ad8:	f7f8 f968 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009adc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009af0:	2303      	movs	r3, #3
 8009af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009af6:	230a      	movs	r3, #10
 8009af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009b00:	4619      	mov	r1, r3
 8009b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b06:	f7f8 f951 	bl	8001dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b0a:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0e:	4a19      	ldr	r2, [pc, #100]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b16:	4b17      	ldr	r3, [pc, #92]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b22:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d114      	bne.n	8009b58 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b2e:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b32:	4a10      	ldr	r2, [pc, #64]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b38:	6593      	str	r3, [r2, #88]	; 0x58
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b42:	60bb      	str	r3, [r7, #8]
 8009b44:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009b46:	f7fa fb49 	bl	80041dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4e:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <HAL_PCD_MspInit+0x144>)
 8009b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b54:	6593      	str	r3, [r2, #88]	; 0x58
 8009b56:	e001      	b.n	8009b5c <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009b58:	f7fa fb40 	bl	80041dc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	2043      	movs	r0, #67	; 0x43
 8009b62:	f7f7 ffe0 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b66:	2043      	movs	r0, #67	; 0x43
 8009b68:	f7f7 fff9 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	37b0      	adds	r7, #176	; 0xb0
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	40021000 	.word	0x40021000

08009b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe fb57 	bl	8008242 <USBD_LL_SetupStage>
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	440b      	add	r3, r1
 8009bbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7fe fb91 	bl	80082ec <USBD_LL_DataOutStage>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3348      	adds	r3, #72	; 0x48
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	f7fe fc2a 	bl	8008452 <USBD_LL_DataInStage>
}
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fd64 	bl	80086e2 <USBD_LL_SOF>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d001      	beq.n	8009c3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c36:	f7f7 fb51 	bl	80012dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c40:	7bfa      	ldrb	r2, [r7, #15]
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fd08 	bl	800865a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fcb0 	bl	80085b6 <USBD_LL_Reset>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fcf7 	bl	800867a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	4a03      	ldr	r2, [pc, #12]	; (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c9a:	f043 0306 	orr.w	r3, r3, #6
 8009c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6812      	ldr	r2, [r2, #0]
 8009cc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d007      	beq.n	8009ce4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cd4:	4b08      	ldr	r3, [pc, #32]	; (8009cf8 <HAL_PCD_ResumeCallback+0x4c>)
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <HAL_PCD_ResumeCallback+0x4c>)
 8009cda:	f023 0306 	bic.w	r3, r3, #6
 8009cde:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ce0:	f000 fae2 	bl	800a2a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fce1 	bl	80086b2 <USBD_LL_Resume>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed00 	.word	0xe000ed00

08009cfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	4611      	mov	r1, r2
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe fd37 	bl	8008786 <USBD_LL_IsoOUTIncomplete>
}
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fcf3 	bl	8008722 <USBD_LL_IsoINIncomplete>
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe fd49 	bl	80087ea <USBD_LL_DevConnected>
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fd46 	bl	8008800 <USBD_LL_DevDisconnected>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d13c      	bne.n	8009e06 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d8c:	4a20      	ldr	r2, [pc, #128]	; (8009e10 <USBD_LL_Init+0x94>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a1e      	ldr	r2, [pc, #120]	; (8009e10 <USBD_LL_Init+0x94>)
 8009d98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d9c:	4b1c      	ldr	r3, [pc, #112]	; (8009e10 <USBD_LL_Init+0x94>)
 8009d9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009da2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009da4:	4b1a      	ldr	r3, [pc, #104]	; (8009e10 <USBD_LL_Init+0x94>)
 8009da6:	2206      	movs	r2, #6
 8009da8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009daa:	4b19      	ldr	r3, [pc, #100]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dac:	2202      	movs	r2, #2
 8009dae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009db0:	4b17      	ldr	r3, [pc, #92]	; (8009e10 <USBD_LL_Init+0x94>)
 8009db2:	2202      	movs	r2, #2
 8009db4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <USBD_LL_Init+0x94>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dbc:	4b14      	ldr	r3, [pc, #80]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009dc8:	4b11      	ldr	r3, [pc, #68]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dce:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dda:	480d      	ldr	r0, [pc, #52]	; (8009e10 <USBD_LL_Init+0x94>)
 8009ddc:	f7f8 fffb 	bl	8002dd6 <HAL_PCD_Init>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009de6:	f7f7 fa79 	bl	80012dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dea:	2180      	movs	r1, #128	; 0x80
 8009dec:	4808      	ldr	r0, [pc, #32]	; (8009e10 <USBD_LL_Init+0x94>)
 8009dee:	f7fa f94c 	bl	800408a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009df2:	2240      	movs	r2, #64	; 0x40
 8009df4:	2100      	movs	r1, #0
 8009df6:	4806      	ldr	r0, [pc, #24]	; (8009e10 <USBD_LL_Init+0x94>)
 8009df8:	f7fa f900 	bl	8003ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4803      	ldr	r0, [pc, #12]	; (8009e10 <USBD_LL_Init+0x94>)
 8009e02:	f7fa f8fb 	bl	8003ffc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20000898 	.word	0x20000898

08009e14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f9 f8f7 	bl	800301e <HAL_PCD_Start>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d816      	bhi.n	8009e68 <USBD_LL_Start+0x54>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <USBD_LL_Start+0x2c>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e57 	.word	0x08009e57
 8009e48:	08009e5d 	.word	0x08009e5d
 8009e4c:	08009e63 	.word	0x08009e63
    case HAL_OK :
      usb_status = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
    break;
 8009e54:	e00b      	b.n	8009e6e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e56:	2303      	movs	r3, #3
 8009e58:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5a:	e008      	b.n	8009e6e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	e005      	b.n	8009e6e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e62:	2303      	movs	r3, #3
 8009e64:	73fb      	strb	r3, [r7, #15]
    break;
 8009e66:	e002      	b.n	8009e6e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6c:	bf00      	nop
  }
  return usb_status;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	461a      	mov	r2, r3
 8009e86:	4603      	mov	r3, r0
 8009e88:	70fb      	strb	r3, [r7, #3]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70bb      	strb	r3, [r7, #2]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ea0:	78bb      	ldrb	r3, [r7, #2]
 8009ea2:	883a      	ldrh	r2, [r7, #0]
 8009ea4:	78f9      	ldrb	r1, [r7, #3]
 8009ea6:	f7f9 fda1 	bl	80039ec <HAL_PCD_EP_Open>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d817      	bhi.n	8009ee4 <USBD_LL_OpenEP+0x6c>
 8009eb4:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USBD_LL_OpenEP+0x44>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009ed3 	.word	0x08009ed3
 8009ec4:	08009ed9 	.word	0x08009ed9
 8009ec8:	08009edf 	.word	0x08009edf
    case HAL_OK :
      usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed0:	e00b      	b.n	8009eea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed6:	e008      	b.n	8009eea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
    break;
 8009edc:	e005      	b.n	8009eea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee2:	e002      	b.n	8009eea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee8:	bf00      	nop
  }
  return usb_status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f0e:	78fa      	ldrb	r2, [r7, #3]
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7f9 fdd2 	bl	8003abc <HAL_PCD_EP_Close>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d816      	bhi.n	8009f50 <USBD_LL_CloseEP+0x5c>
 8009f22:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <USBD_LL_CloseEP+0x34>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f39 	.word	0x08009f39
 8009f2c:	08009f3f 	.word	0x08009f3f
 8009f30:	08009f45 	.word	0x08009f45
 8009f34:	08009f4b 	.word	0x08009f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3c:	e00b      	b.n	8009f56 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	73fb      	strb	r3, [r7, #15]
    break;
 8009f42:	e008      	b.n	8009f56 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f44:	2301      	movs	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
    break;
 8009f48:	e005      	b.n	8009f56 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f4e:	e002      	b.n	8009f56 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	73fb      	strb	r3, [r7, #15]
    break;
 8009f54:	bf00      	nop
  }
  return usb_status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7f9 fe49 	bl	8003c16 <HAL_PCD_EP_SetStall>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d816      	bhi.n	8009fbc <USBD_LL_StallEP+0x5c>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBD_LL_StallEP+0x34>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fa5 	.word	0x08009fa5
 8009f98:	08009fab 	.word	0x08009fab
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fb7 	.word	0x08009fb7
    case HAL_OK :
      usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	e00b      	b.n	8009fc2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009faa:	2303      	movs	r3, #3
 8009fac:	73fb      	strb	r3, [r7, #15]
    break;
 8009fae:	e008      	b.n	8009fc2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e005      	b.n	8009fc2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e002      	b.n	8009fc2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	bf00      	nop
  }
  return usb_status;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fe6:	78fa      	ldrb	r2, [r7, #3]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f9 fe75 	bl	8003cda <HAL_PCD_EP_ClrStall>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d816      	bhi.n	800a028 <USBD_LL_ClearStallEP+0x5c>
 8009ffa:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <USBD_LL_ClearStallEP+0x34>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a011 	.word	0x0800a011
 800a004:	0800a017 	.word	0x0800a017
 800a008:	0800a01d 	.word	0x0800a01d
 800a00c:	0800a023 	.word	0x0800a023
    case HAL_OK :
      usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	e00b      	b.n	800a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a016:	2303      	movs	r3, #3
 800a018:	73fb      	strb	r3, [r7, #15]
    break;
 800a01a:	e008      	b.n	800a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e005      	b.n	800a02e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e002      	b.n	800a02e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	bf00      	nop
  }
  return usb_status;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a050:	2b00      	cmp	r3, #0
 800a052:	da0b      	bge.n	800a06c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	4613      	mov	r3, r2
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	440b      	add	r3, r1
 800a066:	333e      	adds	r3, #62	; 0x3e
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	e00b      	b.n	800a084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a082:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f9 fc77 	bl	80039a2 <HAL_PCD_SetAddress>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d816      	bhi.n	800a0ec <USBD_LL_SetUSBAddress+0x5c>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <USBD_LL_SetUSBAddress+0x34>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0db 	.word	0x0800a0db
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e7 	.word	0x0800a0e7
    case HAL_OK :
      usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d8:	e00b      	b.n	800a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0de:	e008      	b.n	800a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e4:	e005      	b.n	800a0f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ea:	e002      	b.n	800a0f2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	bf00      	nop
  }
  return usb_status;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	607a      	str	r2, [r7, #4]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	460b      	mov	r3, r1
 800a10a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a11a:	7af9      	ldrb	r1, [r7, #11]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	f7f9 fd48 	bl	8003bb4 <HAL_PCD_EP_Transmit>
 800a124:	4603      	mov	r3, r0
 800a126:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a128:	7dbb      	ldrb	r3, [r7, #22]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d816      	bhi.n	800a15c <USBD_LL_Transmit+0x60>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <USBD_LL_Transmit+0x38>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a145 	.word	0x0800a145
 800a138:	0800a14b 	.word	0x0800a14b
 800a13c:	0800a151 	.word	0x0800a151
 800a140:	0800a157 	.word	0x0800a157
    case HAL_OK :
      usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]
    break;
 800a148:	e00b      	b.n	800a162 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	75fb      	strb	r3, [r7, #23]
    break;
 800a14e:	e008      	b.n	800a162 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a150:	2301      	movs	r3, #1
 800a152:	75fb      	strb	r3, [r7, #23]
    break;
 800a154:	e005      	b.n	800a162 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	75fb      	strb	r3, [r7, #23]
    break;
 800a15a:	e002      	b.n	800a162 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	75fb      	strb	r3, [r7, #23]
    break;
 800a160:	bf00      	nop
  }
  return usb_status;
 800a162:	7dfb      	ldrb	r3, [r7, #23]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	460b      	mov	r3, r1
 800a17a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a18a:	7af9      	ldrb	r1, [r7, #11]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	f7f9 fcde 	bl	8003b50 <HAL_PCD_EP_Receive>
 800a194:	4603      	mov	r3, r0
 800a196:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a198:	7dbb      	ldrb	r3, [r7, #22]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d816      	bhi.n	800a1cc <USBD_LL_PrepareReceive+0x60>
 800a19e:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <USBD_LL_PrepareReceive+0x38>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1b5 	.word	0x0800a1b5
 800a1a8:	0800a1bb 	.word	0x0800a1bb
 800a1ac:	0800a1c1 	.word	0x0800a1c1
 800a1b0:	0800a1c7 	.word	0x0800a1c7
    case HAL_OK :
      usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	75fb      	strb	r3, [r7, #23]
    break;
 800a1b8:	e00b      	b.n	800a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	75fb      	strb	r3, [r7, #23]
    break;
 800a1be:	e008      	b.n	800a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	75fb      	strb	r3, [r7, #23]
    break;
 800a1c4:	e005      	b.n	800a1d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	75fb      	strb	r3, [r7, #23]
    break;
 800a1ca:	e002      	b.n	800a1d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	75fb      	strb	r3, [r7, #23]
    break;
 800a1d0:	bf00      	nop
  }
  return usb_status;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <HAL_PCDEx_LPM_Callback+0x18>
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d01f      	beq.n	800a232 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1f2:	e03b      	b.n	800a26c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d007      	beq.n	800a20c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a1fc:	f000 f854 	bl	800a2a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a200:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <HAL_PCDEx_LPM_Callback+0x98>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	4a1b      	ldr	r2, [pc, #108]	; (800a274 <HAL_PCDEx_LPM_Callback+0x98>)
 800a206:	f023 0306 	bic.w	r3, r3, #6
 800a20a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	6812      	ldr	r2, [r2, #0]
 800a21a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a21e:	f023 0301 	bic.w	r3, r3, #1
 800a222:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fa41 	bl	80086b2 <USBD_LL_Resume>
    break;
 800a230:	e01c      	b.n	800a26c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe fa12 	bl	800867a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_PCDEx_LPM_Callback+0x98>)
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	4a04      	ldr	r2, [pc, #16]	; (800a274 <HAL_PCDEx_LPM_Callback+0x98>)
 800a264:	f043 0306 	orr.w	r3, r3, #6
 800a268:	6113      	str	r3, [r2, #16]
    break;
 800a26a:	bf00      	nop
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	e000ed00 	.word	0xe000ed00

0800a278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a280:	4b03      	ldr	r3, [pc, #12]	; (800a290 <USBD_static_malloc+0x18>)
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20000da4 	.word	0x20000da4

0800a294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2ac:	f7f6 fcc8 	bl	8000c40 <SystemClock_Config>
}
 800a2b0:	bf00      	nop
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <memset>:
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <memset+0xa>
 800a2bc:	4770      	bx	lr
 800a2be:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c2:	e7f9      	b.n	800a2b8 <memset+0x4>

0800a2c4 <__libc_init_array>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	4d0d      	ldr	r5, [pc, #52]	; (800a2fc <__libc_init_array+0x38>)
 800a2c8:	4c0d      	ldr	r4, [pc, #52]	; (800a300 <__libc_init_array+0x3c>)
 800a2ca:	1b64      	subs	r4, r4, r5
 800a2cc:	10a4      	asrs	r4, r4, #2
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	d109      	bne.n	800a2e8 <__libc_init_array+0x24>
 800a2d4:	4d0b      	ldr	r5, [pc, #44]	; (800a304 <__libc_init_array+0x40>)
 800a2d6:	4c0c      	ldr	r4, [pc, #48]	; (800a308 <__libc_init_array+0x44>)
 800a2d8:	f000 f818 	bl	800a30c <_init>
 800a2dc:	1b64      	subs	r4, r4, r5
 800a2de:	10a4      	asrs	r4, r4, #2
 800a2e0:	2600      	movs	r6, #0
 800a2e2:	42a6      	cmp	r6, r4
 800a2e4:	d105      	bne.n	800a2f2 <__libc_init_array+0x2e>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ec:	4798      	blx	r3
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7ee      	b.n	800a2d0 <__libc_init_array+0xc>
 800a2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f6:	4798      	blx	r3
 800a2f8:	3601      	adds	r6, #1
 800a2fa:	e7f2      	b.n	800a2e2 <__libc_init_array+0x1e>
 800a2fc:	0800a3d4 	.word	0x0800a3d4
 800a300:	0800a3d4 	.word	0x0800a3d4
 800a304:	0800a3d4 	.word	0x0800a3d4
 800a308:	0800a3d8 	.word	0x0800a3d8

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
