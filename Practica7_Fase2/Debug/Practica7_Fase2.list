
Practica7_Fase2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c88  08007c88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c90  08007c90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020bc  20000010  08007ca8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020cc  08007ca8  000220cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000214d4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044db  00000000  00000000  00041557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dd8  00000000  00000000  00045a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001721  00000000  00000000  00047810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004708  00000000  00000000  00048f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e6b  00000000  00000000  0004d639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd6d1  00000000  00000000  0006f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f9c  00000000  00000000  0016cb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00174b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b40 	.word	0x08007b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007b40 	.word	0x08007b40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f001 fe45 	bl	8002168 <HAL_GPIO_WritePin>

	osDelay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f004 fe7e 	bl	80051e0 <osDelay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f001 fe3b 	bl	8002168 <HAL_GPIO_WritePin>
    osDelay(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f004 fe74 	bl	80051e0 <osDelay>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <lcd_reset>:

void lcd_reset(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2104      	movs	r1, #4
 8000504:	4820      	ldr	r0, [pc, #128]	; (8000588 <lcd_reset+0x8c>)
 8000506:	f001 fe2f 	bl	8002168 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2110      	movs	r1, #16
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f001 fe29 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f001 fe23 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4818      	ldr	r0, [pc, #96]	; (8000588 <lcd_reset+0x8c>)
 8000528:	f001 fe1e 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <lcd_reset+0x8c>)
 8000532:	f001 fe19 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f001 fe12 	bl	8002168 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f001 fe0c 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <lcd_reset+0x8c>)
 8000556:	f001 fe07 	bl	8002168 <HAL_GPIO_WritePin>
    lcd_clock();
 800055a:	f7ff ffb7 	bl	80004cc <lcd_clock>
    lcd_clock();
 800055e:	f7ff ffb5 	bl	80004cc <lcd_clock>
    lcd_clock();
 8000562:	f7ff ffb3 	bl	80004cc <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 fdfb 	bl	8002168 <HAL_GPIO_WritePin>
    lcd_clock();
 8000572:	f7ff ffab 	bl	80004cc <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	2104      	movs	r1, #4
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 fdf3 	bl	8002168 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	48000400 	.word	0x48000400

0800058c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d006      	beq.n	80005b8 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f001 fdd9 	bl	8002168 <HAL_GPIO_WritePin>
 80005b6:	e005      	b.n	80005c4 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2108      	movs	r1, #8
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f001 fdd2 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	095b      	lsrs	r3, r3, #5
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d005      	beq.n	80005de <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2110      	movs	r1, #16
 80005d6:	4847      	ldr	r0, [pc, #284]	; (80006f4 <lcd_write+0x168>)
 80005d8:	f001 fdc6 	bl	8002168 <HAL_GPIO_WritePin>
 80005dc:	e004      	b.n	80005e8 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2110      	movs	r1, #16
 80005e2:	4844      	ldr	r0, [pc, #272]	; (80006f4 <lcd_write+0x168>)
 80005e4:	f001 fdc0 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	099b      	lsrs	r3, r3, #6
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d005      	beq.n	8000602 <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2102      	movs	r1, #2
 80005fa:	483e      	ldr	r0, [pc, #248]	; (80006f4 <lcd_write+0x168>)
 80005fc:	f001 fdb4 	bl	8002168 <HAL_GPIO_WritePin>
 8000600:	e004      	b.n	800060c <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	483b      	ldr	r0, [pc, #236]	; (80006f4 <lcd_write+0x168>)
 8000608:	f001 fdae 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	09db      	lsrs	r3, r3, #7
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fda1 	bl	8002168 <HAL_GPIO_WritePin>
 8000626:	e005      	b.n	8000634 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f001 fd9a 	bl	8002168 <HAL_GPIO_WritePin>

    if(rs)
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d005      	beq.n	8000646 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2104      	movs	r1, #4
 800063e:	482d      	ldr	r0, [pc, #180]	; (80006f4 <lcd_write+0x168>)
 8000640:	f001 fd92 	bl	8002168 <HAL_GPIO_WritePin>
 8000644:	e004      	b.n	8000650 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2104      	movs	r1, #4
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <lcd_write+0x168>)
 800064c:	f001 fd8c 	bl	8002168 <HAL_GPIO_WritePin>

    lcd_clock();
 8000650:	f7ff ff3c 	bl	80004cc <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f001 fd7f 	bl	8002168 <HAL_GPIO_WritePin>
 800066a:	e005      	b.n	8000678 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2108      	movs	r1, #8
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f001 fd78 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d005      	beq.n	8000692 <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	481a      	ldr	r0, [pc, #104]	; (80006f4 <lcd_write+0x168>)
 800068c:	f001 fd6c 	bl	8002168 <HAL_GPIO_WritePin>
 8000690:	e004      	b.n	800069c <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2110      	movs	r1, #16
 8000696:	4817      	ldr	r0, [pc, #92]	; (80006f4 <lcd_write+0x168>)
 8000698:	f001 fd66 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d005      	beq.n	80006b6 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2102      	movs	r1, #2
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <lcd_write+0x168>)
 80006b0:	f001 fd5a 	bl	8002168 <HAL_GPIO_WritePin>
 80006b4:	e004      	b.n	80006c0 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2102      	movs	r1, #2
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <lcd_write+0x168>)
 80006bc:	f001 fd54 	bl	8002168 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2110      	movs	r1, #16
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f001 fd47 	bl	8002168 <HAL_GPIO_WritePin>
 80006da:	e005      	b.n	80006e8 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fd40 	bl	8002168 <HAL_GPIO_WritePin>

    lcd_clock();
 80006e8:	f7ff fef0 	bl	80004cc <lcd_clock>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	48000400 	.word	0x48000400

080006f8 <lcd_display_settings>:
    _lcd_char = 0;
    _lcd_line = 0;
}

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b25a      	sxtb	r2, r3
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b25b      	sxtb	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <lcd_write>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1c 	bl	800058c <lcd_write>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e055      	b.n	8000816 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <lcd_print+0xd0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d01c      	beq.n	80007ac <lcd_print+0x50>
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0a      	cmp	r3, #10
 800077c:	d116      	bne.n	80007ac <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <lcd_print+0xd4>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <lcd_print+0xd0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d242      	bcs.n	8000810 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <lcd_print+0xd8>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <lcd_print+0xd4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	1c59      	adds	r1, r3, #1
 8000794:	b2c8      	uxtb	r0, r1
 8000796:	4926      	ldr	r1, [pc, #152]	; (8000830 <lcd_print+0xd4>)
 8000798:	7008      	strb	r0, [r1, #0]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ffcb 	bl	800073a <lcd_display_address>
                _lcd_char = 0;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <lcd_print+0xdc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007aa:	e031      	b.n	8000810 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <lcd_print+0xe0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d01b      	beq.n	80007ec <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <lcd_print+0xdc>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <lcd_print+0xe0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d115      	bne.n	80007ec <lcd_print+0x90>
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <lcd_print+0xd4>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <lcd_print+0xd0>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d20f      	bcs.n	80007ec <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <lcd_print+0xd8>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <lcd_print+0xd4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	1c59      	adds	r1, r3, #1
 80007d6:	b2c8      	uxtb	r0, r1
 80007d8:	4915      	ldr	r1, [pc, #84]	; (8000830 <lcd_print+0xd4>)
 80007da:	7008      	strb	r0, [r1, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ffaa 	bl	800073a <lcd_display_address>
                    _lcd_char = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <lcd_print+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fec8 	bl	800058c <lcd_write>
            if(lcd_chars) _lcd_char++;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <lcd_print+0xe0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <lcd_print+0xb4>
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <lcd_print+0xdc>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <lcd_print+0xdc>)
 800080e:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1a3      	bne.n	800076a <lcd_print+0xe>
        }
    }
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000002d 	.word	0x2000002d
 8000830:	20000035 	.word	0x20000035
 8000834:	20000030 	.word	0x20000030
 8000838:	20000034 	.word	0x20000034
 800083c:	2000002c 	.word	0x2000002c

08000840 <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a32      	ldr	r2, [pc, #200]	; (8000914 <writeIntegerToLCD+0xd4>)
 800084c:	fb82 1203 	smull	r1, r2, r2, r3
 8000850:	1192      	asrs	r2, r2, #6
 8000852:	17db      	asrs	r3, r3, #31
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3330      	adds	r3, #48	; 0x30
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe93 	bl	800058c <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <writeIntegerToLCD+0xd8>)
 800086a:	fb03 f202 	mul.w	r2, r3, r2
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	4a2a      	ldr	r2, [pc, #168]	; (800091c <writeIntegerToLCD+0xdc>)
 8000874:	fb82 1203 	smull	r1, r2, r2, r3
 8000878:	1152      	asrs	r2, r2, #5
 800087a:	17db      	asrs	r3, r3, #31
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	3330      	adds	r3, #48	; 0x30
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe7f 	bl	800058c <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <writeIntegerToLCD+0xd8>)
 8000892:	fb03 f202 	mul.w	r2, r3, r2
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	441a      	add	r2, r3
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80008a0:	fb01 f303 	mul.w	r3, r1, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <writeIntegerToLCD+0xe0>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	1092      	asrs	r2, r2, #2
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	3330      	adds	r3, #48	; 0x30
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe65 	bl	800058c <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	461a      	mov	r2, r3
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	4619      	mov	r1, r3
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	4419      	add	r1, r3
 80008d6:	00c9      	lsls	r1, r1, #3
 80008d8:	1acb      	subs	r3, r1, r3
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	7b7b      	ldrb	r3, [r7, #13]
 80008ec:	4619      	mov	r1, r3
 80008ee:	0149      	lsls	r1, r1, #5
 80008f0:	1ac9      	subs	r1, r1, r3
 80008f2:	0089      	lsls	r1, r1, #2
 80008f4:	1acb      	subs	r3, r1, r3
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4413      	add	r3, r2
 80008fc:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 80008fe:	7b3b      	ldrb	r3, [r7, #12]
 8000900:	3330      	adds	r3, #48	; 0x30
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe40 	bl	800058c <lcd_write>
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	10624dd3 	.word	0x10624dd3
 8000918:	fffffc18 	.word	0xfffffc18
 800091c:	51eb851f 	.word	0x51eb851f
 8000920:	66666667 	.word	0x66666667

08000924 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	011a      	lsls	r2, r3, #4
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	dc0a      	bgt.n	800095a <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800094c:	b25b      	sxtb	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe1a 	bl	800058c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8000958:	e059      	b.n	8000a0e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	dd17      	ble.n	8000990 <moveToXY+0x6c>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b1f      	cmp	r3, #31
 8000964:	dc14      	bgt.n	8000990 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	425a      	negs	r2, r3
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	f002 020f 	and.w	r2, r2, #15
 8000972:	bf58      	it	pl
 8000974:	4253      	negpl	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	3340      	adds	r3, #64	; 0x40
 800097a:	b2db      	uxtb	r3, r3
 800097c:	b25b      	sxtb	r3, r3
 800097e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000982:	b25b      	sxtb	r3, r3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fdff 	bl	800058c <lcd_write>
 800098e:	e03e      	b.n	8000a0e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b28      	cmp	r3, #40	; 0x28
 8000994:	dd1b      	ble.n	80009ce <moveToXY+0xaa>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b3b      	cmp	r3, #59	; 0x3b
 800099a:	dc18      	bgt.n	80009ce <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <moveToXY+0xf4>)
 80009a0:	fb83 1302 	smull	r1, r3, r3, r2
 80009a4:	1119      	asrs	r1, r3, #4
 80009a6:	17d3      	asrs	r3, r2, #31
 80009a8:	1ac9      	subs	r1, r1, r3
 80009aa:	460b      	mov	r3, r1
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	1ad1      	subs	r1, r2, r3
 80009b4:	b2cb      	uxtb	r3, r1
 80009b6:	3314      	adds	r3, #20
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fde0 	bl	800058c <lcd_write>
 80009cc:	e01f      	b.n	8000a0e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b13      	cmp	r3, #19
 80009d2:	dd1c      	ble.n	8000a0e <moveToXY+0xea>
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b27      	cmp	r3, #39	; 0x27
 80009d8:	dc19      	bgt.n	8000a0e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <moveToXY+0xf8>)
 80009de:	fb83 1302 	smull	r1, r3, r3, r2
 80009e2:	4413      	add	r3, r2
 80009e4:	1159      	asrs	r1, r3, #5
 80009e6:	17d3      	asrs	r3, r2, #31
 80009e8:	1ac9      	subs	r1, r1, r3
 80009ea:	460b      	mov	r3, r1
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	1a5b      	subs	r3, r3, r1
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	1ad1      	subs	r1, r2, r3
 80009f4:	b2cb      	uxtb	r3, r1
 80009f6:	3354      	adds	r3, #84	; 0x54
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fdc0 	bl	800058c <lcd_write>
}
 8000a0c:	e7ff      	b.n	8000a0e <moveToXY+0xea>
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	66666667 	.word	0x66666667
 8000a1c:	88888889 	.word	0x88888889

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 ff3f 	bl	80018a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f84e 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 fa18 	bl	8000e60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000a30:	f000 f8ac 	bl	8000b8c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000a34:	f000 f8e2 	bl	8000bfc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000a38:	f000 f920 	bl	8000c7c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000a3c:	f000 f944 	bl	8000cc8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000a40:	f000 f980 	bl	8000d44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a44:	f000 f9ae 	bl	8000da4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a48:	f000 f9dc 	bl	8000e04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a4c:	f004 faec 	bl	8005028 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <main+0x78>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <main+0x7c>)
 8000a56:	f004 fb31 	bl	80050bc <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <main+0x80>)
 8000a5e:	6013      	str	r3, [r2, #0]

  /* creation of led_verde */
  led_verdeHandle = osThreadNew(Start_led_verde, NULL, &led_verde_attributes);
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <main+0x84>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <main+0x88>)
 8000a66:	f004 fb29 	bl	80050bc <osThreadNew>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <main+0x8c>)
 8000a6e:	6013      	str	r3, [r2, #0]

  /* creation of led_amarillo */
  led_amarilloHandle = osThreadNew(Start_led_amarillo, NULL, &led_amarillo_attributes);
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <main+0x90>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <main+0x94>)
 8000a76:	f004 fb21 	bl	80050bc <osThreadNew>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <main+0x98>)
 8000a7e:	6013      	str	r3, [r2, #0]

  /* creation of LCDTareaA */
  LCDTareaAHandle = osThreadNew(StartLCD_TareaA, NULL, &LCDTareaA_attributes);
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <main+0x9c>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <main+0xa0>)
 8000a86:	f004 fb19 	bl	80050bc <osThreadNew>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <main+0xa4>)
 8000a8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a90:	f004 faee 	bl	8005070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x74>
 8000a96:	bf00      	nop
 8000a98:	08007bb0 	.word	0x08007bb0
 8000a9c:	08001169 	.word	0x08001169
 8000aa0:	20000788 	.word	0x20000788
 8000aa4:	08007bd4 	.word	0x08007bd4
 8000aa8:	08001179 	.word	0x08001179
 8000aac:	2000078c 	.word	0x2000078c
 8000ab0:	08007bf8 	.word	0x08007bf8
 8000ab4:	080011b1 	.word	0x080011b1
 8000ab8:	20000790 	.word	0x20000790
 8000abc:	08007c1c 	.word	0x08007c1c
 8000ac0:	080011e9 	.word	0x080011e9
 8000ac4:	20000794 	.word	0x20000794

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b096      	sub	sp, #88	; 0x58
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2244      	movs	r2, #68	; 0x44
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 fff8 	bl	8007acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aee:	f001 fe0f 	bl	8002710 <HAL_PWREx_ControlVoltageScaling>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af8:	f000 fb96 	bl	8001228 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000afc:	f001 fdea 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <SystemClock_Config+0xc0>)
 8000b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemClock_Config+0xc0>)
 8000b08:	f023 0318 	bic.w	r3, r3, #24
 8000b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b10:	2314      	movs	r3, #20
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b20:	2360      	movs	r3, #96	; 0x60
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b30:	2328      	movs	r3, #40	; 0x28
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b34:	2307      	movs	r3, #7
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 ff05 	bl	8002954 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b50:	f000 fb6a 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
 8000b56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 facd 	bl	800310c <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b78:	f000 fb56 	bl	8001228 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b7c:	f002 ffd4 	bl	8003b28 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b80:	bf00      	nop
 8000b82:	3758      	adds	r7, #88	; 0x58
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_DFSDM1_Init+0x6c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_DFSDM1_Init+0x68>)
 8000be2:	f001 f80b 	bl	8001bfc <HAL_DFSDM_ChannelInit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000bec:	f000 fb1c 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	40016020 	.word	0x40016020

08000bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_I2C2_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <MX_I2C2_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c38:	f001 fad1 	bl	80021de <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 faf1 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c4a:	f001 fb63 	bl	8002314 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 fae8 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_I2C2_Init+0x74>)
 8000c5c:	f001 fba5 	bl	80023aa <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 fadf 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000070 	.word	0x20000070
 8000c74:	40005800 	.word	0x40005800
 8000c78:	10909cec 	.word	0x10909cec

08000c7c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <MX_QUADSPI_Init+0x48>)
 8000c84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000c9a:	2217      	movs	r2, #23
 8000c9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_QUADSPI_Init+0x44>)
 8000cac:	f001 fd96 	bl	80027dc <HAL_QSPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cb6:	f000 fab7 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000c4 	.word	0x200000c4
 8000cc4:	a0001000 	.word	0xa0001000

08000cc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <MX_SPI3_Init+0x78>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000ce2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ce6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d16:	2207      	movs	r2, #7
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_SPI3_Init+0x74>)
 8000d28:	f003 f8e0 	bl	8003eec <HAL_SPI_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 fa79 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000108 	.word	0x20000108
 8000d40:	40003c00 	.word	0x40003c00

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_USART1_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x58>)
 8000d88:	f003 f953 	bl	8004032 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 fa49 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000016c 	.word	0x2000016c
 8000da0:	40013800 	.word	0x40013800

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_USART3_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART3_UART_Init+0x58>)
 8000de8:	f003 f923 	bl	8004032 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 fa19 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001f4 	.word	0x200001f4
 8000e00:	40004800 	.word	0x40004800

08000e04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2206      	movs	r2, #6
 8000e14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	f001 fafb 	bl	8002442 <HAL_PCD_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 f9e9 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000027c 	.word	0x2000027c

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	4bb7      	ldr	r3, [pc, #732]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4ab6      	ldr	r2, [pc, #728]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4bb4      	ldr	r3, [pc, #720]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4bb1      	ldr	r3, [pc, #708]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4ab0      	ldr	r2, [pc, #704]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4bae      	ldr	r3, [pc, #696]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4bab      	ldr	r3, [pc, #684]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4aaa      	ldr	r2, [pc, #680]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4ba5      	ldr	r3, [pc, #660]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4aa4      	ldr	r2, [pc, #656]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4ba2      	ldr	r3, [pc, #648]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b9f      	ldr	r3, [pc, #636]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a9e      	ldr	r2, [pc, #632]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <MX_GPIO_Init+0x2f4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ef4:	4898      	ldr	r0, [pc, #608]	; (8001158 <MX_GPIO_Init+0x2f8>)
 8000ef6:	f001 f937 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000efa:	2200      	movs	r2, #0
 8000efc:	f248 111c 	movw	r1, #33052	; 0x811c
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f001 f930 	bl	8002168 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f24f 0116 	movw	r1, #61462	; 0xf016
 8000f0e:	4893      	ldr	r0, [pc, #588]	; (800115c <MX_GPIO_Init+0x2fc>)
 8000f10:	f001 f92a 	bl	8002168 <HAL_GPIO_WritePin>
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f1a:	4891      	ldr	r0, [pc, #580]	; (8001160 <MX_GPIO_Init+0x300>)
 8000f1c:	f001 f924 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	488e      	ldr	r0, [pc, #568]	; (8001160 <MX_GPIO_Init+0x300>)
 8000f28:	f001 f91e 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|amarillo_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f32:	488c      	ldr	r0, [pc, #560]	; (8001164 <MX_GPIO_Init+0x304>)
 8000f34:	f001 f918 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4887      	ldr	r0, [pc, #540]	; (800115c <MX_GPIO_Init+0x2fc>)
 8000f3e:	f001 f913 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2101      	movs	r1, #1
 8000f46:	4884      	ldr	r0, [pc, #528]	; (8001158 <MX_GPIO_Init+0x2f8>)
 8000f48:	f001 f90e 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f4c:	f240 1315 	movw	r3, #277	; 0x115
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	487c      	ldr	r0, [pc, #496]	; (8001158 <MX_GPIO_Init+0x2f8>)
 8000f66:	f000 ff55 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f6a:	236a      	movs	r3, #106	; 0x6a
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4876      	ldr	r0, [pc, #472]	; (8001158 <MX_GPIO_Init+0x2f8>)
 8000f80:	f000 ff48 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4872      	ldr	r0, [pc, #456]	; (8001164 <MX_GPIO_Init+0x304>)
 8000f9c:	f000 ff3a 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fa0:	233f      	movs	r3, #63	; 0x3f
 8000fa2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	486c      	ldr	r0, [pc, #432]	; (8001164 <MX_GPIO_Init+0x304>)
 8000fb4:	f000 ff2e 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f000 ff1d 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000fda:	f248 131c 	movw	r3, #33052	; 0x811c
 8000fde:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f000 ff0d 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ffa:	23e0      	movs	r3, #224	; 0xe0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f000 fefc 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001020:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	484a      	ldr	r0, [pc, #296]	; (800115c <MX_GPIO_Init+0x2fc>)
 8001032:	f000 feef 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           verde_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001036:	f24f 0336 	movw	r3, #61494	; 0xf036
 800103a:	617b      	str	r3, [r7, #20]
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4843      	ldr	r0, [pc, #268]	; (800115c <MX_GPIO_Init+0x2fc>)
 8001050:	f000 fee0 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001054:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001058:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	483d      	ldr	r0, [pc, #244]	; (8001160 <MX_GPIO_Init+0x300>)
 800106c:	f000 fed2 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001070:	f243 0381 	movw	r3, #12417	; 0x3081
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4835      	ldr	r0, [pc, #212]	; (8001160 <MX_GPIO_Init+0x300>)
 800108a:	f000 fec3 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin amarillo_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|amarillo_Pin;
 800108e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	482f      	ldr	r0, [pc, #188]	; (8001164 <MX_GPIO_Init+0x304>)
 80010a8:	f000 feb4 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <MX_GPIO_Init+0x304>)
 80010c4:	f000 fea6 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d8:	2305      	movs	r3, #5
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <MX_GPIO_Init+0x300>)
 80010e4:	f000 fe96 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80010e8:	2378      	movs	r3, #120	; 0x78
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f8:	2307      	movs	r3, #7
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <MX_GPIO_Init+0x300>)
 8001104:	f000 fe86 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111a:	2304      	movs	r3, #4
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_GPIO_Init+0x2fc>)
 8001126:	f000 fe75 	bl	8001e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2105      	movs	r1, #5
 800112e:	2017      	movs	r0, #23
 8001130:	f000 fd2d 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001134:	2017      	movs	r0, #23
 8001136:	f000 fd46 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2105      	movs	r1, #5
 800113e:	2028      	movs	r0, #40	; 0x28
 8001140:	f000 fd25 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f000 fd3e 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	48001000 	.word	0x48001000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000c00 	.word	0x48000c00
 8001164:	48000800 	.word	0x48000800

08001168 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f004 f835 	bl	80051e0 <osDelay>
 8001176:	e7fb      	b.n	8001170 <StartDefaultTask+0x8>

08001178 <Start_led_verde>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_verde */
  /* Infinite loop */
  for(;;)
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <Start_led_verde+0x34>)
 8001188:	f000 ffee 	bl	8002168 <HAL_GPIO_WritePin>
    osDelay(300);
 800118c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001190:	f004 f826 	bl	80051e0 <osDelay>
    HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,0);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <Start_led_verde+0x34>)
 800119c:	f000 ffe4 	bl	8002168 <HAL_GPIO_WritePin>
        osDelay(300);
 80011a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011a4:	f004 f81c 	bl	80051e0 <osDelay>
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 80011a8:	e7ea      	b.n	8001180 <Start_led_verde+0x8>
 80011aa:	bf00      	nop
 80011ac:	48000400 	.word	0x48000400

080011b0 <Start_led_amarillo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_amarillo */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <Start_led_amarillo+0x34>)
 80011c0:	f000 ffd2 	bl	8002168 <HAL_GPIO_WritePin>
	      osDelay(300);
 80011c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011c8:	f004 f80a 	bl	80051e0 <osDelay>
	      HAL_GPIO_WritePin(amarillo_GPIO_Port,amarillo_Pin,0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <Start_led_amarillo+0x34>)
 80011d4:	f000 ffc8 	bl	8002168 <HAL_GPIO_WritePin>
	          osDelay(300);
 80011d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011dc:	f004 f800 	bl	80051e0 <osDelay>
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 80011e0:	e7ea      	b.n	80011b8 <Start_led_amarillo+0x8>
 80011e2:	bf00      	nop
 80011e4:	48000800 	.word	0x48000800

080011e8 <StartLCD_TareaA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_TareaA */
void StartLCD_TareaA(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_TareaA */
  /* Infinite loop */
	int contador = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	lcd_reset();
 80011f4:	f7ff f982 	bl	80004fc <lcd_reset>
	lcd_display_settings(1,0,0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fa7b 	bl	80006f8 <lcd_display_settings>
  for(;;)
  {
	  moveToXY(0, 0);
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fb8d 	bl	8000924 <moveToXY>
	  lcd_print("Tarea A: ");
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <StartLCD_TareaA+0x3c>)
 800120c:	f7ff faa6 	bl	800075c <lcd_print>
	  writeIntegerToLCD(contador++);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60fa      	str	r2, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb12 	bl	8000840 <writeIntegerToLCD>

    osDelay(200);
 800121c:	20c8      	movs	r0, #200	; 0xc8
 800121e:	f003 ffdf 	bl	80051e0 <osDelay>
	  moveToXY(0, 0);
 8001222:	e7ee      	b.n	8001202 <StartLCD_TareaA+0x1a>
 8001224:	08007b8c 	.word	0x08007b8c

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_MspInit+0x4c>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_MspInit+0x4c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6613      	str	r3, [r2, #96]	; 0x60
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_MspInit+0x4c>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_MspInit+0x4c>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	; 0x58
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_MspInit+0x4c>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	210f      	movs	r1, #15
 800126e:	f06f 0001 	mvn.w	r0, #1
 8001272:	f000 fc8c 	bl	8001b8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	; 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fc11 	bl	8007acc <memset>
  if(DFSDM1_Init == 0)
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d142      	bne.n	8001338 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f946 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012ce:	f7ff ffab 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001302:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131c:	2306      	movs	r3, #6
 800131e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800132a:	f000 fd73 	bl	8001e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a02      	ldr	r2, [pc, #8]	; (8001340 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001336:	6013      	str	r3, [r2, #0]
  }

}
 8001338:	bf00      	nop
 800133a:	37b0      	adds	r7, #176	; 0xb0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000798 	.word	0x20000798
 8001344:	40021000 	.word	0x40021000
 8001348:	48001000 	.word	0x48001000

0800134c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ac      	sub	sp, #176	; 0xb0
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2288      	movs	r2, #136	; 0x88
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 fbad 	bl	8007acc <memset>
  if(hi2c->Instance==I2C2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <HAL_I2C_MspInit+0xb0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d13b      	bne.n	80013f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f002 f8e3 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001394:	f7ff ff48 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013ca:	2304      	movs	r3, #4
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d4:	4619      	mov	r1, r3
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_I2C_MspInit+0xb8>)
 80013d8:	f000 fd1c 	bl	8001e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 80013e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e6:	6593      	str	r3, [r2, #88]	; 0x58
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_I2C_MspInit+0xb4>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	37b0      	adds	r7, #176	; 0xb0
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005800 	.word	0x40005800
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400

08001408 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_QSPI_MspInit+0x7c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d128      	bne.n	800147c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 800142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6513      	str	r3, [r2, #80]	; 0x50
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 8001438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_QSPI_MspInit+0x80>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800145a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800145e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800146c:	230a      	movs	r3, #10
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_QSPI_MspInit+0x84>)
 8001478:	f000 fccc 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	a0001000 	.word	0xa0001000
 8001488:	40021000 	.word	0x40021000
 800148c:	48001000 	.word	0x48001000

08001490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_SPI_MspInit+0x7c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f4:	2306      	movs	r3, #6
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_SPI_MspInit+0x84>)
 8001500:	f000 fc88 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40003c00 	.word	0x40003c00
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0ae      	sub	sp, #184	; 0xb8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2288      	movs	r2, #136	; 0x88
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fac7 	bl	8007acc <memset>
  if(huart->Instance==USART1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a42      	ldr	r2, [pc, #264]	; (800164c <HAL_UART_MspInit+0x134>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13b      	bne.n	80015c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800154c:	2300      	movs	r3, #0
 800154e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fffd 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001560:	f7ff fe62 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_UART_MspInit+0x138>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	4a39      	ldr	r2, [pc, #228]	; (8001650 <HAL_UART_MspInit+0x138>)
 800156a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156e:	6613      	str	r3, [r2, #96]	; 0x60
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_UART_MspInit+0x138>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_UART_MspInit+0x138>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a33      	ldr	r2, [pc, #204]	; (8001650 <HAL_UART_MspInit+0x138>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_UART_MspInit+0x138>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ac:	2307      	movs	r3, #7
 80015ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4826      	ldr	r0, [pc, #152]	; (8001654 <HAL_UART_MspInit+0x13c>)
 80015ba:	f000 fc2b 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015be:	e040      	b.n	8001642 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_UART_MspInit+0x140>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d13b      	bne.n	8001642 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ca:	2304      	movs	r3, #4
 80015cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 ffbc 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015e2:	f7ff fe21 	bl	8001228 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_UART_MspInit+0x138>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x138>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_UART_MspInit+0x138>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_MspInit+0x138>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x138>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x138>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001630:	2307      	movs	r3, #7
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <HAL_UART_MspInit+0x144>)
 800163e:	f000 fbe9 	bl	8001e14 <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	37b8      	adds	r7, #184	; 0xb8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40013800 	.word	0x40013800
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400
 8001658:	40004800 	.word	0x40004800
 800165c:	48000c00 	.word	0x48000c00

08001660 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0ac      	sub	sp, #176	; 0xb0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2288      	movs	r2, #136	; 0x88
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f006 fa23 	bl	8007acc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168e:	d17c      	bne.n	800178a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001694:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001696:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800169a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016a6:	2318      	movs	r3, #24
 80016a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016aa:	2307      	movs	r3, #7
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 ff47 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016cc:	f7ff fdac 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_PCD_MspInit+0x134>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <HAL_PCD_MspInit+0x134>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_PCD_MspInit+0x134>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f000 fb85 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800170a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800170e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001724:	230a      	movs	r3, #10
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f000 fb6e 	bl	8001e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800173e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_PCD_MspInit+0x134>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_PCD_MspInit+0x134>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d114      	bne.n	8001786 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_PCD_MspInit+0x134>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001774:	f001 f822 	bl	80027bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_PCD_MspInit+0x134>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001784:	e001      	b.n	800178a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001786:	f001 f819 	bl	80027bc <HAL_PWREx_EnableVddUSB>
}
 800178a:	bf00      	nop
 800178c:	37b0      	adds	r7, #176	; 0xb0
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f8c2 	bl	8001950 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017cc:	f005 f916 	bl	80069fc <xTaskGetSchedulerState>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d001      	beq.n	80017da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017d6:	f005 feff 	bl	80075d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 fcd8 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80017e8:	2040      	movs	r0, #64	; 0x40
 80017ea:	f000 fcd5 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80017ee:	2080      	movs	r0, #128	; 0x80
 80017f0:	f000 fcd2 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80017f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017f8:	f000 fcce 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001804:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001808:	f000 fcc6 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800180c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001810:	f000 fcc2 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001814:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001818:	f000 fcbe 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800181c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001820:	f000 fcba 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001828:	f000 fcb6 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f006 f92b 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001886:	f7ff f8cb 	bl	8000a20 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800188c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001898:	08007c98 	.word	0x08007c98
  ldr r2, =_sbss
 800189c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018a0:	200020cc 	.word	0x200020cc

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>

080018a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f961 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f000 f80e 	bl	80018d8 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e001      	b.n	80018cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c8:	f7ff fcb4 	bl	8001234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_InitTick+0x6c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d023      	beq.n	8001934 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_InitTick+0x70>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_InitTick+0x6c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f96d 	bl	8001be2 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d809      	bhi.n	8001928 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f937 	bl	8001b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_InitTick+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e007      	b.n	8001938 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e004      	b.n	8001938 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e001      	b.n	8001938 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	2000079c 	.word	0x2000079c

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000079c 	.word	0x2000079c

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff ffee 	bl	8001978 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffde 	bl	8001978 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff8e 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff29 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff3e 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff8e 	bl	8001acc <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5d 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff31 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0ac      	b.n	8001d68 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f8b2 	bl	8001d7c <DFSDM_GetChannelFromInstance>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a55      	ldr	r2, [pc, #340]	; (8001d70 <HAL_DFSDM_ChannelInit+0x174>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e09f      	b.n	8001d68 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fb2b 	bl	8001284 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <HAL_DFSDM_ChannelInit+0x178>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_DFSDM_ChannelInit+0x178>)
 8001c36:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001c38:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <HAL_DFSDM_ChannelInit+0x178>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d125      	bne.n	8001c8c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c4a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4948      	ldr	r1, [pc, #288]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c60:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001c64:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001c6e:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	041b      	lsls	r3, r3, #16
 8001c7a:	493f      	ldr	r1, [pc, #252]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <HAL_DFSDM_ChannelInit+0x17c>)
 8001c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c8a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001c9a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001caa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cb0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 020f 	bic.w	r2, r2, #15
 8001cc8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001cf0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 0207 	and.w	r2, r2, #7
 8001d1c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d48:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f810 	bl	8001d7c <DFSDM_GetChannelFromInstance>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4904      	ldr	r1, [pc, #16]	; (8001d70 <HAL_DFSDM_ChannelInit+0x174>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200007a4 	.word	0x200007a4
 8001d74:	200007a0 	.word	0x200007a0
 8001d78:	40016000 	.word	0x40016000

08001d7c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d102      	bne.n	8001d92 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e02b      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <DFSDM_GetChannelFromInstance+0x80>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d102      	bne.n	8001da0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e024      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <DFSDM_GetChannelFromInstance+0x84>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d102      	bne.n	8001dae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e01d      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <DFSDM_GetChannelFromInstance+0x88>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d102      	bne.n	8001dbc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e016      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <DFSDM_GetChannelFromInstance+0x8c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e00f      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <DFSDM_GetChannelFromInstance+0x90>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d102      	bne.n	8001dd8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e008      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <DFSDM_GetChannelFromInstance+0x94>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001de0:	2307      	movs	r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e001      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001de6:	2303      	movs	r3, #3
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40016000 	.word	0x40016000
 8001dfc:	40016020 	.word	0x40016020
 8001e00:	40016040 	.word	0x40016040
 8001e04:	40016080 	.word	0x40016080
 8001e08:	400160a0 	.word	0x400160a0
 8001e0c:	400160c0 	.word	0x400160c0
 8001e10:	400160e0 	.word	0x400160e0

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e17f      	b.n	8002124 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8171 	beq.w	800211e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x40>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d118      	bne.n	8001ef4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80ac 	beq.w	800211e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_GPIO_Init+0x330>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fca:	4a5e      	ldr	r2, [pc, #376]	; (8002144 <HAL_GPIO_Init+0x330>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_GPIO_Init+0x330>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fde:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_GPIO_Init+0x334>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x242>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x338>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x23e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x33c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x23a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x340>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x236>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x344>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x232>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x348>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x22e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x34c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x22a>
 800203a:	2306      	movs	r3, #6
 800203c:	e00c      	b.n	8002058 <HAL_GPIO_Init+0x244>
 800203e:	2307      	movs	r3, #7
 8002040:	e00a      	b.n	8002058 <HAL_GPIO_Init+0x244>
 8002042:	2305      	movs	r3, #5
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x244>
 8002046:	2304      	movs	r3, #4
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x244>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x244>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x244>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x244>
 8002056:	2300      	movs	r3, #0
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002068:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x334>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_GPIO_Init+0x350>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <HAL_GPIO_Init+0x350>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_GPIO_Init+0x350>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_GPIO_Init+0x350>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f ae78 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	48001000 	.word	0x48001000
 800215c:	48001400 	.word	0x48001400
 8002160:	48001800 	.word	0x48001800
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002184:	e002      	b.n	800218c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f806 	bl	80021c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e08d      	b.n	800230c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff f8a1 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2224      	movs	r2, #36	; 0x24
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	e006      	b.n	8002266 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002264:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d108      	bne.n	8002280 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	e007      	b.n	8002290 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800229e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69d9      	ldr	r1, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d138      	bne.n	800239c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002334:	2302      	movs	r3, #2
 8002336:	e032      	b.n	800239e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6819      	ldr	r1, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d139      	bne.n	8002434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e033      	b.n	8002436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2224      	movs	r2, #36	; 0x24
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002444:	b08f      	sub	sp, #60	; 0x3c
 8002446:	af0a      	add	r7, sp, #40	; 0x28
 8002448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e116      	b.n	8002682 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff f8f6 	bl	8001660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fb15 	bl	8004ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	687e      	ldr	r6, [r7, #4]
 80024a0:	466d      	mov	r5, sp
 80024a2:	f106 0410 	add.w	r4, r6, #16
 80024a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024b6:	1d33      	adds	r3, r6, #4
 80024b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	f002 fad5 	bl	8004a6a <USB_CoreInit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0d7      	b.n	8002682 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fb03 	bl	8004ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e04a      	b.n	800257a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	333d      	adds	r3, #61	; 0x3d
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	b298      	uxth	r0, r3
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3356      	adds	r3, #86	; 0x56
 8002520:	4602      	mov	r2, r0
 8002522:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3340      	adds	r3, #64	; 0x40
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3344      	adds	r3, #68	; 0x44
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3348      	adds	r3, #72	; 0x48
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334c      	adds	r3, #76	; 0x4c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3301      	adds	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3af      	bcc.n	80024e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e044      	b.n	8002614 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3b5      	bcc.n	800258a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	687e      	ldr	r6, [r7, #4]
 8002626:	466d      	mov	r5, sp
 8002628:	f106 0410 	add.w	r4, r6, #16
 800262c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002638:	e885 0003 	stmia.w	r5, {r0, r1}
 800263c:	1d33      	adds	r3, r6, #4
 800263e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f002 fa9b 	bl	8004b7c <USB_DevInit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e014      	b.n	8002682 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f80a 	bl	800268a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fc3d 	bl	8004efa <USB_DevDisconnect>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	f043 0303 	orr.w	r3, r3, #3
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000

080026f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_PWREx_GetVoltageRange+0x18>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40007000 	.word	0x40007000

08002710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271e:	d130      	bne.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272c:	d038      	beq.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2232      	movs	r2, #50	; 0x32
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002754:	e002      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b01      	subs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d102      	bne.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f2      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277c:	d110      	bne.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e00f      	b.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278e:	d007      	beq.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002798:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	20000000 	.word	0x20000000
 80027b8:	431bde83 	.word	0x431bde83

080027bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ca:	6053      	str	r3, [r2, #4]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff f8c8 	bl	8001978 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e063      	b.n	80028bc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fdfd 	bl	8001408 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800280e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f858 	bl	80028c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	3b01      	subs	r3, #1
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	2120      	movs	r1, #32
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f850 	bl	80028e4 <QSPI_WaitFlagStateUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d131      	bne.n	80028b2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6852      	ldr	r2, [r2, #4]
 8002860:	0611      	lsls	r1, r2, #24
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_QSPI_Init+0xe8>)
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6912      	ldr	r2, [r2, #16]
 800287e:	0411      	lsls	r1, r2, #16
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6952      	ldr	r2, [r2, #20]
 8002884:	4311      	orrs	r1, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6992      	ldr	r2, [r2, #24]
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	ffe0f8fe 	.word	0xffe0f8fe

080028c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028f4:	e01a      	b.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d016      	beq.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff f83b 	bl	8001978 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2204      	movs	r2, #4
 8002918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e00e      	b.n	800294a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d1d6      	bne.n	80028f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e3ca      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b97      	ldr	r3, [pc, #604]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002970:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80e4 	beq.w	8002b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_RCC_OscConfig+0x4a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f040 808b 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b01      	cmp	r3, #1
 800299a:	f040 8087 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299e:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_RCC_OscConfig+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3a2      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCC_OscConfig+0x7c>
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ce:	e005      	b.n	80029dc <HAL_RCC_OscConfig+0x88>
 80029d0:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d223      	bcs.n	8002a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd55 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e383      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	496d      	ldr	r1, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4968      	ldr	r1, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
 8002a26:	e025      	b.n	8002a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	f043 0308 	orr.w	r3, r3, #8
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4960      	ldr	r1, [pc, #384]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	495b      	ldr	r1, [pc, #364]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fd15 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e343      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a74:	f000 fc4a 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	4950      	ldr	r1, [pc, #320]	; (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x278>)
 8002a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe ff1d 	bl	80018d8 <HAL_InitTick>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d052      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	e327      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe ff5a 	bl	8001978 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac8:	f7fe ff56 	bl	8001978 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e310      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ada:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4931      	ldr	r1, [pc, #196]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	492c      	ldr	r1, [pc, #176]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e01a      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b26:	f7fe ff27 	bl	8001978 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2e:	f7fe ff23 	bl	8001978 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e2dd      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x1da>
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d074      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x21a>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d10e      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d064      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d160      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e2ba      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x24a>
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	e026      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba6:	d115      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x280>
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08007c40 	.word	0x08007c40
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a9f      	ldr	r2, [pc, #636]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a9c      	ldr	r2, [pc, #624]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fec0 	bl	8001978 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe febc 	bl	8001978 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e276      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0e:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2a8>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe feac 	bl	8001978 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fea8 	bl	8001978 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e262      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2d0>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d060      	beq.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x310>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d116      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x328>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e23f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4973      	ldr	r1, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	e040      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fe67 	bl	8001978 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fe63 	bl	8001978 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e21d      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	495f      	ldr	r1, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe43 	bl	8001978 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fe3f 	bl	8001978 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1f9      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d03c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe1e 	bl	8001978 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fe1a 	bl	8001978 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1d4      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3ec>
 8002d60:	e01b      	b.n	8002d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d68:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fe01 	bl	8001978 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fdfd 	bl	8001978 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1b7      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ef      	bne.n	8002d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80a6 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d118      	bne.n	8002e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dec:	f7fe fdc4 	bl	8001978 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fdc0 	bl	8001978 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e17a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4d8>
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2a:	e029      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d115      	bne.n	8002e60 <HAL_RCC_OscConfig+0x50c>
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	4a9b      	ldr	r2, [pc, #620]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e70:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a97      	ldr	r2, [pc, #604]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d016      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fd76 	bl	8001978 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fd72 	bl	8001978 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e12a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b8b      	ldr	r3, [pc, #556]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ed      	beq.n	8002e90 <HAL_RCC_OscConfig+0x53c>
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fd5f 	bl	8001978 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fd5b 	bl	8001978 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e113      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ed      	bne.n	8002ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80fe 	beq.w	80030fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	f040 80d0 	bne.w	80030a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f08:	4b72      	ldr	r3, [pc, #456]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d130      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d127      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d11f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	2a07      	cmp	r2, #7
 8002f4a:	bf14      	ite	ne
 8002f4c:	2201      	movne	r2, #1
 8002f4e:	2200      	moveq	r2, #0
 8002f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d06e      	beq.n	800305c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d069      	beq.n	8003058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ad      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe fce4 	bl	8001978 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fce0 	bl	8001978 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCC_OscConfig+0x784>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fec:	0212      	lsls	r2, r2, #8
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff4:	0852      	lsrs	r2, r2, #1
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0552      	lsls	r2, r2, #21
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0652      	lsls	r2, r2, #25
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300c:	0912      	lsrs	r2, r2, #4
 800300e:	0452      	lsls	r2, r2, #17
 8003010:	430a      	orrs	r2, r1
 8003012:	4930      	ldr	r1, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003030:	f7fe fca2 	bl	8001978 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe fc9e 	bl	8001978 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e058      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003056:	e050      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e04f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d148      	bne.n	80030fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003080:	f7fe fc7a 	bl	8001978 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fc76 	bl	8001978 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e030      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x734>
 80030a6:	e028      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fc5d 	bl	8001978 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fc59 	bl	8001978 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d905      	bls.n	80030dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ec      	bne.n	80030c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4905      	ldr	r1, [pc, #20]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x7b4>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
 80030f4:	e001      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	feeefffc 	.word	0xfeeefffc

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0e7      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4970      	ldr	r1, [pc, #448]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cf      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	429a      	cmp	r2, r3
 800316a:	d908      	bls.n	800317e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4960      	ldr	r1, [pc, #384]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04c      	beq.n	8003224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d121      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0a6      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4b54      	ldr	r3, [pc, #336]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	4b4e      	ldr	r3, [pc, #312]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e08e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e086      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4943      	ldr	r1, [pc, #268]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fbc0 	bl	8001978 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fbbc 	bl	8001978 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e06e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	492b      	ldr	r1, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d210      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 0207 	bic.w	r2, r3, #7
 8003268:	4923      	ldr	r1, [pc, #140]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e036      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4918      	ldr	r1, [pc, #96]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4910      	ldr	r1, [pc, #64]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c0:	f000 f824 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	490b      	ldr	r1, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1f4>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1fc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe faf7 	bl	80018d8 <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	08007c40 	.word	0x08007c40
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d121      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d11e      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003368:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d102      	bne.n	800338a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e004      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d101      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 8003392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d134      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
 80033b0:	e005      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 80033b4:	617b      	str	r3, [r7, #20]
      break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	617b      	str	r3, [r7, #20]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	617b      	str	r3, [r7, #20]
      break;
 80033c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	3301      	adds	r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0e5b      	lsrs	r3, r3, #25
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	3301      	adds	r3, #1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	08007c58 	.word	0x08007c58
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	08007c50 	.word	0x08007c50

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800346c:	f7ff ffda 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0adb      	lsrs	r3, r3, #11
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	08007c50 	.word	0x08007c50

08003494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f922 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
 80034b2:	e014      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034cc:	f7ff f912 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 80034d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e4:	d10b      	bne.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d919      	bls.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2ba0      	cmp	r3, #160	; 0xa0
 80034f0:	d902      	bls.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f2:	2302      	movs	r3, #2
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e013      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e010      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d902      	bls.n	800350a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003504:	2303      	movs	r3, #3
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e00a      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d102      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003510:	2302      	movs	r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e004      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d101      	bne.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800351c:	2301      	movs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0207 	bic.w	r2, r3, #7
 8003528:	4909      	ldr	r1, [pc, #36]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800355c:	2300      	movs	r3, #0
 800355e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2300      	movs	r3, #0
 8003562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	d041      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003578:	d02a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800357a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800357e:	d824      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800358a:	d81e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d010      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003596:	e018      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003598:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a4:	e015      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 facb 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b6:	e00c      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3320      	adds	r3, #32
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fbb6 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	74fb      	strb	r3, [r7, #19]
      break;
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e6:	4973      	ldr	r1, [pc, #460]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d041      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800360a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003628:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a61      	ldr	r2, [pc, #388]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa83 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb6e 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003668:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	494f      	ldr	r1, [pc, #316]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a0 	beq.w	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
 80036b8:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d4:	f7fe f950 	bl	8001978 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7fe f94c 	bl	8001978 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	74fb      	strb	r3, [r7, #19]
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ef      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d15c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01f      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	d019      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800374c:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe f90b 	bl	8001978 <HAL_GetTick>
 8003762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	e00b      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe f907 	bl	8001978 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d902      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	74fb      	strb	r3, [r7, #19]
            break;
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ec      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037aa:	e009      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c0:	7c7b      	ldrb	r3, [r7, #17]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c6:	4b9e      	ldr	r3, [pc, #632]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	4a9d      	ldr	r2, [pc, #628]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037de:	4b98      	ldr	r3, [pc, #608]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 0203 	bic.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	4994      	ldr	r1, [pc, #592]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003800:	4b8f      	ldr	r3, [pc, #572]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 020c 	bic.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	498c      	ldr	r1, [pc, #560]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003822:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4983      	ldr	r1, [pc, #524]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003844:	4b7e      	ldr	r3, [pc, #504]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	497b      	ldr	r1, [pc, #492]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003866:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	4972      	ldr	r1, [pc, #456]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003888:	4b6d      	ldr	r3, [pc, #436]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	496a      	ldr	r1, [pc, #424]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	4961      	ldr	r1, [pc, #388]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038cc:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	4959      	ldr	r1, [pc, #356]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	4950      	ldr	r1, [pc, #320]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003910:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	4948      	ldr	r1, [pc, #288]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003932:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	493f      	ldr	r1, [pc, #252]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d028      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	4937      	ldr	r1, [pc, #220]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003972:	d106      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003974:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800397e:	60d3      	str	r3, [r2, #12]
 8003980:	e011      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398a:	d10c      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f8d8 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	491f      	ldr	r1, [pc, #124]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039dc:	60d3      	str	r3, [r2, #12]
 80039de:	e011      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f8a9 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e014      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f877 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	4928      	ldr	r1, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f854 	bl	8003b48 <RCCEx_PLLSAI1_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	74bb      	strb	r3, [r7, #18]
 8003aae:	e011      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3320      	adds	r3, #32
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f935 	bl	8003d30 <RCCEx_PLLSAI2_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	490d      	ldr	r1, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000

08003b28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b32:	f043 0304 	orr.w	r3, r3, #4
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b56:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b62:	4b72      	ldr	r3, [pc, #456]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
       ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
       ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d047      	beq.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e044      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d018      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x86>
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d825      	bhi.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0x62>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d009      	beq.n	8003bbc <RCCEx_PLLSAI1_Config+0x74>
 8003ba8:	e020      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003baa:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e01a      	b.n	8003bf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bbc:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e013      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bce:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bda:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bea:	e006      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e004      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	430b      	orrs	r3, r1
 8003c18:	4944      	ldr	r1, [pc, #272]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d17d      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c24:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fea2 	bl	8001978 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c38:	f7fd fe9e 	bl	8001978 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4c:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ef      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d160      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c64:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	0211      	lsls	r1, r2, #8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	0912      	lsrs	r2, r2, #4
 8003c7c:	0452      	lsls	r2, r2, #17
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	492a      	ldr	r1, [pc, #168]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]
 8003c86:	e027      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d112      	bne.n	8003cb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	0211      	lsls	r1, r2, #8
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6912      	ldr	r2, [r2, #16]
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0552      	lsls	r2, r2, #21
 8003caa:	430a      	orrs	r2, r1
 8003cac:	491f      	ldr	r1, [pc, #124]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e011      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6952      	ldr	r2, [r2, #20]
 8003cca:	0852      	lsrs	r2, r2, #1
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0652      	lsls	r2, r2, #25
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	4916      	ldr	r1, [pc, #88]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fe48 	bl	8001978 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cec:	f7fd fe44 	bl	8001978 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4904      	ldr	r1, [pc, #16]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000

08003d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
       ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d047      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e044      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d018      	beq.n	8003db6 <RCCEx_PLLSAI2_Config+0x86>
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d825      	bhi.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d002      	beq.n	8003d92 <RCCEx_PLLSAI2_Config+0x62>
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d009      	beq.n	8003da4 <RCCEx_PLLSAI2_Config+0x74>
 8003d90:	e020      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d92:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11d      	bne.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da2:	e01a      	b.n	8003dda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d116      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e013      	b.n	8003dde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003db6:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dd2:	e006      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e004      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	4939      	ldr	r1, [pc, #228]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d167      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e18:	f7fd fdae 	bl	8001978 <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e1e:	e009      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e20:	f7fd fdaa 	bl	8001978 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
        break;
 8003e32:	e005      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e34:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ef      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d14a      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	0912      	lsrs	r2, r2, #4
 8003e64:	0452      	lsls	r2, r2, #17
 8003e66:	430a      	orrs	r2, r1
 8003e68:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	614b      	str	r3, [r1, #20]
 8003e6e:	e011      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6912      	ldr	r2, [r2, #16]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fd6a 	bl	8001978 <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ea6:	e009      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea8:	f7fd fd66 	bl	8001978 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eba:	e005      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0ef      	beq.n	8003ea8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e095      	b.n	800402a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0e:	d009      	beq.n	8003f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd faa6 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d902      	bls.n	8003f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0204 	and.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e040      	b.n	80040c6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fd fa5f 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fae1 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f826 	bl	80040d0 <UART_SetConfig>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e01b      	b.n	80040c6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb60 	bl	8004784 <UART_CheckIdleState>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d4:	b08a      	sub	sp, #40	; 0x28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4ba4      	ldr	r3, [pc, #656]	; (8004390 <UART_SetConfig+0x2c0>)
 8004100:	4013      	ands	r3, r2
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004108:	430b      	orrs	r3, r1
 800410a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a99      	ldr	r2, [pc, #612]	; (8004394 <UART_SetConfig+0x2c4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	4313      	orrs	r3, r2
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	430a      	orrs	r2, r1
 800414e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a90      	ldr	r2, [pc, #576]	; (8004398 <UART_SetConfig+0x2c8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d126      	bne.n	80041a8 <UART_SetConfig+0xd8>
 800415a:	4b90      	ldr	r3, [pc, #576]	; (800439c <UART_SetConfig+0x2cc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b03      	cmp	r3, #3
 8004166:	d81b      	bhi.n	80041a0 <UART_SetConfig+0xd0>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0xa0>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004191 	.word	0x08004191
 8004178:	08004189 	.word	0x08004189
 800417c:	08004199 	.word	0x08004199
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e116      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004188:	2302      	movs	r3, #2
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e112      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004190:	2304      	movs	r3, #4
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e10e      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004198:	2308      	movs	r3, #8
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e10a      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80041a0:	2310      	movs	r3, #16
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e106      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <UART_SetConfig+0x2d0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d138      	bne.n	8004224 <UART_SetConfig+0x154>
 80041b2:	4b7a      	ldr	r3, [pc, #488]	; (800439c <UART_SetConfig+0x2cc>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	d82d      	bhi.n	800421c <UART_SetConfig+0x14c>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0xf8>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	0800421d 	.word	0x0800421d
 80041d4:	0800421d 	.word	0x0800421d
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	0800421d 	.word	0x0800421d
 80041e0:	0800421d 	.word	0x0800421d
 80041e4:	0800421d 	.word	0x0800421d
 80041e8:	08004205 	.word	0x08004205
 80041ec:	0800421d 	.word	0x0800421d
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	0800421d 	.word	0x0800421d
 80041f8:	08004215 	.word	0x08004215
 80041fc:	2300      	movs	r3, #0
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e0d8      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004204:	2302      	movs	r3, #2
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e0d4      	b.n	80043b6 <UART_SetConfig+0x2e6>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e0d0      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e0cc      	b.n	80043b6 <UART_SetConfig+0x2e6>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e0c8      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a5e      	ldr	r2, [pc, #376]	; (80043a4 <UART_SetConfig+0x2d4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d125      	bne.n	800427a <UART_SetConfig+0x1aa>
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <UART_SetConfig+0x2cc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d016      	beq.n	800426a <UART_SetConfig+0x19a>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d818      	bhi.n	8004272 <UART_SetConfig+0x1a2>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d00a      	beq.n	800425a <UART_SetConfig+0x18a>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d814      	bhi.n	8004272 <UART_SetConfig+0x1a2>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <UART_SetConfig+0x182>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d008      	beq.n	8004262 <UART_SetConfig+0x192>
 8004250:	e00f      	b.n	8004272 <UART_SetConfig+0x1a2>
 8004252:	2300      	movs	r3, #0
 8004254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004258:	e0ad      	b.n	80043b6 <UART_SetConfig+0x2e6>
 800425a:	2302      	movs	r3, #2
 800425c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004260:	e0a9      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004262:	2304      	movs	r3, #4
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004268:	e0a5      	b.n	80043b6 <UART_SetConfig+0x2e6>
 800426a:	2308      	movs	r3, #8
 800426c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004270:	e0a1      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004272:	2310      	movs	r3, #16
 8004274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004278:	e09d      	b.n	80043b6 <UART_SetConfig+0x2e6>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4a      	ldr	r2, [pc, #296]	; (80043a8 <UART_SetConfig+0x2d8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <UART_SetConfig+0x200>
 8004284:	4b45      	ldr	r3, [pc, #276]	; (800439c <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800428e:	2bc0      	cmp	r3, #192	; 0xc0
 8004290:	d016      	beq.n	80042c0 <UART_SetConfig+0x1f0>
 8004292:	2bc0      	cmp	r3, #192	; 0xc0
 8004294:	d818      	bhi.n	80042c8 <UART_SetConfig+0x1f8>
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d00a      	beq.n	80042b0 <UART_SetConfig+0x1e0>
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d814      	bhi.n	80042c8 <UART_SetConfig+0x1f8>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <UART_SetConfig+0x1d8>
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d008      	beq.n	80042b8 <UART_SetConfig+0x1e8>
 80042a6:	e00f      	b.n	80042c8 <UART_SetConfig+0x1f8>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e082      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80042b0:	2302      	movs	r3, #2
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e07e      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80042b8:	2304      	movs	r3, #4
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e07a      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80042c0:	2308      	movs	r3, #8
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e076      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80042c8:	2310      	movs	r3, #16
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e072      	b.n	80043b6 <UART_SetConfig+0x2e6>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a35      	ldr	r2, [pc, #212]	; (80043ac <UART_SetConfig+0x2dc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d12a      	bne.n	8004330 <UART_SetConfig+0x260>
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <UART_SetConfig+0x2cc>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e8:	d01a      	beq.n	8004320 <UART_SetConfig+0x250>
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ee:	d81b      	bhi.n	8004328 <UART_SetConfig+0x258>
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d00c      	beq.n	8004310 <UART_SetConfig+0x240>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fa:	d815      	bhi.n	8004328 <UART_SetConfig+0x258>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <UART_SetConfig+0x238>
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d008      	beq.n	8004318 <UART_SetConfig+0x248>
 8004306:	e00f      	b.n	8004328 <UART_SetConfig+0x258>
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e052      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004310:	2302      	movs	r3, #2
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e04e      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004318:	2304      	movs	r3, #4
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e04a      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004320:	2308      	movs	r3, #8
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e046      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004328:	2310      	movs	r3, #16
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e042      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <UART_SetConfig+0x2c4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d13a      	bne.n	80043b0 <UART_SetConfig+0x2e0>
 800433a:	4b18      	ldr	r3, [pc, #96]	; (800439c <UART_SetConfig+0x2cc>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004348:	d01a      	beq.n	8004380 <UART_SetConfig+0x2b0>
 800434a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434e:	d81b      	bhi.n	8004388 <UART_SetConfig+0x2b8>
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d00c      	beq.n	8004370 <UART_SetConfig+0x2a0>
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d815      	bhi.n	8004388 <UART_SetConfig+0x2b8>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <UART_SetConfig+0x298>
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d008      	beq.n	8004378 <UART_SetConfig+0x2a8>
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x2b8>
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e022      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004370:	2302      	movs	r3, #2
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e01e      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004378:	2304      	movs	r3, #4
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e01a      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004380:	2308      	movs	r3, #8
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e016      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004388:	2310      	movs	r3, #16
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e012      	b.n	80043b6 <UART_SetConfig+0x2e6>
 8004390:	efff69f3 	.word	0xefff69f3
 8004394:	40008000 	.word	0x40008000
 8004398:	40013800 	.word	0x40013800
 800439c:	40021000 	.word	0x40021000
 80043a0:	40004400 	.word	0x40004400
 80043a4:	40004800 	.word	0x40004800
 80043a8:	40004c00 	.word	0x40004c00
 80043ac:	40005000 	.word	0x40005000
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a9f      	ldr	r2, [pc, #636]	; (8004638 <UART_SetConfig+0x568>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d17a      	bne.n	80044b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d824      	bhi.n	8004412 <UART_SetConfig+0x342>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0x300>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	08004413 	.word	0x08004413
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004403 	.word	0x08004403
 80043e4:	08004413 	.word	0x08004413
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004413 	.word	0x08004413
 80043f0:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7ff f822 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80043f8:	61f8      	str	r0, [r7, #28]
        break;
 80043fa:	e010      	b.n	800441e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b8f      	ldr	r3, [pc, #572]	; (800463c <UART_SetConfig+0x56c>)
 80043fe:	61fb      	str	r3, [r7, #28]
        break;
 8004400:	e00d      	b.n	800441e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7fe ff83 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004406:	61f8      	str	r0, [r7, #28]
        break;
 8004408:	e009      	b.n	800441e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e005      	b.n	800441e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800441c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80fb 	beq.w	800461c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d305      	bcc.n	8004442 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d903      	bls.n	800444a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004448:	e0e8      	b.n	800461c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2200      	movs	r2, #0
 800444e:	461c      	mov	r4, r3
 8004450:	4615      	mov	r5, r2
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	022b      	lsls	r3, r5, #8
 800445c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004460:	0222      	lsls	r2, r4, #8
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	6849      	ldr	r1, [r1, #4]
 8004466:	0849      	lsrs	r1, r1, #1
 8004468:	2000      	movs	r0, #0
 800446a:	4688      	mov	r8, r1
 800446c:	4681      	mov	r9, r0
 800446e:	eb12 0a08 	adds.w	sl, r2, r8
 8004472:	eb43 0b09 	adc.w	fp, r3, r9
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004484:	4650      	mov	r0, sl
 8004486:	4659      	mov	r1, fp
 8004488:	f7fb fea2 	bl	80001d0 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449a:	d308      	bcc.n	80044ae <UART_SetConfig+0x3de>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d204      	bcs.n	80044ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e0b6      	b.n	800461c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044b4:	e0b2      	b.n	800461c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d15e      	bne.n	800457e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d828      	bhi.n	800451a <UART_SetConfig+0x44a>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <UART_SetConfig+0x400>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004505 	.word	0x08004505
 80044dc:	0800451b 	.word	0x0800451b
 80044e0:	0800450b 	.word	0x0800450b
 80044e4:	0800451b 	.word	0x0800451b
 80044e8:	0800451b 	.word	0x0800451b
 80044ec:	0800451b 	.word	0x0800451b
 80044f0:	08004513 	.word	0x08004513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe ffa2 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80044f8:	61f8      	str	r0, [r7, #28]
        break;
 80044fa:	e014      	b.n	8004526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7fe ffb4 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8004500:	61f8      	str	r0, [r7, #28]
        break;
 8004502:	e010      	b.n	8004526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <UART_SetConfig+0x56c>)
 8004506:	61fb      	str	r3, [r7, #28]
        break;
 8004508:	e00d      	b.n	8004526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450a:	f7fe feff 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800450e:	61f8      	str	r0, [r7, #28]
        break;
 8004510:	e009      	b.n	8004526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e005      	b.n	8004526 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d077      	beq.n	800461c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005a      	lsls	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b0f      	cmp	r3, #15
 8004546:	d916      	bls.n	8004576 <UART_SetConfig+0x4a6>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454e:	d212      	bcs.n	8004576 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f023 030f 	bic.w	r3, r3, #15
 8004558:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	b29a      	uxth	r2, r3
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	4313      	orrs	r3, r2
 800456a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	8afa      	ldrh	r2, [r7, #22]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	e052      	b.n	800461c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800457c:	e04e      	b.n	800461c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800457e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004582:	2b08      	cmp	r3, #8
 8004584:	d827      	bhi.n	80045d6 <UART_SetConfig+0x506>
 8004586:	a201      	add	r2, pc, #4	; (adr r2, 800458c <UART_SetConfig+0x4bc>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c7 	.word	0x080045c7
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045d7 	.word	0x080045d7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7fe ff44 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80045b4:	61f8      	str	r0, [r7, #28]
        break;
 80045b6:	e014      	b.n	80045e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7fe ff56 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80045bc:	61f8      	str	r0, [r7, #28]
        break;
 80045be:	e010      	b.n	80045e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <UART_SetConfig+0x56c>)
 80045c2:	61fb      	str	r3, [r7, #28]
        break;
 80045c4:	e00d      	b.n	80045e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe fea1 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80045ca:	61f8      	str	r0, [r7, #28]
        break;
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e005      	b.n	80045e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045e0:	bf00      	nop
    }

    if (pclk != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d019      	beq.n	800461c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	085a      	lsrs	r2, r3, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	441a      	add	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d909      	bls.n	8004616 <UART_SetConfig+0x546>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d205      	bcs.n	8004616 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	e002      	b.n	800461c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004628:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	40008000 	.word	0x40008000
 800463c:	00f42400 	.word	0x00f42400

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b098      	sub	sp, #96	; 0x60
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fd f8f0 	bl	8001978 <HAL_GetTick>
 8004798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d12e      	bne.n	8004806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f88c 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d021      	beq.n	8004806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	653b      	str	r3, [r7, #80]	; 0x50
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	647b      	str	r3, [r7, #68]	; 0x44
 80047e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e062      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d149      	bne.n	80048a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f856 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03c      	beq.n	80048a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	623b      	str	r3, [r7, #32]
   return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e011      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3758      	adds	r7, #88	; 0x58
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e049      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d045      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fd f843 	bl	8001978 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e048      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d031      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d110      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f838 	bl	80049a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2208      	movs	r2, #8
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e029      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004954:	d111      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800495e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f81e 	bl	80049a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e00f      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d0a6      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b095      	sub	sp, #84	; 0x54
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d118      	bne.n	8004a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 0310 	bic.w	r3, r3, #16
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	613b      	str	r3, [r7, #16]
   return(result);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e6      	bne.n	8004a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a5e:	bf00      	nop
 8004a60:	3754      	adds	r7, #84	; 0x54
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	f107 001c 	add.w	r0, r7, #28
 8004a78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa65 	bl	8004f58 <USB_CoreReset>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8004aa4:	e005      	b.n	8004ab2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004abe:	b004      	add	sp, #16
 8004ac0:	4770      	bx	lr

08004ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d115      	bne.n	8004b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f7fc ff3c 	bl	8001990 <HAL_Delay>
      ms++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa0c 	bl	8004f3c <USB_GetMode>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d01e      	beq.n	8004b68 <USB_SetCurrentMode+0x84>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b31      	cmp	r3, #49	; 0x31
 8004b2e:	d9f0      	bls.n	8004b12 <USB_SetCurrentMode+0x2e>
 8004b30:	e01a      	b.n	8004b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d115      	bne.n	8004b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fc ff23 	bl	8001990 <HAL_Delay>
      ms++;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f9f3 	bl	8004f3c <USB_GetMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <USB_SetCurrentMode+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b31      	cmp	r3, #49	; 0x31
 8004b60:	d9f0      	bls.n	8004b44 <USB_SetCurrentMode+0x60>
 8004b62:	e001      	b.n	8004b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e005      	b.n	8004b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b32      	cmp	r3, #50	; 0x32
 8004b6c:	d101      	bne.n	8004b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e009      	b.n	8004bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3340      	adds	r3, #64	; 0x40
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0e      	cmp	r3, #14
 8004bb4:	d9f2      	bls.n	8004b9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11c      	bne.n	8004bf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e005      	b.n	8004c02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c0e:	2103      	movs	r1, #3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f959 	bl	8004ec8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c16:	2110      	movs	r1, #16
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8f1 	bl	8004e00 <USB_FlushTxFifo>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f91d 	bl	8004e68 <USB_FlushRxFifo>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	e043      	b.n	8004cea <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c78:	d118      	bne.n	8004cac <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e013      	b.n	8004cbe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e008      	b.n	8004cbe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3b7      	bcc.n	8004c62 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	e043      	b.n	8004d80 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d0e:	d118      	bne.n	8004d42 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e013      	b.n	8004d54 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	e008      	b.n	8004d54 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3b7      	bcc.n	8004cf8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004da8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <USB_DevInit+0x280>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f043 0208 	orr.w	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df6:	b004      	add	sp, #16
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	803c3800 	.word	0x803c3800

08004e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <USB_FlushTxFifo+0x64>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e01b      	b.n	8004e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	daf2      	bge.n	8004e0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	019b      	lsls	r3, r3, #6
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <USB_FlushTxFifo+0x64>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e006      	b.n	8004e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d0f0      	beq.n	8004e38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	00030d40 	.word	0x00030d40

08004e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <USB_FlushRxFifo+0x5c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e018      	b.n	8004eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	daf2      	bge.n	8004e74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2210      	movs	r2, #16
 8004e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <USB_FlushRxFifo+0x5c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e006      	b.n	8004eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d0f0      	beq.n	8004e98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	00030d40 	.word	0x00030d40

08004ec8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0301 	and.w	r3, r3, #1
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <USB_CoreReset+0x64>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e01b      	b.n	8004fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	daf2      	bge.n	8004f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <USB_CoreReset+0x64>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d0f0      	beq.n	8004f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	00030d40 	.word	0x00030d40

08004fc0 <__NVIC_SetPriority>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db0a      	blt.n	8004fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <__NVIC_SetPriority+0x4c>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fe8:	e00a      	b.n	8005000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <__NVIC_SetPriority+0x50>)
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	761a      	strb	r2, [r3, #24]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000e100 	.word	0xe000e100
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005018:	2100      	movs	r1, #0
 800501a:	f06f 0004 	mvn.w	r0, #4
 800501e:	f7ff ffcf 	bl	8004fc0 <__NVIC_SetPriority>
#endif
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502e:	f3ef 8305 	mrs	r3, IPSR
 8005032:	603b      	str	r3, [r7, #0]
  return(result);
 8005034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800503a:	f06f 0305 	mvn.w	r3, #5
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	e00c      	b.n	800505c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <osKernelInitialize+0x44>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <osKernelInitialize+0x44>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005050:	2300      	movs	r3, #0
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	e002      	b.n	800505c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800505c:	687b      	ldr	r3, [r7, #4]
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	200007c4 	.word	0x200007c4

08005070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005076:	f3ef 8305 	mrs	r3, IPSR
 800507a:	603b      	str	r3, [r7, #0]
  return(result);
 800507c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005082:	f06f 0305 	mvn.w	r3, #5
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	e010      	b.n	80050ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <osKernelStart+0x48>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d109      	bne.n	80050a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005092:	f7ff ffbf 	bl	8005014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <osKernelStart+0x48>)
 8005098:	2202      	movs	r2, #2
 800509a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800509c:	f001 f866 	bl	800616c <vTaskStartScheduler>
      stat = osOK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	e002      	b.n	80050ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ac:	687b      	ldr	r3, [r7, #4]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200007c4 	.word	0x200007c4

080050bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	; 0x38
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050cc:	f3ef 8305 	mrs	r3, IPSR
 80050d0:	617b      	str	r3, [r7, #20]
  return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d17e      	bne.n	80051d6 <osThreadNew+0x11a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d07b      	beq.n	80051d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050e2:	2318      	movs	r3, #24
 80050e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d045      	beq.n	8005182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <osThreadNew+0x48>
        name = attr->name;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <osThreadNew+0x6e>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b38      	cmp	r3, #56	; 0x38
 800511c:	d805      	bhi.n	800512a <osThreadNew+0x6e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <osThreadNew+0x72>
        return (NULL);
 800512a:	2300      	movs	r3, #0
 800512c:	e054      	b.n	80051d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00e      	beq.n	8005164 <osThreadNew+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b5b      	cmp	r3, #91	; 0x5b
 800514c:	d90a      	bls.n	8005164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <osThreadNew+0xa8>
        mem = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e010      	b.n	8005186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10c      	bne.n	8005186 <osThreadNew+0xca>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d108      	bne.n	8005186 <osThreadNew+0xca>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <osThreadNew+0xca>
          mem = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e001      	b.n	8005186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d110      	bne.n	80051ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005194:	9202      	str	r2, [sp, #8]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fe0c 	bl	8005dc0 <xTaskCreateStatic>
 80051a8:	4603      	mov	r3, r0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e013      	b.n	80051d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d110      	bne.n	80051d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f107 0310 	add.w	r3, r7, #16
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fe57 	bl	8005e7a <xTaskCreate>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <osThreadNew+0x11a>
            hTask = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051d6:	693b      	ldr	r3, [r7, #16]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <osDelay+0x1c>
    stat = osErrorISR;
 80051f4:	f06f 0305 	mvn.w	r3, #5
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e007      	b.n	800520c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 ff7c 	bl	8006104 <vTaskDelay>
    }
  }

  return (stat);
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a07      	ldr	r2, [pc, #28]	; (8005244 <vApplicationGetIdleTaskMemory+0x2c>)
 8005228:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a06      	ldr	r2, [pc, #24]	; (8005248 <vApplicationGetIdleTaskMemory+0x30>)
 800522e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	601a      	str	r2, [r3, #0]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	200007c8 	.word	0x200007c8
 8005248:	20000824 	.word	0x20000824

0800524c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a07      	ldr	r2, [pc, #28]	; (8005278 <vApplicationGetTimerTaskMemory+0x2c>)
 800525c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a06      	ldr	r2, [pc, #24]	; (800527c <vApplicationGetTimerTaskMemory+0x30>)
 8005262:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800526a:	601a      	str	r2, [r3, #0]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000a24 	.word	0x20000a24
 800527c:	20000a80 	.word	0x20000a80

08005280 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f103 0208 	add.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f04f 32ff 	mov.w	r2, #4294967295
 8005298:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f103 0208 	add.w	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 0208 	add.w	r2, r3, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d103      	bne.n	8005342 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e00c      	b.n	800535c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3308      	adds	r3, #8
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <vListInsert+0x2e>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d2f6      	bcs.n	800534a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6892      	ldr	r2, [r2, #8]
 80053aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6852      	ldr	r2, [r2, #4]
 80053b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d103      	bne.n	80053c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005412:	f002 f84f 	bl	80074b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	3b01      	subs	r3, #1
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	441a      	add	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d114      	bne.n	8005492 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01a      	beq.n	80054a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f903 	bl	8006680 <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <xQueueGenericReset+0xcc>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e009      	b.n	80054a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3310      	adds	r3, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fef2 	bl	8005280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff feed 	bl	8005280 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f002 f835 	bl	8007514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054aa:	2301      	movs	r3, #1
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xQueueGenericCreateStatic+0x52>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xQueueGenericCreateStatic+0x56>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericCreateStatic+0x58>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <xQueueGenericCreateStatic+0x7e>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueGenericCreateStatic+0x82>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueGenericCreateStatic+0x84>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005556:	2350      	movs	r3, #80	; 0x50
 8005558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b50      	cmp	r3, #80	; 0x50
 800555e:	d00a      	beq.n	8005576 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61bb      	str	r3, [r7, #24]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005576:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800558a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f805 	bl	80055a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3730      	adds	r7, #48	; 0x30
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e002      	b.n	80055ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055d6:	2101      	movs	r1, #1
 80055d8:	69b8      	ldr	r0, [r7, #24]
 80055da:	f7ff ff05 	bl	80053e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055fe:	2300      	movs	r3, #0
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueGenericSend+0x32>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <xQueueGenericSend+0x40>
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <xQueueGenericSend+0x44>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <xQueueGenericSend+0x46>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xQueueGenericSend+0x60>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x6e>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <xQueueGenericSend+0x72>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericSend+0x74>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericSend+0x8e>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800567e:	f001 f9bd 	bl	80069fc <xTaskGetSchedulerState>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <xQueueGenericSend+0x9e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <xQueueGenericSend+0xa2>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericSend+0xa4>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericSend+0xbe>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61fb      	str	r3, [r7, #28]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ae:	f001 ff01 	bl	80074b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <xQueueGenericSend+0xd4>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d129      	bne.n	8005718 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ca:	f000 fa0b 	bl	8005ae4 <prvCopyDataToQueue>
 80056ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	3324      	adds	r3, #36	; 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 ffcf 	bl	8006680 <xTaskRemoveFromEventList>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <xQueueGenericSend+0x1f8>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	e00a      	b.n	8005710 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <xQueueGenericSend+0x1f8>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005710:	f001 ff00 	bl	8007514 <vPortExitCritical>
				return pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	e063      	b.n	80057e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571e:	f001 fef9 	bl	8007514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
 8005724:	e05c      	b.n	80057e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f809 	bl	8006748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800573a:	f001 feeb 	bl	8007514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573e:	f000 fd7b 	bl	8006238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005742:	f001 feb7 	bl	80074b4 <vPortEnterCritical>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574c:	b25b      	sxtb	r3, r3
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d103      	bne.n	800575c <xQueueGenericSend+0x16c>
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005762:	b25b      	sxtb	r3, r3
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x182>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005772:	f001 fecf 	bl	8007514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005776:	1d3a      	adds	r2, r7, #4
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fff8 	bl	8006774 <xTaskCheckForTimeOut>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d124      	bne.n	80057d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800578a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800578c:	f000 faa2 	bl	8005cd4 <prvIsQueueFull>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	3310      	adds	r3, #16
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 ff1e 	bl	80065e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a6:	f000 fa2d 	bl	8005c04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057aa:	f000 fd53 	bl	8006254 <xTaskResumeAll>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f af7c 	bne.w	80056ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <xQueueGenericSend+0x1f8>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	e772      	b.n	80056ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fa1b 	bl	8005c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f000 fd41 	bl	8006254 <xTaskResumeAll>
 80057d2:	e76c      	b.n	80056ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fa15 	bl	8005c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057da:	f000 fd3b 	bl	8006254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3738      	adds	r7, #56	; 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b090      	sub	sp, #64	; 0x40
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <xQueueGenericSendFromISR+0x3c>
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueGenericSendFromISR+0x40>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueGenericSendFromISR+0x42>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d103      	bne.n	8005856 <xQueueGenericSendFromISR+0x6a>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <xQueueGenericSendFromISR+0x6e>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSendFromISR+0x70>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005876:	f001 feff 	bl	8007678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800587a:	f3ef 8211 	mrs	r2, BASEPRI
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fa      	str	r2, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005892:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <xQueueGenericSendFromISR+0xbc>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d12f      	bne.n	8005908 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058be:	f000 f911 	bl	8005ae4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d112      	bne.n	80058f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d016      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fed1 	bl	8006680 <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058f6:	3301      	adds	r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005902:	2301      	movs	r3, #1
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005906:	e001      	b.n	800590c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005908:	2300      	movs	r3, #0
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005916:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800591a:	4618      	mov	r0, r3
 800591c:	3740      	adds	r7, #64	; 0x40
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <xQueueReceive+0x30>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	623b      	str	r3, [r7, #32]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <xQueueReceive+0x3e>
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <xQueueReceive+0x42>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueReceive+0x44>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xQueueReceive+0x5e>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61fb      	str	r3, [r7, #28]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005982:	f001 f83b 	bl	80069fc <xTaskGetSchedulerState>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <xQueueReceive+0x6e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <xQueueReceive+0x72>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <xQueueReceive+0x74>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueReceive+0x8e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	61bb      	str	r3, [r7, #24]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b2:	f001 fd7f 	bl	80074b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01f      	beq.n	8005a02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c6:	f000 f8f7 	bl	8005bb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1e5a      	subs	r2, r3, #1
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00f      	beq.n	80059fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	3310      	adds	r3, #16
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fe4e 	bl	8006680 <xTaskRemoveFromEventList>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ea:	4b3d      	ldr	r3, [pc, #244]	; (8005ae0 <xQueueReceive+0x1bc>)
 80059ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059fa:	f001 fd8b 	bl	8007514 <vPortExitCritical>
				return pdPASS;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e069      	b.n	8005ad6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a08:	f001 fd84 	bl	8007514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e062      	b.n	8005ad6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a16:	f107 0310 	add.w	r3, r7, #16
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fe94 	bl	8006748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a24:	f001 fd76 	bl	8007514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a28:	f000 fc06 	bl	8006238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a2c:	f001 fd42 	bl	80074b4 <vPortEnterCritical>
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0x122>
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d103      	bne.n	8005a5c <xQueueReceive+0x138>
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a5c:	f001 fd5a 	bl	8007514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a60:	1d3a      	adds	r2, r7, #4
 8005a62:	f107 0310 	add.w	r3, r7, #16
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fe83 	bl	8006774 <xTaskCheckForTimeOut>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d123      	bne.n	8005abc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a76:	f000 f917 	bl	8005ca8 <prvIsQueueEmpty>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fda9 	bl	80065e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a90:	f000 f8b8 	bl	8005c04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a94:	f000 fbde 	bl	8006254 <xTaskResumeAll>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d189      	bne.n	80059b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xQueueReceive+0x1bc>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	e780      	b.n	80059b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab2:	f000 f8a7 	bl	8005c04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab6:	f000 fbcd 	bl	8006254 <xTaskResumeAll>
 8005aba:	e77a      	b.n	80059b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005abe:	f000 f8a1 	bl	8005c04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac2:	f000 fbc7 	bl	8006254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac8:	f000 f8ee 	bl	8005ca8 <prvIsQueueEmpty>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f43f af6f 	beq.w	80059b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ad4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	; 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10d      	bne.n	8005b1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d14d      	bne.n	8005ba6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 ff92 	bl	8006a38 <xTaskPriorityDisinherit>
 8005b14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	e043      	b.n	8005ba6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d119      	bne.n	8005b58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6858      	ldr	r0, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	f001 fff8 	bl	8007b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d32b      	bcc.n	8005ba6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e026      	b.n	8005ba6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68d8      	ldr	r0, [r3, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	f001 ffde 	bl	8007b24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	425b      	negs	r3, r3
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d207      	bcs.n	8005b94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	425b      	negs	r3, r3
 8005b8e:	441a      	add	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d105      	bne.n	8005ba6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bae:	697b      	ldr	r3, [r7, #20]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	441a      	add	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d303      	bcc.n	8005bec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68d9      	ldr	r1, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6838      	ldr	r0, [r7, #0]
 8005bf8:	f001 ff94 	bl	8007b24 <memcpy>
	}
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c0c:	f001 fc52 	bl	80074b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c18:	e011      	b.n	8005c3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3324      	adds	r3, #36	; 0x24
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fd2a 	bl	8006680 <xTaskRemoveFromEventList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c32:	f000 fe01 	bl	8006838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	dce9      	bgt.n	8005c1a <prvUnlockQueue+0x16>
 8005c46:	e000      	b.n	8005c4a <prvUnlockQueue+0x46>
					break;
 8005c48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	22ff      	movs	r2, #255	; 0xff
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c52:	f001 fc5f 	bl	8007514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c56:	f001 fc2d 	bl	80074b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c62:	e011      	b.n	8005c88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3310      	adds	r3, #16
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fd05 	bl	8006680 <xTaskRemoveFromEventList>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c7c:	f000 fddc 	bl	8006838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dce9      	bgt.n	8005c64 <prvUnlockQueue+0x60>
 8005c90:	e000      	b.n	8005c94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	22ff      	movs	r2, #255	; 0xff
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c9c:	f001 fc3a 	bl	8007514 <vPortExitCritical>
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cb0:	f001 fc00 	bl	80074b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e001      	b.n	8005cc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f001 fc25 	bl	8007514 <vPortExitCritical>

	return xReturn;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cdc:	f001 fbea 	bl	80074b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d102      	bne.n	8005cf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e001      	b.n	8005cf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cf6:	f001 fc0d 	bl	8007514 <vPortExitCritical>

	return xReturn;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e014      	b.n	8005d3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d14:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <vQueueAddToRegistry+0x50>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d20:	490c      	ldr	r1, [pc, #48]	; (8005d54 <vQueueAddToRegistry+0x50>)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <vQueueAddToRegistry+0x50>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4413      	add	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d36:	e006      	b.n	8005d46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	d9e7      	bls.n	8005d14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000e80 	.word	0x20000e80

08005d58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d68:	f001 fba4 	bl	80074b4 <vPortEnterCritical>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <vQueueWaitForMessageRestricted+0x2a>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d88:	b25b      	sxtb	r3, r3
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d103      	bne.n	8005d98 <vQueueWaitForMessageRestricted+0x40>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d98:	f001 fbbc 	bl	8007514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	3324      	adds	r3, #36	; 0x24
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fc3b 	bl	8006628 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005db2:	6978      	ldr	r0, [r7, #20]
 8005db4:	f7ff ff26 	bl	8005c04 <prvUnlockQueue>
	}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08e      	sub	sp, #56	; 0x38
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xTaskCreateStatic+0x46>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	61fb      	str	r3, [r7, #28]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e06:	235c      	movs	r3, #92	; 0x5c
 8005e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e0e:	d00a      	beq.n	8005e26 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	61bb      	str	r3, [r7, #24]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01e      	beq.n	8005e6c <xTaskCreateStatic+0xac>
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e46:	2300      	movs	r3, #0
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	f107 0314 	add.w	r3, r7, #20
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f850 	bl	8005f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e66:	f000 f8dd 	bl	8006024 <prvAddNewTaskToReadyList>
 8005e6a:	e001      	b.n	8005e70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e70:	697b      	ldr	r3, [r7, #20]
	}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08c      	sub	sp, #48	; 0x30
 8005e7e:	af04      	add	r7, sp, #16
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	4613      	mov	r3, r2
 8005e88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fc32 	bl	80076f8 <pvPortMalloc>
 8005e94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00e      	beq.n	8005eba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e9c:	205c      	movs	r0, #92	; 0x5c
 8005e9e:	f001 fc2b 	bl	80076f8 <pvPortMalloc>
 8005ea2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
 8005eb0:	e005      	b.n	8005ebe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eb2:	6978      	ldr	r0, [r7, #20]
 8005eb4:	f001 fcec 	bl	8007890 <vPortFree>
 8005eb8:	e001      	b.n	8005ebe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d017      	beq.n	8005ef4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	9302      	str	r3, [sp, #8]
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f80e 	bl	8005f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee8:	69f8      	ldr	r0, [r7, #28]
 8005eea:	f000 f89b 	bl	8006024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e002      	b.n	8005efa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005efa:	69bb      	ldr	r3, [r7, #24]
	}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	21a5      	movs	r1, #165	; 0xa5
 8005f1e:	f001 fdd5 	bl	8007acc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	617b      	str	r3, [r7, #20]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01f      	beq.n	8005fa2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e012      	b.n	8005f8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7819      	ldrb	r1, [r3, #0]
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	3334      	adds	r3, #52	; 0x34
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d9e9      	bls.n	8005f68 <prvInitialiseNewTask+0x64>
 8005f94:	e000      	b.n	8005f98 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	e003      	b.n	8005faa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b37      	cmp	r3, #55	; 0x37
 8005fae:	d901      	bls.n	8005fb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fb0:	2337      	movs	r3, #55	; 0x37
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff f978 	bl	80052c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff f973 	bl	80052c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	68f9      	ldr	r1, [r7, #12]
 8006002:	69b8      	ldr	r0, [r7, #24]
 8006004:	f001 f928 	bl	8007258 <pxPortInitialiseStack>
 8006008:	4602      	mov	r2, r0
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800601a:	bf00      	nop
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800602c:	f001 fa42 	bl	80074b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006030:	4b2d      	ldr	r3, [pc, #180]	; (80060e8 <prvAddNewTaskToReadyList+0xc4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <prvAddNewTaskToReadyList+0xc4>)
 8006038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800603a:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006042:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006048:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <prvAddNewTaskToReadyList+0xc4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d110      	bne.n	8006072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006050:	f000 fc16 	bl	8006880 <prvInitialiseTaskLists>
 8006054:	e00d      	b.n	8006072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <prvAddNewTaskToReadyList+0xcc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800605e:	4b23      	ldr	r3, [pc, #140]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	429a      	cmp	r2, r3
 800606a:	d802      	bhi.n	8006072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <prvAddNewTaskToReadyList+0xd0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <prvAddNewTaskToReadyList+0xd0>)
 800607a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <prvAddNewTaskToReadyList+0xd0>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <prvAddNewTaskToReadyList+0xd4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d903      	bls.n	8006098 <prvAddNewTaskToReadyList+0x74>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <prvAddNewTaskToReadyList+0xd4>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a15      	ldr	r2, [pc, #84]	; (80060fc <prvAddNewTaskToReadyList+0xd8>)
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7ff f913 	bl	80052da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060b4:	f001 fa2e 	bl	8007514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060b8:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <prvAddNewTaskToReadyList+0xcc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00e      	beq.n	80060de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d207      	bcs.n	80060de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <prvAddNewTaskToReadyList+0xdc>)
 80060d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20001394 	.word	0x20001394
 80060ec:	20000ec0 	.word	0x20000ec0
 80060f0:	200013a0 	.word	0x200013a0
 80060f4:	200013b0 	.word	0x200013b0
 80060f8:	2000139c 	.word	0x2000139c
 80060fc:	20000ec4 	.word	0x20000ec4
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d017      	beq.n	8006146 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006116:	4b13      	ldr	r3, [pc, #76]	; (8006164 <vTaskDelay+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <vTaskDelay+0x30>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60bb      	str	r3, [r7, #8]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006134:	f000 f880 	bl	8006238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fcea 	bl	8006b14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006140:	f000 f888 	bl	8006254 <xTaskResumeAll>
 8006144:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d107      	bne.n	800615c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <vTaskDelay+0x64>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	200013bc 	.word	0x200013bc
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617a:	463a      	mov	r2, r7
 800617c:	1d39      	adds	r1, r7, #4
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f848 	bl	8005218 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	9202      	str	r2, [sp, #8]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	2300      	movs	r3, #0
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	2300      	movs	r3, #0
 8006198:	460a      	mov	r2, r1
 800619a:	4921      	ldr	r1, [pc, #132]	; (8006220 <vTaskStartScheduler+0xb4>)
 800619c:	4821      	ldr	r0, [pc, #132]	; (8006224 <vTaskStartScheduler+0xb8>)
 800619e:	f7ff fe0f 	bl	8005dc0 <xTaskCreateStatic>
 80061a2:	4603      	mov	r3, r0
 80061a4:	4a20      	ldr	r2, [pc, #128]	; (8006228 <vTaskStartScheduler+0xbc>)
 80061a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061a8:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <vTaskStartScheduler+0xbc>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e001      	b.n	80061ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d102      	bne.n	80061c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061c0:	f000 fcfc 	bl	8006bbc <xTimerCreateTimerTask>
 80061c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d116      	bne.n	80061fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	613b      	str	r3, [r7, #16]
}
 80061de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <vTaskStartScheduler+0xc0>)
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <vTaskStartScheduler+0xc4>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <vTaskStartScheduler+0xc8>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061f4:	f001 f8bc 	bl	8007370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061f8:	e00e      	b.n	8006218 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d10a      	bne.n	8006218 <vTaskStartScheduler+0xac>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	60fb      	str	r3, [r7, #12]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <vTaskStartScheduler+0xaa>
}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08007b98 	.word	0x08007b98
 8006224:	08006851 	.word	0x08006851
 8006228:	200013b8 	.word	0x200013b8
 800622c:	200013b4 	.word	0x200013b4
 8006230:	200013a0 	.word	0x200013a0
 8006234:	20001398 	.word	0x20001398

08006238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <vTaskSuspendAll+0x18>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	4a03      	ldr	r2, [pc, #12]	; (8006250 <vTaskSuspendAll+0x18>)
 8006244:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006246:	bf00      	nop
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	200013bc 	.word	0x200013bc

08006254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006262:	4b42      	ldr	r3, [pc, #264]	; (800636c <xTaskResumeAll+0x118>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <xTaskResumeAll+0x2c>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	603b      	str	r3, [r7, #0]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006280:	f001 f918 	bl	80074b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006284:	4b39      	ldr	r3, [pc, #228]	; (800636c <xTaskResumeAll+0x118>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	4a38      	ldr	r2, [pc, #224]	; (800636c <xTaskResumeAll+0x118>)
 800628c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <xTaskResumeAll+0x118>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d162      	bne.n	800635c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006296:	4b36      	ldr	r3, [pc, #216]	; (8006370 <xTaskResumeAll+0x11c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d05e      	beq.n	800635c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800629e:	e02f      	b.n	8006300 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a0:	4b34      	ldr	r3, [pc, #208]	; (8006374 <xTaskResumeAll+0x120>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3318      	adds	r3, #24
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff f871 	bl	8005394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff f86c 	bl	8005394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <xTaskResumeAll+0x124>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d903      	bls.n	80062d0 <xTaskResumeAll+0x7c>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <xTaskResumeAll+0x124>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4a27      	ldr	r2, [pc, #156]	; (800637c <xTaskResumeAll+0x128>)
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f7fe fff7 	bl	80052da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <xTaskResumeAll+0x12c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062fa:	4b22      	ldr	r3, [pc, #136]	; (8006384 <xTaskResumeAll+0x130>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006300:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <xTaskResumeAll+0x120>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1cb      	bne.n	80062a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800630e:	f000 fb55 	bl	80069bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006312:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <xTaskResumeAll+0x134>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800631e:	f000 f847 	bl	80063b0 <xTaskIncrementTick>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006328:	4b16      	ldr	r3, [pc, #88]	; (8006384 <xTaskResumeAll+0x130>)
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3b01      	subs	r3, #1
 8006332:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f1      	bne.n	800631e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <xTaskResumeAll+0x134>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <xTaskResumeAll+0x130>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTaskResumeAll+0x138>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800635c:	f001 f8da 	bl	8007514 <vPortExitCritical>

	return xAlreadyYielded;
 8006360:	68bb      	ldr	r3, [r7, #8]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200013bc 	.word	0x200013bc
 8006370:	20001394 	.word	0x20001394
 8006374:	20001354 	.word	0x20001354
 8006378:	2000139c 	.word	0x2000139c
 800637c:	20000ec4 	.word	0x20000ec4
 8006380:	20000ec0 	.word	0x20000ec0
 8006384:	200013a8 	.word	0x200013a8
 8006388:	200013a4 	.word	0x200013a4
 800638c:	e000ed04 	.word	0xe000ed04

08006390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <xTaskGetTickCount+0x1c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800639c:	687b      	ldr	r3, [r7, #4]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20001398 	.word	0x20001398

080063b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ba:	4b4f      	ldr	r3, [pc, #316]	; (80064f8 <xTaskIncrementTick+0x148>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 808f 	bne.w	80064e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063c4:	4b4d      	ldr	r3, [pc, #308]	; (80064fc <xTaskIncrementTick+0x14c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063cc:	4a4b      	ldr	r2, [pc, #300]	; (80064fc <xTaskIncrementTick+0x14c>)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d120      	bne.n	800641a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063d8:	4b49      	ldr	r3, [pc, #292]	; (8006500 <xTaskIncrementTick+0x150>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	603b      	str	r3, [r7, #0]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xTaskIncrementTick+0x46>
 80063f8:	4b41      	ldr	r3, [pc, #260]	; (8006500 <xTaskIncrementTick+0x150>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4b41      	ldr	r3, [pc, #260]	; (8006504 <xTaskIncrementTick+0x154>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a3f      	ldr	r2, [pc, #252]	; (8006500 <xTaskIncrementTick+0x150>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4a3f      	ldr	r2, [pc, #252]	; (8006504 <xTaskIncrementTick+0x154>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	4b3e      	ldr	r3, [pc, #248]	; (8006508 <xTaskIncrementTick+0x158>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	4a3d      	ldr	r2, [pc, #244]	; (8006508 <xTaskIncrementTick+0x158>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	f000 fad1 	bl	80069bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800641a:	4b3c      	ldr	r3, [pc, #240]	; (800650c <xTaskIncrementTick+0x15c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d349      	bcc.n	80064b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006424:	4b36      	ldr	r3, [pc, #216]	; (8006500 <xTaskIncrementTick+0x150>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642e:	4b37      	ldr	r3, [pc, #220]	; (800650c <xTaskIncrementTick+0x15c>)
 8006430:	f04f 32ff 	mov.w	r2, #4294967295
 8006434:	601a      	str	r2, [r3, #0]
					break;
 8006436:	e03f      	b.n	80064b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006438:	4b31      	ldr	r3, [pc, #196]	; (8006500 <xTaskIncrementTick+0x150>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d203      	bcs.n	8006458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006450:	4a2e      	ldr	r2, [pc, #184]	; (800650c <xTaskIncrementTick+0x15c>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006456:	e02f      	b.n	80064b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3304      	adds	r3, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ff99 	bl	8005394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3318      	adds	r3, #24
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe ff90 	bl	8005394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b25      	ldr	r3, [pc, #148]	; (8006510 <xTaskIncrementTick+0x160>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskIncrementTick+0xd8>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a22      	ldr	r2, [pc, #136]	; (8006510 <xTaskIncrementTick+0x160>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <xTaskIncrementTick+0x164>)
 8006496:	441a      	add	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe ff1b 	bl	80052da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <xTaskIncrementTick+0x168>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3b8      	bcc.n	8006424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b6:	e7b5      	b.n	8006424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064b8:	4b17      	ldr	r3, [pc, #92]	; (8006518 <xTaskIncrementTick+0x168>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4915      	ldr	r1, [pc, #84]	; (8006514 <xTaskIncrementTick+0x164>)
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d901      	bls.n	80064d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064d4:	4b11      	ldr	r3, [pc, #68]	; (800651c <xTaskIncrementTick+0x16c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e004      	b.n	80064ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <xTaskIncrementTick+0x170>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	4a0d      	ldr	r2, [pc, #52]	; (8006520 <xTaskIncrementTick+0x170>)
 80064ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064ec:	697b      	ldr	r3, [r7, #20]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	200013bc 	.word	0x200013bc
 80064fc:	20001398 	.word	0x20001398
 8006500:	2000134c 	.word	0x2000134c
 8006504:	20001350 	.word	0x20001350
 8006508:	200013ac 	.word	0x200013ac
 800650c:	200013b4 	.word	0x200013b4
 8006510:	2000139c 	.word	0x2000139c
 8006514:	20000ec4 	.word	0x20000ec4
 8006518:	20000ec0 	.word	0x20000ec0
 800651c:	200013a8 	.word	0x200013a8
 8006520:	200013a4 	.word	0x200013a4

08006524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800652a:	4b28      	ldr	r3, [pc, #160]	; (80065cc <vTaskSwitchContext+0xa8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <vTaskSwitchContext+0xac>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006538:	e041      	b.n	80065be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800653a:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <vTaskSwitchContext+0xac>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006540:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <vTaskSwitchContext+0xb0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e010      	b.n	800656a <vTaskSwitchContext+0x46>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <vTaskSwitchContext+0x40>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vTaskSwitchContext+0x3e>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	491b      	ldr	r1, [pc, #108]	; (80065d8 <vTaskSwitchContext+0xb4>)
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0e4      	beq.n	8006548 <vTaskSwitchContext+0x24>
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <vTaskSwitchContext+0xb4>)
 800658a:	4413      	add	r3, r2
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	605a      	str	r2, [r3, #4]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3308      	adds	r3, #8
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d104      	bne.n	80065ae <vTaskSwitchContext+0x8a>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a09      	ldr	r2, [pc, #36]	; (80065dc <vTaskSwitchContext+0xb8>)
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	4a06      	ldr	r2, [pc, #24]	; (80065d4 <vTaskSwitchContext+0xb0>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6013      	str	r3, [r2, #0]
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	200013bc 	.word	0x200013bc
 80065d0:	200013a8 	.word	0x200013a8
 80065d4:	2000139c 	.word	0x2000139c
 80065d8:	20000ec4 	.word	0x20000ec4
 80065dc:	20000ec0 	.word	0x20000ec0

080065e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <vTaskPlaceOnEventList+0x44>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3318      	adds	r3, #24
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fe87 	bl	8005322 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006614:	2101      	movs	r1, #1
 8006616:	6838      	ldr	r0, [r7, #0]
 8006618:	f000 fa7c 	bl	8006b14 <prvAddCurrentTaskToDelayedList>
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000ec0 	.word	0x20000ec0

08006628 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	617b      	str	r3, [r7, #20]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <vTaskPlaceOnEventListRestricted+0x54>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3318      	adds	r3, #24
 8006656:	4619      	mov	r1, r3
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7fe fe3e 	bl	80052da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	68b8      	ldr	r0, [r7, #8]
 800666e:	f000 fa51 	bl	8006b14 <prvAddCurrentTaskToDelayedList>
	}
 8006672:	bf00      	nop
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000ec0 	.word	0x20000ec0

08006680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	3318      	adds	r3, #24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fe6f 	bl	8005394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <xTaskRemoveFromEventList+0xb0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11d      	bne.n	80066fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fe66 	bl	8005394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	4b19      	ldr	r3, [pc, #100]	; (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d903      	bls.n	80066dc <xTaskRemoveFromEventList+0x5c>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4a16      	ldr	r2, [pc, #88]	; (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4a13      	ldr	r2, [pc, #76]	; (8006738 <xTaskRemoveFromEventList+0xb8>)
 80066ea:	441a      	add	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f7fe fdf1 	bl	80052da <vListInsertEnd>
 80066f8:	e005      	b.n	8006706 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3318      	adds	r3, #24
 80066fe:	4619      	mov	r1, r3
 8006700:	480e      	ldr	r0, [pc, #56]	; (800673c <xTaskRemoveFromEventList+0xbc>)
 8006702:	f7fe fdea 	bl	80052da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670a:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <xTaskRemoveFromEventList+0xc0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d905      	bls.n	8006720 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006714:	2301      	movs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <xTaskRemoveFromEventList+0xc4>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e001      	b.n	8006724 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006724:	697b      	ldr	r3, [r7, #20]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200013bc 	.word	0x200013bc
 8006734:	2000139c 	.word	0x2000139c
 8006738:	20000ec4 	.word	0x20000ec4
 800673c:	20001354 	.word	0x20001354
 8006740:	20000ec0 	.word	0x20000ec0
 8006744:	200013a8 	.word	0x200013a8

08006748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <vTaskInternalSetTimeOutState+0x24>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <vTaskInternalSetTimeOutState+0x28>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	200013ac 	.word	0x200013ac
 8006770:	20001398 	.word	0x20001398

08006774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	613b      	str	r3, [r7, #16]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067b6:	f000 fe7d 	bl	80074b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067ba:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <xTaskCheckForTimeOut+0xbc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d102      	bne.n	80067da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	e023      	b.n	8006822 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b15      	ldr	r3, [pc, #84]	; (8006834 <xTaskCheckForTimeOut+0xc0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d007      	beq.n	80067f6 <xTaskCheckForTimeOut+0x82>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d302      	bcc.n	80067f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	e015      	b.n	8006822 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d20b      	bcs.n	8006818 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff ff9b 	bl	8006748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	e004      	b.n	8006822 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006822:	f000 fe77 	bl	8007514 <vPortExitCritical>

	return xReturn;
 8006826:	69fb      	ldr	r3, [r7, #28]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20001398 	.word	0x20001398
 8006834:	200013ac 	.word	0x200013ac

08006838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <vTaskMissedYield+0x14>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
}
 8006842:	bf00      	nop
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	200013a8 	.word	0x200013a8

08006850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006858:	f000 f852 	bl	8006900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <prvIdleTask+0x28>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d9f9      	bls.n	8006858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <prvIdleTask+0x2c>)
 8006866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006874:	e7f0      	b.n	8006858 <prvIdleTask+0x8>
 8006876:	bf00      	nop
 8006878:	20000ec4 	.word	0x20000ec4
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006886:	2300      	movs	r3, #0
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	e00c      	b.n	80068a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <prvInitialiseTaskLists+0x60>)
 8006898:	4413      	add	r3, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe fcf0 	bl	8005280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3301      	adds	r3, #1
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b37      	cmp	r3, #55	; 0x37
 80068aa:	d9ef      	bls.n	800688c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068ac:	480d      	ldr	r0, [pc, #52]	; (80068e4 <prvInitialiseTaskLists+0x64>)
 80068ae:	f7fe fce7 	bl	8005280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068b2:	480d      	ldr	r0, [pc, #52]	; (80068e8 <prvInitialiseTaskLists+0x68>)
 80068b4:	f7fe fce4 	bl	8005280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068b8:	480c      	ldr	r0, [pc, #48]	; (80068ec <prvInitialiseTaskLists+0x6c>)
 80068ba:	f7fe fce1 	bl	8005280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068be:	480c      	ldr	r0, [pc, #48]	; (80068f0 <prvInitialiseTaskLists+0x70>)
 80068c0:	f7fe fcde 	bl	8005280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068c4:	480b      	ldr	r0, [pc, #44]	; (80068f4 <prvInitialiseTaskLists+0x74>)
 80068c6:	f7fe fcdb 	bl	8005280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvInitialiseTaskLists+0x78>)
 80068cc:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <prvInitialiseTaskLists+0x64>)
 80068ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <prvInitialiseTaskLists+0x7c>)
 80068d2:	4a05      	ldr	r2, [pc, #20]	; (80068e8 <prvInitialiseTaskLists+0x68>)
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000ec4 	.word	0x20000ec4
 80068e4:	20001324 	.word	0x20001324
 80068e8:	20001338 	.word	0x20001338
 80068ec:	20001354 	.word	0x20001354
 80068f0:	20001368 	.word	0x20001368
 80068f4:	20001380 	.word	0x20001380
 80068f8:	2000134c 	.word	0x2000134c
 80068fc:	20001350 	.word	0x20001350

08006900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006906:	e019      	b.n	800693c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006908:	f000 fdd4 	bl	80074b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <prvCheckTasksWaitingTermination+0x50>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3304      	adds	r3, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fd3b 	bl	8005394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <prvCheckTasksWaitingTermination+0x54>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3b01      	subs	r3, #1
 8006924:	4a0b      	ldr	r2, [pc, #44]	; (8006954 <prvCheckTasksWaitingTermination+0x54>)
 8006926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <prvCheckTasksWaitingTermination+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <prvCheckTasksWaitingTermination+0x58>)
 8006930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006932:	f000 fdef 	bl	8007514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f810 	bl	800695c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <prvCheckTasksWaitingTermination+0x58>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e1      	bne.n	8006908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20001368 	.word	0x20001368
 8006954:	20001394 	.word	0x20001394
 8006958:	2000137c 	.word	0x2000137c

0800695c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800696a:	2b00      	cmp	r3, #0
 800696c:	d108      	bne.n	8006980 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	4618      	mov	r0, r3
 8006974:	f000 ff8c 	bl	8007890 <vPortFree>
				vPortFree( pxTCB );
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 ff89 	bl	8007890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800697e:	e018      	b.n	80069b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006986:	2b01      	cmp	r3, #1
 8006988:	d103      	bne.n	8006992 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 ff80 	bl	8007890 <vPortFree>
	}
 8006990:	e00f      	b.n	80069b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006998:	2b02      	cmp	r3, #2
 800699a:	d00a      	beq.n	80069b2 <prvDeleteTCB+0x56>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60fb      	str	r3, [r7, #12]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <prvDeleteTCB+0x54>
	}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <prvResetNextTaskUnblockTime+0x38>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <prvResetNextTaskUnblockTime+0x3c>)
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069d4:	e008      	b.n	80069e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvResetNextTaskUnblockTime+0x38>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <prvResetNextTaskUnblockTime+0x3c>)
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	2000134c 	.word	0x2000134c
 80069f8:	200013b4 	.word	0x200013b4

080069fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <xTaskGetSchedulerState+0x34>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	e008      	b.n	8006a22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <xTaskGetSchedulerState+0x38>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	607b      	str	r3, [r7, #4]
 8006a1c:	e001      	b.n	8006a22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a22:	687b      	ldr	r3, [r7, #4]
	}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	200013a0 	.word	0x200013a0
 8006a34:	200013bc 	.word	0x200013bc

08006a38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d056      	beq.n	8006afc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <xTaskPriorityDisinherit+0xd0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d00a      	beq.n	8006a6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	60fb      	str	r3, [r7, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	60bb      	str	r3, [r7, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d02c      	beq.n	8006afc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d128      	bne.n	8006afc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fc70 	bl	8005394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <xTaskPriorityDisinherit+0xd4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d903      	bls.n	8006adc <xTaskPriorityDisinherit+0xa4>
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a0c      	ldr	r2, [pc, #48]	; (8006b0c <xTaskPriorityDisinherit+0xd4>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <xTaskPriorityDisinherit+0xd8>)
 8006aea:	441a      	add	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7fe fbf1 	bl	80052da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006afc:	697b      	ldr	r3, [r7, #20]
	}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000ec0 	.word	0x20000ec0
 8006b0c:	2000139c 	.word	0x2000139c
 8006b10:	20000ec4 	.word	0x20000ec4

08006b14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b24:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fc32 	bl	8005394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d10a      	bne.n	8006b4e <prvAddCurrentTaskToDelayedList+0x3a>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4819      	ldr	r0, [pc, #100]	; (8006bac <prvAddCurrentTaskToDelayedList+0x98>)
 8006b48:	f7fe fbc7 	bl	80052da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b4c:	e026      	b.n	8006b9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d209      	bcs.n	8006b7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f7fe fbd5 	bl	8005322 <vListInsert>
}
 8006b78:	e010      	b.n	8006b9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4619      	mov	r1, r3
 8006b86:	4610      	mov	r0, r2
 8006b88:	f7fe fbcb 	bl	8005322 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d202      	bcs.n	8006b9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b96:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20001398 	.word	0x20001398
 8006ba8:	20000ec0 	.word	0x20000ec0
 8006bac:	20001380 	.word	0x20001380
 8006bb0:	20001350 	.word	0x20001350
 8006bb4:	2000134c 	.word	0x2000134c
 8006bb8:	200013b4 	.word	0x200013b4

08006bbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bc6:	f000 fb07 	bl	80071d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <xTimerCreateTimerTask+0x80>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d021      	beq.n	8006c16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bda:	1d3a      	adds	r2, r7, #4
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	f107 030c 	add.w	r3, r7, #12
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fb31 	bl	800524c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	9202      	str	r2, [sp, #8]
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	460a      	mov	r2, r1
 8006bfc:	4910      	ldr	r1, [pc, #64]	; (8006c40 <xTimerCreateTimerTask+0x84>)
 8006bfe:	4811      	ldr	r0, [pc, #68]	; (8006c44 <xTimerCreateTimerTask+0x88>)
 8006c00:	f7ff f8de 	bl	8005dc0 <xTaskCreateStatic>
 8006c04:	4603      	mov	r3, r0
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <xTimerCreateTimerTask+0x8c>)
 8006c08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <xTimerCreateTimerTask+0x8c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	613b      	str	r3, [r7, #16]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200013f0 	.word	0x200013f0
 8006c40:	08007ba0 	.word	0x08007ba0
 8006c44:	08006d81 	.word	0x08006d81
 8006c48:	200013f4 	.word	0x200013f4

08006c4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	623b      	str	r3, [r7, #32]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <xTimerGenericCommand+0x98>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d02a      	beq.n	8006cd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	dc18      	bgt.n	8006cc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c94:	f7ff feb2 	bl	80069fc <xTaskGetSchedulerState>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d109      	bne.n	8006cb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <xTimerGenericCommand+0x98>)
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	f107 0110 	add.w	r1, r7, #16
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006caa:	f7fe fca1 	bl	80055f0 <xQueueGenericSend>
 8006cae:	6278      	str	r0, [r7, #36]	; 0x24
 8006cb0:	e012      	b.n	8006cd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <xTimerGenericCommand+0x98>)
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f107 0110 	add.w	r1, r7, #16
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f7fe fc97 	bl	80055f0 <xQueueGenericSend>
 8006cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006cc4:	e008      	b.n	8006cd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cc6:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <xTimerGenericCommand+0x98>)
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f107 0110 	add.w	r1, r7, #16
 8006cce:	2300      	movs	r3, #0
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	f7fe fd8b 	bl	80057ec <xQueueGenericSendFromISR>
 8006cd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3728      	adds	r7, #40	; 0x28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200013f0 	.word	0x200013f0

08006ce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf2:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <prvProcessExpiredTimer+0x94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe fb47 	bl	8005394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d022      	beq.n	8006d5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	18d1      	adds	r1, r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	6978      	ldr	r0, [r7, #20]
 8006d22:	f000 f8d1 	bl	8006ec8 <prvInsertTimerInActiveList>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01f      	beq.n	8006d6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	2100      	movs	r1, #0
 8006d36:	6978      	ldr	r0, [r7, #20]
 8006d38:	f7ff ff88 	bl	8006c4c <xTimerGenericCommand>
 8006d3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d113      	bne.n	8006d6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	6978      	ldr	r0, [r7, #20]
 8006d72:	4798      	blx	r3
}
 8006d74:	bf00      	nop
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200013e8 	.word	0x200013e8

08006d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d88:	f107 0308 	add.w	r3, r7, #8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f857 	bl	8006e40 <prvGetNextExpireTime>
 8006d92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4619      	mov	r1, r3
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f803 	bl	8006da4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d9e:	f000 f8d5 	bl	8006f4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006da2:	e7f1      	b.n	8006d88 <prvTimerTask+0x8>

08006da4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dae:	f7ff fa43 	bl	8006238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f866 	bl	8006e88 <prvSampleTimeNow>
 8006dbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d130      	bne.n	8006e26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <prvProcessTimerOrBlockTask+0x3c>
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d806      	bhi.n	8006de0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dd2:	f7ff fa3f 	bl	8006254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff ff85 	bl	8006ce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dde:	e024      	b.n	8006e2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006de6:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <prvProcessTimerOrBlockTask+0x90>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <prvProcessTimerOrBlockTask+0x50>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <prvProcessTimerOrBlockTask+0x52>
 8006df4:	2300      	movs	r3, #0
 8006df6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <prvProcessTimerOrBlockTask+0x94>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4619      	mov	r1, r3
 8006e06:	f7fe ffa7 	bl	8005d58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e0a:	f7ff fa23 	bl	8006254 <xTaskResumeAll>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e14:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <prvProcessTimerOrBlockTask+0x98>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
}
 8006e24:	e001      	b.n	8006e2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e26:	f7ff fa15 	bl	8006254 <xTaskResumeAll>
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200013ec 	.word	0x200013ec
 8006e38:	200013f0 	.word	0x200013f0
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e48:	4b0e      	ldr	r3, [pc, #56]	; (8006e84 <prvGetNextExpireTime+0x44>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <prvGetNextExpireTime+0x16>
 8006e52:	2201      	movs	r2, #1
 8006e54:	e000      	b.n	8006e58 <prvGetNextExpireTime+0x18>
 8006e56:	2200      	movs	r2, #0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d105      	bne.n	8006e70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <prvGetNextExpireTime+0x44>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	e001      	b.n	8006e74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e74:	68fb      	ldr	r3, [r7, #12]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	200013e8 	.word	0x200013e8

08006e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e90:	f7ff fa7e 	bl	8006390 <xTaskGetTickCount>
 8006e94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <prvSampleTimeNow+0x3c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d205      	bcs.n	8006eac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ea0:	f000 f936 	bl	8007110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006eb2:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <prvSampleTimeNow+0x3c>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200013f8 	.word	0x200013f8

08006ec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d812      	bhi.n	8006f14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	1ad2      	subs	r2, r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d302      	bcc.n	8006f02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e01b      	b.n	8006f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <prvInsertTimerInActiveList+0x7c>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7fe fa08 	bl	8005322 <vListInsert>
 8006f12:	e012      	b.n	8006f3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d206      	bcs.n	8006f2a <prvInsertTimerInActiveList+0x62>
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d302      	bcc.n	8006f2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e007      	b.n	8006f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f2a:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <prvInsertTimerInActiveList+0x80>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f7fe f9f4 	bl	8005322 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f3a:	697b      	ldr	r3, [r7, #20]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200013ec 	.word	0x200013ec
 8006f48:	200013e8 	.word	0x200013e8

08006f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08e      	sub	sp, #56	; 0x38
 8006f50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f52:	e0ca      	b.n	80070ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da18      	bge.n	8006f8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f5a:	1d3b      	adds	r3, r7, #4
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	61fb      	str	r3, [r7, #28]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f82:	6850      	ldr	r0, [r2, #4]
 8006f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f86:	6892      	ldr	r2, [r2, #8]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f2c0 80ab 	blt.w	80070ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe f9f5 	bl	8005394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006faa:	463b      	mov	r3, r7
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff ff6b 	bl	8006e88 <prvSampleTimeNow>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b09      	cmp	r3, #9
 8006fb8:	f200 8096 	bhi.w	80070e8 <prvProcessReceivedCommands+0x19c>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <prvProcessReceivedCommands+0x78>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fed 	.word	0x08006fed
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08006fed 	.word	0x08006fed
 8006fd0:	08007061 	.word	0x08007061
 8006fd4:	08007075 	.word	0x08007075
 8006fd8:	080070bf 	.word	0x080070bf
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006fed 	.word	0x08006fed
 8006fe4:	08007061 	.word	0x08007061
 8006fe8:	08007075 	.word	0x08007075
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	18d1      	adds	r1, r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700c:	f7ff ff5c 	bl	8006ec8 <prvInsertTimerInActiveList>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d069      	beq.n	80070ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05e      	beq.n	80070ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	441a      	add	r2, r3
 8007034:	2300      	movs	r3, #0
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	2100      	movs	r1, #0
 800703c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800703e:	f7ff fe05 	bl	8006c4c <xTimerGenericCommand>
 8007042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d14f      	bne.n	80070ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	61bb      	str	r3, [r7, #24]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007072:	e03a      	b.n	80070ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	617b      	str	r3, [r7, #20]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	18d1      	adds	r1, r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b8:	f7ff ff06 	bl	8006ec8 <prvInsertTimerInActiveList>
					break;
 80070bc:	e015      	b.n	80070ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f000 fbdf 	bl	8007890 <vPortFree>
 80070d2:	e00a      	b.n	80070ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070e6:	e000      	b.n	80070ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80070e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <prvProcessReceivedCommands+0x1c0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	1d39      	adds	r1, r7, #4
 80070f0:	2200      	movs	r2, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fc16 	bl	8005924 <xQueueReceive>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f47f af2a 	bne.w	8006f54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	3730      	adds	r7, #48	; 0x30
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200013f0 	.word	0x200013f0

08007110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007116:	e048      	b.n	80071aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007122:	4b2b      	ldr	r3, [pc, #172]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe f92f 	bl	8005394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02e      	beq.n	80071aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d90e      	bls.n	800717c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800716a:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fe f8d4 	bl	8005322 <vListInsert>
 800717a:	e016      	b.n	80071aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	2100      	movs	r1, #0
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fd60 	bl	8006c4c <xTimerGenericCommand>
 800718c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	603b      	str	r3, [r7, #0]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1b1      	bne.n	8007118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <prvSwitchTimerLists+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <prvSwitchTimerLists+0xc0>)
 80071c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071c2:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <prvSwitchTimerLists+0xc4>)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	6013      	str	r3, [r2, #0]
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	200013e8 	.word	0x200013e8
 80071d4:	200013ec 	.word	0x200013ec

080071d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071de:	f000 f969 	bl	80074b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <prvCheckForValidListAndQueue+0x60>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d120      	bne.n	800722c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071ea:	4814      	ldr	r0, [pc, #80]	; (800723c <prvCheckForValidListAndQueue+0x64>)
 80071ec:	f7fe f848 	bl	8005280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071f0:	4813      	ldr	r0, [pc, #76]	; (8007240 <prvCheckForValidListAndQueue+0x68>)
 80071f2:	f7fe f845 	bl	8005280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <prvCheckForValidListAndQueue+0x6c>)
 80071f8:	4a10      	ldr	r2, [pc, #64]	; (800723c <prvCheckForValidListAndQueue+0x64>)
 80071fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071fc:	4b12      	ldr	r3, [pc, #72]	; (8007248 <prvCheckForValidListAndQueue+0x70>)
 80071fe:	4a10      	ldr	r2, [pc, #64]	; (8007240 <prvCheckForValidListAndQueue+0x68>)
 8007200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007202:	2300      	movs	r3, #0
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	4b11      	ldr	r3, [pc, #68]	; (800724c <prvCheckForValidListAndQueue+0x74>)
 8007208:	4a11      	ldr	r2, [pc, #68]	; (8007250 <prvCheckForValidListAndQueue+0x78>)
 800720a:	2110      	movs	r1, #16
 800720c:	200a      	movs	r0, #10
 800720e:	f7fe f953 	bl	80054b8 <xQueueGenericCreateStatic>
 8007212:	4603      	mov	r3, r0
 8007214:	4a08      	ldr	r2, [pc, #32]	; (8007238 <prvCheckForValidListAndQueue+0x60>)
 8007216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <prvCheckForValidListAndQueue+0x60>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <prvCheckForValidListAndQueue+0x60>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	490b      	ldr	r1, [pc, #44]	; (8007254 <prvCheckForValidListAndQueue+0x7c>)
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fd6c 	bl	8005d04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800722c:	f000 f972 	bl	8007514 <vPortExitCritical>
}
 8007230:	bf00      	nop
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200013f0 	.word	0x200013f0
 800723c:	200013c0 	.word	0x200013c0
 8007240:	200013d4 	.word	0x200013d4
 8007244:	200013e8 	.word	0x200013e8
 8007248:	200013ec 	.word	0x200013ec
 800724c:	2000149c 	.word	0x2000149c
 8007250:	200013fc 	.word	0x200013fc
 8007254:	08007ba8 	.word	0x08007ba8

08007258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b04      	subs	r3, #4
 8007268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3b04      	subs	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007288:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <pxPortInitialiseStack+0x64>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3b14      	subs	r3, #20
 8007292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b04      	subs	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f06f 0202 	mvn.w	r2, #2
 80072a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3b20      	subs	r3, #32
 80072ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	080072c1 	.word	0x080072c1

080072c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <prvTaskExitError+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d00a      	beq.n	80072ea <prvTaskExitError+0x2a>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <prvTaskExitError+0x28>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60bb      	str	r3, [r7, #8]
}
 80072fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072fe:	bf00      	nop
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0fc      	beq.n	8007300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	2000000c 	.word	0x2000000c
	...

08007320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <pxCurrentTCBConst2>)
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	6808      	ldr	r0, [r1, #0]
 8007326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f380 8809 	msr	PSP, r0
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8811 	msr	BASEPRI, r0
 800733a:	4770      	bx	lr
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst2>:
 8007340:	20000ec0 	.word	0x20000ec0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007348:	4808      	ldr	r0, [pc, #32]	; (800736c <prvPortStartFirstTask+0x24>)
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f380 8808 	msr	MSP, r0
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f380 8814 	msr	CONTROL, r0
 800735a:	b662      	cpsie	i
 800735c:	b661      	cpsie	f
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	df00      	svc	0
 8007368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800736a:	bf00      	nop
 800736c:	e000ed08 	.word	0xe000ed08

08007370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007376:	4b46      	ldr	r3, [pc, #280]	; (8007490 <xPortStartScheduler+0x120>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a46      	ldr	r2, [pc, #280]	; (8007494 <xPortStartScheduler+0x124>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10a      	bne.n	8007396 <xPortStartScheduler+0x26>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	613b      	str	r3, [r7, #16]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007396:	4b3e      	ldr	r3, [pc, #248]	; (8007490 <xPortStartScheduler+0x120>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3f      	ldr	r2, [pc, #252]	; (8007498 <xPortStartScheduler+0x128>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10a      	bne.n	80073b6 <xPortStartScheduler+0x46>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073b6:	4b39      	ldr	r3, [pc, #228]	; (800749c <xPortStartScheduler+0x12c>)
 80073b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	4b31      	ldr	r3, [pc, #196]	; (80074a0 <xPortStartScheduler+0x130>)
 80073dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <xPortStartScheduler+0x134>)
 80073e0:	2207      	movs	r2, #7
 80073e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073e4:	e009      	b.n	80073fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073e6:	4b2f      	ldr	r3, [pc, #188]	; (80074a4 <xPortStartScheduler+0x134>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4a2d      	ldr	r2, [pc, #180]	; (80074a4 <xPortStartScheduler+0x134>)
 80073ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d0ef      	beq.n	80073e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007406:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <xPortStartScheduler+0x134>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1c3 0307 	rsb	r3, r3, #7
 800740e:	2b04      	cmp	r3, #4
 8007410:	d00a      	beq.n	8007428 <xPortStartScheduler+0xb8>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60bb      	str	r3, [r7, #8]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007428:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <xPortStartScheduler+0x134>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <xPortStartScheduler+0x134>)
 8007430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <xPortStartScheduler+0x134>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800743a:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <xPortStartScheduler+0x134>)
 800743c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007446:	4b18      	ldr	r3, [pc, #96]	; (80074a8 <xPortStartScheduler+0x138>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <xPortStartScheduler+0x138>)
 800744c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <xPortStartScheduler+0x138>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <xPortStartScheduler+0x138>)
 8007458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800745c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800745e:	f000 f8dd 	bl	800761c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <xPortStartScheduler+0x13c>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007468:	f000 f8fc 	bl	8007664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800746c:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <xPortStartScheduler+0x140>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <xPortStartScheduler+0x140>)
 8007472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007478:	f7ff ff66 	bl	8007348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800747c:	f7ff f852 	bl	8006524 <vTaskSwitchContext>
	prvTaskExitError();
 8007480:	f7ff ff1e 	bl	80072c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	e000ed00 	.word	0xe000ed00
 8007494:	410fc271 	.word	0x410fc271
 8007498:	410fc270 	.word	0x410fc270
 800749c:	e000e400 	.word	0xe000e400
 80074a0:	200014ec 	.word	0x200014ec
 80074a4:	200014f0 	.word	0x200014f0
 80074a8:	e000ed20 	.word	0xe000ed20
 80074ac:	2000000c 	.word	0x2000000c
 80074b0:	e000ef34 	.word	0xe000ef34

080074b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
}
 80074cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <vPortEnterCritical+0x58>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a0d      	ldr	r2, [pc, #52]	; (800750c <vPortEnterCritical+0x58>)
 80074d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <vPortEnterCritical+0x58>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10f      	bne.n	8007500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <vPortEnterCritical+0x5c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <vPortEnterCritical+0x4c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	603b      	str	r3, [r7, #0]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vPortEnterCritical+0x4a>
	}
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	2000000c 	.word	0x2000000c
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <vPortExitCritical+0x50>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <vPortExitCritical+0x24>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	607b      	str	r3, [r7, #4]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <vPortExitCritical+0x50>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <vPortExitCritical+0x50>)
 8007540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007542:	4b08      	ldr	r3, [pc, #32]	; (8007564 <vPortExitCritical+0x50>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <vPortExitCritical+0x42>
 800754a:	2300      	movs	r3, #0
 800754c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f383 8811 	msr	BASEPRI, r3
}
 8007554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	2000000c 	.word	0x2000000c
	...

08007570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007570:	f3ef 8009 	mrs	r0, PSP
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <pxCurrentTCBConst>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f01e 0f10 	tst.w	lr, #16
 8007580:	bf08      	it	eq
 8007582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007594:	f380 8811 	msr	BASEPRI, r0
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f7fe ffc0 	bl	8006524 <vTaskSwitchContext>
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f380 8811 	msr	BASEPRI, r0
 80075ac:	bc09      	pop	{r0, r3}
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	6808      	ldr	r0, [r1, #0]
 80075b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b6:	f01e 0f10 	tst.w	lr, #16
 80075ba:	bf08      	it	eq
 80075bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075c0:	f380 8809 	msr	PSP, r0
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst>:
 80075d0:	20000ec0 	.word	0x20000ec0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075f2:	f7fe fedd 	bl	80063b0 <xTaskIncrementTick>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <xPortSysTickHandler+0x40>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f383 8811 	msr	BASEPRI, r3
}
 800760e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <vPortSetupTimerInterrupt+0x38>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <vPortSetupTimerInterrupt+0x3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <vPortSetupTimerInterrupt+0x40>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	099b      	lsrs	r3, r3, #6
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <vPortSetupTimerInterrupt+0x44>)
 800763a:	3b01      	subs	r3, #1
 800763c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800763e:	4b04      	ldr	r3, [pc, #16]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007640:	2207      	movs	r2, #7
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000e010 	.word	0xe000e010
 8007654:	e000e018 	.word	0xe000e018
 8007658:	20000000 	.word	0x20000000
 800765c:	10624dd3 	.word	0x10624dd3
 8007660:	e000e014 	.word	0xe000e014

08007664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007674 <vPortEnableVFP+0x10>
 8007668:	6801      	ldr	r1, [r0, #0]
 800766a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800766e:	6001      	str	r1, [r0, #0]
 8007670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007672:	bf00      	nop
 8007674:	e000ed88 	.word	0xe000ed88

08007678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800767e:	f3ef 8305 	mrs	r3, IPSR
 8007682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d914      	bls.n	80076b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <vPortValidateInterruptPriority+0x70>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <vPortValidateInterruptPriority+0x74>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	7afa      	ldrb	r2, [r7, #11]
 800769a:	429a      	cmp	r2, r3
 800769c:	d20a      	bcs.n	80076b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <vPortValidateInterruptPriority+0x78>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <vPortValidateInterruptPriority+0x7c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d90a      	bls.n	80076da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	603b      	str	r3, [r7, #0]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <vPortValidateInterruptPriority+0x60>
	}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	e000e3f0 	.word	0xe000e3f0
 80076ec:	200014ec 	.word	0x200014ec
 80076f0:	e000ed0c 	.word	0xe000ed0c
 80076f4:	200014f0 	.word	0x200014f0

080076f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007704:	f7fe fd98 	bl	8006238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007708:	4b5b      	ldr	r3, [pc, #364]	; (8007878 <pvPortMalloc+0x180>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007710:	f000 f920 	bl	8007954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007714:	4b59      	ldr	r3, [pc, #356]	; (800787c <pvPortMalloc+0x184>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 8093 	bne.w	8007848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01d      	beq.n	8007764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007728:	2208      	movs	r2, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4413      	add	r3, r2
 800772e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f023 0307 	bic.w	r3, r3, #7
 8007740:	3308      	adds	r3, #8
 8007742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <pvPortMalloc+0x6c>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	617b      	str	r3, [r7, #20]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d06e      	beq.n	8007848 <pvPortMalloc+0x150>
 800776a:	4b45      	ldr	r3, [pc, #276]	; (8007880 <pvPortMalloc+0x188>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	429a      	cmp	r2, r3
 8007772:	d869      	bhi.n	8007848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007774:	4b43      	ldr	r3, [pc, #268]	; (8007884 <pvPortMalloc+0x18c>)
 8007776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007778:	4b42      	ldr	r3, [pc, #264]	; (8007884 <pvPortMalloc+0x18c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800777e:	e004      	b.n	800778a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	429a      	cmp	r2, r3
 8007792:	d903      	bls.n	800779c <pvPortMalloc+0xa4>
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f1      	bne.n	8007780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <pvPortMalloc+0x180>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d050      	beq.n	8007848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2208      	movs	r2, #8
 80077ac:	4413      	add	r3, r2
 80077ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	2308      	movs	r3, #8
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d91f      	bls.n	8007808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4413      	add	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <pvPortMalloc+0xf8>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	613b      	str	r3, [r7, #16]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	1ad2      	subs	r2, r2, r3
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007802:	69b8      	ldr	r0, [r7, #24]
 8007804:	f000 f908 	bl	8007a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007808:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <pvPortMalloc+0x188>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <pvPortMalloc+0x188>)
 8007814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007816:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <pvPortMalloc+0x188>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <pvPortMalloc+0x190>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d203      	bcs.n	800782a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007822:	4b17      	ldr	r3, [pc, #92]	; (8007880 <pvPortMalloc+0x188>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a18      	ldr	r2, [pc, #96]	; (8007888 <pvPortMalloc+0x190>)
 8007828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <pvPortMalloc+0x184>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	431a      	orrs	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <pvPortMalloc+0x194>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a11      	ldr	r2, [pc, #68]	; (800788c <pvPortMalloc+0x194>)
 8007846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007848:	f7fe fd04 	bl	8006254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <pvPortMalloc+0x174>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60fb      	str	r3, [r7, #12]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <pvPortMalloc+0x172>
	return pvReturn;
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3728      	adds	r7, #40	; 0x28
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200020b4 	.word	0x200020b4
 800787c:	200020c8 	.word	0x200020c8
 8007880:	200020b8 	.word	0x200020b8
 8007884:	200020ac 	.word	0x200020ac
 8007888:	200020bc 	.word	0x200020bc
 800788c:	200020c0 	.word	0x200020c0

08007890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d04d      	beq.n	800793e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078a2:	2308      	movs	r3, #8
 80078a4:	425b      	negs	r3, r3
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4413      	add	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <vPortFree+0xb8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <vPortFree+0x44>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <vPortFree+0x62>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60bb      	str	r3, [r7, #8]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <vPortFree+0xb8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01e      	beq.n	800793e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d11a      	bne.n	800793e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <vPortFree+0xb8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007918:	f7fe fc8e 	bl	8006238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <vPortFree+0xbc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4413      	add	r3, r2
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <vPortFree+0xbc>)
 8007928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f000 f874 	bl	8007a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <vPortFree+0xc0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	4a06      	ldr	r2, [pc, #24]	; (8007950 <vPortFree+0xc0>)
 8007938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800793a:	f7fe fc8b 	bl	8006254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800793e:	bf00      	nop
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	200020c8 	.word	0x200020c8
 800794c:	200020b8 	.word	0x200020b8
 8007950:	200020c4 	.word	0x200020c4

08007954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800795a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800795e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007960:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <prvHeapInit+0xac>)
 8007962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3307      	adds	r3, #7
 8007972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <prvHeapInit+0xac>)
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <prvHeapInit+0xb0>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007992:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <prvHeapInit+0xb0>)
 8007994:	2200      	movs	r2, #0
 8007996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079a0:	2208      	movs	r2, #8
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <prvHeapInit+0xb4>)
 80079b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <prvHeapInit+0xb4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <prvHeapInit+0xb4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <prvHeapInit+0xb4>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4a0a      	ldr	r2, [pc, #40]	; (8007a0c <prvHeapInit+0xb8>)
 80079e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <prvHeapInit+0xbc>)
 80079ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079ec:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <prvHeapInit+0xc0>)
 80079ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	200014f4 	.word	0x200014f4
 8007a04:	200020ac 	.word	0x200020ac
 8007a08:	200020b4 	.word	0x200020b4
 8007a0c:	200020bc 	.word	0x200020bc
 8007a10:	200020b8 	.word	0x200020b8
 8007a14:	200020c8 	.word	0x200020c8

08007a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <prvInsertBlockIntoFreeList+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <prvInsertBlockIntoFreeList+0x14>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8f7      	bhi.n	8007a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d108      	bne.n	8007a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	441a      	add	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d118      	bne.n	8007aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d00d      	beq.n	8007a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e008      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e003      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d002      	beq.n	8007ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	200020ac 	.word	0x200020ac
 8007ac8:	200020b4 	.word	0x200020b4

08007acc <memset>:
 8007acc:	4402      	add	r2, r0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d100      	bne.n	8007ad6 <memset+0xa>
 8007ad4:	4770      	bx	lr
 8007ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ada:	e7f9      	b.n	8007ad0 <memset+0x4>

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4d0d      	ldr	r5, [pc, #52]	; (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1b64      	subs	r4, r4, r5
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4d0b      	ldr	r5, [pc, #44]	; (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	; (8007b20 <__libc_init_array+0x44>)
 8007af0:	f000 f826 	bl	8007b40 <_init>
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2600      	movs	r6, #0
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	08007c90 	.word	0x08007c90
 8007b18:	08007c90 	.word	0x08007c90
 8007b1c:	08007c90 	.word	0x08007c90
 8007b20:	08007c94 	.word	0x08007c94

08007b24 <memcpy>:
 8007b24:	440a      	add	r2, r1
 8007b26:	4291      	cmp	r1, r2
 8007b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b2c:	d100      	bne.n	8007b30 <memcpy+0xc>
 8007b2e:	4770      	bx	lr
 8007b30:	b510      	push	{r4, lr}
 8007b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	d1f9      	bne.n	8007b32 <memcpy+0xe>
 8007b3e:	bd10      	pop	{r4, pc}

08007b40 <_init>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr

08007b4c <_fini>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr
