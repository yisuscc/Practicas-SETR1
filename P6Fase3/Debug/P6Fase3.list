
P6Fase3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800919c  0800919c  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a4  080091a4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080091ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c98  20000118  080092c4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db0  080092c4  00020db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001caec  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fff  00000000  00000000  0003cc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  00040c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001371  00000000  00000000  000425c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000603f  00000000  00000000  00043931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc8e  00000000  00000000  00049970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fa8  00000000  00000000  000695fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ac8  00000000  00000000  0015e5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00165070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090dc 	.word	0x080090dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	080090dc 	.word	0x080090dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fde5 	bl	8001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f812 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9ac 	bl	800082c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d4:	f000 f870 	bl	80005b8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d8:	f000 f8a6 	bl	8000628 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004dc:	f000 f8e2 	bl	80006a4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e0:	f000 f906 	bl	80006f0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f942 	bl	800076c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e8:	f000 f970 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f008 f814 	bl	8008518 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x2c>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	; 0x58
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2244      	movs	r2, #68	; 0x44
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f008 fdbe 	bl	8009084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051a:	f002 fd37 	bl	8002f8c <HAL_PWREx_ControlVoltageScaling>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 fb06 	bl	8000b34 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000528:	f002 fd12 	bl	8002f50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <SystemClock_Config+0xc0>)
 800052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000532:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <SystemClock_Config+0xc0>)
 8000534:	f023 0318 	bic.w	r3, r3, #24
 8000538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800053c:	2314      	movs	r3, #20
 800053e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2360      	movs	r3, #96	; 0x60
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800055c:	2328      	movs	r3, #40	; 0x28
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000560:	2307      	movs	r3, #7
 8000562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fe2d 	bl	80031d0 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800057c:	f000 fada 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	2104      	movs	r1, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f003 f9f5 	bl	8003988 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005a4:	f000 fac6 	bl	8000b34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005a8:	f003 fefc 	bl	80043a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <MX_DFSDM1_Init+0x6c>)
 80005c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_DFSDM1_Init+0x68>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_DFSDM1_Init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_DFSDM1_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_DFSDM1_Init+0x68>)
 800060e:	f000 feed 	bl	80013ec <HAL_DFSDM_ChannelInit>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000618:	f000 fa8c 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000134 	.word	0x20000134
 8000624:	40016020 	.word	0x40016020

08000628 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C2_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C2_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C2_Init+0x74>)
 8000634:	f640 6214 	movw	r2, #3604	; 0xe14
 8000638:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_I2C2_Init+0x74>)
 8000642:	2201      	movs	r2, #1
 8000644:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C2_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_I2C2_Init+0x74>)
 8000666:	f001 f9b2 	bl	80019ce <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 fa60 	bl	8000b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_I2C2_Init+0x74>)
 8000678:	f001 fa44 	bl	8001b04 <HAL_I2CEx_ConfigAnalogFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000682:	f000 fa57 	bl	8000b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_I2C2_Init+0x74>)
 800068a:	f001 fa86 	bl	8001b9a <HAL_I2CEx_ConfigDigitalFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 fa4e 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000016c 	.word	0x2000016c
 80006a0:	40005800 	.word	0x40005800

080006a4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <MX_QUADSPI_Init+0x48>)
 80006ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006bc:	2210      	movs	r2, #16
 80006be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006c2:	2217      	movs	r2, #23
 80006c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_QUADSPI_Init+0x44>)
 80006d4:	f002 fcc0 	bl	8003058 <HAL_QSPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80006de:	f000 fa29 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001c0 	.word	0x200001c0
 80006ec:	a0001000 	.word	0xa0001000

080006f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_SPI3_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_SPI3_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_SPI3_Init+0x74>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_SPI3_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI3_Init+0x74>)
 800070a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800070e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI3_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_SPI3_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI3_Init+0x74>)
 800071e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000722:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_SPI3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI3_Init+0x74>)
 800073e:	2207      	movs	r2, #7
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI3_Init+0x74>)
 800074a:	2208      	movs	r2, #8
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_SPI3_Init+0x74>)
 8000750:	f004 f80a 	bl	8004768 <HAL_SPI_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f9eb 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000204 	.word	0x20000204
 8000768:	40003c00 	.word	0x40003c00

0800076c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART1_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x58>)
 80007b0:	f004 f87d 	bl	80048ae <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f9bb 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000268 	.word	0x20000268
 80007c8:	40013800 	.word	0x40013800

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_USART3_UART_Init+0x5c>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART3_UART_Init+0x58>)
 8000810:	f004 f84d 	bl	80048ae <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081a:	f000 f98b 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200002f0 	.word	0x200002f0
 8000828:	40004800 	.word	0x40004800

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	4bb7      	ldr	r3, [pc, #732]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4ab6      	ldr	r2, [pc, #728]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4bb4      	ldr	r3, [pc, #720]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4bb1      	ldr	r3, [pc, #708]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4ab0      	ldr	r2, [pc, #704]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4bae      	ldr	r3, [pc, #696]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4bab      	ldr	r3, [pc, #684]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4aaa      	ldr	r2, [pc, #680]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4ba8      	ldr	r3, [pc, #672]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4ba5      	ldr	r3, [pc, #660]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4aa4      	ldr	r2, [pc, #656]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4ba2      	ldr	r3, [pc, #648]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b9f      	ldr	r3, [pc, #636]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a9e      	ldr	r2, [pc, #632]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b9c      	ldr	r3, [pc, #624]	; (8000b20 <MX_GPIO_Init+0x2f4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80008c0:	4898      	ldr	r0, [pc, #608]	; (8000b24 <MX_GPIO_Init+0x2f8>)
 80008c2:	f001 f849 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f248 111c 	movw	r1, #33052	; 0x811c
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 f842 	bl	8001958 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 80008d4:	2200      	movs	r2, #0
 80008d6:	f24f 0116 	movw	r1, #61462	; 0xf016
 80008da:	4893      	ldr	r0, [pc, #588]	; (8000b28 <MX_GPIO_Init+0x2fc>)
 80008dc:	f001 f83c 	bl	8001958 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f241 0181 	movw	r1, #4225	; 0x1081
 80008e6:	4891      	ldr	r0, [pc, #580]	; (8000b2c <MX_GPIO_Init+0x300>)
 80008e8:	f001 f836 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f2:	488e      	ldr	r0, [pc, #568]	; (8000b2c <MX_GPIO_Init+0x300>)
 80008f4:	f001 f830 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80008fe:	488c      	ldr	r0, [pc, #560]	; (8000b30 <MX_GPIO_Init+0x304>)
 8000900:	f001 f82a 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	4887      	ldr	r0, [pc, #540]	; (8000b28 <MX_GPIO_Init+0x2fc>)
 800090a:	f001 f825 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2101      	movs	r1, #1
 8000912:	4884      	ldr	r0, [pc, #528]	; (8000b24 <MX_GPIO_Init+0x2f8>)
 8000914:	f001 f820 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000918:	f240 1315 	movw	r3, #277	; 0x115
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	487c      	ldr	r0, [pc, #496]	; (8000b24 <MX_GPIO_Init+0x2f8>)
 8000932:	f000 fe67 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000936:	236a      	movs	r3, #106	; 0x6a
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4876      	ldr	r0, [pc, #472]	; (8000b24 <MX_GPIO_Init+0x2f8>)
 800094c:	f000 fe5a 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000956:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4872      	ldr	r0, [pc, #456]	; (8000b30 <MX_GPIO_Init+0x304>)
 8000968:	f000 fe4c 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800096c:	233f      	movs	r3, #63	; 0x3f
 800096e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000970:	230b      	movs	r3, #11
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	486c      	ldr	r0, [pc, #432]	; (8000b30 <MX_GPIO_Init+0x304>)
 8000980:	f000 fe40 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000984:	2303      	movs	r3, #3
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000994:	2308      	movs	r3, #8
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fe2f 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80009a6:	f248 131c 	movw	r3, #33052	; 0x811c
 80009aa:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f000 fe1f 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80009c6:	23e0      	movs	r3, #224	; 0xe0
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d6:	2305      	movs	r3, #5
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f000 fe0e 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	484a      	ldr	r0, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x2fc>)
 80009fe:	f000 fe01 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000a02:	f24f 0336 	movw	r3, #61494	; 0xf036
 8000a06:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4843      	ldr	r0, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x2fc>)
 8000a1c:	f000 fdf2 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000a20:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000a24:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	483d      	ldr	r0, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x300>)
 8000a38:	f000 fde4 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000a3c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4835      	ldr	r0, [pc, #212]	; (8000b2c <MX_GPIO_Init+0x300>)
 8000a56:	f000 fdd5 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	482f      	ldr	r0, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x304>)
 8000a74:	f000 fdc6 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4828      	ldr	r0, [pc, #160]	; (8000b30 <MX_GPIO_Init+0x304>)
 8000a90:	f000 fdb8 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	481f      	ldr	r0, [pc, #124]	; (8000b2c <MX_GPIO_Init+0x300>)
 8000ab0:	f000 fda8 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ab4:	2378      	movs	r3, #120	; 0x78
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <MX_GPIO_Init+0x300>)
 8000ad0:	f000 fd98 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_GPIO_Init+0x2fc>)
 8000af2:	f000 fd87 	bl	8001604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2017      	movs	r0, #23
 8000afc:	f000 fc3f 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b00:	2017      	movs	r0, #23
 8000b02:	f000 fc58 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2028      	movs	r0, #40	; 0x28
 8000b0c:	f000 fc37 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b10:	2028      	movs	r0, #40	; 0x28
 8000b12:	f000 fc50 	bl	80013b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48001000 	.word	0x48001000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000c00 	.word	0x48000c00
 8000b30:	48000800 	.word	0x48000800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ac      	sub	sp, #176	; 0xb0
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2288      	movs	r2, #136	; 0x88
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa6b 	bl	8009084 <memset>
  if(DFSDM1_Init == 0)
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d142      	bne.n	8000c3c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f902 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000bd2:	f7ff ffaf 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000c06:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c20:	2306      	movs	r3, #6
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000c2e:	f000 fce9 	bl	8001604 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a02      	ldr	r2, [pc, #8]	; (8000c44 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c3a:	6013      	str	r3, [r2, #0]
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	37b0      	adds	r7, #176	; 0xb0
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000378 	.word	0x20000378
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001000 	.word	0x48001000

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ac      	sub	sp, #176	; 0xb0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2288      	movs	r2, #136	; 0x88
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f008 fa07 	bl	8009084 <memset>
  if(hi2c->Instance==I2C2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_I2C_MspInit+0xb0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13b      	bne.n	8000cf8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 f89f 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff ff4c 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000cb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <HAL_I2C_MspInit+0xb8>)
 8000cdc:	f000 fc92 	bl	8001604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cea:	6593      	str	r3, [r2, #88]	; 0x58
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_I2C_MspInit+0xb4>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	37b0      	adds	r7, #176	; 0xb0
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40005800 	.word	0x40005800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_QSPI_MspInit+0x7c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d128      	bne.n	8000d80 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d38:	6513      	str	r3, [r2, #80]	; 0x50
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_QSPI_MspInit+0x80>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000d5e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000d62:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d70:	230a      	movs	r3, #10
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_QSPI_MspInit+0x84>)
 8000d7c:	f000 fc42 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	a0001000 	.word	0xa0001000
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48001000 	.word	0x48001000

08000d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_SPI_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d128      	bne.n	8000e08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x80>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000de6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x84>)
 8000e04:	f000 fbfe 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40003c00 	.word	0x40003c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000800 	.word	0x48000800

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	; 0xb8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2288      	movs	r2, #136	; 0x88
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f008 f921 	bl	8009084 <memset>
  if(huart->Instance==USART1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d13b      	bne.n	8000ec4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e50:	2300      	movs	r3, #0
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 ffb9 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff fe66 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	4a39      	ldr	r2, [pc, #228]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6613      	str	r3, [r2, #96]	; 0x60
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000e98:	23c0      	movs	r3, #192	; 0xc0
 8000e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4826      	ldr	r0, [pc, #152]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ebe:	f000 fba1 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec2:	e040      	b.n	8000f46 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <HAL_UART_MspInit+0x140>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d13b      	bne.n	8000f46 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 ff78 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000ee6:	f7ff fe25 	bl	8000b34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <HAL_UART_MspInit+0x144>)
 8000f42:	f000 fb5f 	bl	8001604 <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	37b8      	adds	r7, #184	; 0xb8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	40004800 	.word	0x40004800
 8000f60:	48000c00 	.word	0x48000c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f8c6 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f000 fce3 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000fc2:	2040      	movs	r0, #64	; 0x40
 8000fc4:	f000 fce0 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000fc8:	2080      	movs	r0, #128	; 0x80
 8000fca:	f000 fcdd 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000fce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd2:	f000 fcd9 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000fde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fe2:	f000 fcd1 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000fe6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fea:	f000 fccd 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000fee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ff2:	f000 fcc9 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000ff6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ffa:	f000 fcc5 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000ffe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001002:	f000 fcc1 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <OTG_FS_IRQHandler+0x10>)
 8001012:	f000 ff61 	bl	8001ed8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000884 	.word	0x20000884

08001020 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001048:	f7ff ffea 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f008 f80f 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff fa25 	bl	80004c4 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001088:	080091ac 	.word	0x080091ac
  ldr r2, =_sbss
 800108c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001090:	20000db0 	.word	0x20000db0

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>

08001096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f961 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f80e 	bl	80010c8 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e001      	b.n	80010bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b8:	f7ff fd42 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_InitTick+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d023      	beq.n	8001124 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_InitTick+0x70>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_InitTick+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f96d 	bl	80013d2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d809      	bhi.n	8001118 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f937 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_InitTick+0x74>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e007      	b.n	8001128 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e004      	b.n	8001128 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e001      	b.n	8001128 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20000000 	.word	0x20000000
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	2000037c 	.word	0x2000037c

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000037c 	.word	0x2000037c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff3e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff31 	bl	800122c <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0ac      	b.n	8001558 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8b2 	bl	800156c <DFSDM_GetChannelFromInstance>
 8001408:	4603      	mov	r3, r0
 800140a:	4a55      	ldr	r2, [pc, #340]	; (8001560 <HAL_DFSDM_ChannelInit+0x174>)
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e09f      	b.n	8001558 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fbb5 	bl	8000b88 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <HAL_DFSDM_ChannelInit+0x178>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_DFSDM_ChannelInit+0x178>)
 8001426:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_DFSDM_ChannelInit+0x178>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d125      	bne.n	800147c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800143a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4948      	ldr	r1, [pc, #288]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001450:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001454:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	493f      	ldr	r1, [pc, #252]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3c      	ldr	r2, [pc, #240]	; (8001568 <HAL_DFSDM_ChannelInit+0x17c>)
 8001476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800147a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800148a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800149a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014a0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020f 	bic.w	r2, r2, #15
 80014b8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80014e0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	3b01      	subs	r3, #1
 80014f2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f002 0207 	and.w	r2, r2, #7
 800150c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001538:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f810 	bl	800156c <DFSDM_GetChannelFromInstance>
 800154c:	4602      	mov	r2, r0
 800154e:	4904      	ldr	r1, [pc, #16]	; (8001560 <HAL_DFSDM_ChannelInit+0x174>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000384 	.word	0x20000384
 8001564:	20000380 	.word	0x20000380
 8001568:	40016000 	.word	0x40016000

0800156c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <DFSDM_GetChannelFromInstance+0x7c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d102      	bne.n	8001582 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e02b      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <DFSDM_GetChannelFromInstance+0x80>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d102      	bne.n	8001590 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800158a:	2301      	movs	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e024      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <DFSDM_GetChannelFromInstance+0x84>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d102      	bne.n	800159e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e01d      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <DFSDM_GetChannelFromInstance+0x88>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d102      	bne.n	80015ac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e016      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <DFSDM_GetChannelFromInstance+0x8c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80015b4:	2305      	movs	r3, #5
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e00f      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <DFSDM_GetChannelFromInstance+0x90>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d102      	bne.n	80015c8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80015c2:	2306      	movs	r3, #6
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e008      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <DFSDM_GetChannelFromInstance+0x94>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80015d0:	2307      	movs	r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e001      	b.n	80015da <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80015d6:	2303      	movs	r3, #3
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40016000 	.word	0x40016000
 80015ec:	40016020 	.word	0x40016020
 80015f0:	40016040 	.word	0x40016040
 80015f4:	40016080 	.word	0x40016080
 80015f8:	400160a0 	.word	0x400160a0
 80015fc:	400160c0 	.word	0x400160c0
 8001600:	400160e0 	.word	0x400160e0

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e17f      	b.n	8001914 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8171 	beq.w	800190e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d005      	beq.n	8001644 <HAL_GPIO_Init+0x40>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d130      	bne.n	80016a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167a:	2201      	movs	r2, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	f003 0201 	and.w	r2, r3, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d118      	bne.n	80016e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d017      	beq.n	8001720 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d123      	bne.n	8001774 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	6939      	ldr	r1, [r7, #16]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80ac 	beq.w	800190e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <HAL_GPIO_Init+0x330>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <HAL_GPIO_Init+0x330>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <HAL_GPIO_Init+0x330>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ce:	4a5a      	ldr	r2, [pc, #360]	; (8001938 <HAL_GPIO_Init+0x334>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017f8:	d025      	beq.n	8001846 <HAL_GPIO_Init+0x242>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x338>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01f      	beq.n	8001842 <HAL_GPIO_Init+0x23e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <HAL_GPIO_Init+0x33c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x23a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x340>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x236>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x344>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x232>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_GPIO_Init+0x348>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x22e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x34c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x22a>
 800182a:	2306      	movs	r3, #6
 800182c:	e00c      	b.n	8001848 <HAL_GPIO_Init+0x244>
 800182e:	2307      	movs	r3, #7
 8001830:	e00a      	b.n	8001848 <HAL_GPIO_Init+0x244>
 8001832:	2305      	movs	r3, #5
 8001834:	e008      	b.n	8001848 <HAL_GPIO_Init+0x244>
 8001836:	2304      	movs	r3, #4
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x244>
 800183a:	2303      	movs	r3, #3
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x244>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x244>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x244>
 8001846:	2300      	movs	r3, #0
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	f002 0203 	and.w	r2, r2, #3
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x334>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_GPIO_Init+0x350>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188a:	4a32      	ldr	r2, [pc, #200]	; (8001954 <HAL_GPIO_Init+0x350>)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_GPIO_Init+0x350>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_GPIO_Init+0x350>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_GPIO_Init+0x350>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_GPIO_Init+0x350>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_GPIO_Init+0x350>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_GPIO_Init+0x350>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae78 	bne.w	8001614 <HAL_GPIO_Init+0x10>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800
 8001944:	48000c00 	.word	0x48000c00
 8001948:	48001000 	.word	0x48001000
 800194c:	48001400 	.word	0x48001400
 8001950:	48001800 	.word	0x48001800
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001974:	e002      	b.n	800197c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f806 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e08d      	b.n	8001afc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d106      	bne.n	80019fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f92b 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2224      	movs	r2, #36	; 0x24
 80019fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d108      	bne.n	8001a70 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69d9      	ldr	r1, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1a      	ldr	r2, [r3, #32]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d138      	bne.n	8001b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e032      	b.n	8001b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d139      	bne.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e033      	b.n	8001c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c34:	b08f      	sub	sp, #60	; 0x3c
 8001c36:	af0a      	add	r7, sp, #40	; 0x28
 8001c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e116      	b.n	8001e72 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f006 fdce 	bl	8008800 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2203      	movs	r2, #3
 8001c68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fc09 	bl	800549a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	687e      	ldr	r6, [r7, #4]
 8001c90:	466d      	mov	r5, sp
 8001c92:	f106 0410 	add.w	r4, r6, #16
 8001c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca6:	1d33      	adds	r3, r6, #4
 8001ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f003 fb1b 	bl	80052e6 <USB_CoreInit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0d7      	b.n	8001e72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fbf7 	bl	80054bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e04a      	b.n	8001d6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	333d      	adds	r3, #61	; 0x3d
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	333c      	adds	r3, #60	; 0x3c
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	b298      	uxth	r0, r3
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3356      	adds	r3, #86	; 0x56
 8001d10:	4602      	mov	r2, r0
 8001d12:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3340      	adds	r3, #64	; 0x40
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	3344      	adds	r3, #68	; 0x44
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3348      	adds	r3, #72	; 0x48
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	334c      	adds	r3, #76	; 0x4c
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	3301      	adds	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d3af      	bcc.n	8001cd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e044      	b.n	8001e04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	3301      	adds	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3b5      	bcc.n	8001d7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	687e      	ldr	r6, [r7, #4]
 8001e16:	466d      	mov	r5, sp
 8001e18:	f106 0410 	add.w	r4, r6, #16
 8001e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2c:	1d33      	adds	r3, r6, #4
 8001e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f003 fb8f 	bl	8005554 <USB_DevInit>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e014      	b.n	8001e72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 f851 	bl	8002f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 fb3d 	bl	80064ea <USB_DevDisconnect>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_PCD_Start+0x1c>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e01c      	b.n	8001ed0 <HAL_PCD_Start+0x56>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fade 	bl	8005478 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 faf1 	bl	80064a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b08d      	sub	sp, #52	; 0x34
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fbaf 	bl	8006652 <USB_GetMode>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 847e 	bne.w	80027f8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 fb13 	bl	800652c <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8474 	beq.w	80027f6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fb00 	bl	800652c <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f002 0202 	and.w	r2, r2, #2
 8001f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 faee 	bl	800652c <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d161      	bne.n	800201e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0210 	bic.w	r2, r2, #16
 8001f68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	0c5b      	lsrs	r3, r3, #17
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d124      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d035      	beq.n	800200e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6a38      	ldr	r0, [r7, #32]
 8001fb6:	f004 f925 	bl	8006204 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	441a      	add	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd8:	441a      	add	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	e016      	b.n	800200e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	0c5b      	lsrs	r3, r3, #17
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d110      	bne.n	800200e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6a38      	ldr	r0, [r7, #32]
 8001ff8:	f004 f904 	bl	8006204 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002008:	441a      	add	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0210 	orr.w	r2, r2, #16
 800201c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fa82 	bl	800652c <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002032:	f040 80a7 	bne.w	8002184 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fa87 	bl	8006552 <USB_ReadDevAllOutEpInterrupt>
 8002044:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002046:	e099      	b.n	800217c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 808e 	beq.w	8002170 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f004 faab 	bl	80065ba <USB_ReadDevOutEPInterrupt>
 8002064:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	2301      	movs	r3, #1
 8002080:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fe65 	bl	8002d54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00c      	beq.n	80020ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a0:	461a      	mov	r2, r3
 80020a2:	2308      	movs	r3, #8
 80020a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fea1 	bl	8002df0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c4:	461a      	mov	r2, r3
 80020c6:	2310      	movs	r3, #16
 80020c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d030      	beq.n	8002136 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d109      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	78db      	ldrb	r3, [r3, #3]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f006 fcd4 	bl	8008acc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	2302      	movs	r3, #2
 8002134:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	2320      	movs	r3, #32
 8002150:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f af62 	bne.w	8002048 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f9cf 	bl	800652c <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002198:	f040 80a4 	bne.w	80022e4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f9f0 	bl	8006586 <USB_ReadDevAllInEpInterrupt>
 80021a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021ac:	e096      	b.n	80022dc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 808b 	beq.w	80022d0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fa16 	bl	80065f6 <USB_ReadDevInEPInterrupt>
 80021ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	2201      	movs	r2, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69f9      	ldr	r1, [r7, #28]
 80021f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021f6:	4013      	ands	r3, r2
 80021f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002206:	461a      	mov	r2, r3
 8002208:	2301      	movs	r3, #1
 800220a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f006 fbc5 	bl	80089a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222e:	461a      	mov	r2, r3
 8002230:	2308      	movs	r3, #8
 8002232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224a:	461a      	mov	r2, r3
 800224c:	2310      	movs	r3, #16
 800224e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d023      	beq.n	80022be <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002278:	6a38      	ldr	r0, [r7, #32]
 800227a:	f003 faad 	bl	80057d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3338      	adds	r3, #56	; 0x38
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f006 fc22 	bl	8008af0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b8:	461a      	mov	r2, r3
 80022ba:	2302      	movs	r3, #2
 80022bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fcba 	bl	8002c44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f47f af65 	bne.w	80021ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 f91f 	bl	800652c <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f8:	d122      	bne.n	8002340 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002320:	2100      	movs	r1, #0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f006 fe42 	bl	8008fac <HAL_PCDEx_LPM_Callback>
 8002328:	e002      	b.n	8002330 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f006 fba6 	bl	8008a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800233e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f8f1 	bl	800652c <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002354:	d112      	bne.n	800237c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f006 fb62 	bl	8008a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800237a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f004 f8d3 	bl	800652c <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002390:	d121      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80023a0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 020f 	and.w	r2, r3, #15
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023c6:	2101      	movs	r1, #1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f006 fdef 	bl	8008fac <HAL_PCDEx_LPM_Callback>
 80023ce:	e002      	b.n	80023d6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f006 fb2d 	bl	8008a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f8a6 	bl	800652c <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	f040 80b5 	bne.w	8002558 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2110      	movs	r1, #16
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f9e5 	bl	80057d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	e046      	b.n	80024a2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002420:	461a      	mov	r2, r3
 8002422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002426:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002438:	0151      	lsls	r1, r2, #5
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	440a      	add	r2, r1
 800243e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800245a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	440a      	add	r2, r1
 8002472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800247a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800248c:	0151      	lsls	r1, r2, #5
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	440a      	add	r2, r1
 8002492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800249a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	3301      	adds	r3, #1
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3b3      	bcc.n	8002414 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d8:	f043 030b 	orr.w	r3, r3, #11
 80024dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ee:	f043 030b 	orr.w	r3, r3, #11
 80024f2:	6453      	str	r3, [r2, #68]	; 0x44
 80024f4:	e015      	b.n	8002522 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002508:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800250c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251c:	f043 030b 	orr.w	r3, r3, #11
 8002520:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002530:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002534:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f004 f8b6 	bl	80066b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 ffe5 	bl	800652c <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256c:	d124      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f87b 	bl	800666e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 f9a8 	bl	80058d2 <USB_GetDevSpeed>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	f001 fb87 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8002592:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	4620      	mov	r0, r4
 800259e:	f002 fecf 	bl	8005340 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f006 fa25 	bl	80089f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 ffb5 	bl	800652c <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d10a      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f006 fa02 	bl	80089d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f002 0208 	and.w	r2, r2, #8
 80025e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ffa0 	bl	800652c <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d122      	bne.n	800263c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e014      	b.n	8002632 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fadb 	bl	8002be2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	3301      	adds	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	429a      	cmp	r2, r3
 800263a:	d3e5      	bcc.n	8002608 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 ff73 	bl	800652c <USB_ReadInterrupts>
 8002646:	4603      	mov	r3, r0
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002650:	d13b      	bne.n	80026ca <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002652:	2301      	movs	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e02b      	b.n	80026b0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3340      	adds	r3, #64	; 0x40
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d115      	bne.n	80026aa <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800267e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002680:	2b00      	cmp	r3, #0
 8002682:	da12      	bge.n	80026aa <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fa9c 	bl	8002be2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3ce      	bcc.n	8002658 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff2c 	bl	800652c <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026de:	d155      	bne.n	800278c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e045      	b.n	8002772 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d12e      	bne.n	800276c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800270e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	da2b      	bge.n	800276c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002720:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002724:	429a      	cmp	r2, r3
 8002726:	d121      	bne.n	800276c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002768:	6053      	str	r3, [r2, #4]
            break;
 800276a:	e007      	b.n	800277c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3301      	adds	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	429a      	cmp	r2, r3
 800277a:	d3b4      	bcc.n	80026e6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800278a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fecb 	bl	800652c <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d10a      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f006 f9b6 	bl	8008b14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 feb5 	bl	800652c <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d115      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f006 f9a6 	bl	8008b30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	e000      	b.n	80027f8 <HAL_PCD_IRQHandler+0x920>
      return;
 80027f6:	bf00      	nop
    }
  }
}
 80027f8:	3734      	adds	r7, #52	; 0x34
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd90      	pop	{r4, r7, pc}

080027fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_PCD_SetAddress+0x1a>
 8002814:	2302      	movs	r3, #2
 8002816:	e013      	b.n	8002840 <HAL_PCD_SetAddress+0x42>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fe13 	bl	800645c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	70fb      	strb	r3, [r7, #3]
 800285a:	460b      	mov	r3, r1
 800285c:	803b      	strh	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286a:	2b00      	cmp	r3, #0
 800286c:	da0f      	bge.n	800288e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	3338      	adds	r3, #56	; 0x38
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	705a      	strb	r2, [r3, #1]
 800288c:	e00f      	b.n	80028ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 020f 	and.w	r2, r3, #15
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028ba:	883a      	ldrh	r2, [r7, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	78ba      	ldrb	r2, [r7, #2]
 80028c4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028d8:	78bb      	ldrb	r3, [r7, #2]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d102      	bne.n	80028e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_PCD_EP_Open+0xaa>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e00e      	b.n	8002910 <HAL_PCD_EP_Open+0xc8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 f805 	bl	8005910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800290e:	7afb      	ldrb	r3, [r7, #11]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da0f      	bge.n	800294c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 020f 	and.w	r2, r3, #15
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3338      	adds	r3, #56	; 0x38
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	705a      	strb	r2, [r3, #1]
 800294a:	e00f      	b.n	800296c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_EP_Close+0x6e>
 8002982:	2302      	movs	r3, #2
 8002984:	e00e      	b.n	80029a4 <HAL_PCD_EP_Close+0x8c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 f843 	bl	8005a20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	460b      	mov	r3, r1
 80029ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 f8e9 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	3338      	adds	r3, #56	; 0x38
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f8b8 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d901      	bls.n	8002a90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04e      	b.n	8002b2e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_EP_SetStall+0x82>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e01c      	b.n	8002b2e <HAL_PCD_EP_SetStall+0xbc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fbd6 	bl	80062b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f003 fdc8 	bl	80066b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d901      	bls.n	8002b54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e042      	b.n	8002bda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0f      	bge.n	8002b7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3338      	adds	r3, #56	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e00f      	b.n	8002b9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_ClrStall+0x86>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e00e      	b.n	8002bda <HAL_PCD_EP_ClrStall+0xa4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fbe0 	bl	8006390 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da0c      	bge.n	8002c10 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3338      	adds	r3, #56	; 0x38
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e00c      	b.n	8002c2a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fa03 	bl	800603c <USB_EPStopXfer>
 8002c36:	4603      	mov	r3, r0
 8002c38:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d901      	bls.n	8002c7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e067      	b.n	8002d4c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d902      	bls.n	8002c98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3303      	adds	r3, #3
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca0:	e026      	b.n	8002cf0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d902      	bls.n	8002cbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3303      	adds	r3, #3
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f003 fa5c 	bl	8006190 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	441a      	add	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d809      	bhi.n	8002d1a <PCD_WriteEmptyTxFifo+0xd6>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d203      	bcs.n	8002d1a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1c3      	bne.n	8002ca2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d811      	bhi.n	8002d4a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d46:	4013      	ands	r3, r2
 8002d48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	333c      	adds	r3, #60	; 0x3c
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <PCD_EP_OutXfrComplete_int+0x98>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d124      	bne.n	8002dd4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da0:	461a      	mov	r2, r3
 8002da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da6:	6093      	str	r3, [r2, #8]
 8002da8:	e01a      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f005 fdcd 	bl	800896c <HAL_PCD_DataOutStageCallback>
 8002dd2:	e005      	b.n	8002de0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 fdc6 	bl	800896c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	4f54310a 	.word	0x4f54310a

08002df0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	333c      	adds	r3, #60	; 0x3c
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <PCD_EP_OutSetupPacket_int+0x64>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d90e      	bls.n	8002e44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f005 fd7f 	bl	8008948 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	4f54300a 	.word	0x4f54300a

08002e58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
 8002e64:	4613      	mov	r3, r2
 8002e66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e76:	883b      	ldrh	r3, [r7, #0]
 8002e78:	0419      	lsls	r1, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e028      	b.n	8002ed8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e00d      	b.n	8002eb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	4413      	add	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3ec      	bcc.n	8002e9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ec0:	883b      	ldrh	r3, [r7, #0]
 8002ec2:	0418      	lsls	r0, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4302      	orrs	r2, r0
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	f043 0303 	orr.w	r3, r3, #3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000

08002f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9a:	d130      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9c:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d038      	beq.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2232      	movs	r2, #50	; 0x32
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd0:	e002      	b.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	d102      	bne.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f2      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d110      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d007      	beq.n	800301c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40007000 	.word	0x40007000
 8003030:	20000000 	.word	0x20000000
 8003034:	431bde83 	.word	0x431bde83

08003038 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_PWREx_EnableVddUSB+0x1c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003046:	6053      	str	r3, [r2, #4]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7fe f882 	bl	8001168 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e063      	b.n	8003138 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fe41 	bl	8000d0c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800308a:	f241 3188 	movw	r1, #5000	; 0x1388
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f858 	bl	8003144 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2120      	movs	r1, #32
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f850 	bl	8003160 <QSPI_WaitFlagStateUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d131      	bne.n	800312e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030d4:	f023 0310 	bic.w	r3, r3, #16
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6852      	ldr	r2, [r2, #4]
 80030dc:	0611      	lsls	r1, r2, #24
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_QSPI_Init+0xe8>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6912      	ldr	r2, [r2, #16]
 80030fa:	0411      	lsls	r1, r2, #16
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6952      	ldr	r2, [r2, #20]
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6992      	ldr	r2, [r2, #24]
 8003106:	4311      	orrs	r1, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003136:	7afb      	ldrb	r3, [r7, #11]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	ffe0f8fe 	.word	0xffe0f8fe

08003144 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003170:	e01a      	b.n	80031a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d016      	beq.n	80031a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fd fff5 	bl	8001168 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2204      	movs	r2, #4
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e00e      	b.n	80031c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1d6      	bne.n	8003172 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e3ca      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e2:	4b97      	ldr	r3, [pc, #604]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ec:	4b94      	ldr	r3, [pc, #592]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80e4 	beq.w	80033cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_RCC_OscConfig+0x4a>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	f040 808b 	bne.w	8003328 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8087 	bne.w	8003328 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e3a2      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_RCC_OscConfig+0x7c>
 8003242:	4b7f      	ldr	r3, [pc, #508]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324a:	e005      	b.n	8003258 <HAL_RCC_OscConfig+0x88>
 800324c:	4b7c      	ldr	r3, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003258:	4293      	cmp	r3, r2
 800325a:	d223      	bcs.n	80032a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fd55 	bl	8003d10 <RCC_SetFlashLatencyFromMSIRange>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e383      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003270:	4b73      	ldr	r3, [pc, #460]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a72      	ldr	r2, [pc, #456]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b70      	ldr	r3, [pc, #448]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	496d      	ldr	r1, [pc, #436]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	4968      	ldr	r1, [pc, #416]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
 80032a2:	e025      	b.n	80032f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a4:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4960      	ldr	r1, [pc, #384]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	495b      	ldr	r1, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd15 	bl	8003d10 <RCC_SetFlashLatencyFromMSIRange>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e343      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032f0:	f000 fc4a 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	4950      	ldr	r1, [pc, #320]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	4a4e      	ldr	r2, [pc, #312]	; (8003448 <HAL_RCC_OscConfig+0x278>)
 800330e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003310:	4b4e      	ldr	r3, [pc, #312]	; (800344c <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fed7 	bl	80010c8 <HAL_InitTick>
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d052      	beq.n	80033ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	e327      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d032      	beq.n	8003396 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a42      	ldr	r2, [pc, #264]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800333c:	f7fd ff14 	bl	8001168 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003344:	f7fd ff10 	bl	8001168 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e310      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a36      	ldr	r2, [pc, #216]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4931      	ldr	r1, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	492c      	ldr	r1, [pc, #176]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
 8003394:	e01a      	b.n	80033cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a2:	f7fd fee1 	bl	8001168 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033aa:	f7fd fedd 	bl	8001168 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e2dd      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x1da>
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d074      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x21a>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d10e      	bne.n	8003402 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d10b      	bne.n	8003402 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d064      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2f0>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d160      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e2ba      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x24a>
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e026      	b.n	8003468 <HAL_RCC_OscConfig+0x298>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003422:	d115      	bne.n	8003450 <HAL_RCC_OscConfig+0x280>
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 800342a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a02      	ldr	r2, [pc, #8]	; (8003440 <HAL_RCC_OscConfig+0x270>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x298>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	08009154 	.word	0x08009154
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004
 8003450:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a9f      	ldr	r2, [pc, #636]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a9c      	ldr	r2, [pc, #624]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fe7a 	bl	8001168 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fd fe76 	bl	8001168 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e276      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348a:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x2a8>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fe66 	bl	8001168 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fd fe62 	bl	8001168 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e262      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2d0>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d060      	beq.n	8003590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_OscConfig+0x310>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d119      	bne.n	800350e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d116      	bne.n	800350e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e0:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x328>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e23f      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	4973      	ldr	r1, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	e040      	b.n	8003590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d023      	beq.n	800355e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003516:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fd fe21 	bl	8001168 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352a:	f7fd fe1d 	bl	8001168 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e21d      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	495f      	ldr	r1, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
 800355c:	e018      	b.n	8003590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fdfd 	bl	8001168 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003572:	f7fd fdf9 	bl	8001168 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1f9      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03c      	beq.n	8003616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01c      	beq.n	80035de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035aa:	4a4a      	ldr	r2, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fdd8 	bl	8001168 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fd fdd4 	bl	8001168 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1d4      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ef      	beq.n	80035bc <HAL_RCC_OscConfig+0x3ec>
 80035dc:	e01b      	b.n	8003616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80035e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e4:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fd fdbb 	bl	8001168 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f6:	f7fd fdb7 	bl	8001168 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1b7      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ef      	bne.n	80035f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80a6 	beq.w	8003770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	6593      	str	r3, [r2, #88]	; 0x58
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_RCC_OscConfig+0x508>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_RCC_OscConfig+0x508>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_RCC_OscConfig+0x508>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fd fd7e 	bl	8001168 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fd7a 	bl	8001168 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e17a      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_OscConfig+0x508>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d108      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4d8>
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a6:	e029      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d115      	bne.n	80036dc <HAL_RCC_OscConfig+0x50c>
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_RCC_OscConfig+0x504>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	4b9c      	ldr	r3, [pc, #624]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a9b      	ldr	r2, [pc, #620]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	4b98      	ldr	r3, [pc, #608]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a97      	ldr	r2, [pc, #604]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d016      	beq.n	8003732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fd30 	bl	8001168 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fd fd2c 	bl	8001168 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e12a      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ed      	beq.n	800370c <HAL_RCC_OscConfig+0x53c>
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd fd19 	bl	8001168 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd fd15 	bl	8001168 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e113      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003750:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ed      	bne.n	800373a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800375e:	7ffb      	ldrb	r3, [r7, #31]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003764:	4b7a      	ldr	r3, [pc, #488]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	4a79      	ldr	r2, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 800376a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80fe 	beq.w	8003976 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	2b02      	cmp	r3, #2
 8003780:	f040 80d0 	bne.w	8003924 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003784:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	429a      	cmp	r2, r3
 8003796:	d130      	bne.n	80037fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	3b01      	subs	r3, #1
 80037a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d127      	bne.n	80037fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d11f      	bne.n	80037fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037c4:	2a07      	cmp	r2, #7
 80037c6:	bf14      	ite	ne
 80037c8:	2201      	movne	r2, #1
 80037ca:	2200      	moveq	r2, #0
 80037cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d113      	bne.n	80037fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	3b01      	subs	r3, #1
 80037f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d06e      	beq.n	80038d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d069      	beq.n	80038d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0ad      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4b      	ldr	r2, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003828:	f7fd fc9e 	bl	8001168 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd fc9a 	bl	8001168 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e09a      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003842:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384e:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4b40      	ldr	r3, [pc, #256]	; (8003954 <HAL_RCC_OscConfig+0x784>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800385e:	3a01      	subs	r2, #1
 8003860:	0112      	lsls	r2, r2, #4
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003868:	0212      	lsls	r2, r2, #8
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003870:	0852      	lsrs	r2, r2, #1
 8003872:	3a01      	subs	r2, #1
 8003874:	0552      	lsls	r2, r2, #21
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0652      	lsls	r2, r2, #25
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003888:	0912      	lsrs	r2, r2, #4
 800388a:	0452      	lsls	r2, r2, #17
 800388c:	430a      	orrs	r2, r1
 800388e:	4930      	ldr	r1, [pc, #192]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003894:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ac:	f7fd fc5c 	bl	8001168 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd fc58 	bl	8001168 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e058      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d2:	e050      	b.n	8003976 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e04f      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d148      	bne.n	8003976 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f0:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038fc:	f7fd fc34 	bl	8001168 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fc30 	bl	8001168 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e030      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x734>
 8003922:	e028      	b.n	8003976 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d023      	beq.n	8003972 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x780>)
 8003930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fc17 	bl	8001168 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393c:	e00c      	b.n	8003958 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fd fc13 	bl	8001168 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d905      	bls.n	8003958 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e013      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
 8003950:	40021000 	.word	0x40021000
 8003954:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x7b0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ec      	bne.n	800393e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x7b0>)
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	4905      	ldr	r1, [pc, #20]	; (8003980 <HAL_RCC_OscConfig+0x7b0>)
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_OscConfig+0x7b4>)
 800396c:	4013      	ands	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
 8003970:	e001      	b.n	8003976 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	feeefffc 	.word	0xfeeefffc

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0e7      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b75      	ldr	r3, [pc, #468]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d910      	bls.n	80039cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0207 	bic.w	r2, r3, #7
 80039b2:	4970      	ldr	r1, [pc, #448]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b6e      	ldr	r3, [pc, #440]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cf      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d908      	bls.n	80039fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4960      	ldr	r1, [pc, #384]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04c      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d121      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0a6      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d115      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e09a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a3e:	4b4e      	ldr	r3, [pc, #312]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e08e      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e086      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4943      	ldr	r1, [pc, #268]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fd fb7a 	bl	8001168 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fd fb76 	bl	8001168 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e06e      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b3a      	ldr	r3, [pc, #232]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d208      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	492b      	ldr	r1, [pc, #172]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d210      	bcs.n	8003afe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0207 	bic.w	r2, r3, #7
 8003ae4:	4923      	ldr	r1, [pc, #140]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e036      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4918      	ldr	r1, [pc, #96]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3c:	f000 f824 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	490b      	ldr	r1, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1f4>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1f8>)
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1fc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fab1 	bl	80010c8 <HAL_InitTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08009154 	.word	0x08009154
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d121      	bne.n	8003bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11e      	bne.n	8003bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be4:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e004      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d134      	bne.n	8003c80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c16:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0xac>
 8003c2c:	e005      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c30:	617b      	str	r3, [r7, #20]
      break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c36:	617b      	str	r3, [r7, #20]
      break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	617b      	str	r3, [r7, #20]
      break;
 8003c3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	fb03 f202 	mul.w	r2, r3, r2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	0e5b      	lsrs	r3, r3, #25
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	3301      	adds	r3, #1
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c80:	69bb      	ldr	r3, [r7, #24]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0800916c 	.word	0x0800916c
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	08009164 	.word	0x08009164

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ce8:	f7ff ffda 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0adb      	lsrs	r3, r3, #11
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4904      	ldr	r1, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	08009164 	.word	0x08009164

08003d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d28:	f7ff f922 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003d2c:	6178      	str	r0, [r7, #20]
 8003d2e:	e014      	b.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d48:	f7ff f912 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003d4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d10b      	bne.n	8003d7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d919      	bls.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d6c:	d902      	bls.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d6e:	2302      	movs	r3, #2
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e013      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d74:	2301      	movs	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e010      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b80      	cmp	r3, #128	; 0x80
 8003d7e:	d902      	bls.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d80:	2303      	movs	r3, #3
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e00a      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d102      	bne.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	e004      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d101      	bne.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d98:	2301      	movs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 0207 	bic.w	r2, r3, #7
 8003da4:	4909      	ldr	r1, [pc, #36]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40022000 	.word	0x40022000

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd8:	2300      	movs	r3, #0
 8003dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ddc:	2300      	movs	r3, #0
 8003dde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d041      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003df4:	d02a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003df6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dfa:	d824      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e00:	d008      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e06:	d81e      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d010      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e12:	e018      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e14:	4b86      	ldr	r3, [pc, #536]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a85      	ldr	r2, [pc, #532]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e20:	e015      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 facb 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e32:	e00c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3320      	adds	r3, #32
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fbb6 	bl	80045ac <RCCEx_PLLSAI2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	74fb      	strb	r3, [r7, #19]
      break;
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e54:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e62:	4973      	ldr	r1, [pc, #460]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d041      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e84:	d02a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e8a:	d824      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e96:	d81e      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ea2:	e018      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea4:	4b62      	ldr	r3, [pc, #392]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a61      	ldr	r2, [pc, #388]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb0:	e015      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fa83 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ec2:	e00c      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3320      	adds	r3, #32
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb6e 	bl	80045ac <RCCEx_PLLSAI2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ee4:	4b52      	ldr	r3, [pc, #328]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef2:	494f      	ldr	r1, [pc, #316]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a0 	beq.w	800404e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	4a40      	ldr	r2, [pc, #256]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6593      	str	r3, [r2, #88]	; 0x58
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f40:	2301      	movs	r3, #1
 8003f42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f44:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a3a      	ldr	r2, [pc, #232]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f50:	f7fd f90a 	bl	8001168 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f56:	e009      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f58:	f7fd f906 	bl	8001168 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d902      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	74fb      	strb	r3, [r7, #19]
        break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ef      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d15c      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d019      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fd f8c5 	bl	8001168 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd f8c1 	bl	8001168 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d902      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ec      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401e:	4904      	ldr	r1, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004026:	e009      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800403c:	7c7b      	ldrb	r3, [r7, #17]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d105      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004042:	4b9e      	ldr	r3, [pc, #632]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	4a9d      	ldr	r2, [pc, #628]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800405a:	4b98      	ldr	r3, [pc, #608]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f023 0203 	bic.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	4994      	ldr	r1, [pc, #592]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800407c:	4b8f      	ldr	r3, [pc, #572]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 020c 	bic.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	498c      	ldr	r1, [pc, #560]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800409e:	4b87      	ldr	r3, [pc, #540]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	4983      	ldr	r1, [pc, #524]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c0:	4b7e      	ldr	r3, [pc, #504]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	497b      	ldr	r1, [pc, #492]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040e2:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f0:	4972      	ldr	r1, [pc, #456]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004104:	4b6d      	ldr	r3, [pc, #436]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	496a      	ldr	r1, [pc, #424]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	4961      	ldr	r1, [pc, #388]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004148:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	4959      	ldr	r1, [pc, #356]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416a:	4b54      	ldr	r3, [pc, #336]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	4950      	ldr	r1, [pc, #320]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800418c:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	4948      	ldr	r1, [pc, #288]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ae:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	493f      	ldr	r1, [pc, #252]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d028      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d0:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	4937      	ldr	r1, [pc, #220]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ee:	d106      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a31      	ldr	r2, [pc, #196]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fa:	60d3      	str	r3, [r2, #12]
 80041fc:	e011      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004206:	d10c      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f8d8 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d028      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	491f      	ldr	r1, [pc, #124]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424c:	d106      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004258:	60d3      	str	r3, [r2, #12]
 800425a:	e011      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f8a9 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042aa:	d109      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a02      	ldr	r2, [pc, #8]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
 80042b8:	e014      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f877 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f0:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fe:	4928      	ldr	r1, [pc, #160]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430e:	d10d      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f854 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d014      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	74bb      	strb	r3, [r7, #18]
 800432a:	e011      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d10c      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3320      	adds	r3, #32
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f935 	bl	80045ac <RCCEx_PLLSAI2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436a:	490d      	ldr	r1, [pc, #52]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004396:	7cbb      	ldrb	r3, [r7, #18]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043d2:	4b75      	ldr	r3, [pc, #468]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043de:	4b72      	ldr	r3, [pc, #456]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d10d      	bne.n	800440a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
       ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
       ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d047      	beq.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e044      	b.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d018      	beq.n	800444a <RCCEx_PLLSAI1_Config+0x86>
 8004418:	2b03      	cmp	r3, #3
 800441a:	d825      	bhi.n	8004468 <RCCEx_PLLSAI1_Config+0xa4>
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0x62>
 8004420:	2b02      	cmp	r3, #2
 8004422:	d009      	beq.n	8004438 <RCCEx_PLLSAI1_Config+0x74>
 8004424:	e020      	b.n	8004468 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004426:	4b60      	ldr	r3, [pc, #384]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11d      	bne.n	800446e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e01a      	b.n	800446e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004438:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004448:	e013      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444a:	4b57      	ldr	r3, [pc, #348]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004456:	4b54      	ldr	r3, [pc, #336]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004466:	e006      	b.n	8004476 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e004      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004476:	bf00      	nop
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800447e:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	430b      	orrs	r3, r1
 8004494:	4944      	ldr	r1, [pc, #272]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d17d      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fc fe5c 	bl	8001168 <HAL_GetTick>
 80044b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b2:	e009      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b4:	f7fc fe58 	bl	8001168 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	73fb      	strb	r3, [r7, #15]
        break;
 80044c6:	e005      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044c8:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ef      	bne.n	80044b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d160      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	0211      	lsls	r1, r2, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	0912      	lsrs	r2, r2, #4
 80044f8:	0452      	lsls	r2, r2, #17
 80044fa:	430a      	orrs	r2, r1
 80044fc:	492a      	ldr	r1, [pc, #168]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	610b      	str	r3, [r1, #16]
 8004502:	e027      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d112      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450a:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	0211      	lsls	r1, r2, #8
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6912      	ldr	r2, [r2, #16]
 8004520:	0852      	lsrs	r2, r2, #1
 8004522:	3a01      	subs	r2, #1
 8004524:	0552      	lsls	r2, r2, #21
 8004526:	430a      	orrs	r2, r1
 8004528:	491f      	ldr	r1, [pc, #124]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
 800452e:	e011      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6892      	ldr	r2, [r2, #8]
 8004540:	0211      	lsls	r1, r2, #8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6952      	ldr	r2, [r2, #20]
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0652      	lsls	r2, r2, #25
 800454c:	430a      	orrs	r2, r1
 800454e:	4916      	ldr	r1, [pc, #88]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800455e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fc fe02 	bl	8001168 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004566:	e009      	b.n	800457c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004568:	f7fc fdfe 	bl	8001168 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	73fb      	strb	r3, [r7, #15]
          break;
 800457a:	e005      	b.n	8004588 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ef      	beq.n	8004568 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000

080045ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ba:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045c6:	4b67      	ldr	r3, [pc, #412]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0203 	and.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d10d      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
       ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045de:	4b61      	ldr	r3, [pc, #388]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
       ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d047      	beq.n	8004682 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	e044      	b.n	8004682 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d018      	beq.n	8004632 <RCCEx_PLLSAI2_Config+0x86>
 8004600:	2b03      	cmp	r3, #3
 8004602:	d825      	bhi.n	8004650 <RCCEx_PLLSAI2_Config+0xa4>
 8004604:	2b01      	cmp	r3, #1
 8004606:	d002      	beq.n	800460e <RCCEx_PLLSAI2_Config+0x62>
 8004608:	2b02      	cmp	r3, #2
 800460a:	d009      	beq.n	8004620 <RCCEx_PLLSAI2_Config+0x74>
 800460c:	e020      	b.n	8004650 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800460e:	4b55      	ldr	r3, [pc, #340]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461e:	e01a      	b.n	8004656 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e013      	b.n	800465a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004632:	4b4c      	ldr	r3, [pc, #304]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800463e:	4b49      	ldr	r3, [pc, #292]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800464e:	e006      	b.n	800465e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e004      	b.n	8004660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800465e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004666:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	430b      	orrs	r3, r1
 800467c:	4939      	ldr	r1, [pc, #228]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d167      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a35      	ldr	r2, [pc, #212]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fc fd68 	bl	8001168 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800469a:	e009      	b.n	80046b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800469c:	f7fc fd64 	bl	8001168 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d902      	bls.n	80046b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	73fb      	strb	r3, [r7, #15]
        break;
 80046ae:	e005      	b.n	80046bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ef      	bne.n	800469c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d14a      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	0211      	lsls	r1, r2, #8
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	0912      	lsrs	r2, r2, #4
 80046e0:	0452      	lsls	r2, r2, #17
 80046e2:	430a      	orrs	r2, r1
 80046e4:	491f      	ldr	r1, [pc, #124]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	614b      	str	r3, [r1, #20]
 80046ea:	e011      	b.n	8004710 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	0211      	lsls	r1, r2, #8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6912      	ldr	r2, [r2, #16]
 8004702:	0852      	lsrs	r2, r2, #1
 8004704:	3a01      	subs	r2, #1
 8004706:	0652      	lsls	r2, r2, #25
 8004708:	430a      	orrs	r2, r1
 800470a:	4916      	ldr	r1, [pc, #88]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fc fd24 	bl	8001168 <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004724:	f7fc fd20 	bl	8001168 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
          break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ef      	beq.n	8004724 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e095      	b.n	80048a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478a:	d009      	beq.n	80047a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
 8004792:	e005      	b.n	80047a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc faea 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e0:	d902      	bls.n	80047e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e002      	b.n	80047ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_Init+0xa0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	ea42 0103 	orr.w	r1, r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 0204 	and.w	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004884:	ea42 0103 	orr.w	r1, r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e040      	b.n	8004942 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fc faa3 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2224      	movs	r2, #36	; 0x24
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fae1 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f826 	bl	800494c <UART_SetConfig>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e01b      	b.n	8004942 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004918:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004928:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb60 	bl	8005000 <UART_CheckIdleState>
 8004940:	4603      	mov	r3, r0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004950:	b08a      	sub	sp, #40	; 0x28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	431a      	orrs	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4313      	orrs	r3, r2
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4ba4      	ldr	r3, [pc, #656]	; (8004c0c <UART_SetConfig+0x2c0>)
 800497c:	4013      	ands	r3, r2
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004984:	430b      	orrs	r3, r1
 8004986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a99      	ldr	r2, [pc, #612]	; (8004c10 <UART_SetConfig+0x2c4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	4313      	orrs	r3, r2
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a90      	ldr	r2, [pc, #576]	; (8004c14 <UART_SetConfig+0x2c8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d126      	bne.n	8004a24 <UART_SetConfig+0xd8>
 80049d6:	4b90      	ldr	r3, [pc, #576]	; (8004c18 <UART_SetConfig+0x2cc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d81b      	bhi.n	8004a1c <UART_SetConfig+0xd0>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0xa0>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a15 	.word	0x08004a15
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e116      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a04:	2302      	movs	r3, #2
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e112      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e10e      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a14:	2308      	movs	r3, #8
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e10a      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e106      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a7c      	ldr	r2, [pc, #496]	; (8004c1c <UART_SetConfig+0x2d0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d138      	bne.n	8004aa0 <UART_SetConfig+0x154>
 8004a2e:	4b7a      	ldr	r3, [pc, #488]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d82d      	bhi.n	8004a98 <UART_SetConfig+0x14c>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0xf8>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004a99 	.word	0x08004a99
 8004a50:	08004a99 	.word	0x08004a99
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004a99 	.word	0x08004a99
 8004a5c:	08004a99 	.word	0x08004a99
 8004a60:	08004a99 	.word	0x08004a99
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	08004a99 	.word	0x08004a99
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7e:	e0d8      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a80:	2302      	movs	r3, #2
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a86:	e0d4      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e0d0      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a90:	2308      	movs	r3, #8
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e0cc      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e0c8      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a5e      	ldr	r2, [pc, #376]	; (8004c20 <UART_SetConfig+0x2d4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d125      	bne.n	8004af6 <UART_SetConfig+0x1aa>
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d016      	beq.n	8004ae6 <UART_SetConfig+0x19a>
 8004ab8:	2b30      	cmp	r3, #48	; 0x30
 8004aba:	d818      	bhi.n	8004aee <UART_SetConfig+0x1a2>
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d00a      	beq.n	8004ad6 <UART_SetConfig+0x18a>
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d814      	bhi.n	8004aee <UART_SetConfig+0x1a2>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <UART_SetConfig+0x182>
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	d008      	beq.n	8004ade <UART_SetConfig+0x192>
 8004acc:	e00f      	b.n	8004aee <UART_SetConfig+0x1a2>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad4:	e0ad      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004adc:	e0a9      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae4:	e0a5      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aec:	e0a1      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004aee:	2310      	movs	r3, #16
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e09d      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <UART_SetConfig+0x2d8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d125      	bne.n	8004b4c <UART_SetConfig+0x200>
 8004b00:	4b45      	ldr	r3, [pc, #276]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b0c:	d016      	beq.n	8004b3c <UART_SetConfig+0x1f0>
 8004b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b10:	d818      	bhi.n	8004b44 <UART_SetConfig+0x1f8>
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d00a      	beq.n	8004b2c <UART_SetConfig+0x1e0>
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d814      	bhi.n	8004b44 <UART_SetConfig+0x1f8>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <UART_SetConfig+0x1d8>
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d008      	beq.n	8004b34 <UART_SetConfig+0x1e8>
 8004b22:	e00f      	b.n	8004b44 <UART_SetConfig+0x1f8>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e082      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e07e      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e07a      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e076      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e072      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a35      	ldr	r2, [pc, #212]	; (8004c28 <UART_SetConfig+0x2dc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d12a      	bne.n	8004bac <UART_SetConfig+0x260>
 8004b56:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b64:	d01a      	beq.n	8004b9c <UART_SetConfig+0x250>
 8004b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6a:	d81b      	bhi.n	8004ba4 <UART_SetConfig+0x258>
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	d00c      	beq.n	8004b8c <UART_SetConfig+0x240>
 8004b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b76:	d815      	bhi.n	8004ba4 <UART_SetConfig+0x258>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <UART_SetConfig+0x238>
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b80:	d008      	beq.n	8004b94 <UART_SetConfig+0x248>
 8004b82:	e00f      	b.n	8004ba4 <UART_SetConfig+0x258>
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e052      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e04e      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e04a      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e046      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e042      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <UART_SetConfig+0x2c4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d13a      	bne.n	8004c2c <UART_SetConfig+0x2e0>
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <UART_SetConfig+0x2cc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bc4:	d01a      	beq.n	8004bfc <UART_SetConfig+0x2b0>
 8004bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bca:	d81b      	bhi.n	8004c04 <UART_SetConfig+0x2b8>
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd0:	d00c      	beq.n	8004bec <UART_SetConfig+0x2a0>
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd6:	d815      	bhi.n	8004c04 <UART_SetConfig+0x2b8>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <UART_SetConfig+0x298>
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be0:	d008      	beq.n	8004bf4 <UART_SetConfig+0x2a8>
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x2b8>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e022      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e01e      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e01a      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e016      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e012      	b.n	8004c32 <UART_SetConfig+0x2e6>
 8004c0c:	efff69f3 	.word	0xefff69f3
 8004c10:	40008000 	.word	0x40008000
 8004c14:	40013800 	.word	0x40013800
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	40004800 	.word	0x40004800
 8004c24:	40004c00 	.word	0x40004c00
 8004c28:	40005000 	.word	0x40005000
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a9f      	ldr	r2, [pc, #636]	; (8004eb4 <UART_SetConfig+0x568>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d17a      	bne.n	8004d32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d824      	bhi.n	8004c8e <UART_SetConfig+0x342>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x300>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c8f 	.word	0x08004c8f
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c8f 	.word	0x08004c8f
 8004c5c:	08004c7f 	.word	0x08004c7f
 8004c60:	08004c8f 	.word	0x08004c8f
 8004c64:	08004c8f 	.word	0x08004c8f
 8004c68:	08004c8f 	.word	0x08004c8f
 8004c6c:	08004c87 	.word	0x08004c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7ff f822 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8004c74:	61f8      	str	r0, [r7, #28]
        break;
 8004c76:	e010      	b.n	8004c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c78:	4b8f      	ldr	r3, [pc, #572]	; (8004eb8 <UART_SetConfig+0x56c>)
 8004c7a:	61fb      	str	r3, [r7, #28]
        break;
 8004c7c:	e00d      	b.n	8004c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c7e:	f7fe ff83 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8004c82:	61f8      	str	r0, [r7, #28]
        break;
 8004c84:	e009      	b.n	8004c9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	61fb      	str	r3, [r7, #28]
        break;
 8004c8c:	e005      	b.n	8004c9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80fb 	beq.w	8004e98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d305      	bcc.n	8004cbe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d903      	bls.n	8004cc6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cc4:	e0e8      	b.n	8004e98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	461c      	mov	r4, r3
 8004ccc:	4615      	mov	r5, r2
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	022b      	lsls	r3, r5, #8
 8004cd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cdc:	0222      	lsls	r2, r4, #8
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	6849      	ldr	r1, [r1, #4]
 8004ce2:	0849      	lsrs	r1, r1, #1
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4688      	mov	r8, r1
 8004ce8:	4681      	mov	r9, r0
 8004cea:	eb12 0a08 	adds.w	sl, r2, r8
 8004cee:	eb43 0b09 	adc.w	fp, r3, r9
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d00:	4650      	mov	r0, sl
 8004d02:	4659      	mov	r1, fp
 8004d04:	f7fb fa60 	bl	80001c8 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d16:	d308      	bcc.n	8004d2a <UART_SetConfig+0x3de>
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1e:	d204      	bcs.n	8004d2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e0b6      	b.n	8004e98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d30:	e0b2      	b.n	8004e98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d15e      	bne.n	8004dfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d828      	bhi.n	8004d96 <UART_SetConfig+0x44a>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x400>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d71 	.word	0x08004d71
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	08004d97 	.word	0x08004d97
 8004d5c:	08004d87 	.word	0x08004d87
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004d97 	.word	0x08004d97
 8004d6c:	08004d8f 	.word	0x08004d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d70:	f7fe ffa2 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8004d74:	61f8      	str	r0, [r7, #28]
        break;
 8004d76:	e014      	b.n	8004da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d78:	f7fe ffb4 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8004d7c:	61f8      	str	r0, [r7, #28]
        break;
 8004d7e:	e010      	b.n	8004da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d80:	4b4d      	ldr	r3, [pc, #308]	; (8004eb8 <UART_SetConfig+0x56c>)
 8004d82:	61fb      	str	r3, [r7, #28]
        break;
 8004d84:	e00d      	b.n	8004da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d86:	f7fe feff 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8004d8a:	61f8      	str	r0, [r7, #28]
        break;
 8004d8c:	e009      	b.n	8004da2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d92:	61fb      	str	r3, [r7, #28]
        break;
 8004d94:	e005      	b.n	8004da2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d077      	beq.n	8004e98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005a      	lsls	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	441a      	add	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d916      	bls.n	8004df2 <UART_SetConfig+0x4a6>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dca:	d212      	bcs.n	8004df2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	8afb      	ldrh	r3, [r7, #22]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	8afa      	ldrh	r2, [r7, #22]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e052      	b.n	8004e98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004df8:	e04e      	b.n	8004e98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d827      	bhi.n	8004e52 <UART_SetConfig+0x506>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x4bc>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e53 	.word	0x08004e53
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe ff44 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8004e30:	61f8      	str	r0, [r7, #28]
        break;
 8004e32:	e014      	b.n	8004e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe ff56 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8004e38:	61f8      	str	r0, [r7, #28]
        break;
 8004e3a:	e010      	b.n	8004e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <UART_SetConfig+0x56c>)
 8004e3e:	61fb      	str	r3, [r7, #28]
        break;
 8004e40:	e00d      	b.n	8004e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe fea1 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8004e46:	61f8      	str	r0, [r7, #28]
        break;
 8004e48:	e009      	b.n	8004e5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e005      	b.n	8004e5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d019      	beq.n	8004e98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	085a      	lsrs	r2, r3, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	d909      	bls.n	8004e92 <UART_SetConfig+0x546>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d205      	bcs.n	8004e92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	e002      	b.n	8004e98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ea4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40008000 	.word	0x40008000
 8004eb8:	00f42400 	.word	0x00f42400

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b098      	sub	sp, #96	; 0x60
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fc f8aa 	bl	8001168 <HAL_GetTick>
 8005014:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12e      	bne.n	8005082 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f88c 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
 800505e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e062      	b.n	8005148 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d149      	bne.n	8005124 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f856 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d03c      	beq.n	8005124 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	623b      	str	r3, [r7, #32]
   return(result);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	617b      	str	r3, [r7, #20]
   return(result);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e011      	b.n	8005148 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3758      	adds	r7, #88	; 0x58
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	e049      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d045      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fb fffd 	bl	8001168 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <UART_WaitOnFlagUntilTimeout+0x30>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e048      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d031      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d110      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2208      	movs	r2, #8
 80051a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f838 	bl	800521e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2208      	movs	r2, #8
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e029      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d0:	d111      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f81e 	bl	800521e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d0a6      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521e:	b480      	push	{r7}
 8005220:	b095      	sub	sp, #84	; 0x54
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800523a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800524a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	61fb      	str	r3, [r7, #28]
   return(result);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	2b01      	cmp	r3, #1
 8005292:	d118      	bne.n	80052c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0310 	bic.w	r3, r3, #16
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e6      	bne.n	8005294 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052da:	bf00      	nop
 80052dc:	3754      	adds	r7, #84	; 0x54
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e6:	b084      	sub	sp, #16
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	f107 001c 	add.w	r0, r7, #28
 80052f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fa1d 	bl	8006744 <USB_CoreReset>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
 8005320:	e005      	b.n	800532e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533a:	b004      	add	sp, #16
 800533c:	4770      	bx	lr
	...

08005340 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d165      	bne.n	8005420 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a3e      	ldr	r2, [pc, #248]	; (8005450 <USB_SetTurnaroundTime+0x110>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d906      	bls.n	800536a <USB_SetTurnaroundTime+0x2a>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a3d      	ldr	r2, [pc, #244]	; (8005454 <USB_SetTurnaroundTime+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d202      	bcs.n	800536a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005364:	230f      	movs	r3, #15
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e05c      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a39      	ldr	r2, [pc, #228]	; (8005454 <USB_SetTurnaroundTime+0x114>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d306      	bcc.n	8005380 <USB_SetTurnaroundTime+0x40>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a38      	ldr	r2, [pc, #224]	; (8005458 <USB_SetTurnaroundTime+0x118>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d202      	bcs.n	8005380 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800537a:	230e      	movs	r3, #14
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e051      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a35      	ldr	r2, [pc, #212]	; (8005458 <USB_SetTurnaroundTime+0x118>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d306      	bcc.n	8005396 <USB_SetTurnaroundTime+0x56>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a34      	ldr	r2, [pc, #208]	; (800545c <USB_SetTurnaroundTime+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d202      	bcs.n	8005396 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005390:	230d      	movs	r3, #13
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e046      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a30      	ldr	r2, [pc, #192]	; (800545c <USB_SetTurnaroundTime+0x11c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d306      	bcc.n	80053ac <USB_SetTurnaroundTime+0x6c>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <USB_SetTurnaroundTime+0x120>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053a6:	230c      	movs	r3, #12
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e03b      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <USB_SetTurnaroundTime+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d906      	bls.n	80053c2 <USB_SetTurnaroundTime+0x82>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <USB_SetTurnaroundTime+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d802      	bhi.n	80053c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053bc:	230b      	movs	r3, #11
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e030      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <USB_SetTurnaroundTime+0x124>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d906      	bls.n	80053d8 <USB_SetTurnaroundTime+0x98>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a26      	ldr	r2, [pc, #152]	; (8005468 <USB_SetTurnaroundTime+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d802      	bhi.n	80053d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053d2:	230a      	movs	r3, #10
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e025      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a23      	ldr	r2, [pc, #140]	; (8005468 <USB_SetTurnaroundTime+0x128>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d906      	bls.n	80053ee <USB_SetTurnaroundTime+0xae>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a22      	ldr	r2, [pc, #136]	; (800546c <USB_SetTurnaroundTime+0x12c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d202      	bcs.n	80053ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053e8:	2309      	movs	r3, #9
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e01a      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	; (800546c <USB_SetTurnaroundTime+0x12c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d306      	bcc.n	8005404 <USB_SetTurnaroundTime+0xc4>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <USB_SetTurnaroundTime+0x130>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d802      	bhi.n	8005404 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053fe:	2308      	movs	r3, #8
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e00f      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <USB_SetTurnaroundTime+0x130>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d906      	bls.n	800541a <USB_SetTurnaroundTime+0xda>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a19      	ldr	r2, [pc, #100]	; (8005474 <USB_SetTurnaroundTime+0x134>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d202      	bcs.n	800541a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005414:	2307      	movs	r3, #7
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e004      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800541a:	2306      	movs	r3, #6
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	e001      	b.n	8005424 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005420:	2309      	movs	r3, #9
 8005422:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	00d8acbf 	.word	0x00d8acbf
 8005454:	00e4e1c0 	.word	0x00e4e1c0
 8005458:	00f42400 	.word	0x00f42400
 800545c:	01067380 	.word	0x01067380
 8005460:	011a499f 	.word	0x011a499f
 8005464:	01312cff 	.word	0x01312cff
 8005468:	014ca43f 	.word	0x014ca43f
 800546c:	016e3600 	.word	0x016e3600
 8005470:	01a6ab1f 	.word	0x01a6ab1f
 8005474:	01e84800 	.word	0x01e84800

08005478 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f043 0201 	orr.w	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d115      	bne.n	800550a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fb fe48 	bl	8001180 <HAL_Delay>
      ms++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f8ab 	bl	8006652 <USB_GetMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d01e      	beq.n	8005540 <USB_SetCurrentMode+0x84>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b31      	cmp	r3, #49	; 0x31
 8005506:	d9f0      	bls.n	80054ea <USB_SetCurrentMode+0x2e>
 8005508:	e01a      	b.n	8005540 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d115      	bne.n	800553c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800551c:	2001      	movs	r0, #1
 800551e:	f7fb fe2f 	bl	8001180 <HAL_Delay>
      ms++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f892 	bl	8006652 <USB_GetMode>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <USB_SetCurrentMode+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b31      	cmp	r3, #49	; 0x31
 8005538:	d9f0      	bls.n	800551c <USB_SetCurrentMode+0x60>
 800553a:	e001      	b.n	8005540 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e005      	b.n	800554c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b32      	cmp	r3, #50	; 0x32
 8005544:	d101      	bne.n	800554a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005554:	b084      	sub	sp, #16
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e009      	b.n	8005588 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3340      	adds	r3, #64	; 0x40
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3301      	adds	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0e      	cmp	r3, #14
 800558c:	d9f2      	bls.n	8005574 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11c      	bne.n	80055ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e005      	b.n	80055da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055e6:	2103      	movs	r1, #3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f959 	bl	80058a0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ee:	2110      	movs	r1, #16
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f8f1 	bl	80057d8 <USB_FlushTxFifo>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f91d 	bl	8005840 <USB_FlushRxFifo>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	461a      	mov	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	461a      	mov	r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e043      	b.n	80056c2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005650:	d118      	bne.n	8005684 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	461a      	mov	r2, r3
 8005666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e013      	b.n	8005696 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e008      	b.n	8005696 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3301      	adds	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3b7      	bcc.n	800563a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e043      	b.n	8005758 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e6:	d118      	bne.n	800571a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e013      	b.n	800572c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	461a      	mov	r2, r3
 8005712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	e008      	b.n	800572c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	461a      	mov	r2, r3
 800573a:	2300      	movs	r3, #0
 800573c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	461a      	mov	r2, r3
 800574c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3b7      	bcc.n	80056d0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f043 0210 	orr.w	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <USB_DevInit+0x280>)
 8005794:	4313      	orrs	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 0208 	orr.w	r2, r3, #8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d107      	bne.n	80057c2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	803c3800 	.word	0x803c3800

080057d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3301      	adds	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <USB_FlushTxFifo+0x64>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e01b      	b.n	8005830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	daf2      	bge.n	80057e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	019b      	lsls	r3, r3, #6
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a08      	ldr	r2, [pc, #32]	; (800583c <USB_FlushTxFifo+0x64>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e006      	b.n	8005830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d0f0      	beq.n	8005810 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	00030d40 	.word	0x00030d40

08005840 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <USB_FlushRxFifo+0x5c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e018      	b.n	8005890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	daf2      	bge.n	800584c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2210      	movs	r2, #16
 800586e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <USB_FlushRxFifo+0x5c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e006      	b.n	8005890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b10      	cmp	r3, #16
 800588c:	d0f0      	beq.n	8005870 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	00030d40 	.word	0x00030d40

080058a0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b087      	sub	sp, #28
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0306 	and.w	r3, r3, #6
 80058ea:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d002      	beq.n	80058f8 <USB_GetDevSpeed+0x26>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d102      	bne.n	80058fe <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058f8:	2302      	movs	r3, #2
 80058fa:	75fb      	strb	r3, [r7, #23]
 80058fc:	e001      	b.n	8005902 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80058fe:	230f      	movs	r3, #15
 8005900:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d13a      	bne.n	80059a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594a:	4313      	orrs	r3, r2
 800594c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d155      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	791b      	ldrb	r3, [r3, #4]
 800597e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005980:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005988:	4313      	orrs	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e036      	b.n	8005a10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11a      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059f6:	430b      	orrs	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d161      	bne.n	8005b00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a52:	d11f      	bne.n	8005a94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	0159      	lsls	r1, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	4619      	mov	r1, r3
 8005af8:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <USB_DeactivateEndpoint+0x1b0>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e060      	b.n	8005bc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d11f      	bne.n	8005b58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	43db      	mvns	r3, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b78:	4013      	ands	r3, r2
 8005b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <USB_DeactivateEndpoint+0x1b4>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	ec337800 	.word	0xec337800
 8005bd4:	eff37800 	.word	0xeff37800

08005bd8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 8128 	bne.w	8005e46 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d132      	bne.n	8005c64 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	0cdb      	lsrs	r3, r3, #19
 8005c5e:	04db      	lsls	r3, r3, #19
 8005c60:	6113      	str	r3, [r2, #16]
 8005c62:	e092      	b.n	8005d8a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	0cdb      	lsrs	r3, r3, #19
 8005c80:	04db      	lsls	r3, r3, #19
 8005c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ca2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ca6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11a      	bne.n	8005ce4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce0:	6113      	str	r3, [r2, #16]
 8005ce2:	e01b      	b.n	8005d1c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	440b      	add	r3, r1
 8005cfc:	1e59      	subs	r1, r3, #1
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d06:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d08:	4b8d      	ldr	r3, [pc, #564]	; (8005f40 <USB_EPStartXfer+0x368>)
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	0148      	lsls	r0, r1, #5
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	4401      	add	r1, r0
 8005d14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d32:	6939      	ldr	r1, [r7, #16]
 8005d34:	0148      	lsls	r0, r1, #5
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	4401      	add	r1, r0
 8005d3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	791b      	ldrb	r3, [r3, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d11f      	bne.n	8005d8a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d88:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d015      	beq.n	8005dde <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8139 	beq.w	800602e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	634b      	str	r3, [r1, #52]	; 0x34
 8005ddc:	e127      	b.n	800602e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d110      	bne.n	8005e10 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e00f      	b.n	8005e30 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68d9      	ldr	r1, [r3, #12]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781a      	ldrb	r2, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9a6 	bl	8006190 <USB_WritePacket>
 8005e44:	e0f3      	b.n	800602e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	0cdb      	lsrs	r3, r3, #19
 8005e62:	04db      	lsls	r3, r3, #19
 8005e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d12f      	bne.n	8005ef0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	6939      	ldr	r1, [r7, #16]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eec:	6113      	str	r3, [r2, #16]
 8005eee:	e061      	b.n	8005fb4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d125      	bne.n	8005f44 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0e:	6939      	ldr	r1, [r7, #16]
 8005f10:	0148      	lsls	r0, r1, #5
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	4401      	add	r1, r0
 8005f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3c:	6113      	str	r3, [r2, #16]
 8005f3e:	e039      	b.n	8005fb4 <USB_EPStartXfer+0x3dc>
 8005f40:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	89fa      	ldrh	r2, [r7, #14]
 8005f60:	fb03 f202 	mul.w	r2, r3, r2
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	04d9      	lsls	r1, r3, #19
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <USB_EPStartXfer+0x460>)
 8005f7c:	400b      	ands	r3, r1
 8005f7e:	6939      	ldr	r1, [r7, #16]
 8005f80:	0148      	lsls	r0, r1, #5
 8005f82:	6979      	ldr	r1, [r7, #20]
 8005f84:	4401      	add	r1, r0
 8005f86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	6939      	ldr	r1, [r7, #16]
 8005fa6:	0148      	lsls	r0, r1, #5
 8005fa8:	6979      	ldr	r1, [r7, #20]
 8005faa:	4401      	add	r1, r0
 8005fac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	791b      	ldrb	r3, [r3, #4]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d128      	bne.n	800600e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d110      	bne.n	8005fee <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e00f      	b.n	800600e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006028:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800602c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	1ff80000 	.word	0x1ff80000

0800603c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d14a      	bne.n	80060f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800606e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006072:	f040 8086 	bne.w	8006182 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006098:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3301      	adds	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d902      	bls.n	80060d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
          break;
 80060d2:	e056      	b.n	8006182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ec:	d0e7      	beq.n	80060be <USB_EPStopXfer+0x82>
 80060ee:	e048      	b.n	8006182 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006108:	d13b      	bne.n	8006182 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800612c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f242 7210 	movw	r2, #10000	; 0x2710
 800615e:	4293      	cmp	r3, r2
 8006160:	d902      	bls.n	8006168 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	e00c      	b.n	8006182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800617c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006180:	d0e7      	beq.n	8006152 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006190:	b480      	push	{r7}
 8006192:	b089      	sub	sp, #36	; 0x24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	460b      	mov	r3, r1
 80061a0:	71fb      	strb	r3, [r7, #7]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80061ae:	88bb      	ldrh	r3, [r7, #4]
 80061b0:	3303      	adds	r3, #3
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e018      	b.n	80061ee <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	031a      	lsls	r2, r3, #12
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c8:	461a      	mov	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6013      	str	r3, [r2, #0]
    pSrc++;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3301      	adds	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3301      	adds	r3, #1
 80061da:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	3301      	adds	r3, #1
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3e2      	bcc.n	80061bc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3724      	adds	r7, #36	; 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006204:	b480      	push	{r7}
 8006206:	b08b      	sub	sp, #44	; 0x2c
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	089b      	lsrs	r3, r3, #2
 800621e:	b29b      	uxth	r3, r3
 8006220:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	e014      	b.n	800625a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	601a      	str	r2, [r3, #0]
    pDest++;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	3301      	adds	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	3301      	adds	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	3301      	adds	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	3301      	adds	r3, #1
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	429a      	cmp	r2, r3
 8006260:	d3e6      	bcc.n	8006230 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006262:	8bfb      	ldrh	r3, [r7, #30]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01e      	beq.n	80062a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006272:	461a      	mov	r2, r3
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	b2da      	uxtb	r2, r3
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	701a      	strb	r2, [r3, #0]
      i++;
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	3301      	adds	r3, #1
 8006292:	623b      	str	r3, [r7, #32]
      pDest++;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	3301      	adds	r3, #1
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800629a:	8bfb      	ldrh	r3, [r7, #30]
 800629c:	3b01      	subs	r3, #1
 800629e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062a0:	8bfb      	ldrh	r3, [r7, #30]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1ea      	bne.n	800627c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	372c      	adds	r7, #44	; 0x2c
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d12c      	bne.n	800632a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db12      	blt.n	8006308 <USB_EPSetStall+0x54>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006302:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006306:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e02b      	b.n	8006382 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db12      	blt.n	8006362 <USB_EPSetStall+0xae>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00f      	beq.n	8006362 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006360:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006380:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d128      	bne.n	80063fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	791b      	ldrb	r3, [r3, #4]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d003      	beq.n	80063dc <USB_EPClearStall+0x4c>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	791b      	ldrb	r3, [r3, #4]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d138      	bne.n	800644e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e027      	b.n	800644e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006418:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800641c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d003      	beq.n	800642e <USB_EPClearStall+0x9e>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d10f      	bne.n	800644e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800647e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d6:	f023 0302 	bic.w	r3, r3, #2
 80064da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006504:	f023 0303 	bic.w	r3, r3, #3
 8006508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	0c1b      	lsrs	r3, r3, #16
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	b29b      	uxth	r3, r3
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4013      	ands	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065e8:	68bb      	ldr	r3, [r7, #8]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	01db      	lsls	r3, r3, #7
 8006628:	b2db      	uxtb	r3, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4013      	ands	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006644:	68bb      	ldr	r3, [r7, #8]
}
 8006646:	4618      	mov	r0, r3
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0301 	and.w	r3, r3, #1
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006688:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	333c      	adds	r3, #60	; 0x3c
 80066c6:	3304      	adds	r3, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <USB_EP0_OutStart+0x8c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d90a      	bls.n	80066ea <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e4:	d101      	bne.n	80066ea <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e024      	b.n	8006734 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	461a      	mov	r2, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f043 0318 	orr.w	r3, r3, #24
 800671c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006730:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	4f54300a 	.word	0x4f54300a

08006744 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <USB_CoreReset+0x64>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e01b      	b.n	800679a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	daf2      	bge.n	8006750 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <USB_CoreReset+0x64>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e006      	b.n	800679a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b01      	cmp	r3, #1
 8006796:	d0f0      	beq.n	800677a <USB_CoreReset+0x36>

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	00030d40 	.word	0x00030d40

080067ac <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80067b8:	201c      	movs	r0, #28
 80067ba:	f002 fc45 	bl	8009048 <USBD_static_malloc>
 80067be:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	32b0      	adds	r2, #176	; 0xb0
 80067d0:	2100      	movs	r1, #0
 80067d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067d6:	2302      	movs	r3, #2
 80067d8:	e08a      	b.n	80068f0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	32b0      	adds	r2, #176	; 0xb0
 80067e4:	68f9      	ldr	r1, [r7, #12]
 80067e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	32b0      	adds	r2, #176	; 0xb0
 80067f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	7c1b      	ldrb	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11b      	bne.n	800683e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006806:	4b3c      	ldr	r3, [pc, #240]	; (80068f8 <USBD_CUSTOM_HID_Init+0x14c>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	3326      	adds	r3, #38	; 0x26
 800681c:	2205      	movs	r2, #5
 800681e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <USBD_CUSTOM_HID_Init+0x150>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006838:	2205      	movs	r2, #5
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e01a      	b.n	8006874 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <USBD_CUSTOM_HID_Init+0x14c>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 020f 	and.w	r2, r3, #15
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	3326      	adds	r3, #38	; 0x26
 8006854:	2205      	movs	r2, #5
 8006856:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006858:	4b28      	ldr	r3, [pc, #160]	; (80068fc <USBD_CUSTOM_HID_Init+0x150>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006870:	2205      	movs	r2, #5
 8006872:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006874:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <USBD_CUSTOM_HID_Init+0x14c>)
 8006876:	7819      	ldrb	r1, [r3, #0]
 8006878:	2302      	movs	r3, #2
 800687a:	2203      	movs	r2, #3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f9e3 	bl	8008c48 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <USBD_CUSTOM_HID_Init+0x14c>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	3324      	adds	r3, #36	; 0x24
 8006898:	2201      	movs	r2, #1
 800689a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800689c:	4b17      	ldr	r3, [pc, #92]	; (80068fc <USBD_CUSTOM_HID_Init+0x150>)
 800689e:	7819      	ldrb	r1, [r3, #0]
 80068a0:	2302      	movs	r3, #2
 80068a2:	2203      	movs	r2, #3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 f9cf 	bl	8008c48 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80068aa:	4b14      	ldr	r3, [pc, #80]	; (80068fc <USBD_CUSTOM_HID_Init+0x150>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 020f 	and.w	r2, r3, #15
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068c2:	2201      	movs	r2, #1
 80068c4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	33b0      	adds	r3, #176	; 0xb0
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <USBD_CUSTOM_HID_Init+0x150>)
 80068e2:	7819      	ldrb	r1, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	2306      	movs	r3, #6
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f002 fb27 	bl	8008f3c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000086 	.word	0x20000086
 80068fc:	20000087 	.word	0x20000087

08006900 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800690c:	4b37      	ldr	r3, [pc, #220]	; (80069ec <USBD_CUSTOM_HID_DeInit+0xec>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 f9d6 	bl	8008cc4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <USBD_CUSTOM_HID_DeInit+0xec>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3324      	adds	r3, #36	; 0x24
 800692e:	2200      	movs	r2, #0
 8006930:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006932:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <USBD_CUSTOM_HID_DeInit+0xec>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	f003 020f 	and.w	r2, r3, #15
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	3326      	adds	r3, #38	; 0x26
 8006948:	2200      	movs	r2, #0
 800694a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800694c:	4b28      	ldr	r3, [pc, #160]	; (80069f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f002 f9b6 	bl	8008cc4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006970:	2200      	movs	r2, #0
 8006972:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006974:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800698c:	2200      	movs	r2, #0
 800698e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01f      	beq.n	80069e2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	33b0      	adds	r3, #176	; 0xb0
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32b0      	adds	r2, #176	; 0xb0
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f002 fb4d 	bl	8009064 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	; 0xb0
 80069d4:	2100      	movs	r1, #0
 80069d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000086 	.word	0x20000086
 80069f0:	20000087 	.word	0x20000087

080069f4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	32b0      	adds	r2, #176	; 0xb0
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0f8      	b.n	8006c1a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d056      	beq.n	8006ae2 <USBD_CUSTOM_HID_Setup+0xee>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	f040 80e8 	bne.w	8006c0a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	3b02      	subs	r3, #2
 8006a40:	2b09      	cmp	r3, #9
 8006a42:	d846      	bhi.n	8006ad2 <USBD_CUSTOM_HID_Setup+0xde>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <USBD_CUSTOM_HID_Setup+0x58>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006aa5 	.word	0x08006aa5
 8006a50:	08006a83 	.word	0x08006a83
 8006a54:	08006ad3 	.word	0x08006ad3
 8006a58:	08006ad3 	.word	0x08006ad3
 8006a5c:	08006ad3 	.word	0x08006ad3
 8006a60:	08006ad3 	.word	0x08006ad3
 8006a64:	08006ad3 	.word	0x08006ad3
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006a93 	.word	0x08006a93
 8006a70:	08006a75 	.word	0x08006a75
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	609a      	str	r2, [r3, #8]
          break;
 8006a80:	e02e      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3308      	adds	r3, #8
 8006a86:	2201      	movs	r2, #1
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fcc4 	bl	8008418 <USBD_CtlSendData>
          break;
 8006a90:	e026      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	60da      	str	r2, [r3, #12]
          break;
 8006aa2:	e01d      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fcb3 	bl	8008418 <USBD_CtlSendData>
          break;
 8006ab2:	e015      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006aba:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	88db      	ldrh	r3, [r3, #6]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	bf28      	it	cs
 8006ac4:	2306      	movcs	r3, #6
 8006ac6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fcd0 	bl	8008470 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006ad0:	e006      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fc2e 	bl	8008336 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e09a      	b.n	8006c18 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b0b      	cmp	r3, #11
 8006ae8:	f200 8086 	bhi.w	8006bf8 <USBD_CUSTOM_HID_Setup+0x204>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBD_CUSTOM_HID_Setup+0x100>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b25 	.word	0x08006b25
 8006af8:	08006c07 	.word	0x08006c07
 8006afc:	08006bf9 	.word	0x08006bf9
 8006b00:	08006bf9 	.word	0x08006bf9
 8006b04:	08006bf9 	.word	0x08006bf9
 8006b08:	08006bf9 	.word	0x08006bf9
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006bf9 	.word	0x08006bf9
 8006b14:	08006bf9 	.word	0x08006bf9
 8006b18:	08006bf9 	.word	0x08006bf9
 8006b1c:	08006ba7 	.word	0x08006ba7
 8006b20:	08006bd1 	.word	0x08006bd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d107      	bne.n	8006b40 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b30:	f107 030e 	add.w	r3, r7, #14
 8006b34:	2202      	movs	r2, #2
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fc6d 	bl	8008418 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3e:	e063      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fbf7 	bl	8008336 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4c:	e05c      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b22      	cmp	r3, #34	; 0x22
 8006b58:	d110      	bne.n	8006b7c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b1d      	cmp	r3, #29
 8006b60:	bf28      	it	cs
 8006b62:	231d      	movcs	r3, #29
 8006b64:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	33b0      	adds	r3, #176	; 0xb0
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	e00d      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	885b      	ldrh	r3, [r3, #2]
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d107      	bne.n	8006b98 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006b88:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <USBD_CUSTOM_HID_Setup+0x230>)
 8006b8a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	88db      	ldrh	r3, [r3, #6]
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	bf28      	it	cs
 8006b94:	2309      	movcs	r3, #9
 8006b96:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b98:	8bfb      	ldrh	r3, [r7, #30]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fc3a 	bl	8008418 <USBD_CtlSendData>
          break;
 8006ba4:	e030      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d107      	bne.n	8006bc2 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	3310      	adds	r3, #16
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 fc2c 	bl	8008418 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bc0:	e022      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fbb6 	bl	8008336 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006bce:	e01b      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d106      	bne.n	8006bea <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	885b      	ldrh	r3, [r3, #2]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be8:	e00e      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fba2 	bl	8008336 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf6:	e007      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fb9b 	bl	8008336 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	75fb      	strb	r3, [r7, #23]
          break;
 8006c04:	e000      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006c06:	bf00      	nop
      }
      break;
 8006c08:	e006      	b.n	8006c18 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fb92 	bl	8008336 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	bf00      	nop
  }
  return (uint8_t)ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000070 	.word	0x20000070

08006c28 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006c30:	2181      	movs	r1, #129	; 0x81
 8006c32:	4815      	ldr	r0, [pc, #84]	; (8006c88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006c34:	f000 fd1d 	bl	8007672 <USBD_GetEpDesc>
 8006c38:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4812      	ldr	r0, [pc, #72]	; (8006c88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006c3e:	f000 fd18 	bl	8007672 <USBD_GetEpDesc>
 8006c42:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f042 0202 	orr.w	r2, r2, #2
 8006c52:	711a      	strb	r2, [r3, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2205      	movs	r2, #5
 8006c5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0202 	orr.w	r2, r2, #2
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2205      	movs	r2, #5
 8006c76:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2229      	movs	r2, #41	; 0x29
 8006c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006c7e:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000044 	.word	0x20000044

08006c8c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006c94:	2181      	movs	r1, #129	; 0x81
 8006c96:	4815      	ldr	r0, [pc, #84]	; (8006cec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006c98:	f000 fceb 	bl	8007672 <USBD_GetEpDesc>
 8006c9c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4812      	ldr	r0, [pc, #72]	; (8006cec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006ca2:	f000 fce6 	bl	8007672 <USBD_GetEpDesc>
 8006ca6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f042 0202 	orr.w	r2, r2, #2
 8006cb6:	711a      	strb	r2, [r3, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f042 0202 	orr.w	r2, r2, #2
 8006cd0:	711a      	strb	r2, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2205      	movs	r2, #5
 8006cda:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2229      	movs	r2, #41	; 0x29
 8006ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006ce2:	4b02      	ldr	r3, [pc, #8]	; (8006cec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000044 	.word	0x20000044

08006cf0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006cf8:	2181      	movs	r1, #129	; 0x81
 8006cfa:	4815      	ldr	r0, [pc, #84]	; (8006d50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006cfc:	f000 fcb9 	bl	8007672 <USBD_GetEpDesc>
 8006d00:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d02:	2101      	movs	r1, #1
 8006d04:	4812      	ldr	r0, [pc, #72]	; (8006d50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006d06:	f000 fcb4 	bl	8007672 <USBD_GetEpDesc>
 8006d0a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f042 0202 	orr.w	r2, r2, #2
 8006d1a:	711a      	strb	r2, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2205      	movs	r2, #5
 8006d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0202 	orr.w	r2, r2, #2
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2229      	movs	r2, #41	; 0x29
 8006d44:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d46:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000044 	.word	0x20000044

08006d54 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	; 0xb0
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32b0      	adds	r2, #176	; 0xb0
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e017      	b.n	8006dd2 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	32b0      	adds	r2, #176	; 0xb0
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	33b0      	adds	r3, #176	; 0xb0
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	7810      	ldrb	r0, [r2, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	7852      	ldrb	r2, [r2, #1]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	32b0      	adds	r2, #176	; 0xb0
 8006dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e00f      	b.n	8006e1a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32b0      	adds	r2, #176	; 0xb0
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006e0a:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	2306      	movs	r3, #6
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 f892 	bl	8008f3c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000087 	.word	0x20000087

08006e28 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32b0      	adds	r2, #176	; 0xb0
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e016      	b.n	8006e78 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d111      	bne.n	8006e76 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	33b0      	adds	r3, #176	; 0xb0
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	7810      	ldrb	r0, [r2, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	7852      	ldrb	r2, [r2, #1]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000007c 	.word	0x2000007c

08006ea0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e009      	b.n	8006ec8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	33b0      	adds	r3, #176	; 0xb0
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e01f      	b.n	8006f2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	79fa      	ldrb	r2, [r7, #7]
 8006f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f001 fe13 	bl	8008b4c <USBD_LL_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e025      	b.n	8006f98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32ae      	adds	r2, #174	; 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	32ae      	adds	r2, #174	; 0xae
 8006f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f107 020e 	add.w	r2, r7, #14
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fe1b 	bl	8008be4 <USBD_LL_Start>
 8006fae:	4603      	mov	r3, r0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	4611      	mov	r1, r2
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f938 	bl	80082c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2b02      	cmp	r3, #2
 8007074:	d01a      	beq.n	80070ac <USBD_LL_SetupStage+0x72>
 8007076:	2b02      	cmp	r3, #2
 8007078:	d822      	bhi.n	80070c0 <USBD_LL_SetupStage+0x86>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <USBD_LL_SetupStage+0x4a>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00a      	beq.n	8007098 <USBD_LL_SetupStage+0x5e>
 8007082:	e01d      	b.n	80070c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb65 	bl	800775c <USBD_StdDevReq>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
      break;
 8007096:	e020      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fbcd 	bl	8007840 <USBD_StdItfReq>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
      break;
 80070aa:	e016      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc2f 	bl	8007918 <USBD_StdEPReq>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
      break;
 80070be:	e00c      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fe2e 	bl	8008d30 <USBD_LL_StallEP>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	bf00      	nop
  }

  return ret;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	460b      	mov	r3, r1
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d16e      	bne.n	80071da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800710a:	2b03      	cmp	r3, #3
 800710c:	f040 8098 	bne.w	8007240 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d913      	bls.n	8007144 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	4293      	cmp	r3, r2
 8007134:	bf28      	it	cs
 8007136:	4613      	movcs	r3, r2
 8007138:	461a      	mov	r2, r3
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 f9b4 	bl	80084aa <USBD_CtlContinueRx>
 8007142:	e07d      	b.n	8007240 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2b02      	cmp	r3, #2
 8007150:	d014      	beq.n	800717c <USBD_LL_DataOutStage+0x98>
 8007152:	2b02      	cmp	r3, #2
 8007154:	d81d      	bhi.n	8007192 <USBD_LL_DataOutStage+0xae>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <USBD_LL_DataOutStage+0x7c>
 800715a:	2b01      	cmp	r3, #1
 800715c:	d003      	beq.n	8007166 <USBD_LL_DataOutStage+0x82>
 800715e:	e018      	b.n	8007192 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	75bb      	strb	r3, [r7, #22]
            break;
 8007164:	e018      	b.n	8007198 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800716c:	b2db      	uxtb	r3, r3
 800716e:	4619      	mov	r1, r3
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fa64 	bl	800763e <USBD_CoreFindIF>
 8007176:	4603      	mov	r3, r0
 8007178:	75bb      	strb	r3, [r7, #22]
            break;
 800717a:	e00d      	b.n	8007198 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fa66 	bl	8007658 <USBD_CoreFindEP>
 800718c:	4603      	mov	r3, r0
 800718e:	75bb      	strb	r3, [r7, #22]
            break;
 8007190:	e002      	b.n	8007198 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	75bb      	strb	r3, [r7, #22]
            break;
 8007196:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007198:	7dbb      	ldrb	r3, [r7, #22]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d119      	bne.n	80071d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d113      	bne.n	80071d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071aa:	7dba      	ldrb	r2, [r7, #22]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	32ae      	adds	r2, #174	; 0xae
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071ba:	7dba      	ldrb	r2, [r7, #22]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071c2:	7dba      	ldrb	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	32ae      	adds	r2, #174	; 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f001 f97a 	bl	80084cc <USBD_CtlSendStatus>
 80071d8:	e032      	b.n	8007240 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fa37 	bl	8007658 <USBD_CoreFindEP>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ee:	7dbb      	ldrb	r3, [r7, #22]
 80071f0:	2bff      	cmp	r3, #255	; 0xff
 80071f2:	d025      	beq.n	8007240 <USBD_LL_DataOutStage+0x15c>
 80071f4:	7dbb      	ldrb	r3, [r7, #22]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d122      	bne.n	8007240 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b03      	cmp	r3, #3
 8007204:	d117      	bne.n	8007236 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007206:	7dba      	ldrb	r2, [r7, #22]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	32ae      	adds	r2, #174	; 0xae
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00f      	beq.n	8007236 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007216:	7dba      	ldrb	r2, [r7, #22]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800721e:	7dba      	ldrb	r2, [r7, #22]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	32ae      	adds	r2, #174	; 0xae
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	7afa      	ldrb	r2, [r7, #11]
 800722c:	4611      	mov	r1, r2
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	e000      	b.n	8007242 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	460b      	mov	r3, r1
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d16f      	bne.n	800733e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3314      	adds	r3, #20
 8007262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800726a:	2b02      	cmp	r3, #2
 800726c:	d15a      	bne.n	8007324 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d914      	bls.n	80072a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	461a      	mov	r2, r3
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 f8dc 	bl	800844e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007296:	2300      	movs	r3, #0
 8007298:	2200      	movs	r2, #0
 800729a:	2100      	movs	r1, #0
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 fe4d 	bl	8008f3c <USBD_LL_PrepareReceive>
 80072a2:	e03f      	b.n	8007324 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d11c      	bne.n	80072ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d316      	bcc.n	80072ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d20f      	bcs.n	80072ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072ca:	2200      	movs	r2, #0
 80072cc:	2100      	movs	r1, #0
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f8bd 	bl	800844e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072dc:	2300      	movs	r3, #0
 80072de:	2200      	movs	r2, #0
 80072e0:	2100      	movs	r1, #0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f001 fe2a 	bl	8008f3c <USBD_LL_PrepareReceive>
 80072e8:	e01c      	b.n	8007324 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d10f      	bne.n	8007316 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f001 fd09 	bl	8008d30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f001 f8e7 	bl	80084f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d03a      	beq.n	80073a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fe42 	bl	8006fb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800733c:	e032      	b.n	80073a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f985 	bl	8007658 <USBD_CoreFindEP>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2bff      	cmp	r3, #255	; 0xff
 8007356:	d025      	beq.n	80073a4 <USBD_LL_DataInStage+0x15a>
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d122      	bne.n	80073a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d11c      	bne.n	80073a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800736a:	7dfa      	ldrb	r2, [r7, #23]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	32ae      	adds	r2, #174	; 0xae
 8007370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d014      	beq.n	80073a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800737a:	7dfa      	ldrb	r2, [r7, #23]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007382:	7dfa      	ldrb	r2, [r7, #23]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	32ae      	adds	r2, #174	; 0xae
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	7afa      	ldrb	r2, [r7, #11]
 8007390:	4611      	mov	r1, r2
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	4798      	blx	r3
 8007396:	4603      	mov	r3, r0
 8007398:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800739a:	7dbb      	ldrb	r3, [r7, #22]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073a0:	7dbb      	ldrb	r3, [r7, #22]
 80073a2:	e000      	b.n	80073a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00e      	beq.n	8007414 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6852      	ldr	r2, [r2, #4]
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	4611      	mov	r1, r2
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007410:	2303      	movs	r3, #3
 8007412:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 fc14 	bl	8008c48 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2240      	movs	r2, #64	; 0x40
 800742c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	2200      	movs	r2, #0
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fc06 	bl	8008c48 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2240      	movs	r2, #64	; 0x40
 8007446:	621a      	str	r2, [r3, #32]

  return ret;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b04      	cmp	r3, #4
 8007484:	d006      	beq.n	8007494 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	b2da      	uxtb	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2204      	movs	r2, #4
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d106      	bne.n	80074cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d110      	bne.n	8007510 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	32ae      	adds	r2, #174	; 0xae
 8007530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e01c      	b.n	8007576 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b03      	cmp	r3, #3
 8007546:	d115      	bne.n	8007574 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	; 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	; 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	4611      	mov	r1, r2
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	32ae      	adds	r2, #174	; 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e01c      	b.n	80075da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d115      	bne.n	80075d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32ae      	adds	r2, #174	; 0xae
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32ae      	adds	r2, #174	; 0xae
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	4611      	mov	r1, r2
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00e      	beq.n	8007634 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6852      	ldr	r2, [r2, #4]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	4611      	mov	r1, r2
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800764a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007664:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	885b      	ldrh	r3, [r3, #2]
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	429a      	cmp	r2, r3
 8007698:	d920      	bls.n	80076dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076a2:	e013      	b.n	80076cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076a4:	f107 030a 	add.w	r3, r7, #10
 80076a8:	4619      	mov	r1, r3
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f000 f81b 	bl	80076e6 <USBD_GetNextDesc>
 80076b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d108      	bne.n	80076cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	789b      	ldrb	r3, [r3, #2]
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d008      	beq.n	80076da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	897b      	ldrh	r3, [r7, #10]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d8e5      	bhi.n	80076a4 <USBD_GetEpDesc+0x32>
 80076d8:	e000      	b.n	80076dc <USBD_GetEpDesc+0x6a>
          break;
 80076da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076dc:	693b      	ldr	r3, [r7, #16]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4413      	add	r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	3301      	adds	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800773e:	8a3b      	ldrh	r3, [r7, #16]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	b21a      	sxth	r2, r3
 8007744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007748:	4313      	orrs	r3, r2
 800774a:	b21b      	sxth	r3, r3
 800774c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800774e:	89fb      	ldrh	r3, [r7, #14]
}
 8007750:	4618      	mov	r0, r3
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d005      	beq.n	8007782 <USBD_StdDevReq+0x26>
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d857      	bhi.n	800782a <USBD_StdDevReq+0xce>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00f      	beq.n	800779e <USBD_StdDevReq+0x42>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d153      	bne.n	800782a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	32ae      	adds	r2, #174	; 0xae
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e04a      	b.n	8007834 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b09      	cmp	r3, #9
 80077a4:	d83b      	bhi.n	800781e <USBD_StdDevReq+0xc2>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBD_StdDevReq+0x50>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	08007801 	.word	0x08007801
 80077b0:	08007815 	.word	0x08007815
 80077b4:	0800781f 	.word	0x0800781f
 80077b8:	0800780b 	.word	0x0800780b
 80077bc:	0800781f 	.word	0x0800781f
 80077c0:	080077df 	.word	0x080077df
 80077c4:	080077d5 	.word	0x080077d5
 80077c8:	0800781f 	.word	0x0800781f
 80077cc:	080077f7 	.word	0x080077f7
 80077d0:	080077e9 	.word	0x080077e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa3c 	bl	8007c54 <USBD_GetDescriptor>
          break;
 80077dc:	e024      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fbcb 	bl	8007f7c <USBD_SetAddress>
          break;
 80077e6:	e01f      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fc0a 	bl	8008004 <USBD_SetConfig>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
          break;
 80077f4:	e018      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fcad 	bl	8008158 <USBD_GetConfig>
          break;
 80077fe:	e013      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fcde 	bl	80081c4 <USBD_GetStatus>
          break;
 8007808:	e00e      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fd0d 	bl	800822c <USBD_SetFeature>
          break;
 8007812:	e009      	b.n	8007828 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fd31 	bl	800827e <USBD_ClrFeature>
          break;
 800781c:	e004      	b.n	8007828 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fd88 	bl	8008336 <USBD_CtlError>
          break;
 8007826:	bf00      	nop
      }
      break;
 8007828:	e004      	b.n	8007834 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fd82 	bl	8008336 <USBD_CtlError>
      break;
 8007832:	bf00      	nop
  }

  return ret;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop

08007840 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d005      	beq.n	8007866 <USBD_StdItfReq+0x26>
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d852      	bhi.n	8007904 <USBD_StdItfReq+0xc4>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <USBD_StdItfReq+0x26>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d14e      	bne.n	8007904 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	b2db      	uxtb	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	2b02      	cmp	r3, #2
 8007872:	d840      	bhi.n	80078f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	889b      	ldrh	r3, [r3, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d836      	bhi.n	80078ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	889b      	ldrh	r3, [r3, #4]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff fed9 	bl	800763e <USBD_CoreFindIF>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2bff      	cmp	r3, #255	; 0xff
 8007894:	d01d      	beq.n	80078d2 <USBD_StdItfReq+0x92>
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11a      	bne.n	80078d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800789c:	7bba      	ldrb	r2, [r7, #14]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32ae      	adds	r2, #174	; 0xae
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00f      	beq.n	80078cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078ac:	7bba      	ldrb	r2, [r7, #14]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078b4:	7bba      	ldrb	r2, [r7, #14]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	; 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078ca:	e004      	b.n	80078d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078d0:	e001      	b.n	80078d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	88db      	ldrh	r3, [r3, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d110      	bne.n	8007900 <USBD_StdItfReq+0xc0>
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10d      	bne.n	8007900 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fdf1 	bl	80084cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078ea:	e009      	b.n	8007900 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd21 	bl	8008336 <USBD_CtlError>
          break;
 80078f4:	e004      	b.n	8007900 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fd1c 	bl	8008336 <USBD_CtlError>
          break;
 80078fe:	e000      	b.n	8007902 <USBD_StdItfReq+0xc2>
          break;
 8007900:	bf00      	nop
      }
      break;
 8007902:	e004      	b.n	800790e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fd15 	bl	8008336 <USBD_CtlError>
      break;
 800790c:	bf00      	nop
  }

  return ret;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	889b      	ldrh	r3, [r3, #4]
 800792a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d007      	beq.n	8007948 <USBD_StdEPReq+0x30>
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	f200 817f 	bhi.w	8007c3c <USBD_StdEPReq+0x324>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02a      	beq.n	8007998 <USBD_StdEPReq+0x80>
 8007942:	2b20      	cmp	r3, #32
 8007944:	f040 817a 	bne.w	8007c3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fe83 	bl	8007658 <USBD_CoreFindEP>
 8007952:	4603      	mov	r3, r0
 8007954:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007956:	7b7b      	ldrb	r3, [r7, #13]
 8007958:	2bff      	cmp	r3, #255	; 0xff
 800795a:	f000 8174 	beq.w	8007c46 <USBD_StdEPReq+0x32e>
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 8170 	bne.w	8007c46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007966:	7b7a      	ldrb	r2, [r7, #13]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800796e:	7b7a      	ldrb	r2, [r7, #13]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	32ae      	adds	r2, #174	; 0xae
 8007974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8163 	beq.w	8007c46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007980:	7b7a      	ldrb	r2, [r7, #13]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	; 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007996:	e156      	b.n	8007c46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d008      	beq.n	80079b2 <USBD_StdEPReq+0x9a>
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	f300 8145 	bgt.w	8007c30 <USBD_StdEPReq+0x318>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 809b 	beq.w	8007ae2 <USBD_StdEPReq+0x1ca>
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d03c      	beq.n	8007a2a <USBD_StdEPReq+0x112>
 80079b0:	e13e      	b.n	8007c30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d002      	beq.n	80079c4 <USBD_StdEPReq+0xac>
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d016      	beq.n	80079f0 <USBD_StdEPReq+0xd8>
 80079c2:	e02c      	b.n	8007a1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00d      	beq.n	80079e6 <USBD_StdEPReq+0xce>
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d00a      	beq.n	80079e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f9ab 	bl	8008d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079da:	2180      	movs	r1, #128	; 0x80
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9a7 	bl	8008d30 <USBD_LL_StallEP>
 80079e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079e4:	e020      	b.n	8007a28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fca4 	bl	8008336 <USBD_CtlError>
              break;
 80079ee:	e01b      	b.n	8007a28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	885b      	ldrh	r3, [r3, #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10e      	bne.n	8007a16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <USBD_StdEPReq+0xfe>
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b80      	cmp	r3, #128	; 0x80
 8007a02:	d008      	beq.n	8007a16 <USBD_StdEPReq+0xfe>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f98d 	bl	8008d30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fd58 	bl	80084cc <USBD_CtlSendStatus>

              break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc88 	bl	8008336 <USBD_CtlError>
              break;
 8007a26:	bf00      	nop
          }
          break;
 8007a28:	e107      	b.n	8007c3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d002      	beq.n	8007a3c <USBD_StdEPReq+0x124>
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d016      	beq.n	8007a68 <USBD_StdEPReq+0x150>
 8007a3a:	e04b      	b.n	8007ad4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00d      	beq.n	8007a5e <USBD_StdEPReq+0x146>
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	d00a      	beq.n	8007a5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f96f 	bl	8008d30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f96b 	bl	8008d30 <USBD_LL_StallEP>
 8007a5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a5c:	e040      	b.n	8007ae0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc68 	bl	8008336 <USBD_CtlError>
              break;
 8007a66:	e03b      	b.n	8007ae0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d136      	bne.n	8007ade <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f98c 	bl	8008d9c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fd21 	bl	80084cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fde2 	bl	8007658 <USBD_CoreFindEP>
 8007a94:	4603      	mov	r3, r0
 8007a96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a98:	7b7b      	ldrb	r3, [r7, #13]
 8007a9a:	2bff      	cmp	r3, #255	; 0xff
 8007a9c:	d01f      	beq.n	8007ade <USBD_StdEPReq+0x1c6>
 8007a9e:	7b7b      	ldrb	r3, [r7, #13]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11c      	bne.n	8007ade <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007aa4:	7b7a      	ldrb	r2, [r7, #13]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007aac:	7b7a      	ldrb	r2, [r7, #13]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32ae      	adds	r2, #174	; 0xae
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007abc:	7b7a      	ldrb	r2, [r7, #13]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ad2:	e004      	b.n	8007ade <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fc2d 	bl	8008336 <USBD_CtlError>
              break;
 8007adc:	e000      	b.n	8007ae0 <USBD_StdEPReq+0x1c8>
              break;
 8007ade:	bf00      	nop
          }
          break;
 8007ae0:	e0ab      	b.n	8007c3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d002      	beq.n	8007af4 <USBD_StdEPReq+0x1dc>
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d032      	beq.n	8007b58 <USBD_StdEPReq+0x240>
 8007af2:	e097      	b.n	8007c24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <USBD_StdEPReq+0x1f2>
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d004      	beq.n	8007b0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fc17 	bl	8008336 <USBD_CtlError>
                break;
 8007b08:	e091      	b.n	8007c2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da0b      	bge.n	8007b2a <USBD_StdEPReq+0x212>
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	3310      	adds	r3, #16
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	4413      	add	r3, r2
 8007b26:	3304      	adds	r3, #4
 8007b28:	e00b      	b.n	8007b42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4413      	add	r3, r2
 8007b40:	3304      	adds	r3, #4
 8007b42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc61 	bl	8008418 <USBD_CtlSendData>
              break;
 8007b56:	e06a      	b.n	8007c2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da11      	bge.n	8007b84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d117      	bne.n	8007baa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fbda 	bl	8008336 <USBD_CtlError>
                  break;
 8007b82:	e054      	b.n	8007c2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbc7 	bl	8008336 <USBD_CtlError>
                  break;
 8007ba8:	e041      	b.n	8007c2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da0b      	bge.n	8007bca <USBD_StdEPReq+0x2b2>
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	e00b      	b.n	8007be2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	3304      	adds	r3, #4
 8007be2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <USBD_StdEPReq+0x2d8>
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d103      	bne.n	8007bf8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	e00e      	b.n	8007c16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 f903 	bl	8008e08 <USBD_LL_IsStallEP>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbfb 	bl	8008418 <USBD_CtlSendData>
              break;
 8007c22:	e004      	b.n	8007c2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fb85 	bl	8008336 <USBD_CtlError>
              break;
 8007c2c:	bf00      	nop
          }
          break;
 8007c2e:	e004      	b.n	8007c3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fb7f 	bl	8008336 <USBD_CtlError>
          break;
 8007c38:	bf00      	nop
      }
      break;
 8007c3a:	e005      	b.n	8007c48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb79 	bl	8008336 <USBD_CtlError>
      break;
 8007c44:	e000      	b.n	8007c48 <USBD_StdEPReq+0x330>
      break;
 8007c46:	bf00      	nop
  }

  return ret;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	885b      	ldrh	r3, [r3, #2]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b0e      	cmp	r3, #14
 8007c76:	f200 8152 	bhi.w	8007f1e <USBD_GetDescriptor+0x2ca>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <USBD_GetDescriptor+0x2c>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007cf1 	.word	0x08007cf1
 8007c84:	08007d09 	.word	0x08007d09
 8007c88:	08007d49 	.word	0x08007d49
 8007c8c:	08007f1f 	.word	0x08007f1f
 8007c90:	08007f1f 	.word	0x08007f1f
 8007c94:	08007ebf 	.word	0x08007ebf
 8007c98:	08007eeb 	.word	0x08007eeb
 8007c9c:	08007f1f 	.word	0x08007f1f
 8007ca0:	08007f1f 	.word	0x08007f1f
 8007ca4:	08007f1f 	.word	0x08007f1f
 8007ca8:	08007f1f 	.word	0x08007f1f
 8007cac:	08007f1f 	.word	0x08007f1f
 8007cb0:	08007f1f 	.word	0x08007f1f
 8007cb4:	08007f1f 	.word	0x08007f1f
 8007cb8:	08007cbd 	.word	0x08007cbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cde:	e126      	b.n	8007f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fb27 	bl	8008336 <USBD_CtlError>
        err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
      break;
 8007cee:	e11e      	b.n	8007f2e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
      break;
 8007d06:	e112      	b.n	8007f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7c1b      	ldrb	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d2a:	e100      	b.n	8007f2e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	f107 0208 	add.w	r2, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3301      	adds	r3, #1
 8007d42:	2202      	movs	r2, #2
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e0f2      	b.n	8007f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	885b      	ldrh	r3, [r3, #2]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	f200 80ac 	bhi.w	8007eac <USBD_GetDescriptor+0x258>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <USBD_GetDescriptor+0x108>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d75 	.word	0x08007d75
 8007d60:	08007da9 	.word	0x08007da9
 8007d64:	08007ddd 	.word	0x08007ddd
 8007d68:	08007e11 	.word	0x08007e11
 8007d6c:	08007e45 	.word	0x08007e45
 8007d70:	08007e79 	.word	0x08007e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e091      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 facb 	bl	8008336 <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e089      	b.n	8007ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e077      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fab1 	bl	8008336 <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e06f      	b.n	8007ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e05d      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa97 	bl	8008336 <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e055      	b.n	8007ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e043      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa7d 	bl	8008336 <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e03b      	b.n	8007ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e029      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa63 	bl	8008336 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e021      	b.n	8007ebc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e00f      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa49 	bl	8008336 <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e007      	b.n	8007ebc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa41 	bl	8008336 <USBD_CtlError>
          err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007eba:	bf00      	nop
      }
      break;
 8007ebc:	e037      	b.n	8007f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7c1b      	ldrb	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	f107 0208 	add.w	r2, r7, #8
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
 8007ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed8:	e029      	b.n	8007f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa2a 	bl	8008336 <USBD_CtlError>
        err++;
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee8:	e021      	b.n	8007f2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7c1b      	ldrb	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10d      	bne.n	8007f0e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	f107 0208 	add.w	r2, r7, #8
 8007efe:	4610      	mov	r0, r2
 8007f00:	4798      	blx	r3
 8007f02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	2207      	movs	r2, #7
 8007f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f0c:	e00f      	b.n	8007f2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa10 	bl	8008336 <USBD_CtlError>
        err++;
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f1c:	e007      	b.n	8007f2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa08 	bl	8008336 <USBD_CtlError>
      err++;
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f2c:	bf00      	nop
  }

  if (err != 0U)
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11e      	bne.n	8007f72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	88db      	ldrh	r3, [r3, #6]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f3c:	893b      	ldrh	r3, [r7, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00e      	beq.n	8007f60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	88da      	ldrh	r2, [r3, #6]
 8007f46:	893b      	ldrh	r3, [r7, #8]
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	bf28      	it	cs
 8007f4c:	4613      	movcs	r3, r2
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f52:	893b      	ldrh	r3, [r7, #8]
 8007f54:	461a      	mov	r2, r3
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa5d 	bl	8008418 <USBD_CtlSendData>
 8007f5e:	e009      	b.n	8007f74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9e7 	bl	8008336 <USBD_CtlError>
 8007f68:	e004      	b.n	8007f74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 faae 	bl	80084cc <USBD_CtlSendStatus>
 8007f70:	e000      	b.n	8007f74 <USBD_GetDescriptor+0x320>
    return;
 8007f72:	bf00      	nop
  }
}
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop

08007f7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	889b      	ldrh	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d131      	bne.n	8007ff2 <USBD_SetAddress+0x76>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d12d      	bne.n	8007ff2 <USBD_SetAddress+0x76>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f9c:	d829      	bhi.n	8007ff2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	885b      	ldrh	r3, [r3, #2]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d104      	bne.n	8007fc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f9bc 	bl	8008336 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	e01d      	b.n	8007ffc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	7bfa      	ldrb	r2, [r7, #15]
 8007fc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 ff47 	bl	8008e60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa7a 	bl	80084cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	e009      	b.n	8007ffc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	e004      	b.n	8007ffc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f99e 	bl	8008336 <USBD_CtlError>
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	885b      	ldrh	r3, [r3, #2]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	4b4e      	ldr	r3, [pc, #312]	; (8008154 <USBD_SetConfig+0x150>)
 800801a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800801c:	4b4d      	ldr	r3, [pc, #308]	; (8008154 <USBD_SetConfig+0x150>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d905      	bls.n	8008030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f985 	bl	8008336 <USBD_CtlError>
    return USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	e08c      	b.n	800814a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d002      	beq.n	8008042 <USBD_SetConfig+0x3e>
 800803c:	2b03      	cmp	r3, #3
 800803e:	d029      	beq.n	8008094 <USBD_SetConfig+0x90>
 8008040:	e075      	b.n	800812e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008042:	4b44      	ldr	r3, [pc, #272]	; (8008154 <USBD_SetConfig+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d020      	beq.n	800808c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800804a:	4b42      	ldr	r3, [pc, #264]	; (8008154 <USBD_SetConfig+0x150>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008054:	4b3f      	ldr	r3, [pc, #252]	; (8008154 <USBD_SetConfig+0x150>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe ffb7 	bl	8006fce <USBD_SetClassConfig>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f962 	bl	8008336 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800807a:	e065      	b.n	8008148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa25 	bl	80084cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800808a:	e05d      	b.n	8008148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa1d 	bl	80084cc <USBD_CtlSendStatus>
      break;
 8008092:	e059      	b.n	8008148 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008094:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <USBD_SetConfig+0x150>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d112      	bne.n	80080c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080a4:	4b2b      	ldr	r3, [pc, #172]	; (8008154 <USBD_SetConfig+0x150>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ae:	4b29      	ldr	r3, [pc, #164]	; (8008154 <USBD_SetConfig+0x150>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7fe ffa6 	bl	8007006 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa06 	bl	80084cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c0:	e042      	b.n	8008148 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080c2:	4b24      	ldr	r3, [pc, #144]	; (8008154 <USBD_SetConfig+0x150>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d02a      	beq.n	8008126 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe ff94 	bl	8007006 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080de:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <USBD_SetConfig+0x150>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080e8:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <USBD_SetConfig+0x150>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fe ff6d 	bl	8006fce <USBD_SetClassConfig>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00f      	beq.n	800811e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f918 	bl	8008336 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fe ff79 	bl	8007006 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800811c:	e014      	b.n	8008148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9d4 	bl	80084cc <USBD_CtlSendStatus>
      break;
 8008124:	e010      	b.n	8008148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9d0 	bl	80084cc <USBD_CtlSendStatus>
      break;
 800812c:	e00c      	b.n	8008148 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f900 	bl	8008336 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <USBD_SetConfig+0x150>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fe ff62 	bl	8007006 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008142:	2303      	movs	r3, #3
 8008144:	73fb      	strb	r3, [r7, #15]
      break;
 8008146:	bf00      	nop
  }

  return ret;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200003a4 	.word	0x200003a4

08008158 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	88db      	ldrh	r3, [r3, #6]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d004      	beq.n	8008174 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f8e2 	bl	8008336 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008172:	e023      	b.n	80081bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	dc02      	bgt.n	8008186 <USBD_GetConfig+0x2e>
 8008180:	2b00      	cmp	r3, #0
 8008182:	dc03      	bgt.n	800818c <USBD_GetConfig+0x34>
 8008184:	e015      	b.n	80081b2 <USBD_GetConfig+0x5a>
 8008186:	2b03      	cmp	r3, #3
 8008188:	d00b      	beq.n	80081a2 <USBD_GetConfig+0x4a>
 800818a:	e012      	b.n	80081b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3308      	adds	r3, #8
 8008196:	2201      	movs	r2, #1
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f93c 	bl	8008418 <USBD_CtlSendData>
        break;
 80081a0:	e00c      	b.n	80081bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3304      	adds	r3, #4
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f934 	bl	8008418 <USBD_CtlSendData>
        break;
 80081b0:	e004      	b.n	80081bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8be 	bl	8008336 <USBD_CtlError>
        break;
 80081ba:	bf00      	nop
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d81e      	bhi.n	800821a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d004      	beq.n	80081ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8a5 	bl	8008336 <USBD_CtlError>
        break;
 80081ec:	e01a      	b.n	8008224 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f043 0202 	orr.w	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	330c      	adds	r3, #12
 800820e:	2202      	movs	r2, #2
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f900 	bl	8008418 <USBD_CtlSendData>
      break;
 8008218:	e004      	b.n	8008224 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f88a 	bl	8008336 <USBD_CtlError>
      break;
 8008222:	bf00      	nop
  }
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d107      	bne.n	800824e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f940 	bl	80084cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800824c:	e013      	b.n	8008276 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d10b      	bne.n	800826e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	889b      	ldrh	r3, [r3, #4]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	b29b      	uxth	r3, r3
 800825e:	b2da      	uxtb	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f930 	bl	80084cc <USBD_CtlSendStatus>
}
 800826c:	e003      	b.n	8008276 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f860 	bl	8008336 <USBD_CtlError>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	b2db      	uxtb	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	2b02      	cmp	r3, #2
 8008294:	d80b      	bhi.n	80082ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10c      	bne.n	80082b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f910 	bl	80084cc <USBD_CtlSendStatus>
      }
      break;
 80082ac:	e004      	b.n	80082b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f840 	bl	8008336 <USBD_CtlError>
      break;
 80082b6:	e000      	b.n	80082ba <USBD_ClrFeature+0x3c>
      break;
 80082b8:	bf00      	nop
  }
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	781a      	ldrb	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3301      	adds	r3, #1
 80082ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fa17 	bl	8007720 <SWAPBYTE>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461a      	mov	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7ff fa0a 	bl	8007720 <SWAPBYTE>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff f9fd 	bl	8007720 <SWAPBYTE>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	80da      	strh	r2, [r3, #6]
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008340:	2180      	movs	r1, #128	; 0x80
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fcf4 	bl	8008d30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008348:	2100      	movs	r1, #0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fcf0 	bl	8008d30 <USBD_LL_StallEP>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d036      	beq.n	80083dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008372:	6938      	ldr	r0, [r7, #16]
 8008374:	f000 f836 	bl	80083e4 <USBD_GetLen>
 8008378:	4603      	mov	r3, r0
 800837a:	3301      	adds	r3, #1
 800837c:	b29b      	uxth	r3, r3
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	4413      	add	r3, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	701a      	strb	r2, [r3, #0]
  idx++;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	3301      	adds	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	2203      	movs	r2, #3
 80083a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	3301      	adds	r3, #1
 80083a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083a8:	e013      	b.n	80083d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3301      	adds	r3, #1
 80083ba:	613b      	str	r3, [r7, #16]
    idx++;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	3301      	adds	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	4413      	add	r3, r2
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	3301      	adds	r3, #1
 80083d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e7      	bne.n	80083aa <USBD_GetString+0x52>
 80083da:	e000      	b.n	80083de <USBD_GetString+0x86>
    return;
 80083dc:	bf00      	nop
  }
}
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083f4:	e005      	b.n	8008402 <USBD_GetLen+0x1e>
  {
    len++;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	3301      	adds	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3301      	adds	r3, #1
 8008400:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f5      	bne.n	80083f6 <USBD_GetLen+0x12>
  }

  return len;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2202      	movs	r2, #2
 8008428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	2100      	movs	r1, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fd44 	bl	8008ecc <USBD_LL_Transmit>

  return USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	2100      	movs	r1, #0
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fd33 	bl	8008ecc <USBD_LL_Transmit>

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2203      	movs	r2, #3
 8008480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	2100      	movs	r1, #0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fd4e 	bl	8008f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fd3d 	bl	8008f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2204      	movs	r2, #4
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fcf2 	bl	8008ecc <USBD_LL_Transmit>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2205      	movs	r2, #5
 80084fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008502:	2300      	movs	r3, #0
 8008504:	2200      	movs	r2, #0
 8008506:	2100      	movs	r1, #0
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fd17 	bl	8008f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800851c:	2200      	movs	r2, #0
 800851e:	4912      	ldr	r1, [pc, #72]	; (8008568 <MX_USB_DEVICE_Init+0x50>)
 8008520:	4812      	ldr	r0, [pc, #72]	; (800856c <MX_USB_DEVICE_Init+0x54>)
 8008522:	f7fe fcd7 	bl	8006ed4 <USBD_Init>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800852c:	f7f8 fb02 	bl	8000b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008530:	490f      	ldr	r1, [pc, #60]	; (8008570 <MX_USB_DEVICE_Init+0x58>)
 8008532:	480e      	ldr	r0, [pc, #56]	; (800856c <MX_USB_DEVICE_Init+0x54>)
 8008534:	f7fe fcfe 	bl	8006f34 <USBD_RegisterClass>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800853e:	f7f8 faf9 	bl	8000b34 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008542:	490c      	ldr	r1, [pc, #48]	; (8008574 <MX_USB_DEVICE_Init+0x5c>)
 8008544:	4809      	ldr	r0, [pc, #36]	; (800856c <MX_USB_DEVICE_Init+0x54>)
 8008546:	f7fe fcab 	bl	8006ea0 <USBD_CUSTOM_HID_RegisterInterface>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008550:	f7f8 faf0 	bl	8000b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <MX_USB_DEVICE_Init+0x54>)
 8008556:	f7fe fd23 	bl	8006fa0 <USBD_Start>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008560:	f7f8 fae8 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008564:	bf00      	nop
 8008566:	bd80      	pop	{r7, pc}
 8008568:	200000b8 	.word	0x200000b8
 800856c:	200003a8 	.word	0x200003a8
 8008570:	2000000c 	.word	0x2000000c
 8008574:	200000a8 	.word	0x200000a8

08008578 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800857c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800857e:	4618      	mov	r0, r3
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800858c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800858e:	4618      	mov	r0, r3
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	460a      	mov	r2, r1
 80085a2:	71fb      	strb	r3, [r7, #7]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80085a8:	4803      	ldr	r0, [pc, #12]	; (80085b8 <CUSTOM_HID_OutEvent_FS+0x20>)
 80085aa:	f7fe fc17 	bl	8006ddc <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80085ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200003a8 	.word	0x200003a8

080085bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2212      	movs	r2, #18
 80085cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085ce:	4b03      	ldr	r3, [pc, #12]	; (80085dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	200000d8 	.word	0x200000d8

080085e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	6039      	str	r1, [r7, #0]
 80085ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2204      	movs	r2, #4
 80085f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085f2:	4b03      	ldr	r3, [pc, #12]	; (8008600 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	200000f8 	.word	0x200000f8

08008604 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d105      	bne.n	8008622 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4907      	ldr	r1, [pc, #28]	; (8008638 <USBD_FS_ProductStrDescriptor+0x34>)
 800861a:	4808      	ldr	r0, [pc, #32]	; (800863c <USBD_FS_ProductStrDescriptor+0x38>)
 800861c:	f7ff fe9c 	bl	8008358 <USBD_GetString>
 8008620:	e004      	b.n	800862c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	4904      	ldr	r1, [pc, #16]	; (8008638 <USBD_FS_ProductStrDescriptor+0x34>)
 8008626:	4805      	ldr	r0, [pc, #20]	; (800863c <USBD_FS_ProductStrDescriptor+0x38>)
 8008628:	f7ff fe96 	bl	8008358 <USBD_GetString>
  }
  return USBD_StrDesc;
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000684 	.word	0x20000684
 800863c:	080090f4 	.word	0x080090f4

08008640 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	4904      	ldr	r1, [pc, #16]	; (8008660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008650:	4804      	ldr	r0, [pc, #16]	; (8008664 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008652:	f7ff fe81 	bl	8008358 <USBD_GetString>
  return USBD_StrDesc;
 8008656:	4b02      	ldr	r3, [pc, #8]	; (8008660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000684 	.word	0x20000684
 8008664:	08009114 	.word	0x08009114

08008668 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	221a      	movs	r2, #26
 8008678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800867a:	f000 f855 	bl	8008728 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800867e:	4b02      	ldr	r3, [pc, #8]	; (8008688 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	200000fc 	.word	0x200000fc

0800868c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a4:	f7ff fe58 	bl	8008358 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b0:	f7ff fe52 	bl	8008358 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000684 	.word	0x20000684
 80086c4:	08009128 	.word	0x08009128

080086c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d105      	bne.n	80086e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4907      	ldr	r1, [pc, #28]	; (80086fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086de:	4808      	ldr	r0, [pc, #32]	; (8008700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e0:	f7ff fe3a 	bl	8008358 <USBD_GetString>
 80086e4:	e004      	b.n	80086f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4904      	ldr	r1, [pc, #16]	; (80086fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ea:	4805      	ldr	r0, [pc, #20]	; (8008700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086ec:	f7ff fe34 	bl	8008358 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f0:	4b02      	ldr	r3, [pc, #8]	; (80086fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000684 	.word	0x20000684
 8008700:	0800913c 	.word	0x0800913c

08008704 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	220c      	movs	r2, #12
 8008714:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008716:	4b03      	ldr	r3, [pc, #12]	; (8008724 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	200000ec 	.word	0x200000ec

08008728 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <Get_SerialNum+0x44>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008734:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <Get_SerialNum+0x48>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <Get_SerialNum+0x4c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4413      	add	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800874e:	2208      	movs	r2, #8
 8008750:	4909      	ldr	r1, [pc, #36]	; (8008778 <Get_SerialNum+0x50>)
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f814 	bl	8008780 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008758:	2204      	movs	r2, #4
 800875a:	4908      	ldr	r1, [pc, #32]	; (800877c <Get_SerialNum+0x54>)
 800875c:	68b8      	ldr	r0, [r7, #8]
 800875e:	f000 f80f 	bl	8008780 <IntToUnicode>
  }
}
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	1fff7590 	.word	0x1fff7590
 8008770:	1fff7594 	.word	0x1fff7594
 8008774:	1fff7598 	.word	0x1fff7598
 8008778:	200000fe 	.word	0x200000fe
 800877c:	2000010e 	.word	0x2000010e

08008780 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
 8008796:	e027      	b.n	80087e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	0f1b      	lsrs	r3, r3, #28
 800879c:	2b09      	cmp	r3, #9
 800879e:	d80b      	bhi.n	80087b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	0f1b      	lsrs	r3, r3, #28
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	4619      	mov	r1, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	440b      	add	r3, r1
 80087b0:	3230      	adds	r2, #48	; 0x30
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e00a      	b.n	80087ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	0f1b      	lsrs	r3, r3, #28
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	4619      	mov	r1, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	440b      	add	r3, r1
 80087c8:	3237      	adds	r2, #55	; 0x37
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	3301      	adds	r3, #1
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	3301      	adds	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]
 80087e8:	7dfa      	ldrb	r2, [r7, #23]
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d3d3      	bcc.n	8008798 <IntToUnicode+0x18>
  }
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b0ac      	sub	sp, #176	; 0xb0
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	609a      	str	r2, [r3, #8]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	2288      	movs	r2, #136	; 0x88
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fc2f 	bl	8009084 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800882e:	f040 8085 	bne.w	800893c <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008836:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008838:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800883c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008840:	2301      	movs	r3, #1
 8008842:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008848:	2318      	movs	r3, #24
 800884a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800884c:	2307      	movs	r3, #7
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008850:	2302      	movs	r3, #2
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008854:	2302      	movs	r3, #2
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008858:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800885c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	4618      	mov	r0, r3
 8008864:	f7fb fab4 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800886e:	f7f8 f961 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008872:	4b34      	ldr	r3, [pc, #208]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008876:	4a33      	ldr	r2, [pc, #204]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800888a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800888e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008892:	2300      	movs	r3, #0
 8008894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008898:	2300      	movs	r3, #0
 800889a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800889e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80088a2:	4619      	mov	r1, r3
 80088a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088a8:	f7f8 feac 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80088ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088c0:	2303      	movs	r3, #3
 80088c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088c6:	230a      	movs	r3, #10
 80088c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80088d0:	4619      	mov	r1, r3
 80088d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088d6:	f7f8 fe95 	bl	8001604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088da:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <HAL_PCD_MspInit+0x144>)
 80088dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088de:	4a19      	ldr	r2, [pc, #100]	; (8008944 <HAL_PCD_MspInit+0x144>)
 80088e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088e6:	4b17      	ldr	r3, [pc, #92]	; (8008944 <HAL_PCD_MspInit+0x144>)
 80088e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088f2:	4b14      	ldr	r3, [pc, #80]	; (8008944 <HAL_PCD_MspInit+0x144>)
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d114      	bne.n	8008928 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008908:	6593      	str	r3, [r2, #88]	; 0x58
 800890a:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <HAL_PCD_MspInit+0x144>)
 800890c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008912:	60bb      	str	r3, [r7, #8]
 8008914:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008916:	f7fa fb8f 	bl	8003038 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800891a:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <HAL_PCD_MspInit+0x144>)
 800891c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891e:	4a09      	ldr	r2, [pc, #36]	; (8008944 <HAL_PCD_MspInit+0x144>)
 8008920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008924:	6593      	str	r3, [r2, #88]	; 0x58
 8008926:	e001      	b.n	800892c <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008928:	f7fa fb86 	bl	8003038 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	2043      	movs	r0, #67	; 0x43
 8008932:	f7f8 fd24 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008936:	2043      	movs	r0, #67	; 0x43
 8008938:	f7f8 fd3d 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800893c:	bf00      	nop
 800893e:	37b0      	adds	r7, #176	; 0xb0
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	40021000 	.word	0x40021000

08008948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f7fe fb6b 	bl	800703a <USBD_LL_SetupStage>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	4619      	mov	r1, r3
 8008996:	f7fe fba5 	bl	80070e4 <USBD_LL_DataOutStage>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	3348      	adds	r3, #72	; 0x48
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	4619      	mov	r1, r3
 80089ca:	f7fe fc3e 	bl	800724a <USBD_LL_DataInStage>
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fe fd78 	bl	80074da <USBD_LL_SOF>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089fa:	2301      	movs	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d001      	beq.n	8008a0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a06:	f7f8 f895 	bl	8000b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a10:	7bfa      	ldrb	r2, [r7, #15]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fe fd1c 	bl	8007452 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fcc4 	bl	80073ae <USBD_LL_Reset>
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fd0b 	bl	8007472 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <HAL_PCD_SuspendCallback+0x48>)
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	4a03      	ldr	r2, [pc, #12]	; (8008a78 <HAL_PCD_SuspendCallback+0x48>)
 8008a6a:	f043 0306 	orr.w	r3, r3, #6
 8008a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed00 	.word	0xe000ed00

08008a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a96:	f023 0301 	bic.w	r3, r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008aa4:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <HAL_PCD_ResumeCallback+0x4c>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	4a07      	ldr	r2, [pc, #28]	; (8008ac8 <HAL_PCD_ResumeCallback+0x4c>)
 8008aaa:	f023 0306 	bic.w	r3, r3, #6
 8008aae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008ab0:	f000 fae2 	bl	8009078 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fcf5 	bl	80074aa <USBD_LL_Resume>
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed00 	.word	0xe000ed00

08008acc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ade:	78fa      	ldrb	r2, [r7, #3]
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fd4b 	bl	800757e <USBD_LL_IsoOUTIncomplete>
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fd07 	bl	800751a <USBD_LL_IsoINIncomplete>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd5d 	bl	80075e2 <USBD_LL_DevConnected>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd5a 	bl	80075f8 <USBD_LL_DevDisconnected>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d13c      	bne.n	8008bd6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b5c:	4a20      	ldr	r2, [pc, #128]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a1e      	ldr	r2, [pc, #120]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b6c:	4b1c      	ldr	r3, [pc, #112]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008b74:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b76:	2206      	movs	r2, #6
 8008b78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b7a:	4b19      	ldr	r3, [pc, #100]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b82:	2202      	movs	r2, #2
 8008b84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b86:	4b16      	ldr	r3, [pc, #88]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b8c:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b92:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008b98:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <USBD_LL_Init+0x94>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b9e:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <USBD_LL_Init+0x94>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <USBD_LL_Init+0x94>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008baa:	480d      	ldr	r0, [pc, #52]	; (8008be0 <USBD_LL_Init+0x94>)
 8008bac:	f7f9 f841 	bl	8001c32 <HAL_PCD_Init>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bb6:	f7f7 ffbd 	bl	8000b34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	4808      	ldr	r0, [pc, #32]	; (8008be0 <USBD_LL_Init+0x94>)
 8008bbe:	f7fa f992 	bl	8002ee6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bc2:	2240      	movs	r2, #64	; 0x40
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4806      	ldr	r0, [pc, #24]	; (8008be0 <USBD_LL_Init+0x94>)
 8008bc8:	f7fa f946 	bl	8002e58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bcc:	2280      	movs	r2, #128	; 0x80
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4803      	ldr	r0, [pc, #12]	; (8008be0 <USBD_LL_Init+0x94>)
 8008bd2:	f7fa f941 	bl	8002e58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000884 	.word	0x20000884

08008be4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f9 f93d 	bl	8001e7a <HAL_PCD_Start>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d816      	bhi.n	8008c38 <USBD_LL_Start+0x54>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBD_LL_Start+0x2c>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c27 	.word	0x08008c27
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c33 	.word	0x08008c33
    case HAL_OK :
      usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e00b      	b.n	8008c3e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e008      	b.n	8008c3e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e005      	b.n	8008c3e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e002      	b.n	8008c3e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	bf00      	nop
  }
  return usb_status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	4603      	mov	r3, r0
 8008c58:	70fb      	strb	r3, [r7, #3]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70bb      	strb	r3, [r7, #2]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c70:	78bb      	ldrb	r3, [r7, #2]
 8008c72:	883a      	ldrh	r2, [r7, #0]
 8008c74:	78f9      	ldrb	r1, [r7, #3]
 8008c76:	f7f9 fde7 	bl	8002848 <HAL_PCD_EP_Open>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d817      	bhi.n	8008cb4 <USBD_LL_OpenEP+0x6c>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_LL_OpenEP+0x44>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ca3 	.word	0x08008ca3
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008caf 	.word	0x08008caf
    case HAL_OK :
      usb_status = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca0:	e00b      	b.n	8008cba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca6:	e008      	b.n	8008cba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cac:	e005      	b.n	8008cba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb2:	e002      	b.n	8008cba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb8:	bf00      	nop
  }
  return usb_status;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f9 fe18 	bl	8002918 <HAL_PCD_EP_Close>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d816      	bhi.n	8008d20 <USBD_LL_CloseEP+0x5c>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <USBD_LL_CloseEP+0x34>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d0f 	.word	0x08008d0f
 8008d00:	08008d15 	.word	0x08008d15
 8008d04:	08008d1b 	.word	0x08008d1b
    case HAL_OK :
      usb_status = USBD_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0c:	e00b      	b.n	8008d26 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	73fb      	strb	r3, [r7, #15]
    break;
 8008d12:	e008      	b.n	8008d26 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
    break;
 8008d18:	e005      	b.n	8008d26 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1e:	e002      	b.n	8008d26 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	bf00      	nop
  }
  return usb_status;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f9 fe8f 	bl	8002a72 <HAL_PCD_EP_SetStall>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d816      	bhi.n	8008d8c <USBD_LL_StallEP+0x5c>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <USBD_LL_StallEP+0x34>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008d7b 	.word	0x08008d7b
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d87 	.word	0x08008d87
    case HAL_OK :
      usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e00b      	b.n	8008d92 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7e:	e008      	b.n	8008d92 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	e005      	b.n	8008d92 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8a:	e002      	b.n	8008d92 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	bf00      	nop
  }
  return usb_status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7f9 febb 	bl	8002b36 <HAL_PCD_EP_ClrStall>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d816      	bhi.n	8008df8 <USBD_LL_ClearStallEP+0x5c>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBD_LL_ClearStallEP+0x34>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008de7 	.word	0x08008de7
 8008dd8:	08008ded 	.word	0x08008ded
 8008ddc:	08008df3 	.word	0x08008df3
    case HAL_OK :
      usb_status = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	e00b      	b.n	8008dfe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dea:	e008      	b.n	8008dfe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
    break;
 8008df0:	e005      	b.n	8008dfe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008df2:	2303      	movs	r3, #3
 8008df4:	73fb      	strb	r3, [r7, #15]
    break;
 8008df6:	e002      	b.n	8008dfe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfc:	bf00      	nop
  }
  return usb_status;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da0b      	bge.n	8008e3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	440b      	add	r3, r1
 8008e36:	333e      	adds	r3, #62	; 0x3e
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	e00b      	b.n	8008e54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	4613      	mov	r3, r2
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f9 fcbd 	bl	80027fe <HAL_PCD_SetAddress>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d816      	bhi.n	8008ebc <USBD_LL_SetUSBAddress+0x5c>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <USBD_LL_SetUSBAddress+0x34>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ea5 	.word	0x08008ea5
 8008e98:	08008eab 	.word	0x08008eab
 8008e9c:	08008eb1 	.word	0x08008eb1
 8008ea0:	08008eb7 	.word	0x08008eb7
    case HAL_OK :
      usb_status = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea8:	e00b      	b.n	8008ec2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	73fb      	strb	r3, [r7, #15]
    break;
 8008eae:	e008      	b.n	8008ec2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e005      	b.n	8008ec2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	e002      	b.n	8008ec2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	bf00      	nop
  }
  return usb_status;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eea:	7af9      	ldrb	r1, [r7, #11]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	f7f9 fd8e 	bl	8002a10 <HAL_PCD_EP_Transmit>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008ef8:	7dbb      	ldrb	r3, [r7, #22]
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d816      	bhi.n	8008f2c <USBD_LL_Transmit+0x60>
 8008efe:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <USBD_LL_Transmit+0x38>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f15 	.word	0x08008f15
 8008f08:	08008f1b 	.word	0x08008f1b
 8008f0c:	08008f21 	.word	0x08008f21
 8008f10:	08008f27 	.word	0x08008f27
    case HAL_OK :
      usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75fb      	strb	r3, [r7, #23]
    break;
 8008f18:	e00b      	b.n	8008f32 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	75fb      	strb	r3, [r7, #23]
    break;
 8008f1e:	e008      	b.n	8008f32 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]
    break;
 8008f24:	e005      	b.n	8008f32 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	75fb      	strb	r3, [r7, #23]
    break;
 8008f2a:	e002      	b.n	8008f32 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f30:	bf00      	nop
  }
  return usb_status;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f5a:	7af9      	ldrb	r1, [r7, #11]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	f7f9 fd24 	bl	80029ac <HAL_PCD_EP_Receive>
 8008f64:	4603      	mov	r3, r0
 8008f66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f68:	7dbb      	ldrb	r3, [r7, #22]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d816      	bhi.n	8008f9c <USBD_LL_PrepareReceive+0x60>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <USBD_LL_PrepareReceive+0x38>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f85 	.word	0x08008f85
 8008f78:	08008f8b 	.word	0x08008f8b
 8008f7c:	08008f91 	.word	0x08008f91
 8008f80:	08008f97 	.word	0x08008f97
    case HAL_OK :
      usb_status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	75fb      	strb	r3, [r7, #23]
    break;
 8008f88:	e00b      	b.n	8008fa2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	75fb      	strb	r3, [r7, #23]
    break;
 8008f8e:	e008      	b.n	8008fa2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f90:	2301      	movs	r3, #1
 8008f92:	75fb      	strb	r3, [r7, #23]
    break;
 8008f94:	e005      	b.n	8008fa2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f96:	2303      	movs	r3, #3
 8008f98:	75fb      	strb	r3, [r7, #23]
    break;
 8008f9a:	e002      	b.n	8008fa2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008fa0:	bf00      	nop
  }
  return usb_status;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_PCDEx_LPM_Callback+0x18>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d01f      	beq.n	8009002 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008fc2:	e03b      	b.n	800903c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008fcc:	f000 f854 	bl	8009078 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd0:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8008fd6:	f023 0306 	bic.w	r3, r3, #6
 8008fda:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6812      	ldr	r2, [r2, #0]
 8008fea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fa55 	bl	80074aa <USBD_LL_Resume>
    break;
 8009000:	e01c      	b.n	800903c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fa26 	bl	8007472 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <HAL_PCDEx_LPM_Callback+0x98>)
 8009034:	f043 0306 	orr.w	r3, r3, #6
 8009038:	6113      	str	r3, [r2, #16]
    break;
 800903a:	bf00      	nop
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed00 	.word	0xe000ed00

08009048 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009050:	4b03      	ldr	r3, [pc, #12]	; (8009060 <USBD_static_malloc+0x18>)
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000d90 	.word	0x20000d90

08009064 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]

}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800907c:	f7f7 fa3a 	bl	80004f4 <SystemClock_Config>
}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}

08009084 <memset>:
 8009084:	4402      	add	r2, r0
 8009086:	4603      	mov	r3, r0
 8009088:	4293      	cmp	r3, r2
 800908a:	d100      	bne.n	800908e <memset+0xa>
 800908c:	4770      	bx	lr
 800908e:	f803 1b01 	strb.w	r1, [r3], #1
 8009092:	e7f9      	b.n	8009088 <memset+0x4>

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4d0d      	ldr	r5, [pc, #52]	; (80090cc <__libc_init_array+0x38>)
 8009098:	4c0d      	ldr	r4, [pc, #52]	; (80090d0 <__libc_init_array+0x3c>)
 800909a:	1b64      	subs	r4, r4, r5
 800909c:	10a4      	asrs	r4, r4, #2
 800909e:	2600      	movs	r6, #0
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	4d0b      	ldr	r5, [pc, #44]	; (80090d4 <__libc_init_array+0x40>)
 80090a6:	4c0c      	ldr	r4, [pc, #48]	; (80090d8 <__libc_init_array+0x44>)
 80090a8:	f000 f818 	bl	80090dc <_init>
 80090ac:	1b64      	subs	r4, r4, r5
 80090ae:	10a4      	asrs	r4, r4, #2
 80090b0:	2600      	movs	r6, #0
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	080091a4 	.word	0x080091a4
 80090d0:	080091a4 	.word	0x080091a4
 80090d4:	080091a4 	.word	0x080091a4
 80090d8:	080091a8 	.word	0x080091a8

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
