
Practica2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd4  08005cd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd4  08005cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cdc  08005cdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  2000000c  08005cf0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08005cf0  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a97  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003765  00000000  00000000  00039b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f8  00000000  00000000  0003eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029697  00000000  00000000  0003fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c45a  00000000  00000000  0006949f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa643  00000000  00000000  000858f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006918  00000000  00000000  0017ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00186854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c74 	.word	0x08005c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c74 	.word	0x08005c74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	619a      	str	r2, [r3, #24]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f7ff ffdc 	bl	80004c4 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f005 fb5d 	bl	8005bcc <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f7ff ffe1 	bl	80004e0 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_reset>:

void lcd_reset(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000528:	2104      	movs	r1, #4
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <lcd_reset+0x64>)
 800052c:	f7ff ffd8 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000530:	2110      	movs	r1, #16
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f7ff ffd3 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800053a:	2108      	movs	r1, #8
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f7ff ffce 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000544:	2112      	movs	r1, #18
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <lcd_reset+0x64>)
 8000548:	f7ff ffca 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f7ff ffc4 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 8000558:	2108      	movs	r1, #8
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f7ff ffb1 	bl	80004c4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000562:	2110      	movs	r1, #16
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <lcd_reset+0x64>)
 8000566:	f7ff ffad 	bl	80004c4 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800056a:	f7ff ffc7 	bl	80004fc <lcd_clock>
    lcd_clock();
 800056e:	f7ff ffc5 	bl	80004fc <lcd_clock>
    lcd_clock();
 8000572:	f7ff ffc3 	bl	80004fc <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 8000576:	2108      	movs	r1, #8
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f7ff ffb0 	bl	80004e0 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000580:	f7ff ffbc 	bl	80004fc <lcd_clock>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	48000400 	.word	0x48000400

0800058c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 80005aa:	2108      	movs	r1, #8
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f7ff ff88 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005b4:	e004      	b.n	80005c0 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005b6:	2108      	movs	r1, #8
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f7ff ff90 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d004      	beq.n	80005d8 <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005ce:	2110      	movs	r1, #16
 80005d0:	483f      	ldr	r0, [pc, #252]	; (80006d0 <lcd_write+0x144>)
 80005d2:	f7ff ff77 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005d6:	e003      	b.n	80005e0 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005d8:	2110      	movs	r1, #16
 80005da:	483d      	ldr	r0, [pc, #244]	; (80006d0 <lcd_write+0x144>)
 80005dc:	f7ff ff80 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005ee:	2102      	movs	r1, #2
 80005f0:	4837      	ldr	r0, [pc, #220]	; (80006d0 <lcd_write+0x144>)
 80005f2:	f7ff ff67 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80005f6:	e003      	b.n	8000600 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005f8:	2102      	movs	r1, #2
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <lcd_write+0x144>)
 80005fc:	f7ff ff70 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	09db      	lsrs	r3, r3, #7
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f7ff ff56 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000618:	e004      	b.n	8000624 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800061a:	2110      	movs	r1, #16
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f7ff ff5e 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d004      	beq.n	8000634 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800062a:	2104      	movs	r1, #4
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <lcd_write+0x144>)
 800062e:	f7ff ff49 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000632:	e003      	b.n	800063c <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000634:	2104      	movs	r1, #4
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <lcd_write+0x144>)
 8000638:	f7ff ff52 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 800063c:	f7ff ff5e 	bl	80004fc <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800064a:	2108      	movs	r1, #8
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f7ff ff38 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000654:	e004      	b.n	8000660 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 8000656:	2108      	movs	r1, #8
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f7ff ff40 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d004      	beq.n	8000678 <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 800066e:	2110      	movs	r1, #16
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <lcd_write+0x144>)
 8000672:	f7ff ff27 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000676:	e003      	b.n	8000680 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 8000678:	2110      	movs	r1, #16
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <lcd_write+0x144>)
 800067c:	f7ff ff30 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 800068e:	2102      	movs	r1, #2
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <lcd_write+0x144>)
 8000692:	f7ff ff17 	bl	80004c4 <LL_GPIO_SetOutputPin>
 8000696:	e003      	b.n	80006a0 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 8000698:	2102      	movs	r1, #2
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <lcd_write+0x144>)
 800069c:	f7ff ff20 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f7ff ff06 	bl	80004c4 <LL_GPIO_SetOutputPin>
 80006b8:	e004      	b.n	80006c4 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006ba:	2110      	movs	r1, #16
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f7ff ff0e 	bl	80004e0 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006c4:	f7ff ff1a 	bl	80004fc <lcd_clock>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000400 	.word	0x48000400

080006d4 <lcd_clear>:

void lcd_clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006d8:	2100      	movs	r1, #0
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff56 	bl	800058c <lcd_write>
    _lcd_char = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <lcd_clear+0x1c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <lcd_clear+0x20>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	20000029 	.word	0x20000029

080006f8 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	b25a      	sxtb	r2, r3
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b25b      	sxtb	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <lcd_write>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1c 	bl	800058c <lcd_write>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff0b 	bl	800058c <lcd_write>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	011a      	lsls	r2, r3, #4
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	dc0a      	bgt.n	80007b6 <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feec 	bl	800058c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80007b4:	e059      	b.n	800086a <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	dd17      	ble.n	80007ec <moveToXY+0x6c>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b1f      	cmp	r3, #31
 80007c0:	dc14      	bgt.n	80007ec <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	425a      	negs	r2, r3
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	f002 020f 	and.w	r2, r2, #15
 80007ce:	bf58      	it	pl
 80007d0:	4253      	negpl	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3340      	adds	r3, #64	; 0x40
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fed1 	bl	800058c <lcd_write>
 80007ea:	e03e      	b.n	800086a <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b28      	cmp	r3, #40	; 0x28
 80007f0:	dd1b      	ble.n	800082a <moveToXY+0xaa>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b3b      	cmp	r3, #59	; 0x3b
 80007f6:	dc18      	bgt.n	800082a <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <moveToXY+0xf4>)
 80007fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000800:	1119      	asrs	r1, r3, #4
 8000802:	17d3      	asrs	r3, r2, #31
 8000804:	1ac9      	subs	r1, r1, r3
 8000806:	460b      	mov	r3, r1
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	1ad1      	subs	r1, r2, r3
 8000810:	b2cb      	uxtb	r3, r1
 8000812:	3314      	adds	r3, #20
 8000814:	b2db      	uxtb	r3, r3
 8000816:	b25b      	sxtb	r3, r3
 8000818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800081c:	b25b      	sxtb	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff feb2 	bl	800058c <lcd_write>
 8000828:	e01f      	b.n	800086a <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b13      	cmp	r3, #19
 800082e:	dd1c      	ble.n	800086a <moveToXY+0xea>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b27      	cmp	r3, #39	; 0x27
 8000834:	dc19      	bgt.n	800086a <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <moveToXY+0xf8>)
 800083a:	fb83 1302 	smull	r1, r3, r3, r2
 800083e:	4413      	add	r3, r2
 8000840:	1159      	asrs	r1, r3, #5
 8000842:	17d3      	asrs	r3, r2, #31
 8000844:	1ac9      	subs	r1, r1, r3
 8000846:	460b      	mov	r3, r1
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	1a5b      	subs	r3, r3, r1
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	1ad1      	subs	r1, r2, r3
 8000850:	b2cb      	uxtb	r3, r1
 8000852:	3354      	adds	r3, #84	; 0x54
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b25b      	sxtb	r3, r3
 8000858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800085c:	b25b      	sxtb	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe92 	bl	800058c <lcd_write>
}
 8000868:	e7ff      	b.n	800086a <moveToXY+0xea>
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	66666667 	.word	0x66666667
 8000878:	88888889 	.word	0x88888889

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <LL_SYSCFG_SetEXTISource+0x68>)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	43db      	mvns	r3, r3
 80009ac:	ea02 0103 	and.w	r1, r2, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa93 f3a3 	rbit	r3, r3
 80009bc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80009c8:	2320      	movs	r3, #32
 80009ca:	e003      	b.n	80009d4 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	fa03 f202 	lsl.w	r2, r3, r2
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <LL_SYSCFG_SetEXTISource+0x68>)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	430a      	orrs	r2, r1
 80009e4:	3302      	adds	r3, #2
 80009e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009ea:	bf00      	nop
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40010000 	.word	0x40010000

080009fc <LL_GPIO_SetPinMode>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b08b      	sub	sp, #44	; 0x2c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	613b      	str	r3, [r7, #16]
  return result;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a22:	2320      	movs	r3, #32
 8000a24:	e003      	b.n	8000a2e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	fab3 f383 	clz	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2103      	movs	r1, #3
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	401a      	ands	r2, r3
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	fa93 f3a3 	rbit	r3, r3
 8000a44:	61fb      	str	r3, [r7, #28]
  return result;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a50:	2320      	movs	r3, #32
 8000a52:	e003      	b.n	8000a5c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	601a      	str	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	372c      	adds	r7, #44	; 0x2c
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_GPIO_SetPinPull>:
{
 8000a76:	b480      	push	{r7}
 8000a78:	b08b      	sub	sp, #44	; 0x2c
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa93 f3a3 	rbit	r3, r3
 8000a90:	613b      	str	r3, [r7, #16]
  return result;
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	e003      	b.n	8000aa8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fab3 f383 	clz	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2103      	movs	r1, #3
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	61fb      	str	r3, [r7, #28]
  return result;
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000aca:	2320      	movs	r3, #32
 8000acc:	e003      	b.n	8000ad6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	fab3 f383 	clz	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	60da      	str	r2, [r3, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	372c      	adds	r7, #44	; 0x2c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_GPIO_EnablePinAnalogControl>:
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_GPIO_SetOutputPin>:
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LL_GPIO_ResetOutputPin>:
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f001 f921 	bl	8001dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f890 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 fa5a 	bl	8001040 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000b8c:	f000 f8ee 	bl	8000d6c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000b90:	f000 f924 	bl	8000ddc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000b94:	f000 f962 	bl	8000e5c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000b98:	f000 f986 	bl	8000ea8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000b9c:	f000 f9c2 	bl	8000f24 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ba0:	f000 f9f0 	bl	8000f84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ba4:	f000 fa1e 	bl	8000fe4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	lcd_reset();
 8000ba8:	f7ff fcbc 	bl	8000524 <lcd_reset>
	lcd_display_settings(1, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fda1 	bl	80006f8 <lcd_display_settings>
	LL_GPIO_SetOutputPin(Led_LCD_GPIO_Port, Led_LCD_Pin);
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f7ff ffa9 	bl	8000b12 <LL_GPIO_SetOutputPin>
	lcd_clear();
 8000bc0:	f7ff fd88 	bl	80006d4 <lcd_clear>
	//lcd_print("hola mundo");
	//lcd__print(HAL_GetDEVID()); no sirve, da error
	//writeIntegerToLCD(HAL_GetDEVID()); // esta si funciona qya que escribe
	// EScribimos en la ram de caracteres del lcd
	lcd_cgram_address(0); // empezamos en la direccion 0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fdc9 	bl	800075c <lcd_cgram_address>

	// se selecciona la dirección 0 de la CGRAM, patrón con código 0
	//Convertir a binario
	lcd_write(0b00010101, 1);//15
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2015      	movs	r0, #21
 8000bce:	f7ff fcdd 	bl	800058c <lcd_write>
	lcd_write(0b00010101,1);//15
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2015      	movs	r0, #21
 8000bd6:	f7ff fcd9 	bl	800058c <lcd_write>
	lcd_write(0b00001110,1);//e
 8000bda:	2101      	movs	r1, #1
 8000bdc:	200e      	movs	r0, #14
 8000bde:	f7ff fcd5 	bl	800058c <lcd_write>
	lcd_write(0b00000100,1);//4
 8000be2:	2101      	movs	r1, #1
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff fcd1 	bl	800058c <lcd_write>
	lcd_write(0b00000100,1);//4
 8000bea:	2101      	movs	r1, #1
 8000bec:	2004      	movs	r0, #4
 8000bee:	f7ff fccd 	bl	800058c <lcd_write>
	lcd_write(0b00001010,1);//a
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f7ff fcc9 	bl	800058c <lcd_write>
	lcd_write(0b00010001,1);//11
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	2011      	movs	r0, #17
 8000bfe:	f7ff fcc5 	bl	800058c <lcd_write>
	lcd_write(0b00000000,1);//00
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fcc1 	bl	800058c <lcd_write>
	//2 caracter
	lcd_cgram_address(8);
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f7ff fda6 	bl	800075c <lcd_cgram_address>
	lcd_write(0b00000100,1);//4
 8000c10:	2101      	movs	r1, #1
 8000c12:	2004      	movs	r0, #4
 8000c14:	f7ff fcba 	bl	800058c <lcd_write>
	lcd_write(0b00000100,1);//4
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f7ff fcb6 	bl	800058c <lcd_write>
	lcd_write(0b00001110,1);//e
 8000c20:	2101      	movs	r1, #1
 8000c22:	200e      	movs	r0, #14
 8000c24:	f7ff fcb2 	bl	800058c <lcd_write>
	lcd_write(0b00010101,1);//15
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2015      	movs	r0, #21
 8000c2c:	f7ff fcae 	bl	800058c <lcd_write>
	lcd_write(0b00010101,1);//15
 8000c30:	2101      	movs	r1, #1
 8000c32:	2015      	movs	r0, #21
 8000c34:	f7ff fcaa 	bl	800058c <lcd_write>
	lcd_write(0b00001010,1);//a
 8000c38:	2101      	movs	r1, #1
 8000c3a:	200a      	movs	r0, #10
 8000c3c:	f7ff fca6 	bl	800058c <lcd_write>
	lcd_write(0b00001010,1);//a
 8000c40:	2101      	movs	r1, #1
 8000c42:	200a      	movs	r0, #10
 8000c44:	f7ff fca2 	bl	800058c <lcd_write>
	lcd_write(0b00000000,1);//00
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fc9e 	bl	800058c <lcd_write>
	lcd_display_address(0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fd72 	bl	800073a <lcd_display_address>
  /* USER CODE BEGIN WHILE */
	// creo que las podemos meter dentro del while si las declaramos como static
	//int contador = 0; // controla si entramosen alguna de las fases de A
	//int estado_muneco = 0; // controla  que subfase de a ejecutamos
	while (1) {
		moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000c56:	2107      	movs	r1, #7
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fd91 	bl	8000780 <moveToXY>
		lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fc93 	bl	800058c <lcd_write>
		moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 7, segundo muñeco
 8000c66:	2108      	movs	r1, #8
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fd89 	bl	8000780 <moveToXY>
		lcd_write(0,1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fc8b 	bl	800058c <lcd_write>
		HAL_Delay(1000); //retraso de 1 segundo para dejar ver la figura en pantallamoveToXY(1,7);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 f919 	bl	8001eb0 <HAL_Delay>
		moveToXY(1,7);
 8000c7e:	2107      	movs	r1, #7
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fd7d 	bl	8000780 <moveToXY>
		lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000c86:	2101      	movs	r1, #1
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff fc7f 	bl	800058c <lcd_write>
		moveToXY(1,8);
 8000c8e:	2108      	movs	r1, #8
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fd75 	bl	8000780 <moveToXY>
		lcd_write(1,1);
 8000c96:	2101      	movs	r1, #1
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fc77 	bl	800058c <lcd_write>
		HAL_Delay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f001 f905 	bl	8001eb0 <HAL_Delay>
		moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000ca6:	e7d6      	b.n	8000c56 <main+0xda>

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b096      	sub	sp, #88	; 0x58
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 ffb0 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cce:	f001 ff47 	bl	8002b60 <HAL_PWREx_ControlVoltageScaling>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cd8:	f000 fcb0 	bl	800163c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cdc:	f001 ff22 	bl	8002b24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <SystemClock_Config+0xc0>)
 8000ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ce6:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <SystemClock_Config+0xc0>)
 8000ce8:	f023 0318 	bic.w	r3, r3, #24
 8000cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d10:	2328      	movs	r3, #40	; 0x28
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 f83d 	bl	8002da4 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d30:	f000 fc84 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fc05 	bl	800355c <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d58:	f000 fc70 	bl	800163c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d5c:	f003 f90c 	bl	8003f78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d60:	bf00      	nop
 8000d62:	3758      	adds	r7, #88	; 0x58
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <MX_DFSDM1_Init+0x6c>)
 8000d74:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_DFSDM1_Init+0x68>)
 8000dc2:	f001 f97f 	bl	80020c4 <HAL_DFSDM_ChannelInit>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000dcc:	f000 fc36 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000002c 	.word	0x2000002c
 8000dd8:	40016020 	.word	0x40016020

08000ddc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C2_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C2_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e18:	f001 fc0a 	bl	8002630 <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f000 fc0b 	bl	800163c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e2a:	f001 fc9c 	bl	8002766 <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 fc02 	bl	800163c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C2_Init+0x74>)
 8000e3c:	f001 fcde 	bl	80027fc <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 fbf9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000064 	.word	0x20000064
 8000e54:	40005800 	.word	0x40005800
 8000e58:	10909cec 	.word	0x10909cec

08000e5c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <MX_QUADSPI_Init+0x48>)
 8000e64:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e74:	2210      	movs	r2, #16
 8000e76:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e7a:	2217      	movs	r2, #23
 8000e7c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_QUADSPI_Init+0x44>)
 8000e8c:	f001 fece 	bl	8002c2c <HAL_QSPI_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000e96:	f000 fbd1 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000b8 	.word	0x200000b8
 8000ea4:	a0001000 	.word	0xa0001000

08000ea8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <MX_SPI3_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ec2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ec6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000f02:	2208      	movs	r2, #8
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_SPI3_Init+0x74>)
 8000f08:	f003 fa18 	bl	800433c <HAL_SPI_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 fb93 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000fc 	.word	0x200000fc
 8000f20:	40003c00 	.word	0x40003c00

08000f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_USART1_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART1_UART_Init+0x58>)
 8000f68:	f003 fa8b 	bl	8004482 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f000 fb63 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000160 	.word	0x20000160
 8000f80:	40013800 	.word	0x40013800

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_USART3_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc8:	f003 fa5b 	bl	8004482 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 fb33 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001e8 	.word	0x200001e8
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	f001 fc34 	bl	8002894 <HAL_PCD_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 fb03 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000270 	.word	0x20000270

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8001062:	2010      	movs	r0, #16
 8001064:	f7ff fd72 	bl	8000b4c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff fd6f 	bl	8000b4c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fd6c 	bl	8000b4c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff fd69 	bl	8000b4c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800107a:	2008      	movs	r0, #8
 800107c:	f7ff fd66 	bl	8000b4c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8001080:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001084:	48cd      	ldr	r0, [pc, #820]	; (80013bc <MX_GPIO_Init+0x37c>)
 8001086:	f7ff fd52 	bl	8000b2e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 800108a:	f248 111c 	movw	r1, #33052	; 0x811c
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f7ff fd4c 	bl	8000b2e <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001096:	f24f 0116 	movw	r1, #61462	; 0xf016
 800109a:	48c9      	ldr	r0, [pc, #804]	; (80013c0 <MX_GPIO_Init+0x380>)
 800109c:	f7ff fd47 	bl	8000b2e <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 80010a0:	f241 0181 	movw	r1, #4225	; 0x1081
 80010a4:	48c7      	ldr	r0, [pc, #796]	; (80013c4 <MX_GPIO_Init+0x384>)
 80010a6:	f7ff fd42 	bl	8000b2e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 80010aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80010ae:	48c6      	ldr	r0, [pc, #792]	; (80013c8 <MX_GPIO_Init+0x388>)
 80010b0:	f7ff fd3d 	bl	8000b2e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 80010b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b8:	48c2      	ldr	r0, [pc, #776]	; (80013c4 <MX_GPIO_Init+0x384>)
 80010ba:	f7ff fd2a 	bl	8000b12 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 80010be:	2120      	movs	r1, #32
 80010c0:	48bf      	ldr	r0, [pc, #764]	; (80013c0 <MX_GPIO_Init+0x380>)
 80010c2:	f7ff fd26 	bl	8000b12 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 80010c6:	2101      	movs	r1, #1
 80010c8:	48bc      	ldr	r0, [pc, #752]	; (80013bc <MX_GPIO_Init+0x37c>)
 80010ca:	f7ff fd22 	bl	8000b12 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80010ce:	f240 1315 	movw	r3, #277	; 0x115
 80010d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	48b4      	ldr	r0, [pc, #720]	; (80013bc <MX_GPIO_Init+0x37c>)
 80010ea:	f004 fa56 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010ee:	233f      	movs	r3, #63	; 0x3f
 80010f0:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	48b2      	ldr	r0, [pc, #712]	; (80013c8 <MX_GPIO_Init+0x388>)
 8001100:	f004 fa4b 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001104:	2303      	movs	r3, #3
 8001106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001118:	2308      	movs	r3, #8
 800111a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f004 fa39 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001128:	f248 131c 	movw	r3, #33052	; 0x811c
 800112c:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112e:	2301      	movs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f004 fa28 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800114a:	23e0      	movs	r3, #224	; 0xe0
 800114c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800114e:	2302      	movs	r3, #2
 8001150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800115e:	2305      	movs	r3, #5
 8001160:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f004 fa16 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 800116e:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001172:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	488d      	ldr	r0, [pc, #564]	; (80013c0 <MX_GPIO_Init+0x380>)
 800118a:	f004 fa06 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800118e:	f243 0381 	movw	r3, #12417	; 0x3081
 8001192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001194:	2301      	movs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4886      	ldr	r0, [pc, #536]	; (80013c4 <MX_GPIO_Init+0x384>)
 80011aa:	f004 f9f6 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	487f      	ldr	r0, [pc, #508]	; (80013c8 <MX_GPIO_Init+0x388>)
 80011ca:	f004 f9e6 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80011ce:	2302      	movs	r3, #2
 80011d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011d2:	2302      	movs	r3, #2
 80011d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011e2:	2305      	movs	r3, #5
 80011e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4876      	ldr	r0, [pc, #472]	; (80013c4 <MX_GPIO_Init+0x384>)
 80011ec:	f004 f9d5 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80011f0:	2378      	movs	r3, #120	; 0x78
 80011f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011f4:	2302      	movs	r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001204:	2307      	movs	r3, #7
 8001206:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	486d      	ldr	r0, [pc, #436]	; (80013c4 <MX_GPIO_Init+0x384>)
 800120e:	f004 f9c4 	bl	800559a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001216:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001218:	2302      	movs	r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001228:	2304      	movs	r3, #4
 800122a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4863      	ldr	r0, [pc, #396]	; (80013c0 <MX_GPIO_Init+0x380>)
 8001232:	f004 f9b2 	bl	800559a <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8001236:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800123a:	2004      	movs	r0, #4
 800123c:	f7ff fba8 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8001240:	4962      	ldr	r1, [pc, #392]	; (80013cc <MX_GPIO_Init+0x38c>)
 8001242:	2004      	movs	r0, #4
 8001244:	f7ff fba4 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8001248:	4961      	ldr	r1, [pc, #388]	; (80013d0 <MX_GPIO_Init+0x390>)
 800124a:	2004      	movs	r0, #4
 800124c:	f7ff fba0 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001250:	4960      	ldr	r1, [pc, #384]	; (80013d4 <MX_GPIO_Init+0x394>)
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff fb9c 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8001258:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff fb97 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8001262:	495d      	ldr	r1, [pc, #372]	; (80013d8 <MX_GPIO_Init+0x398>)
 8001264:	2003      	movs	r0, #3
 8001266:	f7ff fb93 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 800126a:	495c      	ldr	r1, [pc, #368]	; (80013dc <MX_GPIO_Init+0x39c>)
 800126c:	2003      	movs	r0, #3
 800126e:	f7ff fb8f 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8001272:	495b      	ldr	r1, [pc, #364]	; (80013e0 <MX_GPIO_Init+0x3a0>)
 8001274:	2003      	movs	r0, #3
 8001276:	f7ff fb8b 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 800127a:	495a      	ldr	r1, [pc, #360]	; (80013e4 <MX_GPIO_Init+0x3a4>)
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff fb87 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8001282:	4959      	ldr	r1, [pc, #356]	; (80013e8 <MX_GPIO_Init+0x3a8>)
 8001284:	2002      	movs	r0, #2
 8001286:	f7ff fb83 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 800128a:	4958      	ldr	r1, [pc, #352]	; (80013ec <MX_GPIO_Init+0x3ac>)
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fb7f 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8001292:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001296:	2003      	movs	r0, #3
 8001298:	f7ff fb7a 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 800129c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80012a0:	2004      	movs	r0, #4
 80012a2:	f7ff fb75 	bl	8000990 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80012a6:	2308      	movs	r3, #8
 80012a8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 ff29 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80012ca:	2320      	movs	r3, #32
 80012cc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 ff17 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80012ee:	2340      	movs	r3, #64	; 0x40
 80012f0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4618      	mov	r0, r3
 800130e:	f003 ff05 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001328:	2303      	movs	r3, #3
 800132a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fef2 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800134c:	2301      	movs	r3, #1
 800134e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fee0 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 800135c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001360:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fecd 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001386:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800138c:	2301      	movs	r3, #1
 800138e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001398:	2301      	movs	r3, #1
 800139a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 feba 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80013b8:	e01a      	b.n	80013f0 <MX_GPIO_Init+0x3b0>
 80013ba:	bf00      	nop
 80013bc:	48001000 	.word	0x48001000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	48000c00 	.word	0x48000c00
 80013c8:	48000800 	.word	0x48000800
 80013cc:	00f00001 	.word	0x00f00001
 80013d0:	0f000001 	.word	0x0f000001
 80013d4:	00f00003 	.word	0x00f00003
 80013d8:	0f000002 	.word	0x0f000002
 80013dc:	f0000002 	.word	0xf0000002
 80013e0:	0f000003 	.word	0x0f000003
 80013e4:	f0000003 	.word	0xf0000003
 80013e8:	f0000001 	.word	0xf0000001
 80013ec:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fe8b 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800140a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800141c:	2301      	movs	r3, #1
 800141e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fe78 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fe66 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fe53 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001476:	2304      	movs	r3, #4
 8001478:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fe41 	bl	800511c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fe2f 	bl	800511c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 80014be:	2200      	movs	r2, #0
 80014c0:	2108      	movs	r1, #8
 80014c2:	485a      	ldr	r0, [pc, #360]	; (800162c <MX_GPIO_Init+0x5ec>)
 80014c4:	f7ff fad7 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2120      	movs	r1, #32
 80014cc:	4857      	ldr	r0, [pc, #348]	; (800162c <MX_GPIO_Init+0x5ec>)
 80014ce:	f7ff fad2 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4855      	ldr	r0, [pc, #340]	; (800162c <MX_GPIO_Init+0x5ec>)
 80014d8:	f7ff facd 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e2:	4853      	ldr	r0, [pc, #332]	; (8001630 <MX_GPIO_Init+0x5f0>)
 80014e4:	f7ff fac7 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2101      	movs	r1, #1
 80014ec:	4851      	ldr	r0, [pc, #324]	; (8001634 <MX_GPIO_Init+0x5f4>)
 80014ee:	f7ff fac2 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f8:	484f      	ldr	r0, [pc, #316]	; (8001638 <MX_GPIO_Init+0x5f8>)
 80014fa:	f7ff fabc 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001504:	484c      	ldr	r0, [pc, #304]	; (8001638 <MX_GPIO_Init+0x5f8>)
 8001506:	f7ff fab6 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	4849      	ldr	r0, [pc, #292]	; (8001638 <MX_GPIO_Init+0x5f8>)
 8001512:	f7ff fab0 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	4846      	ldr	r0, [pc, #280]	; (8001638 <MX_GPIO_Init+0x5f8>)
 800151e:	f7ff faaa 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 8001522:	2200      	movs	r2, #0
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4842      	ldr	r0, [pc, #264]	; (8001630 <MX_GPIO_Init+0x5f0>)
 8001528:	f7ff faa5 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001532:	483f      	ldr	r0, [pc, #252]	; (8001630 <MX_GPIO_Init+0x5f0>)
 8001534:	f7ff fa9f 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	483e      	ldr	r0, [pc, #248]	; (8001638 <MX_GPIO_Init+0x5f8>)
 800153e:	f7ff fa9a 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 8001542:	2200      	movs	r2, #0
 8001544:	2102      	movs	r1, #2
 8001546:	4839      	ldr	r0, [pc, #228]	; (800162c <MX_GPIO_Init+0x5ec>)
 8001548:	f7ff fa95 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 800154c:	2200      	movs	r2, #0
 800154e:	2108      	movs	r1, #8
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <MX_GPIO_Init+0x5ec>)
 8001552:	f7ff fa53 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 8001556:	2200      	movs	r2, #0
 8001558:	2120      	movs	r1, #32
 800155a:	4834      	ldr	r0, [pc, #208]	; (800162c <MX_GPIO_Init+0x5ec>)
 800155c:	f7ff fa4e 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	; 0x40
 8001564:	4831      	ldr	r0, [pc, #196]	; (800162c <MX_GPIO_Init+0x5ec>)
 8001566:	f7ff fa49 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	482f      	ldr	r0, [pc, #188]	; (8001630 <MX_GPIO_Init+0x5f0>)
 8001572:	f7ff fa43 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 8001576:	2200      	movs	r2, #0
 8001578:	2101      	movs	r1, #1
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <MX_GPIO_Init+0x5f4>)
 800157c:	f7ff fa3e 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001586:	482c      	ldr	r0, [pc, #176]	; (8001638 <MX_GPIO_Init+0x5f8>)
 8001588:	f7ff fa38 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001592:	4829      	ldr	r0, [pc, #164]	; (8001638 <MX_GPIO_Init+0x5f8>)
 8001594:	f7ff fa32 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_GPIO_Init+0x5f8>)
 80015a0:	f7ff fa2c 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4823      	ldr	r0, [pc, #140]	; (8001638 <MX_GPIO_Init+0x5f8>)
 80015ac:	f7ff fa26 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	481e      	ldr	r0, [pc, #120]	; (8001630 <MX_GPIO_Init+0x5f0>)
 80015b6:	f7ff fa21 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_GPIO_Init+0x5f0>)
 80015c2:	f7ff fa1b 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2104      	movs	r1, #4
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <MX_GPIO_Init+0x5f8>)
 80015cc:	f7ff fa16 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2102      	movs	r1, #2
 80015d4:	4815      	ldr	r0, [pc, #84]	; (800162c <MX_GPIO_Init+0x5ec>)
 80015d6:	f7ff fa11 	bl	80009fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015da:	213f      	movs	r1, #63	; 0x3f
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_GPIO_Init+0x5f0>)
 80015de:	f7ff fa87 	bl	8000af0 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015e2:	f7ff f94b 	bl	800087c <__NVIC_GetPriorityGrouping>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f99b 	bl	8000928 <NVIC_EncodePriority>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	2017      	movs	r0, #23
 80015f8:	f7ff f96c 	bl	80008d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015fc:	2017      	movs	r0, #23
 80015fe:	f7ff f94b 	bl	8000898 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001602:	f7ff f93b 	bl	800087c <__NVIC_GetPriorityGrouping>
 8001606:	4603      	mov	r3, r0
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f98b 	bl	8000928 <NVIC_EncodePriority>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	2028      	movs	r0, #40	; 0x28
 8001618:	f7ff f95c 	bl	80008d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f7ff f93b 	bl	8000898 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	48001000 	.word	0x48001000
 8001630:	48000800 	.word	0x48000800
 8001634:	48000400 	.word	0x48000400
 8001638:	48000c00 	.word	0x48000c00

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_MspInit+0x44>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_MspInit+0x44>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x44>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_MspInit+0x44>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_MspInit+0x44>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6593      	str	r3, [r2, #88]	; 0x58
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_MspInit+0x44>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0ac      	sub	sp, #176	; 0xb0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2288      	movs	r2, #136	; 0x88
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 fab3 	bl	8005c1c <memset>
  if(DFSDM1_Init == 0)
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d142      	bne.n	8001744 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80016be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 f968 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80016da:	f7ff ffaf 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800170e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001728:	2306      	movs	r3, #6
 800172a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001732:	4619      	mov	r1, r3
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001736:	f000 fdd1 	bl	80022dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a02      	ldr	r2, [pc, #8]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001742:	6013      	str	r3, [r2, #0]
  }

}
 8001744:	bf00      	nop
 8001746:	37b0      	adds	r7, #176	; 0xb0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000077c 	.word	0x2000077c
 8001750:	40021000 	.word	0x40021000
 8001754:	48001000 	.word	0x48001000

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ac      	sub	sp, #176	; 0xb0
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2288      	movs	r2, #136	; 0x88
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fa4f 	bl	8005c1c <memset>
  if(hi2c->Instance==I2C2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <HAL_I2C_MspInit+0xb0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d13b      	bne.n	8001800 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800178c:	2300      	movs	r3, #0
 800178e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4618      	mov	r0, r3
 8001796:	f002 f905 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017a0:	f7ff ff4c 	bl	800163c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c4:	2312      	movs	r3, #18
 80017c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017d6:	2304      	movs	r3, #4
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e0:	4619      	mov	r1, r3
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <HAL_I2C_MspInit+0xb8>)
 80017e4:	f000 fd7a 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_I2C_MspInit+0xb4>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	37b0      	adds	r7, #176	; 0xb0
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40005800 	.word	0x40005800
 800180c:	40021000 	.word	0x40021000
 8001810:	48000400 	.word	0x48000400

08001814 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_QSPI_MspInit+0x7c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d128      	bne.n	8001888 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6513      	str	r3, [r2, #80]	; 0x50
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_QSPI_MspInit+0x80>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001866:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800186a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001878:	230a      	movs	r3, #10
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_QSPI_MspInit+0x84>)
 8001884:	f000 fd2a 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	a0001000 	.word	0xa0001000
 8001894:	40021000 	.word	0x40021000
 8001898:	48001000 	.word	0x48001000

0800189c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_SPI_MspInit+0x7c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d128      	bne.n	8001910 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a16      	ldr	r2, [pc, #88]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_SPI_MspInit+0x80>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001900:	2306      	movs	r3, #6
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_SPI_MspInit+0x84>)
 800190c:	f000 fce6 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40003c00 	.word	0x40003c00
 800191c:	40021000 	.word	0x40021000
 8001920:	48000800 	.word	0x48000800

08001924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0ae      	sub	sp, #184	; 0xb8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2288      	movs	r2, #136	; 0x88
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f969 	bl	8005c1c <memset>
  if(huart->Instance==USART1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_UART_MspInit+0x134>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d13b      	bne.n	80019cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001958:	2300      	movs	r3, #0
 800195a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4618      	mov	r0, r3
 8001962:	f002 f81f 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800196c:	f7ff fe66 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197a:	6613      	str	r3, [r2, #96]	; 0x60
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_UART_MspInit+0x138>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_UART_MspInit+0x138>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a33      	ldr	r2, [pc, #204]	; (8001a5c <HAL_UART_MspInit+0x138>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019b8:	2307      	movs	r3, #7
 80019ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4826      	ldr	r0, [pc, #152]	; (8001a60 <HAL_UART_MspInit+0x13c>)
 80019c6:	f000 fc89 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019ca:	e040      	b.n	8001a4e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <HAL_UART_MspInit+0x140>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d13b      	bne.n	8001a4e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019d6:	2304      	movs	r3, #4
 80019d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019da:	2300      	movs	r3, #0
 80019dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 ffde 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80019ee:	f7ff fe25 	bl	800163c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_UART_MspInit+0x138>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_UART_MspInit+0x138>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_UART_MspInit+0x138>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_UART_MspInit+0x144>)
 8001a4a:	f000 fc47 	bl	80022dc <HAL_GPIO_Init>
}
 8001a4e:	bf00      	nop
 8001a50:	37b8      	adds	r7, #184	; 0xb8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	40004800 	.word	0x40004800
 8001a68:	48000c00 	.word	0x48000c00

08001a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ac      	sub	sp, #176	; 0xb0
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2288      	movs	r2, #136	; 0x88
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 f8c5 	bl	8005c1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9a:	d17c      	bne.n	8001b96 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001aa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ac2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 ff69 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001ad8:	f7ff fdb0 	bl	800163c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f000 fbe3 	bl	80022dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b30:	230a      	movs	r3, #10
 8001b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f000 fbcc 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d114      	bne.n	8001b92 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6593      	str	r3, [r2, #88]	; 0x58
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b80:	f001 f844 	bl	8002c0c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_PCD_MspInit+0x134>)
 8001b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b90:	e001      	b.n	8001b96 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001b92:	f001 f83b 	bl	8002c0c <HAL_PWREx_EnableVddUSB>
}
 8001b96:	bf00      	nop
 8001b98:	37b0      	adds	r7, #176	; 0xb0
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4013      	ands	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d101      	bne.n	8001bf2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40010400 	.word	0x40010400

08001c04 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6153      	str	r3, [r2, #20]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010400 	.word	0x40010400

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
//		LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		estado = 0;
//	}
//	estado++;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f8fe 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001c7c:	2020      	movs	r0, #32
 8001c7e:	f7ff ffab 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001c88:	2020      	movs	r0, #32
 8001c8a:	f7ff ffbb 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001c8e:	2040      	movs	r0, #64	; 0x40
 8001c90:	f7ff ffa2 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001c9a:	2040      	movs	r0, #64	; 0x40
 8001c9c:	f7ff ffb2 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001ca0:	2080      	movs	r0, #128	; 0x80
 8001ca2:	f7ff ff99 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001cac:	2080      	movs	r0, #128	; 0x80
 8001cae:	f7ff ffa9 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb6:	f7ff ff8f 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001cc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cc4:	f7ff ff9e 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001cd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cd4:	f7ff ff80 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001cde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ce2:	f7ff ff8f 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001ce6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cea:	f7ff ff75 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001cf4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cf8:	f7ff ff84 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001cfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d00:	f7ff ff6a 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <EXTI15_10_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001d0a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d0e:	f7ff ff79 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <EXTI15_10_IRQHandler+0x80>)
 8001d18:	f7ff ff44 	bl	8001ba4 <LL_GPIO_TogglePin>

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001d1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d20:	f7ff ff5a 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <EXTI15_10_IRQHandler+0x66>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001d2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d2e:	f7ff ff69 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001d32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d36:	f7ff ff4f 	bl	8001bd8 <LL_EXTI_IsActiveFlag_0_31>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <EXTI15_10_IRQHandler+0x7c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001d40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d44:	f7ff ff5e 	bl	8001c04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	48000400 	.word	0x48000400

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f003 ff43 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da6:	f7fe fee9 	bl	8000b7c <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001db8:	08005ce4 	.word	0x08005ce4
  ldr r2, =_sbss
 8001dbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dc0:	200007a8 	.word	0x200007a8

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>

08001dc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f943 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f80e 	bl	8001df8 <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	e001      	b.n	8001dec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de8:	f7ff fc2e 	bl	8001648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x70>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f941 	bl	80020aa <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d809      	bhi.n	8001e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f919 	bl	8002072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_InitTick+0x74>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e004      	b.n	8001e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e001      	b.n	8001e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000780 	.word	0x20000780

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000780 	.word	0x20000780

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <__NVIC_SetPriorityGrouping>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_SetPriority>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff47 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff5c 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffb0 	bl	8002018 <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0ac      	b.n	8002230 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f8b2 	bl	8002244 <DFSDM_GetChannelFromInstance>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_DFSDM_ChannelInit+0x174>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e09f      	b.n	8002230 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff facd 	bl	8001690 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 80020fe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <HAL_DFSDM_ChannelInit+0x178>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d125      	bne.n	8002154 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800210e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002112:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4948      	ldr	r1, [pc, #288]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002128:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800212c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	493f      	ldr	r1, [pc, #252]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3c      	ldr	r2, [pc, #240]	; (8002240 <HAL_DFSDM_ChannelInit+0x17c>)
 800214e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002152:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002162:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002172:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002178:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 020f 	bic.w	r2, r2, #15
 8002190:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021b8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 0207 	and.w	r2, r2, #7
 80021e4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002210:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f810 	bl	8002244 <DFSDM_GetChannelFromInstance>
 8002224:	4602      	mov	r2, r0
 8002226:	4904      	ldr	r1, [pc, #16]	; (8002238 <HAL_DFSDM_ChannelInit+0x174>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000788 	.word	0x20000788
 800223c:	20000784 	.word	0x20000784
 8002240:	40016000 	.word	0x40016000

08002244 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d102      	bne.n	800225a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e02b      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <DFSDM_GetChannelFromInstance+0x80>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d102      	bne.n	8002268 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e024      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <DFSDM_GetChannelFromInstance+0x84>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002270:	2302      	movs	r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e01d      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <DFSDM_GetChannelFromInstance+0x88>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d102      	bne.n	8002284 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800227e:	2304      	movs	r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e016      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d102      	bne.n	8002292 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800228c:	2305      	movs	r3, #5
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e00f      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <DFSDM_GetChannelFromInstance+0x90>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800229a:	2306      	movs	r3, #6
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e008      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <DFSDM_GetChannelFromInstance+0x94>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d102      	bne.n	80022ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022a8:	2307      	movs	r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e001      	b.n	80022b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022ae:	2303      	movs	r3, #3
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40016000 	.word	0x40016000
 80022c4:	40016020 	.word	0x40016020
 80022c8:	40016040 	.word	0x40016040
 80022cc:	40016080 	.word	0x40016080
 80022d0:	400160a0 	.word	0x400160a0
 80022d4:	400160c0 	.word	0x400160c0
 80022d8:	400160e0 	.word	0x400160e0

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e17f      	b.n	80025ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8171 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_GPIO_Init+0x40>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0201 	and.w	r2, r3, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d118      	bne.n	80023bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d017      	beq.n	80023f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ac 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_GPIO_Init+0x330>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	4a5e      	ldr	r2, [pc, #376]	; (800260c <HAL_GPIO_Init+0x330>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6613      	str	r3, [r2, #96]	; 0x60
 800249a:	4b5c      	ldr	r3, [pc, #368]	; (800260c <HAL_GPIO_Init+0x330>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a6:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <HAL_GPIO_Init+0x334>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d0:	d025      	beq.n	800251e <HAL_GPIO_Init+0x242>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x23e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x23a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x236>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x232>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x22e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x22a>
 8002502:	2306      	movs	r3, #6
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002506:	2307      	movs	r3, #7
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251e:	2300      	movs	r3, #0
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_GPIO_Init+0x350>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_GPIO_Init+0x350>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x350>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x350>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_GPIO_Init+0x350>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x350>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x350>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x350>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae78 	bne.w	80022ec <HAL_GPIO_Init+0x10>
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e08d      	b.n	800275e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff f87e 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002680:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e006      	b.n	80026b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d108      	bne.n	80026d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e007      	b.n	80026e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d138      	bne.n	80027ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002786:	2302      	movs	r3, #2
 8002788:	e032      	b.n	80027f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2224      	movs	r2, #36	; 0x24
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	d139      	bne.n	8002886 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800281c:	2302      	movs	r3, #2
 800281e:	e033      	b.n	8002888 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	; 0x24
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800284e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002896:	b08f      	sub	sp, #60	; 0x3c
 8002898:	af0a      	add	r7, sp, #40	; 0x28
 800289a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e116      	b.n	8002ad4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff f8d3 	bl	8001a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fef2 	bl	80056ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	687e      	ldr	r6, [r7, #4]
 80028f2:	466d      	mov	r5, sp
 80028f4:	f106 0410 	add.w	r4, r6, #16
 80028f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002900:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002904:	e885 0003 	stmia.w	r5, {r0, r1}
 8002908:	1d33      	adds	r3, r6, #4
 800290a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f002 feb2 	bl	8005676 <USB_CoreInit>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0d7      	b.n	8002ad4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fee0 	bl	80056f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e04a      	b.n	80029cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	333d      	adds	r3, #61	; 0x3d
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	333c      	adds	r3, #60	; 0x3c
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	b298      	uxth	r0, r3
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3356      	adds	r3, #86	; 0x56
 8002972:	4602      	mov	r2, r0
 8002974:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3340      	adds	r3, #64	; 0x40
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3344      	adds	r3, #68	; 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3348      	adds	r3, #72	; 0x48
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	334c      	adds	r3, #76	; 0x4c
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	3301      	adds	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d3af      	bcc.n	8002936 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e044      	b.n	8002a66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	3301      	adds	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3b5      	bcc.n	80029dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	687e      	ldr	r6, [r7, #4]
 8002a78:	466d      	mov	r5, sp
 8002a7a:	f106 0410 	add.w	r4, r6, #16
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8e:	1d33      	adds	r3, r6, #4
 8002a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f002 fe78 	bl	8005788 <USB_DevInit>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e014      	b.n	8002ad4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f80a 	bl	8002adc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 f81a 	bl	8005b06 <USB_DevDisconnect>

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002adc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	f043 0303 	orr.w	r3, r3, #3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000

08002b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007000 	.word	0x40007000

08002b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	d130      	bne.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d038      	beq.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2232      	movs	r2, #50	; 0x32
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba4:	e002      	b.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d102      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f2      	bne.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d110      	bne.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d007      	beq.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be8:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000
 8002c04:	20000000 	.word	0x20000000
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1a:	6053      	str	r3, [r2, #4]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff f930 	bl	8001e98 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e063      	b.n	8002d0c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe fddb 	bl	8001814 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f858 	bl	8002d18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f850 	bl	8002d34 <QSPI_WaitFlagStateUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c98:	7afb      	ldrb	r3, [r7, #11]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d131      	bne.n	8002d02 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f023 0310 	bic.w	r3, r3, #16
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6852      	ldr	r2, [r2, #4]
 8002cb0:	0611      	lsls	r1, r2, #24
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_QSPI_Init+0xe8>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6912      	ldr	r2, [r2, #16]
 8002cce:	0411      	lsls	r1, r2, #16
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6952      	ldr	r2, [r2, #20]
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6992      	ldr	r2, [r2, #24]
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffe0f8fe 	.word	0xffe0f8fe

08002d18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d44:	e01a      	b.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d016      	beq.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7ff f8a3 	bl	8001e98 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2204      	movs	r2, #4
 8002d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00e      	b.n	8002d9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1d6      	bne.n	8002d46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e3ca      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db6:	4b97      	ldr	r3, [pc, #604]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80e4 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_RCC_OscConfig+0x4a>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	f040 808b 	bne.w	8002efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f040 8087 	bne.w	8002efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e3a2      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_RCC_OscConfig+0x7c>
 8002e16:	4b7f      	ldr	r3, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_OscConfig+0x88>
 8002e20:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d223      	bcs.n	8002e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fd55 	bl	80038e4 <RCC_SetFlashLatencyFromMSIRange>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e383      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	496d      	ldr	r1, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	4968      	ldr	r1, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e025      	b.n	8002ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e78:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4960      	ldr	r1, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e96:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	495b      	ldr	r1, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fd15 	bl	80038e4 <RCC_SetFlashLatencyFromMSIRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e343      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec4:	f000 fc4a 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b52      	ldr	r3, [pc, #328]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4950      	ldr	r1, [pc, #320]	; (8003018 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_RCC_OscConfig+0x278>)
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <HAL_RCC_OscConfig+0x27c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe ff85 	bl	8001df8 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d052      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	e327      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d032      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ffc2 	bl	8001e98 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f18:	f7fe ffbe 	bl	8001e98 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e310      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4931      	ldr	r1, [pc, #196]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	492c      	ldr	r1, [pc, #176]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e01a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a29      	ldr	r2, [pc, #164]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f76:	f7fe ff8f 	bl	8001e98 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7e:	f7fe ff8b 	bl	8001e98 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e2dd      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x1da>
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d074      	beq.n	8003096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x21a>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d064      	beq.n	8003094 <HAL_RCC_OscConfig+0x2f0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d160      	bne.n	8003094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e2ba      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x24a>
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e026      	b.n	800303c <HAL_RCC_OscConfig+0x298>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_OscConfig+0x280>
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a02      	ldr	r2, [pc, #8]	; (8003014 <HAL_RCC_OscConfig+0x270>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e014      	b.n	800303c <HAL_RCC_OscConfig+0x298>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	08005c8c 	.word	0x08005c8c
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004
 8003024:	4ba0      	ldr	r3, [pc, #640]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a9f      	ldr	r2, [pc, #636]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b9d      	ldr	r3, [pc, #628]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a9c      	ldr	r2, [pc, #624]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe ff28 	bl	8001e98 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe ff24 	bl	8001e98 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e276      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4b92      	ldr	r3, [pc, #584]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2a8>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff14 	bl	8001e98 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe ff10 	bl	8001e98 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e262      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d0>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d060      	beq.n	8003164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x310>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d116      	bne.n	80030e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	4b7c      	ldr	r3, [pc, #496]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x328>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e23f      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	4973      	ldr	r1, [pc, #460]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	e040      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d023      	beq.n	8003132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ea:	4b6f      	ldr	r3, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fecf 	bl	8001e98 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fecb 	bl	8001e98 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e21d      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b62      	ldr	r3, [pc, #392]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	495f      	ldr	r1, [pc, #380]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e018      	b.n	8003164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5c      	ldr	r2, [pc, #368]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe feab 	bl	8001e98 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe fea7 	bl	8001e98 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1f9      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03c      	beq.n	80031ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fe86 	bl	8001e98 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe fe82 	bl	8001e98 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1d4      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCC_OscConfig+0x3ec>
 80031b0:	e01b      	b.n	80031ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe fe69 	bl	8001e98 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe fe65 	bl	8001e98 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1b7      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ef      	bne.n	80031ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80a6 	beq.w	8003344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d118      	bne.n	8003262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003230:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7fe fe2c 	bl	8001e98 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fe28 	bl	8001e98 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e17a      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x508>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_RCC_OscConfig+0x4d8>
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327a:	e029      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d115      	bne.n	80032b0 <HAL_RCC_OscConfig+0x50c>
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_RCC_OscConfig+0x504>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x52c>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	4b9c      	ldr	r3, [pc, #624]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a9b      	ldr	r2, [pc, #620]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c0:	4b98      	ldr	r3, [pc, #608]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a97      	ldr	r2, [pc, #604]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fdde 	bl	8001e98 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fe fdda 	bl	8001e98 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e12a      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ed      	beq.n	80032e0 <HAL_RCC_OscConfig+0x53c>
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fe fdc7 	bl	8001e98 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe fdc3 	bl	8001e98 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e113      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003324:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ed      	bne.n	800330e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	4a79      	ldr	r2, [pc, #484]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80fe 	beq.w	800354a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	2b02      	cmp	r3, #2
 8003354:	f040 80d0 	bne.w	80034f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003358:	4b72      	ldr	r3, [pc, #456]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	429a      	cmp	r2, r3
 800336a:	d130      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d127      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d11f      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003398:	2a07      	cmp	r2, #7
 800339a:	bf14      	ite	ne
 800339c:	2201      	movne	r2, #1
 800339e:	2200      	moveq	r2, #0
 80033a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d109      	bne.n	80033ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d06e      	beq.n	80034ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d069      	beq.n	80034a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0ad      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fe fd4c 	bl	8001e98 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fd48 	bl	8001e98 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e09a      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b40      	ldr	r3, [pc, #256]	; (8003528 <HAL_RCC_OscConfig+0x784>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003432:	3a01      	subs	r2, #1
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0652      	lsls	r2, r2, #25
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	0912      	lsrs	r2, r2, #4
 800345e:	0452      	lsls	r2, r2, #17
 8003460:	430a      	orrs	r2, r1
 8003462:	4930      	ldr	r1, [pc, #192]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003480:	f7fe fd0a 	bl	8001e98 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe fd06 	bl	8001e98 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e058      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a6:	e050      	b.n	800354a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e04f      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d148      	bne.n	800354a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a19      	ldr	r2, [pc, #100]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d0:	f7fe fce2 	bl	8001e98 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fcde 	bl	8001e98 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e030      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x734>
 80034f6:	e028      	b.n	800354a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d023      	beq.n	8003546 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <HAL_RCC_OscConfig+0x780>)
 8003504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fcc5 	bl	8001e98 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003510:	e00c      	b.n	800352c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fcc1 	bl	8001e98 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d905      	bls.n	800352c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e013      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
 8003524:	40021000 	.word	0x40021000
 8003528:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x7b0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ec      	bne.n	8003512 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x7b0>)
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	4905      	ldr	r1, [pc, #20]	; (8003554 <HAL_RCC_OscConfig+0x7b0>)
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_OscConfig+0x7b4>)
 8003540:	4013      	ands	r3, r2
 8003542:	60cb      	str	r3, [r1, #12]
 8003544:	e001      	b.n	800354a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	feeefffc 	.word	0xfeeefffc

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0e7      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b72      	ldr	r3, [pc, #456]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4970      	ldr	r1, [pc, #448]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cf      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d908      	bls.n	80035ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4960      	ldr	r1, [pc, #384]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04c      	beq.n	8003674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b5a      	ldr	r3, [pc, #360]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d121      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0a6      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d115      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e09a      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08e      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e086      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4943      	ldr	r1, [pc, #268]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fe fc28 	bl	8001e98 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe fc24 	bl	8001e98 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e06e      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	429a      	cmp	r2, r3
 800368e:	d208      	bcs.n	80036a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	492b      	ldr	r1, [pc, #172]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d210      	bcs.n	80036d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	4923      	ldr	r1, [pc, #140]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e036      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4918      	ldr	r1, [pc, #96]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4910      	ldr	r1, [pc, #64]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003710:	f000 f824 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1f4>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1f8>)
 800372e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1fc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fb5f 	bl	8001df8 <HAL_InitTick>
 800373a:	4603      	mov	r3, r0
 800373c:	72fb      	strb	r3, [r7, #11]

  return status;
 800373e:	7afb      	ldrb	r3, [r7, #11]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40022000 	.word	0x40022000
 800374c:	40021000 	.word	0x40021000
 8003750:	08005c8c 	.word	0x08005c8c
 8003754:	20000000 	.word	0x20000000
 8003758:	20000004 	.word	0x20000004

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376a:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d121      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d11e      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e005      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10d      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d102      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_GetSysClockFreq+0x110>)
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e004      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_RCC_GetSysClockFreq+0x114>)
 80037e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d134      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0xa6>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d003      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0xac>
 8003800:	e005      	b.n	800380e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCC_GetSysClockFreq+0x110>)
 8003804:	617b      	str	r3, [r7, #20]
      break;
 8003806:	e005      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_GetSysClockFreq+0x114>)
 800380a:	617b      	str	r3, [r7, #20]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	617b      	str	r3, [r7, #20]
      break;
 8003812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	3301      	adds	r3, #1
 8003820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	fb03 f202 	mul.w	r2, r3, r2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0e5b      	lsrs	r3, r3, #25
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	3301      	adds	r3, #1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003854:	69bb      	ldr	r3, [r7, #24]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	08005ca4 	.word	0x08005ca4
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	08005c9c 	.word	0x08005c9c

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038bc:	f7ff ffda 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0adb      	lsrs	r3, r3, #11
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08005c9c 	.word	0x08005c9c

080038e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038fc:	f7ff f922 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 8003900:	6178      	str	r0, [r7, #20]
 8003902:	e014      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a24      	ldr	r2, [pc, #144]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800391c:	f7ff f912 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 8003920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d10b      	bne.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d919      	bls.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2ba0      	cmp	r3, #160	; 0xa0
 8003940:	d902      	bls.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003942:	2302      	movs	r3, #2
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e013      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003948:	2301      	movs	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e010      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d902      	bls.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003954:	2303      	movs	r3, #3
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e00a      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d102      	bne.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003960:	2302      	movs	r3, #2
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e004      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d101      	bne.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800396c:	2301      	movs	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 0207 	bic.w	r2, r3, #7
 8003978:	4909      	ldr	r1, [pc, #36]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	429a      	cmp	r2, r3
 800398c:	d001      	beq.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b0:	2300      	movs	r3, #0
 80039b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d041      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039c8:	d02a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ce:	d824      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039da:	d81e      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d010      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039e6:	e018      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039e8:	4b86      	ldr	r3, [pc, #536]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a85      	ldr	r2, [pc, #532]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f4:	e015      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 facb 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a06:	e00c      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3320      	adds	r3, #32
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fbb6 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a18:	e003      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a28:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	4973      	ldr	r1, [pc, #460]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a3e:	e001      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d041      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a58:	d02a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5e:	d824      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a6a:	d81e      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d010      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	e018      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a78:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a61      	ldr	r2, [pc, #388]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a84:	e015      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fa83 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a96:	e00c      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fb6e 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	74fb      	strb	r3, [r7, #19]
      break;
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac6:	494f      	ldr	r1, [pc, #316]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ace:	e001      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a0 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	4a40      	ldr	r2, [pc, #256]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	; 0x58
 8003b08:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b24:	f7fe f9b8 	bl	8001e98 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b2a:	e009      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fe f9b4 	bl	8001e98 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3e:	e005      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b40:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d15c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b52:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d019      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe f973 	bl	8001e98 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb4:	e00b      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe f96f 	bl	8001e98 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d902      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	74fb      	strb	r3, [r7, #19]
            break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ec      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bfa:	e009      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	74bb      	strb	r3, [r7, #18]
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c10:	7c7b      	ldrb	r3, [r7, #17]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b9e      	ldr	r3, [pc, #632]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	4a9d      	ldr	r2, [pc, #628]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2e:	4b98      	ldr	r3, [pc, #608]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 0203 	bic.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4994      	ldr	r1, [pc, #592]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c50:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 020c 	bic.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	498c      	ldr	r1, [pc, #560]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c72:	4b87      	ldr	r3, [pc, #540]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4983      	ldr	r1, [pc, #524]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c94:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	497b      	ldr	r1, [pc, #492]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	4972      	ldr	r1, [pc, #456]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd8:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	496a      	ldr	r1, [pc, #424]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	4961      	ldr	r1, [pc, #388]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d1c:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	4959      	ldr	r1, [pc, #356]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	4950      	ldr	r1, [pc, #320]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	4948      	ldr	r1, [pc, #288]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	493f      	ldr	r1, [pc, #252]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d028      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc4:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dce:	60d3      	str	r3, [r2, #12]
 8003dd0:	e011      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f8d8 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d028      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	491f      	ldr	r1, [pc, #124]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e20:	d106      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e2c:	60d3      	str	r3, [r2, #12]
 8003e2e:	e011      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 f8a9 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02b      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a02      	ldr	r2, [pc, #8]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f877 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	4928      	ldr	r1, [pc, #160]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f854 	bl	8003f98 <RCCEx_PLLSAI1_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d014      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	74bb      	strb	r3, [r7, #18]
 8003efe:	e011      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3320      	adds	r3, #32
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f935 	bl	8004180 <RCCEx_PLLSAI2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3e:	490d      	ldr	r1, [pc, #52]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000

08003f98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fa6:	4b75      	ldr	r3, [pc, #468]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fb2:	4b72      	ldr	r3, [pc, #456]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0203 	and.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d10d      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fca:	4b6c      	ldr	r3, [pc, #432]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d047      	beq.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	e044      	b.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d018      	beq.n	800401e <RCCEx_PLLSAI1_Config+0x86>
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d825      	bhi.n	800403c <RCCEx_PLLSAI1_Config+0xa4>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x62>
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d009      	beq.n	800400c <RCCEx_PLLSAI1_Config+0x74>
 8003ff8:	e020      	b.n	800403c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ffa:	4b60      	ldr	r3, [pc, #384]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11d      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400a:	e01a      	b.n	8004042 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d116      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401c:	e013      	b.n	8004046 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800401e:	4b57      	ldr	r3, [pc, #348]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800403a:	e006      	b.n	800404a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      break;
 8004040:	e004      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404a:	bf00      	nop
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004052:	4b4a      	ldr	r3, [pc, #296]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	430b      	orrs	r3, r1
 8004068:	4944      	ldr	r1, [pc, #272]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d17d      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004074:	4b41      	ldr	r3, [pc, #260]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a40      	ldr	r2, [pc, #256]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd ff0a 	bl	8001e98 <HAL_GetTick>
 8004084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004086:	e009      	b.n	800409c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004088:	f7fd ff06 	bl	8001e98 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	73fb      	strb	r3, [r7, #15]
        break;
 800409a:	e005      	b.n	80040a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800409c:	4b37      	ldr	r3, [pc, #220]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ef      	bne.n	8004088 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d160      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b4:	4b31      	ldr	r3, [pc, #196]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6892      	ldr	r2, [r2, #8]
 80040c4:	0211      	lsls	r1, r2, #8
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	0912      	lsrs	r2, r2, #4
 80040cc:	0452      	lsls	r2, r2, #17
 80040ce:	430a      	orrs	r2, r1
 80040d0:	492a      	ldr	r1, [pc, #168]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	610b      	str	r3, [r1, #16]
 80040d6:	e027      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d112      	bne.n	8004104 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6892      	ldr	r2, [r2, #8]
 80040ee:	0211      	lsls	r1, r2, #8
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6912      	ldr	r2, [r2, #16]
 80040f4:	0852      	lsrs	r2, r2, #1
 80040f6:	3a01      	subs	r2, #1
 80040f8:	0552      	lsls	r2, r2, #21
 80040fa:	430a      	orrs	r2, r1
 80040fc:	491f      	ldr	r1, [pc, #124]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
 8004102:	e011      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800410c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	0211      	lsls	r1, r2, #8
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6952      	ldr	r2, [r2, #20]
 800411a:	0852      	lsrs	r2, r2, #1
 800411c:	3a01      	subs	r2, #1
 800411e:	0652      	lsls	r2, r2, #25
 8004120:	430a      	orrs	r2, r1
 8004122:	4916      	ldr	r1, [pc, #88]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004132:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd feb0 	bl	8001e98 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413a:	e009      	b.n	8004150 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413c:	f7fd feac 	bl	8001e98 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d902      	bls.n	8004150 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	73fb      	strb	r3, [r7, #15]
          break;
 800414e:	e005      	b.n	800415c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	4904      	ldr	r1, [pc, #16]	; (800417c <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000

08004180 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800418e:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800419a:	4b67      	ldr	r3, [pc, #412]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10d      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
       ||
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041b2:	4b61      	ldr	r3, [pc, #388]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
       ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d047      	beq.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e044      	b.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d018      	beq.n	8004206 <RCCEx_PLLSAI2_Config+0x86>
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d825      	bhi.n	8004224 <RCCEx_PLLSAI2_Config+0xa4>
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d002      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0x62>
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d009      	beq.n	80041f4 <RCCEx_PLLSAI2_Config+0x74>
 80041e0:	e020      	b.n	8004224 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e2:	4b55      	ldr	r3, [pc, #340]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11d      	bne.n	800422a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f2:	e01a      	b.n	800422a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f4:	4b50      	ldr	r3, [pc, #320]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d116      	bne.n	800422e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e013      	b.n	800422e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004222:	e006      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e004      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004232:	bf00      	nop
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	430b      	orrs	r3, r1
 8004250:	4939      	ldr	r1, [pc, #228]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d167      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a35      	ldr	r2, [pc, #212]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fd fe16 	bl	8001e98 <HAL_GetTick>
 800426c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426e:	e009      	b.n	8004284 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004270:	f7fd fe12 	bl	8001e98 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d902      	bls.n	8004284 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	73fb      	strb	r3, [r7, #15]
        break;
 8004282:	e005      	b.n	8004290 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004284:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ef      	bne.n	8004270 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d14a      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d111      	bne.n	80042c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429c:	4b26      	ldr	r3, [pc, #152]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	0912      	lsrs	r2, r2, #4
 80042b4:	0452      	lsls	r2, r2, #17
 80042b6:	430a      	orrs	r2, r1
 80042b8:	491f      	ldr	r1, [pc, #124]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	614b      	str	r3, [r1, #20]
 80042be:	e011      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	0211      	lsls	r1, r2, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6912      	ldr	r2, [r2, #16]
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	430a      	orrs	r2, r1
 80042de:	4916      	ldr	r1, [pc, #88]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd fdd2 	bl	8001e98 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f6:	e009      	b.n	800430c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f8:	f7fd fdce 	bl	8001e98 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	73fb      	strb	r3, [r7, #15]
          break;
 800430a:	e005      	b.n	8004318 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ef      	beq.n	80042f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4904      	ldr	r1, [pc, #16]	; (8004338 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e095      	b.n	800447a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fa84 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b4:	d902      	bls.n	80043bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043ca:	d007      	beq.n	80043dc <HAL_SPI_Init+0xa0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	ea42 0103 	orr.w	r1, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0204 	and.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e040      	b.n	8004516 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fd fa3d 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2224      	movs	r2, #36	; 0x24
 80044ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fae1 	bl	8004a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f826 	bl	8004520 <UART_SetConfig>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e01b      	b.n	8004516 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fb60 	bl	8004bd4 <UART_CheckIdleState>
 8004514:	4603      	mov	r3, r0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b08a      	sub	sp, #40	; 0x28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4313      	orrs	r3, r2
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4ba4      	ldr	r3, [pc, #656]	; (80047e0 <UART_SetConfig+0x2c0>)
 8004550:	4013      	ands	r3, r2
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004558:	430b      	orrs	r3, r1
 800455a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a99      	ldr	r2, [pc, #612]	; (80047e4 <UART_SetConfig+0x2c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	4313      	orrs	r3, r2
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a90      	ldr	r2, [pc, #576]	; (80047e8 <UART_SetConfig+0x2c8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d126      	bne.n	80045f8 <UART_SetConfig+0xd8>
 80045aa:	4b90      	ldr	r3, [pc, #576]	; (80047ec <UART_SetConfig+0x2cc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0xd0>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0xa0>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e116      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e112      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e10e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e10a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e106      	b.n	8004806 <UART_SetConfig+0x2e6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7c      	ldr	r2, [pc, #496]	; (80047f0 <UART_SetConfig+0x2d0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d138      	bne.n	8004674 <UART_SetConfig+0x154>
 8004602:	4b7a      	ldr	r3, [pc, #488]	; (80047ec <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d82d      	bhi.n	800466c <UART_SetConfig+0x14c>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0xf8>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800465d 	.word	0x0800465d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800466d 	.word	0x0800466d
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004665 	.word	0x08004665
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e0d8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e0d4      	b.n	8004806 <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e0d0      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e0cc      	b.n	8004806 <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e0c8      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <UART_SetConfig+0x2d4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d125      	bne.n	80046ca <UART_SetConfig+0x1aa>
 800467e:	4b5b      	ldr	r3, [pc, #364]	; (80047ec <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d016      	beq.n	80046ba <UART_SetConfig+0x19a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d818      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d00a      	beq.n	80046aa <UART_SetConfig+0x18a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d814      	bhi.n	80046c2 <UART_SetConfig+0x1a2>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <UART_SetConfig+0x182>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d008      	beq.n	80046b2 <UART_SetConfig+0x192>
 80046a0:	e00f      	b.n	80046c2 <UART_SetConfig+0x1a2>
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a8:	e0ad      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046aa:	2302      	movs	r3, #2
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b0:	e0a9      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046b2:	2304      	movs	r3, #4
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b8:	e0a5      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ba:	2308      	movs	r3, #8
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c0:	e0a1      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046c2:	2310      	movs	r3, #16
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c8:	e09d      	b.n	8004806 <UART_SetConfig+0x2e6>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4a      	ldr	r2, [pc, #296]	; (80047f8 <UART_SetConfig+0x2d8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d125      	bne.n	8004720 <UART_SetConfig+0x200>
 80046d4:	4b45      	ldr	r3, [pc, #276]	; (80047ec <UART_SetConfig+0x2cc>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046de:	2bc0      	cmp	r3, #192	; 0xc0
 80046e0:	d016      	beq.n	8004710 <UART_SetConfig+0x1f0>
 80046e2:	2bc0      	cmp	r3, #192	; 0xc0
 80046e4:	d818      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046e6:	2b80      	cmp	r3, #128	; 0x80
 80046e8:	d00a      	beq.n	8004700 <UART_SetConfig+0x1e0>
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d814      	bhi.n	8004718 <UART_SetConfig+0x1f8>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <UART_SetConfig+0x1d8>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d008      	beq.n	8004708 <UART_SetConfig+0x1e8>
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x1f8>
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e082      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e07e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e07a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e076      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e072      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a35      	ldr	r2, [pc, #212]	; (80047fc <UART_SetConfig+0x2dc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12a      	bne.n	8004780 <UART_SetConfig+0x260>
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x250>
 800473a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x258>
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x240>
 8004746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x258>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x238>
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x248>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x258>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e052      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e04e      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e04a      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e046      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e042      	b.n	8004806 <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <UART_SetConfig+0x2c4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d13a      	bne.n	8004800 <UART_SetConfig+0x2e0>
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004798:	d01a      	beq.n	80047d0 <UART_SetConfig+0x2b0>
 800479a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	d00c      	beq.n	80047c0 <UART_SetConfig+0x2a0>
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d815      	bhi.n	80047d8 <UART_SetConfig+0x2b8>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x298>
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d008      	beq.n	80047c8 <UART_SetConfig+0x2a8>
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x2b8>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e022      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e01e      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e01a      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e016      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e012      	b.n	8004806 <UART_SetConfig+0x2e6>
 80047e0:	efff69f3 	.word	0xefff69f3
 80047e4:	40008000 	.word	0x40008000
 80047e8:	40013800 	.word	0x40013800
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40004400 	.word	0x40004400
 80047f4:	40004800 	.word	0x40004800
 80047f8:	40004c00 	.word	0x40004c00
 80047fc:	40005000 	.word	0x40005000
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a9f      	ldr	r2, [pc, #636]	; (8004a88 <UART_SetConfig+0x568>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d17a      	bne.n	8004906 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d824      	bhi.n	8004862 <UART_SetConfig+0x342>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x300>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	08004863 	.word	0x08004863
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004863 	.word	0x08004863
 8004830:	08004853 	.word	0x08004853
 8004834:	08004863 	.word	0x08004863
 8004838:	08004863 	.word	0x08004863
 800483c:	08004863 	.word	0x08004863
 8004840:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7ff f822 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e010      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <UART_SetConfig+0x56c>)
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e00d      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe ff83 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8004856:	61f8      	str	r0, [r7, #28]
        break;
 8004858:	e009      	b.n	800486e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e005      	b.n	800486e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800486c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80fb 	beq.w	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d305      	bcc.n	8004892 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d903      	bls.n	800489a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004898:	e0e8      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2200      	movs	r2, #0
 800489e:	461c      	mov	r4, r3
 80048a0:	4615      	mov	r5, r2
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	022b      	lsls	r3, r5, #8
 80048ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048b0:	0222      	lsls	r2, r4, #8
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	6849      	ldr	r1, [r1, #4]
 80048b6:	0849      	lsrs	r1, r1, #1
 80048b8:	2000      	movs	r0, #0
 80048ba:	4688      	mov	r8, r1
 80048bc:	4681      	mov	r9, r0
 80048be:	eb12 0a08 	adds.w	sl, r2, r8
 80048c2:	eb43 0b09 	adc.w	fp, r3, r9
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fc76 	bl	80001c8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ea:	d308      	bcc.n	80048fe <UART_SetConfig+0x3de>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f2:	d204      	bcs.n	80048fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e0b6      	b.n	8004a6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004904:	e0b2      	b.n	8004a6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d15e      	bne.n	80049ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x44a>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0x400>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe ffa2 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e014      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe ffb4 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8004950:	61f8      	str	r0, [r7, #28]
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b4d      	ldr	r3, [pc, #308]	; (8004a8c <UART_SetConfig+0x56c>)
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe feff 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800495e:	61f8      	str	r0, [r7, #28]
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d077      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d916      	bls.n	80049c6 <UART_SetConfig+0x4a6>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d212      	bcs.n	80049c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f023 030f 	bic.w	r3, r3, #15
 80049a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	8afa      	ldrh	r2, [r7, #22]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e052      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049cc:	e04e      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d827      	bhi.n	8004a26 <UART_SetConfig+0x506>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x4bc>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe ff44 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e014      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7fe ff56 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61f8      	str	r0, [r7, #28]
        break;
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <UART_SetConfig+0x56c>)
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e00d      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7fe fea1 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8004a1a:	61f8      	str	r0, [r7, #28]
        break;
 8004a1c:	e009      	b.n	8004a32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e005      	b.n	8004a32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a30:	bf00      	nop
    }

    if (pclk != 0U)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085a      	lsrs	r2, r3, #1
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d909      	bls.n	8004a66 <UART_SetConfig+0x546>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d205      	bcs.n	8004a66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	00f42400 	.word	0x00f42400

08004a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d10a      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b098      	sub	sp, #96	; 0x60
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fd f958 	bl	8001e98 <HAL_GetTick>
 8004be8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d12e      	bne.n	8004c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f88c 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d021      	beq.n	8004c56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c26:	653b      	str	r3, [r7, #80]	; 0x50
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c30:	647b      	str	r3, [r7, #68]	; 0x44
 8004c32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e062      	b.n	8004d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d149      	bne.n	8004cf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f856 	bl	8004d24 <UART_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03c      	beq.n	8004cf8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e011      	b.n	8004d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3758      	adds	r7, #88	; 0x58
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d34:	e049      	b.n	8004dca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d045      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fd f8ab 	bl	8001e98 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e048      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d031      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d110      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f838 	bl	8004df2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2208      	movs	r2, #8
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e029      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da4:	d111      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f81e 	bl	8004df2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e00f      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d0a6      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b095      	sub	sp, #84	; 0x54
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e18:	643b      	str	r3, [r7, #64]	; 0x40
 8004e1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d118      	bne.n	8004e9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 0310 	bic.w	r3, r3, #16
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6979      	ldr	r1, [r7, #20]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	613b      	str	r3, [r7, #16]
   return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e6      	bne.n	8004e68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004eae:	bf00      	nop
 8004eb0:	3754      	adds	r7, #84	; 0x54
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <LL_EXTI_EnableIT_0_31>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <LL_EXTI_EnableIT_0_31+0x20>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4904      	ldr	r1, [pc, #16]	; (8004edc <LL_EXTI_EnableIT_0_31+0x20>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40010400 	.word	0x40010400

08004ee0 <LL_EXTI_EnableIT_32_63>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <LL_EXTI_EnableIT_32_63+0x20>)
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <LL_EXTI_EnableIT_32_63+0x20>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	620b      	str	r3, [r1, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40010400 	.word	0x40010400

08004f04 <LL_EXTI_DisableIT_0_31>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	4904      	ldr	r1, [pc, #16]	; (8004f28 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010400 	.word	0x40010400

08004f2c <LL_EXTI_DisableIT_32_63>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <LL_EXTI_DisableIT_32_63+0x24>)
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	4904      	ldr	r1, [pc, #16]	; (8004f50 <LL_EXTI_DisableIT_32_63+0x24>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	620b      	str	r3, [r1, #32]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010400 	.word	0x40010400

08004f54 <LL_EXTI_EnableEvent_0_31>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4904      	ldr	r1, [pc, #16]	; (8004f74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40010400 	.word	0x40010400

08004f78 <LL_EXTI_EnableEvent_32_63>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f84:	4904      	ldr	r1, [pc, #16]	; (8004f98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40010400 	.word	0x40010400

08004f9c <LL_EXTI_DisableEvent_0_31>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010400 	.word	0x40010400

08004fc4 <LL_EXTI_DisableEvent_32_63>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	4904      	ldr	r1, [pc, #16]	; (8004fe8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010400 	.word	0x40010400

08004fec <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4904      	ldr	r1, [pc, #16]	; (800500c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40010400 	.word	0x40010400

08005010 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800501a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501c:	4904      	ldr	r1, [pc, #16]	; (8005030 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4313      	orrs	r3, r2
 8005022:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010400 	.word	0x40010400

08005034 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	43db      	mvns	r3, r3
 8005044:	4904      	ldr	r1, [pc, #16]	; (8005058 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005046:	4013      	ands	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010400 	.word	0x40010400

0800505c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	43db      	mvns	r3, r3
 800506c:	4904      	ldr	r1, [pc, #16]	; (8005080 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800506e:	4013      	ands	r3, r2
 8005070:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010400 	.word	0x40010400

08005084 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4904      	ldr	r1, [pc, #16]	; (80050a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4313      	orrs	r3, r2
 8005096:	60cb      	str	r3, [r1, #12]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40010400 	.word	0x40010400

080050a8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	4904      	ldr	r1, [pc, #16]	; (80050c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010400 	.word	0x40010400

080050cc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	43db      	mvns	r3, r3
 80050dc:	4904      	ldr	r1, [pc, #16]	; (80050f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80050de:	4013      	ands	r3, r2
 80050e0:	60cb      	str	r3, [r1, #12]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010400 	.word	0x40010400

080050f4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	43db      	mvns	r3, r3
 8005104:	4904      	ldr	r1, [pc, #16]	; (8005118 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005106:	4013      	ands	r3, r2
 8005108:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010400 	.word	0x40010400

0800511c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7a1b      	ldrb	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80d0 	beq.w	80052d2 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d063      	beq.n	8005202 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7a5b      	ldrb	r3, [r3, #9]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d01c      	beq.n	800517c <LL_EXTI_Init+0x60>
 8005142:	2b02      	cmp	r3, #2
 8005144:	dc25      	bgt.n	8005192 <LL_EXTI_Init+0x76>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <LL_EXTI_Init+0x34>
 800514a:	2b01      	cmp	r3, #1
 800514c:	d00b      	beq.n	8005166 <LL_EXTI_Init+0x4a>
 800514e:	e020      	b.n	8005192 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff21 	bl	8004f9c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff feac 	bl	8004ebc <LL_EXTI_EnableIT_0_31>
          break;
 8005164:	e018      	b.n	8005198 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff feca 	bl	8004f04 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff feed 	bl	8004f54 <LL_EXTI_EnableEvent_0_31>
          break;
 800517a:	e00d      	b.n	8005198 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fe9b 	bl	8004ebc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fee2 	bl	8004f54 <LL_EXTI_EnableEvent_0_31>
          break;
 8005190:	e002      	b.n	8005198 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8005192:	2301      	movs	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
          break;
 8005196:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	7a9b      	ldrb	r3, [r3, #10]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d030      	beq.n	8005202 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7a9b      	ldrb	r3, [r3, #10]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d01c      	beq.n	80051e2 <LL_EXTI_Init+0xc6>
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	dc25      	bgt.n	80051f8 <LL_EXTI_Init+0xdc>
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <LL_EXTI_Init+0x9a>
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d00b      	beq.n	80051cc <LL_EXTI_Init+0xb0>
 80051b4:	e020      	b.n	80051f8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff86 	bl	80050cc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ff11 	bl	8004fec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80051ca:	e01a      	b.n	8005202 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff2f 	bl	8005034 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff52 	bl	8005084 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80051e0:	e00f      	b.n	8005202 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff00 	bl	8004fec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff ff47 	bl	8005084 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80051f6:	e004      	b.n	8005202 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f043 0302 	orr.w	r3, r3, #2
 80051fe:	60fb      	str	r3, [r7, #12]
            break;
 8005200:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d077      	beq.n	80052fa <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7a5b      	ldrb	r3, [r3, #9]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d01c      	beq.n	800524c <LL_EXTI_Init+0x130>
 8005212:	2b02      	cmp	r3, #2
 8005214:	dc25      	bgt.n	8005262 <LL_EXTI_Init+0x146>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LL_EXTI_Init+0x104>
 800521a:	2b01      	cmp	r3, #1
 800521c:	d00b      	beq.n	8005236 <LL_EXTI_Init+0x11a>
 800521e:	e020      	b.n	8005262 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fecd 	bl	8004fc4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fe56 	bl	8004ee0 <LL_EXTI_EnableIT_32_63>
          break;
 8005234:	e01a      	b.n	800526c <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fe76 	bl	8004f2c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fe97 	bl	8004f78 <LL_EXTI_EnableEvent_32_63>
          break;
 800524a:	e00f      	b.n	800526c <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fe45 	bl	8004ee0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fe8c 	bl	8004f78 <LL_EXTI_EnableEvent_32_63>
          break;
 8005260:	e004      	b.n	800526c <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	60fb      	str	r3, [r7, #12]
          break;
 800526a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7a9b      	ldrb	r3, [r3, #10]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d042      	beq.n	80052fa <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7a9b      	ldrb	r3, [r3, #10]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d01c      	beq.n	80052b6 <LL_EXTI_Init+0x19a>
 800527c:	2b03      	cmp	r3, #3
 800527e:	dc25      	bgt.n	80052cc <LL_EXTI_Init+0x1b0>
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <LL_EXTI_Init+0x16e>
 8005284:	2b02      	cmp	r3, #2
 8005286:	d00b      	beq.n	80052a0 <LL_EXTI_Init+0x184>
 8005288:	e020      	b.n	80052cc <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff30 	bl	80050f4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff feb9 	bl	8005010 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800529e:	e02c      	b.n	80052fa <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fed9 	bl	800505c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fefa 	bl	80050a8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80052b4:	e021      	b.n	80052fa <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fea8 	bl	8005010 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff feef 	bl	80050a8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80052ca:	e016      	b.n	80052fa <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
            break;
 80052d0:	e013      	b.n	80052fa <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fe14 	bl	8004f04 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fe5b 	bl	8004f9c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fe1e 	bl	8004f2c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fe65 	bl	8004fc4 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <LL_GPIO_SetPinMode>:
{
 8005304:	b480      	push	{r7}
 8005306:	b08b      	sub	sp, #44	; 0x2c
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	613b      	str	r3, [r7, #16]
  return result;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800532a:	2320      	movs	r3, #32
 800532c:	e003      	b.n	8005336 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	fab3 f383 	clz	r3, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	2103      	movs	r1, #3
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	fa93 f3a3 	rbit	r3, r3
 800534c:	61fb      	str	r3, [r7, #28]
  return result;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005358:	2320      	movs	r3, #32
 800535a:	e003      	b.n	8005364 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	fab3 f383 	clz	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	372c      	adds	r7, #44	; 0x2c
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <LL_GPIO_SetPinOutputType>:
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <LL_GPIO_SetPinSpeed>:
{
 80053ae:	b480      	push	{r7}
 80053b0:	b08b      	sub	sp, #44	; 0x2c
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fa93 f3a3 	rbit	r3, r3
 80053c8:	613b      	str	r3, [r7, #16]
  return result;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80053d4:	2320      	movs	r3, #32
 80053d6:	e003      	b.n	80053e0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2103      	movs	r1, #3
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	401a      	ands	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	61fb      	str	r3, [r7, #28]
  return result;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005402:	2320      	movs	r3, #32
 8005404:	e003      	b.n	800540e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	431a      	orrs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	372c      	adds	r7, #44	; 0x2c
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_GPIO_SetPinPull>:
{
 8005428:	b480      	push	{r7}
 800542a:	b08b      	sub	sp, #44	; 0x2c
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	fa93 f3a3 	rbit	r3, r3
 8005442:	613b      	str	r3, [r7, #16]
  return result;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800544e:	2320      	movs	r3, #32
 8005450:	e003      	b.n	800545a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	2103      	movs	r1, #3
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	401a      	ands	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	61fb      	str	r3, [r7, #28]
  return result;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800547c:	2320      	movs	r3, #32
 800547e:	e003      	b.n	8005488 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	60da      	str	r2, [r3, #12]
}
 8005496:	bf00      	nop
 8005498:	372c      	adds	r7, #44	; 0x2c
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_GPIO_SetAFPin_0_7>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	b08b      	sub	sp, #44	; 0x2c
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	613b      	str	r3, [r7, #16]
  return result;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80054c8:	2320      	movs	r3, #32
 80054ca:	e003      	b.n	80054d4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	210f      	movs	r1, #15
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	fa93 f3a3 	rbit	r3, r3
 80054ea:	61fb      	str	r3, [r7, #28]
  return result;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80054f6:	2320      	movs	r3, #32
 80054f8:	e003      	b.n	8005502 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	431a      	orrs	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	372c      	adds	r7, #44	; 0x2c
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_GPIO_SetAFPin_8_15>:
{
 800551c:	b480      	push	{r7}
 800551e:	b08b      	sub	sp, #44	; 0x2c
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	613b      	str	r3, [r7, #16]
  return result;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005544:	2320      	movs	r3, #32
 8005546:	e003      	b.n	8005550 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	210f      	movs	r1, #15
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	401a      	ands	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	61fb      	str	r3, [r7, #28]
  return result;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005574:	2320      	movs	r3, #32
 8005576:	e003      	b.n	8005580 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800558e:	bf00      	nop
 8005590:	372c      	adds	r7, #44	; 0x2c
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b088      	sub	sp, #32
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	60fb      	str	r3, [r7, #12]
  return result;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <LL_GPIO_Init+0x26>
    return 32U;
 80055bc:	2320      	movs	r3, #32
 80055be:	e003      	b.n	80055c8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80055ca:	e048      	b.n	800565e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2101      	movs	r1, #1
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03a      	beq.n	8005658 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d003      	beq.n	80055f2 <LL_GPIO_Init+0x58>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d10e      	bne.n	8005610 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	461a      	mov	r2, r3
 80055f8:	69b9      	ldr	r1, [r7, #24]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fed7 	bl	80053ae <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	461a      	mov	r2, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff feb7 	bl	800537e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	461a      	mov	r2, r3
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff05 	bl	8005428 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d111      	bne.n	800564a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2bff      	cmp	r3, #255	; 0xff
 800562a:	d807      	bhi.n	800563c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	461a      	mov	r2, r3
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff34 	bl	80054a2 <LL_GPIO_SetAFPin_0_7>
 800563a:	e006      	b.n	800564a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	461a      	mov	r2, r3
 8005642:	69b9      	ldr	r1, [r7, #24]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff69 	bl	800551c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	461a      	mov	r2, r3
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fe56 	bl	8005304 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1af      	bne.n	80055cc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005676:	b084      	sub	sp, #16
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	f107 001c 	add.w	r0, r7, #28
 8005684:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fa65 	bl	8005b64 <USB_CoreReset>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800569e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
 80056b0:	e005      	b.n	80056be <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ca:	b004      	add	sp, #16
 80056cc:	4770      	bx	lr

080056ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d115      	bne.n	800573e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800571e:	2001      	movs	r0, #1
 8005720:	f7fc fbc6 	bl	8001eb0 <HAL_Delay>
      ms++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa0c 	bl	8005b48 <USB_GetMode>
 8005730:	4603      	mov	r3, r0
 8005732:	2b01      	cmp	r3, #1
 8005734:	d01e      	beq.n	8005774 <USB_SetCurrentMode+0x84>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b31      	cmp	r3, #49	; 0x31
 800573a:	d9f0      	bls.n	800571e <USB_SetCurrentMode+0x2e>
 800573c:	e01a      	b.n	8005774 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d115      	bne.n	8005770 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005750:	2001      	movs	r0, #1
 8005752:	f7fc fbad 	bl	8001eb0 <HAL_Delay>
      ms++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9f3 	bl	8005b48 <USB_GetMode>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <USB_SetCurrentMode+0x84>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b31      	cmp	r3, #49	; 0x31
 800576c:	d9f0      	bls.n	8005750 <USB_SetCurrentMode+0x60>
 800576e:	e001      	b.n	8005774 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e005      	b.n	8005780 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b32      	cmp	r3, #50	; 0x32
 8005778:	d101      	bne.n	800577e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005788:	b084      	sub	sp, #16
 800578a:	b580      	push	{r7, lr}
 800578c:	b086      	sub	sp, #24
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e009      	b.n	80057bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3340      	adds	r3, #64	; 0x40
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3301      	adds	r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b0e      	cmp	r3, #14
 80057c0:	d9f2      	bls.n	80057a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11c      	bne.n	8005802 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d6:	f043 0302 	orr.w	r3, r3, #2
 80057da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e005      	b.n	800580e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800581a:	2103      	movs	r1, #3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f959 	bl	8005ad4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005822:	2110      	movs	r1, #16
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8f1 	bl	8005a0c <USB_FlushTxFifo>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f91d 	bl	8005a74 <USB_FlushRxFifo>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	461a      	mov	r2, r3
 800584c:	2300      	movs	r3, #0
 800584e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	e043      	b.n	80058f6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005884:	d118      	bne.n	80058b8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	e013      	b.n	80058ca <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	461a      	mov	r2, r3
 80058b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e008      	b.n	80058ca <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	461a      	mov	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	461a      	mov	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	461a      	mov	r2, r3
 80058ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3301      	adds	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3b7      	bcc.n	800586e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e043      	b.n	800598c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591a:	d118      	bne.n	800594e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e013      	b.n	8005960 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	461a      	mov	r2, r3
 8005946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e008      	b.n	8005960 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	461a      	mov	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2300      	movs	r3, #0
 8005970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	461a      	mov	r2, r3
 8005980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3301      	adds	r3, #1
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	429a      	cmp	r2, r3
 8005992:	d3b7      	bcc.n	8005904 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f043 0210 	orr.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <USB_DevInit+0x280>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f043 0208 	orr.w	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a02:	b004      	add	sp, #16
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	803c3800 	.word	0x803c3800

08005a0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <USB_FlushTxFifo+0x64>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e01b      	b.n	8005a64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	daf2      	bge.n	8005a1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	019b      	lsls	r3, r3, #6
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <USB_FlushTxFifo+0x64>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e006      	b.n	8005a64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d0f0      	beq.n	8005a44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	00030d40 	.word	0x00030d40

08005a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <USB_FlushRxFifo+0x5c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e018      	b.n	8005ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	daf2      	bge.n	8005a80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <USB_FlushRxFifo+0x5c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e006      	b.n	8005ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d0f0      	beq.n	8005aa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	00030d40 	.word	0x00030d40

08005ad4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af4:	4313      	orrs	r3, r2
 8005af6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b34:	f043 0302 	orr.w	r3, r3, #2
 8005b38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0301 	and.w	r3, r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <USB_CoreReset+0x64>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e01b      	b.n	8005bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	daf2      	bge.n	8005b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <USB_CoreReset+0x64>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e006      	b.n	8005bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d0f0      	beq.n	8005b9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <LL_mDelay+0x4c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005bde:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d00c      	beq.n	8005c02 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005bee:	e008      	b.n	8005c02 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <LL_mDelay+0x4c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f3      	bne.n	8005bf0 <LL_mDelay+0x24>
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e010 	.word	0xe000e010

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	; (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	; (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	; (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	; (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 f818 	bl	8005c74 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08005cdc 	.word	0x08005cdc
 8005c68:	08005cdc 	.word	0x08005cdc
 8005c6c:	08005cdc 	.word	0x08005cdc
 8005c70:	08005ce0 	.word	0x08005ce0

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
