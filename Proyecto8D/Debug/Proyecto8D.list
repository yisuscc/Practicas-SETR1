
Proyecto8D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c18  08005c18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c20  08005c20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  20000010  08005c38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  08005c38  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011afc  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae8  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cea  00000000  00000000  00035718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d3  00000000  00000000  00036402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123e3  00000000  00000000  000389d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c145c  00000000  00000000  0004adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e4  00000000  00000000  0010c214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001107f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08005a60 	.word	0x08005a60

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08005a60 	.word	0x08005a60

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14c      	bne.n	800030a <__udivmoddi4+0xaa>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d967      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b153      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	fa01 fe03 	lsl.w	lr, r1, r3
 8000288:	fa20 f202 	lsr.w	r2, r0, r2
 800028c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbbe f1f7 	udiv	r1, lr, r7
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a2:	fb01 f005 	mul.w	r0, r1, r5
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 3eff 	add.w	lr, r1, #4294967295
 80002b8:	f080 8119 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8116 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb00 f505 	mul.w	r5, r0, r5
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8104 	bcs.w	80004f2 <__udivmoddi4+0x292>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8101 	bls.w	80004f2 <__udivmoddi4+0x292>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xc0>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ea 	beq.w	80004e8 <__udivmoddi4+0x288>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d148      	bne.n	80003ba <__udivmoddi4+0x15a>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xd2>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4696      	mov	lr, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000340:	e9c6 4e00 	strd	r4, lr, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa6>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xea>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 808e 	bne.w	8000470 <__udivmoddi4+0x210>
 8000354:	1a88      	subs	r0, r1, r2
 8000356:	2101      	movs	r1, #1
 8000358:	0c17      	lsrs	r7, r2, #16
 800035a:	fa1f fe82 	uxth.w	lr, r2
 800035e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000362:	fb07 0015 	mls	r0, r7, r5, r0
 8000366:	0c22      	lsrs	r2, r4, #16
 8000368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036c:	fb0e f005 	mul.w	r0, lr, r5
 8000370:	4290      	cmp	r0, r2
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x126>
 8000374:	eb1c 0202 	adds.w	r2, ip, r2
 8000378:	f105 38ff 	add.w	r8, r5, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x124>
 800037e:	4290      	cmp	r0, r2
 8000380:	f200 80cc 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000384:	4645      	mov	r5, r8
 8000386:	1a12      	subs	r2, r2, r0
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039a:	45a6      	cmp	lr, r4
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x150>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x14e>
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	f200 80b4 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003ae:	4610      	mov	r0, r2
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e7a0      	b.n	80002fc <__udivmoddi4+0x9c>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	fbba f8f9 	udiv	r8, sl, r9
 80003d4:	408d      	lsls	r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	fb09 aa18 	mls	sl, r9, r8, sl
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	432b      	orrs	r3, r5
 80003e4:	fa00 f501 	lsl.w	r5, r0, r1
 80003e8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ec:	0c1c      	lsrs	r4, r3, #16
 80003ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f2:	42a0      	cmp	r0, r4
 80003f4:	fa02 f201 	lsl.w	r2, r2, r1
 80003f8:	d90b      	bls.n	8000412 <__udivmoddi4+0x1b2>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	f080 8086 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000406:	42a0      	cmp	r0, r4
 8000408:	f240 8083 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040c:	f1a8 0802 	sub.w	r8, r8, #2
 8000410:	4464      	add	r4, ip
 8000412:	1a24      	subs	r4, r4, r0
 8000414:	b298      	uxth	r0, r3
 8000416:	fbb4 f3f9 	udiv	r3, r4, r9
 800041a:	fb09 4413 	mls	r4, r9, r3, r4
 800041e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000422:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000426:	45a6      	cmp	lr, r4
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x1dc>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000432:	d26a      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000434:	45a6      	cmp	lr, r4
 8000436:	d968      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000438:	3b02      	subs	r3, #2
 800043a:	4464      	add	r4, ip
 800043c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000440:	fba0 9302 	umull	r9, r3, r0, r2
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	429c      	cmp	r4, r3
 800044a:	46c8      	mov	r8, r9
 800044c:	469e      	mov	lr, r3
 800044e:	d354      	bcc.n	80004fa <__udivmoddi4+0x29a>
 8000450:	d051      	beq.n	80004f6 <__udivmoddi4+0x296>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d067      	beq.n	8000526 <__udivmoddi4+0x2c6>
 8000456:	ebb5 0308 	subs.w	r3, r5, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	40cb      	lsrs	r3, r1
 8000460:	fa04 f707 	lsl.w	r7, r4, r7
 8000464:	431f      	orrs	r7, r3
 8000466:	40cc      	lsrs	r4, r1
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	2100      	movs	r1, #0
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0xa6>
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	f1c3 0020 	rsb	r0, r3, #32
 8000478:	40c1      	lsrs	r1, r0
 800047a:	409d      	lsls	r5, r3
 800047c:	fa24 f000 	lsr.w	r0, r4, r0
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	4328      	orrs	r0, r5
 8000486:	fbb1 f5f7 	udiv	r5, r1, r7
 800048a:	fb07 1115 	mls	r1, r7, r5, r1
 800048e:	fa1f fe8c 	uxth.w	lr, ip
 8000492:	0c02      	lsrs	r2, r0, #16
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	fa04 f403 	lsl.w	r4, r4, r3
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80004bc:	fb07 2211 	mls	r2, r7, r1, r2
 80004c0:	b280      	uxth	r0, r0
 80004c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004c6:	fb01 f20e 	mul.w	r2, r1, lr
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x280>
 80004ce:	eb1c 0000 	adds.w	r0, ip, r0
 80004d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004d6:	d216      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d914      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004dc:	3902      	subs	r1, #2
 80004de:	4460      	add	r0, ip
 80004e0:	1a80      	subs	r0, r0, r2
 80004e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004e6:	e73a      	b.n	800035e <__udivmoddi4+0xfe>
 80004e8:	4631      	mov	r1, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e70b      	b.n	8000306 <__udivmoddi4+0xa6>
 80004ee:	4671      	mov	r1, lr
 80004f0:	e6e9      	b.n	80002c6 <__udivmoddi4+0x66>
 80004f2:	4610      	mov	r0, r2
 80004f4:	e6fe      	b.n	80002f4 <__udivmoddi4+0x94>
 80004f6:	454d      	cmp	r5, r9
 80004f8:	d2ab      	bcs.n	8000452 <__udivmoddi4+0x1f2>
 80004fa:	ebb9 0802 	subs.w	r8, r9, r2
 80004fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000502:	3801      	subs	r0, #1
 8000504:	e7a5      	b.n	8000452 <__udivmoddi4+0x1f2>
 8000506:	4641      	mov	r1, r8
 8000508:	e7ea      	b.n	80004e0 <__udivmoddi4+0x280>
 800050a:	4603      	mov	r3, r0
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1dc>
 800050e:	4645      	mov	r5, r8
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	46d0      	mov	r8, sl
 8000514:	e77d      	b.n	8000412 <__udivmoddi4+0x1b2>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e749      	b.n	80003b0 <__udivmoddi4+0x150>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e731      	b.n	8000386 <__udivmoddi4+0x126>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xdc>
 8000526:	4631      	mov	r1, r6
 8000528:	e6ed      	b.n	8000306 <__udivmoddi4+0xa6>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000534:	f000 fb40 	bl	8000bb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000538:	f000 f872 	bl	8000620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053c:	f000 f8b2 	bl	80006a4 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000540:	f001 fdbc 	bl	80020bc <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semaverde */
	semaverdeHandle = osSemaphoreNew(5, 0, &semaverde_attributes);
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <main+0x9c>)
 8000546:	2100      	movs	r1, #0
 8000548:	2005      	movs	r0, #5
 800054a:	f001 ff1d 	bl	8002388 <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

	/* creation of semarillo */
	semarilloHandle = osSemaphoreNew(5, 0, &semarillo_attributes);
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	2005      	movs	r0, #5
 800055a:	f001 ff15 	bl	8002388 <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <main+0xa8>)
 8000562:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of num_pulsa */
	num_pulsaHandle = osMessageQueueNew(3, sizeof(uint16_t),
 8000564:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <main+0xac>)
 8000566:	2102      	movs	r1, #2
 8000568:	2003      	movs	r0, #3
 800056a:	f002 f867 	bl	800263c <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <main+0xb0>)
 8000572:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <main+0xb4>)
 8000576:	2100      	movs	r1, #0
 8000578:	481b      	ldr	r0, [pc, #108]	; (80005e8 <main+0xb8>)
 800057a:	f001 fe2d 	bl	80021d8 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <main+0xbc>)
 8000582:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of ledVerde */
	ledVerdeHandle = osThreadNew(Start_led_verde, NULL, &ledVerde_attributes);
 8000584:	4a1a      	ldr	r2, [pc, #104]	; (80005f0 <main+0xc0>)
 8000586:	2100      	movs	r1, #0
 8000588:	481a      	ldr	r0, [pc, #104]	; (80005f4 <main+0xc4>)
 800058a:	f001 fe25 	bl	80021d8 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <main+0xc8>)
 8000592:	6013      	str	r3, [r2, #0]

	/* creation of ledAmarillo */
	ledAmarilloHandle = osThreadNew(Start_led_amarillo, NULL,
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <main+0xcc>)
 8000596:	2100      	movs	r1, #0
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <main+0xd0>)
 800059a:	f001 fe1d 	bl	80021d8 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xd4>)
 80005a2:	6013      	str	r3, [r2, #0]
			&ledAmarillo_attributes);

	/* creation of control_leds */
	control_ledsHandle = osThreadNew(Start_control_leds, NULL,
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <main+0xd8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0xdc>)
 80005aa:	f001 fe15 	bl	80021d8 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <main+0xe0>)
 80005b2:	6013      	str	r3, [r2, #0]
			&control_leds_attributes);

	/* creation of respuesta */
	respuestaHandle = osThreadNew(StartTask05, NULL, &respuesta_attributes);
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <main+0xe4>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0xe8>)
 80005ba:	f001 fe0d 	bl	80021d8 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a16      	ldr	r2, [pc, #88]	; (800061c <main+0xec>)
 80005c2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005c4:	f001 fdac 	bl	8002120 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005c8:	e7fe      	b.n	80005c8 <main+0x98>
 80005ca:	bf00      	nop
 80005cc:	08005bc0 	.word	0x08005bc0
 80005d0:	20000044 	.word	0x20000044
 80005d4:	08005bd0 	.word	0x08005bd0
 80005d8:	20000048 	.word	0x20000048
 80005dc:	08005ba8 	.word	0x08005ba8
 80005e0:	20000040 	.word	0x20000040
 80005e4:	08005af4 	.word	0x08005af4
 80005e8:	08000755 	.word	0x08000755
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	08005b18 	.word	0x08005b18
 80005f4:	08000765 	.word	0x08000765
 80005f8:	20000030 	.word	0x20000030
 80005fc:	08005b3c 	.word	0x08005b3c
 8000600:	080007a9 	.word	0x080007a9
 8000604:	20000034 	.word	0x20000034
 8000608:	08005b60 	.word	0x08005b60
 800060c:	080007e9 	.word	0x080007e9
 8000610:	20000038 	.word	0x20000038
 8000614:	08005b84 	.word	0x08005b84
 8000618:	08000949 	.word	0x08000949
 800061c:	2000003c 	.word	0x2000003c

08000620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	; 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 f9dc 	bl	80059ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064e:	2300      	movs	r3, #0
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000652:	2300      	movs	r3, #0
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd72 	bl	8001144 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x4a>
		Error_Handler();
 8000666:	f000 f9bb 	bl	80009e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f874 	bl	8001770 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x72>
		Error_Handler();
 800068e:	f000 f9a7 	bl	80009e0 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000692:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SystemClock_Config+0x80>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	42420070 	.word	0x42420070

080006a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VERDE_Pin | AMARILLO_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	21c0      	movs	r1, #192	; 0xc0
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <MX_GPIO_Init+0xa8>)
 80006ee:	f000 fd10 	bl	8001112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TAMPER_Pin */
	GPIO_InitStruct.Pin = TAMPER_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TAMPER_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_GPIO_Init+0xa8>)
 8000708:	f000 fb68 	bl	8000ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : WKUP_Pin */
	GPIO_InitStruct.Pin = WKUP_Pin;
 800070c:	2301      	movs	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xac>)
 8000720:	f000 fb5c 	bl	8000ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : VERDE_Pin AMARILLO_Pin */
	GPIO_InitStruct.Pin = VERDE_Pin | AMARILLO_Pin;
 8000724:	23c0      	movs	r3, #192	; 0xc0
 8000726:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xa8>)
 800073c:	f000 fb4e 	bl	8000ddc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800

08000754 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {

		osDelay(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f001 fde5 	bl	800232c <osDelay>
 8000762:	e7fb      	b.n	800075c <StartDefaultTask+0x8>

08000764 <Start_led_verde>:
 * @brief Function implementing the ledVerde thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_verde */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Start_led_verde+0x3c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fea3 	bl	80024c0 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <Start_led_verde+0x40>)
 8000780:	f000 fcc7 	bl	8001112 <HAL_GPIO_WritePin>
		osDelay(300);
 8000784:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000788:	f001 fdd0 	bl	800232c <osDelay>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2140      	movs	r1, #64	; 0x40
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <Start_led_verde+0x40>)
 8000792:	f000 fcbe 	bl	8001112 <HAL_GPIO_WritePin>
		osDelay(300);
 8000796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079a:	f001 fdc7 	bl	800232c <osDelay>
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 800079e:	e7e5      	b.n	800076c <Start_led_verde+0x8>
 80007a0:	20000044 	.word	0x20000044
 80007a4:	40011000 	.word	0x40011000

080007a8 <Start_led_amarillo>:
 * @brief Function implementing the ledAmarillo thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_amarillo */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <Start_led_amarillo+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fe81 	bl	80024c0 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <Start_led_amarillo+0x3c>)
 80007c4:	f000 fca5 	bl	8001112 <HAL_GPIO_WritePin>
		osDelay(200);
 80007c8:	20c8      	movs	r0, #200	; 0xc8
 80007ca:	f001 fdaf 	bl	800232c <osDelay>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <Start_led_amarillo+0x3c>)
 80007d4:	f000 fc9d 	bl	8001112 <HAL_GPIO_WritePin>
		osDelay(200);
 80007d8:	20c8      	movs	r0, #200	; 0xc8
 80007da:	f001 fda7 	bl	800232c <osDelay>
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 80007de:	e7e7      	b.n	80007b0 <Start_led_amarillo+0x8>
 80007e0:	20000048 	.word	0x20000048
 80007e4:	40011000 	.word	0x40011000

080007e8 <Start_control_leds>:
 * @brief Function implementing the control_leds thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_control_leds */
void Start_control_leds(void *argument) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

	unsigned short respuesta;
	uint8_t n1;
	uint8_t n2;
	//mientras no se plse el tamper, esperamos de forma activa
	while (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80007f0:	e002      	b.n	80007f8 <Start_control_leds+0x10>
		osDelay(101);
 80007f2:	2065      	movs	r0, #101	; 0x65
 80007f4:	f001 fd9a 	bl	800232c <osDelay>
	while (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	484d      	ldr	r0, [pc, #308]	; (8000934 <Start_control_leds+0x14c>)
 80007fe:	f000 fc71 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f4      	beq.n	80007f2 <Start_control_leds+0xa>
	}
	osMessageQueueReset(num_pulsaHandle);
 8000808:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <Start_control_leds+0x150>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f8b3 	bl	8002978 <osMessageQueueReset>
	for (;;) {
		if (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 1) {
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	4847      	ldr	r0, [pc, #284]	; (8000934 <Start_control_leds+0x14c>)
 8000818:	f000 fc64 	bl	80010e4 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d1f7      	bne.n	8000812 <Start_control_leds+0x2a>
			//GENERAMOS elcodigó de forma pseudo aleatoria
			n1 = osKernelGetTickCount() % 5;
 8000822:	f001 fcb1 	bl	8002188 <osKernelGetTickCount>
 8000826:	4601      	mov	r1, r0
 8000828:	4b44      	ldr	r3, [pc, #272]	; (800093c <Start_control_leds+0x154>)
 800082a:	fba3 2301 	umull	r2, r3, r3, r1
 800082e:	089a      	lsrs	r2, r3, #2
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	1aca      	subs	r2, r1, r3
 8000838:	4613      	mov	r3, r2
 800083a:	73fb      	strb	r3, [r7, #15]
			n2 = (osKernelGetTickCount() + 42) % 5;
 800083c:	f001 fca4 	bl	8002188 <osKernelGetTickCount>
 8000840:	4603      	mov	r3, r0
 8000842:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <Start_control_leds+0x154>)
 8000848:	fba3 2301 	umull	r2, r3, r3, r1
 800084c:	089a      	lsrs	r2, r3, #2
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	1aca      	subs	r2, r1, r3
 8000856:	4613      	mov	r3, r2
 8000858:	73bb      	strb	r3, [r7, #14]
			n1++;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	3301      	adds	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
			n2++;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3301      	adds	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
			//ASIGNAMOS LAS interrupciones
			for (int i = 0; i < n1; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e007      	b.n	800087c <Start_control_leds+0x94>
				//LED 1
				osSemaphoreRelease(semaverdeHandle);
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <Start_control_leds+0x158>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fe8b 	bl	800258c <osSemaphoreRelease>
			for (int i = 0; i < n1; i++) {
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf3      	blt.n	800086c <Start_control_leds+0x84>
			}
			for (int j = 0; j < n2; j++) {
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	e007      	b.n	800089a <Start_control_leds+0xb2>
				osSemaphoreRelease(semarilloHandle);
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <Start_control_leds+0x15c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fe7c 	bl	800258c <osSemaphoreRelease>
			for (int j = 0; j < n2; j++) {
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	3301      	adds	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbf3      	blt.n	800088a <Start_control_leds+0xa2>
			}
			//mientras la cola esta vacía esperamos
			while (osMessageQueueGetCount(num_pulsaHandle) == 0) {
 80008a2:	e002      	b.n	80008aa <Start_control_leds+0xc2>
				osDelay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f001 fd41 	bl	800232c <osDelay>
			while (osMessageQueueGetCount(num_pulsaHandle) == 0) {
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <Start_control_leds+0x150>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f830 	bl	8002914 <osMessageQueueGetCount>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0f4      	beq.n	80008a4 <Start_control_leds+0xbc>
			}
			osMessageQueueGet(num_pulsaHandle, &respuesta, 0, 0xFFFFFF);
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <Start_control_leds+0x150>)
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80008c6:	2200      	movs	r2, #0
 80008c8:	f001 ffb2 	bl	8002830 <osMessageQueueGet>
			if (respuesta == (n1 + n2)) {
 80008cc:	89bb      	ldrh	r3, [r7, #12]
 80008ce:	4619      	mov	r1, r3
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	4413      	add	r3, r2
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d10e      	bne.n	80008f8 <Start_control_leds+0x110>
				//acertaste
				HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <Start_control_leds+0x14c>)
 80008e0:	f000 fc17 	bl	8001112 <HAL_GPIO_WritePin>
				osDelay(2000);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e8:	f001 fd20 	bl	800232c <osDelay>
				HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <Start_control_leds+0x14c>)
 80008f2:	f000 fc0e 	bl	8001112 <HAL_GPIO_WritePin>
 80008f6:	e011      	b.n	800091c <Start_control_leds+0x134>
			} else {
				//la cagaste
				HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin,
 80008f8:	2201      	movs	r2, #1
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <Start_control_leds+0x14c>)
 80008fe:	f000 fc08 	bl	8001112 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				osDelay(2000);
 8000902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000906:	f001 fd11 	bl	800232c <osDelay>
				HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <Start_control_leds+0x14c>)
 8000910:	f000 fbff 	bl	8001112 <HAL_GPIO_WritePin>
			}
			while(HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 1){
 8000914:	e002      	b.n	800091c <Start_control_leds+0x134>
				//hasta que no se despulse no salimos
				// es para que no comience de forma automática el juego
				//una vez termine
				osDelay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f001 fd08 	bl	800232c <osDelay>
			while(HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 1){
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <Start_control_leds+0x14c>)
 8000922:	f000 fbdf 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d0f4      	beq.n	8000916 <Start_control_leds+0x12e>
			}
			osDelay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f001 fcfd 	bl	800232c <osDelay>
		if (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 1) {
 8000932:	e76e      	b.n	8000812 <Start_control_leds+0x2a>
 8000934:	40011000 	.word	0x40011000
 8000938:	20000040 	.word	0x20000040
 800093c:	cccccccd 	.word	0xcccccccd
 8000940:	20000044 	.word	0x20000044
 8000944:	20000048 	.word	0x20000048

08000948 <StartTask05>:
 * @brief Function implementing the respuesta thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	unsigned short conta2;
	for (;;) {
		if (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 8000950:	2101      	movs	r1, #1
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <StartTask05+0x68>)
 8000954:	f000 fbc6 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d10e      	bne.n	800097c <StartTask05+0x34>
			conta2++;
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	3301      	adds	r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	81fb      	strh	r3, [r7, #14]
			while (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 8000966:	e002      	b.n	800096e <StartTask05+0x26>
				//hasta que no se libere no salimos
				osDelay(10);
 8000968:	200a      	movs	r0, #10
 800096a:	f001 fcdf 	bl	800232c <osDelay>
			while (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 800096e:	2101      	movs	r1, #1
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <StartTask05+0x68>)
 8000972:	f000 fbb7 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d0f5      	beq.n	8000968 <StartTask05+0x20>
			}
		}
		// metemos en la cola
		if (HAL_GPIO_ReadPin(GPIOC, TAMPER_Pin) == 0 && conta2 != 0) {
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <StartTask05+0x6c>)
 8000982:	f000 fbaf 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10c      	bne.n	80009a6 <StartTask05+0x5e>
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d009      	beq.n	80009a6 <StartTask05+0x5e>
			osMessageQueuePut(num_pulsaHandle, &conta2, 0, 0);
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <StartTask05+0x70>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f107 010e 	add.w	r1, r7, #14
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	f001 fed3 	bl	8002748 <osMessageQueuePut>
			conta2 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	81fb      	strh	r3, [r7, #14]
		}

		osDelay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f001 fcc0 	bl	800232c <osDelay>
		if (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 80009ac:	e7d0      	b.n	8000950 <StartTask05+0x8>
 80009ae:	bf00      	nop
 80009b0:	40010800 	.word	0x40010800
 80009b4:	40011000 	.word	0x40011000
 80009b8:	20000040 	.word	0x20000040

080009bc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009ce:	f000 f909 	bl	8000be4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 f9ac 	bl	8000d86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f877 	bl	8001b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a7a:	f001 f861 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8000a7e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <HAL_InitTick+0xd4>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	0c9b      	lsrs	r3, r3, #18
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_InitTick+0xdc>)
 8000a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab4:	4817      	ldr	r0, [pc, #92]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ab6:	f001 f8a5 	bl	8001c04 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d11b      	bne.n	8000b00 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aca:	f001 f8f3 	bl	8001cb4 <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d111      	bne.n	8000b00 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f000 f96e 	bl	8000dbe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d808      	bhi.n	8000afa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2019      	movs	r0, #25
 8000aee:	f000 f94a 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0xe0>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e002      	b.n	8000b00 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	2000004c 	.word	0x2000004c
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	20000004 	.word	0x20000004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
	...

08000b4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM1_UP_IRQHandler+0x10>)
 8000b52:	f001 f909 	bl	8001d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000004c 	.word	0x2000004c

08000b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b6c:	f7ff fff8 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b72:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b88:	4c09      	ldr	r4, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b96:	f004 ff31 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff fcc9 	bl	8000530 <main>
  bx lr
 8000b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba8:	08005c28 	.word	0x08005c28
  ldr r2, =_sbss
 8000bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb0:	20001de0 	.word	0x20001de0

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x28>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8d1 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f7ff ff34 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff ff0a 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000094 	.word	0x20000094

08000c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000094 	.word	0x20000094

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <__NVIC_EnableIRQ+0x34>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff4f 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff64 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ffb2 	bl	8000d0c <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff81 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff57 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e169      	b.n	80010c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df0:	2201      	movs	r2, #1
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8158 	bne.w	80010be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a9a      	ldr	r2, [pc, #616]	; (800107c <HAL_GPIO_Init+0x2a0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d05e      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a98      	ldr	r2, [pc, #608]	; (800107c <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d875      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e1e:	4a98      	ldr	r2, [pc, #608]	; (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d058      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e24:	4a96      	ldr	r2, [pc, #600]	; (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d86f      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e2a:	4a96      	ldr	r2, [pc, #600]	; (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d052      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e30:	4a94      	ldr	r2, [pc, #592]	; (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d869      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e36:	4a94      	ldr	r2, [pc, #592]	; (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d04c      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e3c:	4a92      	ldr	r2, [pc, #584]	; (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d863      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e42:	4a92      	ldr	r2, [pc, #584]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d046      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e48:	4a90      	ldr	r2, [pc, #576]	; (800108c <HAL_GPIO_Init+0x2b0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d85d      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d82a      	bhi.n	8000ea8 <HAL_GPIO_Init+0xcc>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d859      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <HAL_GPIO_Init+0x80>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000ed7 	.word	0x08000ed7
 8000e60:	08000eb1 	.word	0x08000eb1
 8000e64:	08000ec3 	.word	0x08000ec3
 8000e68:	08000f05 	.word	0x08000f05
 8000e6c:	08000f0b 	.word	0x08000f0b
 8000e70:	08000f0b 	.word	0x08000f0b
 8000e74:	08000f0b 	.word	0x08000f0b
 8000e78:	08000f0b 	.word	0x08000f0b
 8000e7c:	08000f0b 	.word	0x08000f0b
 8000e80:	08000f0b 	.word	0x08000f0b
 8000e84:	08000f0b 	.word	0x08000f0b
 8000e88:	08000f0b 	.word	0x08000f0b
 8000e8c:	08000f0b 	.word	0x08000f0b
 8000e90:	08000f0b 	.word	0x08000f0b
 8000e94:	08000f0b 	.word	0x08000f0b
 8000e98:	08000f0b 	.word	0x08000f0b
 8000e9c:	08000f0b 	.word	0x08000f0b
 8000ea0:	08000eb9 	.word	0x08000eb9
 8000ea4:	08000ecd 	.word	0x08000ecd
 8000ea8:	4a79      	ldr	r2, [pc, #484]	; (8001090 <HAL_GPIO_Init+0x2b4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eae:	e02c      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e029      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e024      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e01f      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e01a      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e013      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	611a      	str	r2, [r3, #16]
          break;
 8000ef6:	e009      	b.n	8000f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	615a      	str	r2, [r3, #20]
          break;
 8000f02:	e003      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          break;
 8000f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d801      	bhi.n	8000f16 <HAL_GPIO_Init+0x13a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	e001      	b.n	8000f1a <HAL_GPIO_Init+0x13e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d802      	bhi.n	8000f28 <HAL_GPIO_Init+0x14c>
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x152>
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	3b08      	subs	r3, #8
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	210f      	movs	r1, #15
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	6a39      	ldr	r1, [r7, #32]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b1 	beq.w	80010be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x2bc>)
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <HAL_GPIO_Init+0x2c0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <HAL_GPIO_Init+0x1ec>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <HAL_GPIO_Init+0x2c4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <HAL_GPIO_Init+0x2c8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d007      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <HAL_GPIO_Init+0x1e0>
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e004      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fcc:	f002 0203 	and.w	r2, r2, #3
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	4093      	lsls	r3, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fda:	492f      	ldr	r1, [pc, #188]	; (8001098 <HAL_GPIO_Init+0x2bc>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	4928      	ldr	r1, [pc, #160]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800100c:	4013      	ands	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	4922      	ldr	r1, [pc, #136]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	491e      	ldr	r1, [pc, #120]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4918      	ldr	r1, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4914      	ldr	r1, [pc, #80]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d021      	beq.n	80010b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e021      	b.n	80010be <HAL_GPIO_Init+0x2e2>
 800107a:	bf00      	nop
 800107c:	10320000 	.word	0x10320000
 8001080:	10310000 	.word	0x10310000
 8001084:	10220000 	.word	0x10220000
 8001088:	10210000 	.word	0x10210000
 800108c:	10120000 	.word	0x10120000
 8001090:	10110000 	.word	0x10110000
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40011400 	.word	0x40011400
 80010ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4909      	ldr	r1, [pc, #36]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f47f ae8e 	bne.w	8000df0 <HAL_GPIO_Init+0x14>
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	372c      	adds	r7, #44	; 0x2c
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001122:	787b      	ldrb	r3, [r7, #1]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001128:	887a      	ldrh	r2, [r7, #2]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800112e:	e003      	b.n	8001138 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	041a      	lsls	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e304      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8087 	beq.w	8001272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001164:	4b92      	ldr	r3, [pc, #584]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b04      	cmp	r3, #4
 800116e:	d00c      	beq.n	800118a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001170:	4b8f      	ldr	r3, [pc, #572]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b08      	cmp	r3, #8
 800117a:	d112      	bne.n	80011a2 <HAL_RCC_OscConfig+0x5e>
 800117c:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d10b      	bne.n	80011a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118a:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d06c      	beq.n	8001270 <HAL_RCC_OscConfig+0x12c>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d168      	bne.n	8001270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e2de      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x76>
 80011ac:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a7f      	ldr	r2, [pc, #508]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e02e      	b.n	8001218 <HAL_RCC_OscConfig+0xd4>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x98>
 80011c2:	4b7b      	ldr	r3, [pc, #492]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7a      	ldr	r2, [pc, #488]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a77      	ldr	r2, [pc, #476]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xd4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0xbc>
 80011e6:	4b72      	ldr	r3, [pc, #456]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a71      	ldr	r2, [pc, #452]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6e      	ldr	r2, [pc, #440]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xd4>
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a6a      	ldr	r2, [pc, #424]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a67      	ldr	r2, [pc, #412]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fcf2 	bl	8000c08 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fcee 	bl	8000c08 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e292      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xe4>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcde 	bl	8000c08 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fcda 	bl	8000c08 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e27e      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x10c>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127e:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b08      	cmp	r3, #8
 8001294:	d11c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x18c>
 8001296:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d116      	bne.n	80012d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x176>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e252      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4939      	ldr	r1, [pc, #228]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e03a      	b.n	8001346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fc93 	bl	8000c08 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fc8f 	bl	8000c08 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e233      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4927      	ldr	r1, [pc, #156]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fc72 	bl	8000c08 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff fc6e 	bl	8000c08 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e212      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d03a      	beq.n	80013c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d019      	beq.n	800138e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_RCC_OscConfig+0x274>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fc52 	bl	8000c08 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fc4e 	bl	8000c08 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1f2      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f000 fc1e 	bl	8001bc8 <RCC_Delay>
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_RCC_OscConfig+0x274>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fc38 	bl	8000c08 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139a:	e00f      	b.n	80013bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fc34 	bl	8000c08 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d908      	bls.n	80013bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1d8      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	42420000 	.word	0x42420000
 80013b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b9b      	ldr	r3, [pc, #620]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e9      	bne.n	800139c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a6 	beq.w	8001522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a90      	ldr	r2, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b8e      	ldr	r3, [pc, #568]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fbf5 	bl	8000c08 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff fbf1 	bl	8000c08 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b64      	cmp	r3, #100	; 0x64
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e195      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x312>
 8001448:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	e02d      	b.n	80014b2 <HAL_RCC_OscConfig+0x36e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x334>
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a72      	ldr	r2, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	4b70      	ldr	r3, [pc, #448]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4a6f      	ldr	r2, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001470:	f023 0304 	bic.w	r3, r3, #4
 8001474:	6213      	str	r3, [r2, #32]
 8001476:	e01c      	b.n	80014b2 <HAL_RCC_OscConfig+0x36e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0x356>
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0x36e>
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a60      	ldr	r2, [pc, #384]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d015      	beq.n	80014e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fba5 	bl	8000c08 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff fba1 	bl	8000c08 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e143      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ee      	beq.n	80014c2 <HAL_RCC_OscConfig+0x37e>
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb8f 	bl	8000c08 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fb8b 	bl	8000c08 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e12d      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4b45      	ldr	r3, [pc, #276]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a44      	ldr	r2, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800151c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 808c 	beq.w	8001644 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d10e      	bne.n	8001558 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800153a:	4b3c      	ldr	r3, [pc, #240]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001542:	2b08      	cmp	r3, #8
 8001544:	d108      	bne.n	8001558 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e103      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b02      	cmp	r3, #2
 800155e:	d14e      	bne.n	80015fe <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0ef      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_RCC_OscConfig+0x4f0>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb3f 	bl	8000c08 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800158e:	f7ff fb3b 	bl	8000c08 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0df      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	491c      	ldr	r1, [pc, #112]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x4f0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb17 	bl	8000c08 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80015de:	f7ff fb13 	bl	8000c08 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0b7      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x49a>
 80015fc:	e022      	b.n	8001644 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_RCC_OscConfig+0x4e8>)
 8001604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_OscConfig+0x4f0>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fafa 	bl	8000c08 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001616:	e00f      	b.n	8001638 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001618:	f7ff faf6 	bl	8000c08 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d908      	bls.n	8001638 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e09a      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e9      	bne.n	8001618 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8088 	beq.w	800175e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d068      	beq.n	800172c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d14d      	bne.n	80016fe <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff face 	bl	8000c08 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff faca 	bl	8000c08 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e06e      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d10f      	bne.n	80016b8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4931      	ldr	r1, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	f023 020f 	bic.w	r2, r3, #15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	492d      	ldr	r1, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	430b      	orrs	r3, r1
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x628>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa97 	bl	8000c08 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fa93 	bl	8000c08 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e037      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x59a>
 80016fc:	e02f      	b.n	800175e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa80 	bl	8000c08 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fa7c 	bl	8000c08 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e020      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x5c8>
 800172a:	e018      	b.n	800175e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e013      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	429a      	cmp	r2, r3
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	42420060 	.word	0x42420060

08001770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0d0      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d910      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4965      	ldr	r1, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d040      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d115      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e073      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06b      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4936      	ldr	r1, [pc, #216]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff f9d2 	bl	8000c08 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f9ce 	bl	8000c08 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e053      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d210      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 0207 	bic.w	r2, r3, #7
 80018a6:	4922      	ldr	r1, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1cc>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1d0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f88c 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40022000 	.word	0x40022000
 8001934:	40021000 	.word	0x40021000
 8001938:	08005be0 	.word	0x08005be0
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b092      	sub	sp, #72	; 0x48
 800194a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001950:	2300      	movs	r3, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d002      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001978:	2b08      	cmp	r3, #8
 800197a:	d003      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 800197c:	e0c3      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001982:	e0c3      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	0c9b      	lsrs	r3, r3, #18
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80ac 	beq.w	8001af6 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f003 020f 	and.w	r2, r3, #15
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80019ac:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 808c 	beq.w	8001ad2 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	3301      	adds	r3, #1
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3302      	adds	r3, #2
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	2200      	movs	r2, #0
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	627a      	str	r2, [r7, #36]	; 0x24
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	2200      	movs	r2, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	4611      	mov	r1, r2
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	6a3a      	ldr	r2, [r7, #32]
 80019f6:	fba2 4500 	umull	r4, r5, r2, r0
 80019fa:	442b      	add	r3, r5
 80019fc:	461d      	mov	r5, r3
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ebb2 0a04 	subs.w	sl, r2, r4
 8001a1a:	eb63 0b05 	sbc.w	fp, r3, r5
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a2a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a2e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a32:	ebb2 080a 	subs.w	r8, r2, sl
 8001a36:	eb63 090b 	sbc.w	r9, r3, fp
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4699      	mov	r9, r3
 8001a52:	eb18 0304 	adds.w	r3, r8, r4
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	eb49 0305 	adc.w	r3, r9, r5
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	024b      	lsls	r3, r1, #9
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	4604      	mov	r4, r0
 8001a74:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001a78:	4601      	mov	r1, r0
 8001a7a:	024a      	lsls	r2, r1, #9
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a82:	2200      	movs	r2, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	617a      	str	r2, [r7, #20]
 8001a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a94:	4622      	mov	r2, r4
 8001a96:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a9a:	4645      	mov	r5, r8
 8001a9c:	fb05 f202 	mul.w	r2, r5, r2
 8001aa0:	46cc      	mov	ip, r9
 8001aa2:	4625      	mov	r5, r4
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	fb03 f30c 	mul.w	r3, r3, ip
 8001aac:	4413      	add	r3, r2
 8001aae:	4622      	mov	r2, r4
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	fba2 2404 	umull	r2, r4, r2, r4
 8001ab6:	61fc      	str	r4, [r7, #28]
 8001ab8:	61ba      	str	r2, [r7, #24]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4413      	add	r3, r2
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac4:	f7fe fbb4 	bl	8000230 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad0:	e007      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001ad6:	fb03 f202 	mul.w	r2, r3, r2
 8001ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001ae4:	7b5b      	ldrb	r3, [r3, #13]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8001aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
 8001af4:	e004      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8001b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b04:	e002      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001b0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3748      	adds	r7, #72	; 0x48
 8001b12:	46bd      	mov	sp, r7
 8001b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	08005bf8 	.word	0x08005bf8
 8001b24:	08005c08 	.word	0x08005c08
 8001b28:	003d0900 	.word	0x003d0900

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff fff2 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08005bf0 	.word	0x08005bf0

08001b68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	220f      	movs	r2, #15
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_GetClockConfig+0x58>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_RCC_GetClockConfig+0x58>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_GetClockConfig+0x58>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCC_GetClockConfig+0x58>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <RCC_Delay+0x34>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <RCC_Delay+0x38>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0a5b      	lsrs	r3, r3, #9
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001be4:	bf00      	nop
  }
  while (Delay --);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	60fa      	str	r2, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f9      	bne.n	8001be4 <RCC_Delay+0x1c>
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e041      	b.n	8001c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f9bc 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d001      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e03f      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_TIM_Base_Start_IT+0xa4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_TIM_Base_Start_IT+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d00e      	beq.n	8001d16 <HAL_TIM_Base_Start_IT+0x62>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_TIM_Base_Start_IT+0xa8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_TIM_Base_Start_IT+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_TIM_Base_Start_IT+0xac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_TIM_Base_Start_IT+0x62>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d111      	bne.n	8001d3a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d010      	beq.n	8001d4a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	e007      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00

08001d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0202 	mvn.w	r2, #2
 8001d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8ed 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8e0 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8ef 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0204 	mvn.w	r2, #4
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c3 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b6 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c5 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d122      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d11b      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f899 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f88c 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f89b 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0210 	mvn.w	r2, #16
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2208      	movs	r2, #8
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f86f 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f862 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f871 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0201 	mvn.w	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fd68 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b80      	cmp	r3, #128	; 0x80
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8c9 	bl	80020aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b40      	cmp	r3, #64	; 0x40
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f835 	bl	8001fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0220 	mvn.w	r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f894 	bl	8002098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <TIM_Base_SetConfig+0xc8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a2a      	ldr	r2, [pc, #168]	; (800208c <TIM_Base_SetConfig+0xcc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a29      	ldr	r2, [pc, #164]	; (8002090 <TIM_Base_SetConfig+0xd0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x38>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a28      	ldr	r2, [pc, #160]	; (8002094 <TIM_Base_SetConfig+0xd4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <TIM_Base_SetConfig+0xc8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00f      	beq.n	8002032 <TIM_Base_SetConfig+0x72>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0x72>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <TIM_Base_SetConfig+0xcc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x72>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <TIM_Base_SetConfig+0xd0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x72>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <TIM_Base_SetConfig+0xd4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <TIM_Base_SetConfig+0xc8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d103      	bne.n	8002078 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800
 8002094:	40000c00 	.word	0x40000c00

08002098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c2:	f3ef 8305 	mrs	r3, IPSR
 80020c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80020c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ce:	f3ef 8310 	mrs	r3, PRIMASK
 80020d2:	607b      	str	r3, [r7, #4]
  return(result);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <osKernelInitialize+0x32>
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <osKernelInitialize+0x60>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d109      	bne.n	80020f6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020e2:	f3ef 8311 	mrs	r3, BASEPRI
 80020e6:	603b      	str	r3, [r7, #0]
  return(result);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80020ee:	f06f 0305 	mvn.w	r3, #5
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <osKernelInitialize+0x60>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <osKernelInitialize+0x60>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e002      	b.n	8002110 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002110:	68fb      	ldr	r3, [r7, #12]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000098 	.word	0x20000098

08002120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002126:	f3ef 8305 	mrs	r3, IPSR
 800212a:	60bb      	str	r3, [r7, #8]
  return(result);
 800212c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002132:	f3ef 8310 	mrs	r3, PRIMASK
 8002136:	607b      	str	r3, [r7, #4]
  return(result);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <osKernelStart+0x32>
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <osKernelStart+0x64>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d109      	bne.n	800215a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002146:	f3ef 8311 	mrs	r3, BASEPRI
 800214a:	603b      	str	r3, [r7, #0]
  return(result);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002152:	f06f 0305 	mvn.w	r3, #5
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e00e      	b.n	8002178 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <osKernelStart+0x64>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <osKernelStart+0x64>)
 8002164:	2202      	movs	r2, #2
 8002166:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002168:	f001 ff2c 	bl	8003fc4 <vTaskStartScheduler>
      stat = osOK;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e002      	b.n	8002178 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000098 	.word	0x20000098

08002188 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800218e:	f3ef 8305 	mrs	r3, IPSR
 8002192:	60bb      	str	r3, [r7, #8]
  return(result);
 8002194:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219a:	f3ef 8310 	mrs	r3, PRIMASK
 800219e:	607b      	str	r3, [r7, #4]
  return(result);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <osKernelGetTickCount+0x32>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <osKernelGetTickCount+0x4c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d109      	bne.n	80021c2 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021ae:	f3ef 8311 	mrs	r3, BASEPRI
 80021b2:	603b      	str	r3, [r7, #0]
  return(result);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80021ba:	f002 f823 	bl	8004204 <xTaskGetTickCountFromISR>
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	e002      	b.n	80021c8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80021c2:	f002 f811 	bl	80041e8 <xTaskGetTickCount>
 80021c6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000098 	.word	0x20000098

080021d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	; 0x48
 80021dc:	af04      	add	r7, sp, #16
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e8:	f3ef 8305 	mrs	r3, IPSR
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8094 	bne.w	800231e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f6:	f3ef 8310 	mrs	r3, PRIMASK
 80021fa:	623b      	str	r3, [r7, #32]
  return(result);
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 808d 	bne.w	800231e <osThreadNew+0x146>
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <osThreadNew+0x150>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d106      	bne.n	800221a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800220c:	f3ef 8311 	mrs	r3, BASEPRI
 8002210:	61fb      	str	r3, [r7, #28]
  return(result);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8082 	bne.w	800231e <osThreadNew+0x146>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d07e      	beq.n	800231e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002224:	2318      	movs	r3, #24
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002228:	2300      	movs	r3, #0
 800222a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800222c:	f107 031b 	add.w	r3, r7, #27
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d045      	beq.n	80022ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <osThreadNew+0x74>
        name = attr->name;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <osThreadNew+0x9a>
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b38      	cmp	r3, #56	; 0x38
 8002264:	d805      	bhi.n	8002272 <osThreadNew+0x9a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <osThreadNew+0x9e>
        return (NULL);
 8002272:	2300      	movs	r3, #0
 8002274:	e054      	b.n	8002320 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <osThreadNew+0xd4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b5b      	cmp	r3, #91	; 0x5b
 8002294:	d90a      	bls.n	80022ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <osThreadNew+0xd4>
        mem = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	e010      	b.n	80022ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <osThreadNew+0xf6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <osThreadNew+0xf6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <osThreadNew+0xf6>
          mem = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	e001      	b.n	80022ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d110      	bne.n	80022f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022dc:	9202      	str	r2, [sp, #8]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f001 fc9e 	bl	8003c2c <xTaskCreateStatic>
 80022f0:	4603      	mov	r3, r0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e013      	b.n	800231e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f001 fce8 	bl	8003ce4 <xTaskCreate>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <osThreadNew+0x146>
          hTask = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3738      	adds	r7, #56	; 0x38
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000098 	.word	0x20000098

0800232c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002334:	f3ef 8305 	mrs	r3, IPSR
 8002338:	613b      	str	r3, [r7, #16]
  return(result);
 800233a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10f      	bne.n	8002360 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002340:	f3ef 8310 	mrs	r3, PRIMASK
 8002344:	60fb      	str	r3, [r7, #12]
  return(result);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <osDelay+0x34>
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <osDelay+0x58>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d109      	bne.n	8002368 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002354:	f3ef 8311 	mrs	r3, BASEPRI
 8002358:	60bb      	str	r3, [r7, #8]
  return(result);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <osDelay+0x3c>
    stat = osErrorISR;
 8002360:	f06f 0305 	mvn.w	r3, #5
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e007      	b.n	8002378 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f001 fdf2 	bl	8003f5c <vTaskDelay>
    }
  }

  return (stat);
 8002378:	697b      	ldr	r3, [r7, #20]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000098 	.word	0x20000098

08002388 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002398:	f3ef 8305 	mrs	r3, IPSR
 800239c:	61bb      	str	r3, [r7, #24]
  return(result);
 800239e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8086 	bne.w	80024b2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8310 	mrs	r3, PRIMASK
 80023aa:	617b      	str	r3, [r7, #20]
  return(result);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d17f      	bne.n	80024b2 <osSemaphoreNew+0x12a>
 80023b2:	4b42      	ldr	r3, [pc, #264]	; (80024bc <osSemaphoreNew+0x134>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d105      	bne.n	80023c6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023ba:	f3ef 8311 	mrs	r3, BASEPRI
 80023be:	613b      	str	r3, [r7, #16]
  return(result);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d175      	bne.n	80024b2 <osSemaphoreNew+0x12a>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d072      	beq.n	80024b2 <osSemaphoreNew+0x12a>
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d86e      	bhi.n	80024b2 <osSemaphoreNew+0x12a>
    mem = -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <osSemaphoreNew+0x6e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b4f      	cmp	r3, #79	; 0x4f
 80023ee:	d902      	bls.n	80023f6 <osSemaphoreNew+0x6e>
        mem = 1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	e00c      	b.n	8002410 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <osSemaphoreNew+0x88>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <osSemaphoreNew+0x88>
          mem = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	e001      	b.n	8002410 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002416:	d04c      	beq.n	80024b2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d128      	bne.n	8002470 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10a      	bne.n	800243a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2203      	movs	r2, #3
 800242a:	9200      	str	r2, [sp, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2001      	movs	r0, #1
 8002432:	f000 fc1f 	bl	8002c74 <xQueueGenericCreateStatic>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24
 8002438:	e005      	b.n	8002446 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800243a:	2203      	movs	r2, #3
 800243c:	2100      	movs	r1, #0
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fc8f 	bl	8002d62 <xQueueGenericCreate>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d022      	beq.n	8002492 <osSemaphoreNew+0x10a>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01f      	beq.n	8002492 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002452:	2300      	movs	r3, #0
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245a:	f000 fd4d 	bl	8002ef8 <xQueueGenericSend>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d016      	beq.n	8002492 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002466:	f001 fa10 	bl	800388a <vQueueDelete>
            hSemaphore = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e010      	b.n	8002492 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	461a      	mov	r2, r3
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fcd0 	bl	8002e24 <xQueueCreateCountingSemaphoreStatic>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24
 8002486:	e004      	b.n	8002492 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fd01 	bl	8002e92 <xQueueCreateCountingSemaphore>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00c      	beq.n	80024b2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <osSemaphoreNew+0x11e>
          name = attr->name;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	e001      	b.n	80024aa <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ae:	f001 fb37 	bl	8003b20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000098 	.word	0x20000098

080024c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80024d8:	f06f 0303 	mvn.w	r3, #3
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e04b      	b.n	8002578 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e0:	f3ef 8305 	mrs	r3, IPSR
 80024e4:	617b      	str	r3, [r7, #20]
  return(result);
 80024e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ec:	f3ef 8310 	mrs	r3, PRIMASK
 80024f0:	613b      	str	r3, [r7, #16]
  return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <osSemaphoreAcquire+0x4c>
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <osSemaphoreAcquire+0xc4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d128      	bne.n	8002552 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002500:	f3ef 8311 	mrs	r3, BASEPRI
 8002504:	60fb      	str	r3, [r7, #12]
  return(result);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d022      	beq.n	8002552 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8002512:	f06f 0303 	mvn.w	r3, #3
 8002516:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002518:	e02d      	b.n	8002576 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	461a      	mov	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	69b8      	ldr	r0, [r7, #24]
 8002528:	f001 f8f6 	bl	8003718 <xQueueReceiveFromISR>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	d003      	beq.n	800253a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8002532:	f06f 0302 	mvn.w	r3, #2
 8002536:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002538:	e01d      	b.n	8002576 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01a      	beq.n	8002576 <osSemaphoreAcquire+0xb6>
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <osSemaphoreAcquire+0xc8>)
 8002542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002550:	e011      	b.n	8002576 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	69b8      	ldr	r0, [r7, #24]
 8002556:	f000 ffd3 	bl	8003500 <xQueueSemaphoreTake>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00b      	beq.n	8002578 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8002566:	f06f 0301 	mvn.w	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e004      	b.n	8002578 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800256e:	f06f 0302 	mvn.w	r3, #2
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e000      	b.n	8002578 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8002576:	bf00      	nop
      }
    }
  }

  return (stat);
 8002578:	69fb      	ldr	r3, [r7, #28]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000098 	.word	0x20000098
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80025a2:	f06f 0303 	mvn.w	r3, #3
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	e03e      	b.n	8002628 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025aa:	f3ef 8305 	mrs	r3, IPSR
 80025ae:	617b      	str	r3, [r7, #20]
  return(result);
 80025b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ba:	613b      	str	r3, [r7, #16]
  return(result);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <osSemaphoreRelease+0x4a>
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <osSemaphoreRelease+0xa8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d120      	bne.n	800260c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025ca:	f3ef 8311 	mrs	r3, BASEPRI
 80025ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01a      	beq.n	800260c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	4619      	mov	r1, r3
 80025e0:	69b8      	ldr	r0, [r7, #24]
 80025e2:	f000 fe1f 	bl	8003224 <xQueueGiveFromISR>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d003      	beq.n	80025f4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80025ec:	f06f 0302 	mvn.w	r3, #2
 80025f0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025f2:	e018      	b.n	8002626 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <osSemaphoreRelease+0x9a>
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <osSemaphoreRelease+0xac>)
 80025fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800260a:	e00c      	b.n	8002626 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800260c:	2300      	movs	r3, #0
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	f000 fc70 	bl	8002ef8 <xQueueGenericSend>
 8002618:	4603      	mov	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	d004      	beq.n	8002628 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800261e:	f06f 0302 	mvn.w	r3, #2
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e000      	b.n	8002628 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002626:	bf00      	nop
    }
  }

  return (stat);
 8002628:	69fb      	ldr	r3, [r7, #28]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000098 	.word	0x20000098
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800264c:	f3ef 8305 	mrs	r3, IPSR
 8002650:	61bb      	str	r3, [r7, #24]
  return(result);
 8002652:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002654:	2b00      	cmp	r3, #0
 8002656:	d16f      	bne.n	8002738 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002658:	f3ef 8310 	mrs	r3, PRIMASK
 800265c:	617b      	str	r3, [r7, #20]
  return(result);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d169      	bne.n	8002738 <osMessageQueueNew+0xfc>
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <osMessageQueueNew+0x108>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d105      	bne.n	8002678 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800266c:	f3ef 8311 	mrs	r3, BASEPRI
 8002670:	613b      	str	r3, [r7, #16]
  return(result);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d15f      	bne.n	8002738 <osMessageQueueNew+0xfc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d05c      	beq.n	8002738 <osMessageQueueNew+0xfc>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d059      	beq.n	8002738 <osMessageQueueNew+0xfc>
    mem = -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d029      	beq.n	80026e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <osMessageQueueNew+0x82>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b4f      	cmp	r3, #79	; 0x4f
 800269e:	d90e      	bls.n	80026be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <osMessageQueueNew+0x82>
        mem = 1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	e014      	b.n	80026e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d110      	bne.n	80026e8 <osMessageQueueNew+0xac>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <osMessageQueueNew+0xac>
          mem = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	e001      	b.n	80026e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10b      	bne.n	8002706 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2100      	movs	r1, #0
 80026f8:	9100      	str	r1, [sp, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fab9 	bl	8002c74 <xQueueGenericCreateStatic>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24
 8002704:	e008      	b.n	8002718 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800270c:	2200      	movs	r2, #0
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fb26 	bl	8002d62 <xQueueGenericCreate>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e001      	b.n	8002730 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002730:	69f9      	ldr	r1, [r7, #28]
 8002732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002734:	f001 f9f4 	bl	8003b20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800273a:	4618      	mov	r0, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000098 	.word	0x20000098

08002748 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002760:	f3ef 8305 	mrs	r3, IPSR
 8002764:	61fb      	str	r3, [r7, #28]
  return(result);
 8002766:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10f      	bne.n	800278c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	61bb      	str	r3, [r7, #24]
  return(result);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <osMessageQueuePut+0x44>
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <osMessageQueuePut+0xe0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d12e      	bne.n	80027de <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002780:	f3ef 8311 	mrs	r3, BASEPRI
 8002784:	617b      	str	r3, [r7, #20]
  return(result);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d028      	beq.n	80027de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <osMessageQueuePut+0x56>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <osMessageQueuePut+0x56>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800279e:	f06f 0303 	mvn.w	r3, #3
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027a4:	e039      	b.n	800281a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80027aa:	f107 0210 	add.w	r2, r7, #16
 80027ae:	2300      	movs	r3, #0
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6a38      	ldr	r0, [r7, #32]
 80027b4:	f000 fc9e 	bl	80030f4 <xQueueGenericSendFromISR>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d003      	beq.n	80027c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80027be:	f06f 0302 	mvn.w	r3, #2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027c4:	e029      	b.n	800281a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d026      	beq.n	800281a <osMessageQueuePut+0xd2>
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <osMessageQueuePut+0xe4>)
 80027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027dc:	e01d      	b.n	800281a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <osMessageQueuePut+0xa2>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80027ea:	f06f 0303 	mvn.w	r3, #3
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	e014      	b.n	800281c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80027f2:	2300      	movs	r3, #0
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	6a38      	ldr	r0, [r7, #32]
 80027fa:	f000 fb7d 	bl	8002ef8 <xQueueGenericSend>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00b      	beq.n	800281c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800280a:	f06f 0301 	mvn.w	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e004      	b.n	800281c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002812:	f06f 0302 	mvn.w	r3, #2
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e000      	b.n	800281c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800281a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800281e:	4618      	mov	r0, r3
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000098 	.word	0x20000098
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002846:	f3ef 8305 	mrs	r3, IPSR
 800284a:	61fb      	str	r3, [r7, #28]
  return(result);
 800284c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	61bb      	str	r3, [r7, #24]
  return(result);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <osMessageQueueGet+0x42>
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <osMessageQueueGet+0xdc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d12e      	bne.n	80028c4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002866:	f3ef 8311 	mrs	r3, BASEPRI
 800286a:	617b      	str	r3, [r7, #20]
  return(result);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d028      	beq.n	80028c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <osMessageQueueGet+0x54>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <osMessageQueueGet+0x54>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002884:	f06f 0303 	mvn.w	r3, #3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800288a:	e038      	b.n	80028fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	461a      	mov	r2, r3
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6a38      	ldr	r0, [r7, #32]
 800289a:	f000 ff3d 	bl	8003718 <xQueueReceiveFromISR>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d003      	beq.n	80028ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80028a4:	f06f 0302 	mvn.w	r3, #2
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028aa:	e028      	b.n	80028fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d025      	beq.n	80028fe <osMessageQueueGet+0xce>
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <osMessageQueueGet+0xe0>)
 80028b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028c2:	e01c      	b.n	80028fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <osMessageQueueGet+0xa0>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80028d0:	f06f 0303 	mvn.w	r3, #3
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e013      	b.n	8002900 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	6a38      	ldr	r0, [r7, #32]
 80028de:	f000 fd2f 	bl	8003340 <xQueueReceive>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00b      	beq.n	8002900 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80028ee:	f06f 0301 	mvn.w	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e004      	b.n	8002900 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80028f6:	f06f 0302 	mvn.w	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	e000      	b.n	8002900 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002902:	4618      	mov	r0, r3
 8002904:	3728      	adds	r7, #40	; 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000098 	.word	0x20000098
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <osMessageQueueGetCount+0x18>
    count = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e01e      	b.n	800296a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800292c:	f3ef 8305 	mrs	r3, IPSR
 8002930:	617b      	str	r3, [r7, #20]
  return(result);
 8002932:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002938:	f3ef 8310 	mrs	r3, PRIMASK
 800293c:	613b      	str	r3, [r7, #16]
  return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <osMessageQueueGetCount+0x44>
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <osMessageQueueGetCount+0x60>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d10a      	bne.n	8002962 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800294c:	f3ef 8311 	mrs	r3, BASEPRI
 8002950:	60fb      	str	r3, [r7, #12]
  return(result);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002958:	69b8      	ldr	r0, [r7, #24]
 800295a:	f000 ff7b 	bl	8003854 <uxQueueMessagesWaitingFromISR>
 800295e:	61f8      	str	r0, [r7, #28]
 8002960:	e003      	b.n	800296a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002962:	69b8      	ldr	r0, [r7, #24]
 8002964:	f000 ff58 	bl	8003818 <uxQueueMessagesWaiting>
 8002968:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800296a:	69fb      	ldr	r3, [r7, #28]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000098 	.word	0x20000098

08002978 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002984:	f3ef 8305 	mrs	r3, IPSR
 8002988:	617b      	str	r3, [r7, #20]
  return(result);
 800298a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10f      	bne.n	80029b0 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	613b      	str	r3, [r7, #16]
  return(result);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <osMessageQueueReset+0x38>
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <osMessageQueueReset+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d109      	bne.n	80029b8 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029a4:	f3ef 8311 	mrs	r3, BASEPRI
 80029a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 80029b0:	f06f 0305 	mvn.w	r3, #5
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e00c      	b.n	80029d2 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 80029be:	f06f 0303 	mvn.w	r3, #3
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e005      	b.n	80029d2 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 80029ca:	2100      	movs	r1, #0
 80029cc:	69b8      	ldr	r0, [r7, #24]
 80029ce:	f000 f8e9 	bl	8002ba4 <xQueueGenericReset>
  }

  return (stat);
 80029d2:	69fb      	ldr	r3, [r7, #28]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000098 	.word	0x20000098

080029e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <vApplicationGetIdleTaskMemory+0x28>)
 80029f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80029f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	2000009c 	.word	0x2000009c
 8002a0c:	200000f8 	.word	0x200000f8

08002a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <vApplicationGetTimerTaskMemory+0x30>)
 8002a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2e:	601a      	str	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200002f8 	.word	0x200002f8
 8002a40:	20000354 	.word	0x20000354

08002a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f103 0208 	add.w	r2, r3, #8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 0208 	add.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d103      	bne.n	8002b00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e00c      	b.n	8002b1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3308      	adds	r3, #8
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e002      	b.n	8002b0e <vListInsert+0x2e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d2f6      	bcs.n	8002b08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bce:	f002 fc33 	bl	8005438 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	441a      	add	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d114      	bne.n	8002c4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01a      	beq.n	8002c62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3310      	adds	r3, #16
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fc63 	bl	80044fc <xTaskRemoveFromEventList>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <xQueueGenericReset+0xcc>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	e009      	b.n	8002c62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3310      	adds	r3, #16
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fef6 	bl	8002a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3324      	adds	r3, #36	; 0x24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fef1 	bl	8002a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c62:	f002 fc19 	bl	8005498 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <xQueueGenericCreateStatic+0x52>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <xQueueGenericCreateStatic+0x56>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericCreateStatic+0x58>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <xQueueGenericCreateStatic+0x7e>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericCreateStatic+0x82>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericCreateStatic+0x84>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d12:	2350      	movs	r3, #80	; 0x50
 8002d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d00a      	beq.n	8002d32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f843 	bl	8002dde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3730      	adds	r7, #48	; 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	613b      	str	r3, [r7, #16]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e004      	b.n	8002da2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3350      	adds	r3, #80	; 0x50
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fc48 	bl	800563c <pvPortMalloc>
 8002dac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00f      	beq.n	8002dd4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	3350      	adds	r3, #80	; 0x50
 8002db8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f805 	bl	8002dde <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
	}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e002      	b.n	8002e00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	69b8      	ldr	r0, [r7, #24]
 8002e10:	f7ff fec8 	bl	8002ba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	61bb      	str	r3, [r7, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d90a      	bls.n	8002e6a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	617b      	str	r3, [r7, #20]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fefd 	bl	8002c74 <xQueueGenericCreateStatic>
 8002e7a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e88:	69fb      	ldr	r3, [r7, #28]
	}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	613b      	str	r3, [r7, #16]
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d90a      	bls.n	8002ed6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	60fb      	str	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff41 	bl	8002d62 <xQueueGenericCreate>
 8002ee0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002eee:	697b      	ldr	r3, [r7, #20]
	}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08e      	sub	sp, #56	; 0x38
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericSend+0x32>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <xQueueGenericSend+0x40>
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <xQueueGenericSend+0x44>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <xQueueGenericSend+0x46>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <xQueueGenericSend+0x60>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d103      	bne.n	8002f66 <xQueueGenericSend+0x6e>
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericSend+0x72>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericSend+0x74>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	623b      	str	r3, [r7, #32]
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f86:	f001 fc7b 	bl	8004880 <xTaskGetSchedulerState>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <xQueueGenericSend+0x9e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <xQueueGenericSend+0xa2>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <xQueueGenericSend+0xa4>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	61fb      	str	r3, [r7, #28]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fb6:	f002 fa3f 	bl	8005438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <xQueueGenericSend+0xd4>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d129      	bne.n	8003020 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f000 fc94 	bl	80038fe <prvCopyDataToQueue>
 8002fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fa89 	bl	80044fc <xTaskRemoveFromEventList>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <xQueueGenericSend+0x1f8>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	e00a      	b.n	8003018 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <xQueueGenericSend+0x1f8>)
 800300a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003018:	f002 fa3e 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	e063      	b.n	80030e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003026:	f002 fa37 	bl	8005498 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800302a:	2300      	movs	r3, #0
 800302c:	e05c      	b.n	80030e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fac3 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800303e:	2301      	movs	r3, #1
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003042:	f002 fa29 	bl	8005498 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003046:	f001 f823 	bl	8004090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800304a:	f002 f9f5 	bl	8005438 <vPortEnterCritical>
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <xQueueGenericSend+0x16c>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800306a:	b25b      	sxtb	r3, r3
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d103      	bne.n	800307a <xQueueGenericSend+0x182>
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800307a:	f002 fa0d 	bl	8005498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307e:	1d3a      	adds	r2, r7, #4
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fab2 	bl	80045f0 <xTaskCheckForTimeOut>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d124      	bne.n	80030dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003094:	f000 fd2b 	bl	8003aee <prvIsQueueFull>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d018      	beq.n	80030d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	3310      	adds	r3, #16
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f9d8 	bl	800445c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ae:	f000 fcb6 	bl	8003a1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030b2:	f000 fffb 	bl	80040ac <xTaskResumeAll>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f47f af7c 	bne.w	8002fb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <xQueueGenericSend+0x1f8>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	e772      	b.n	8002fb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d2:	f000 fca4 	bl	8003a1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030d6:	f000 ffe9 	bl	80040ac <xTaskResumeAll>
 80030da:	e76c      	b.n	8002fb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030de:	f000 fc9e 	bl	8003a1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030e2:	f000 ffe3 	bl	80040ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030e6:	2300      	movs	r3, #0
		}
	}
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3738      	adds	r7, #56	; 0x38
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <xQueueGenericSendFromISR+0x3c>
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <xQueueGenericSendFromISR+0x40>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <xQueueGenericSendFromISR+0x42>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	623b      	str	r3, [r7, #32]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d103      	bne.n	800315e <xQueueGenericSendFromISR+0x6a>
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <xQueueGenericSendFromISR+0x6e>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericSendFromISR+0x70>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61fb      	str	r3, [r7, #28]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800317e:	f002 fa1f 	bl	80055c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003182:	f3ef 8211 	mrs	r2, BASEPRI
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	61ba      	str	r2, [r7, #24]
 8003198:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800319a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <xQueueGenericSendFromISR+0xbc>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d12c      	bne.n	800320a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c0:	f000 fb9d 	bl	80038fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d112      	bne.n	80031f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f98e 	bl	80044fc <xTaskRemoveFromEventList>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00e      	beq.n	8003204 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e007      	b.n	8003204 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	b25a      	sxtb	r2, r3
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003204:	2301      	movs	r3, #1
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003208:	e001      	b.n	800320e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800321c:	4618      	mov	r0, r3
 800321e:	3738      	adds	r7, #56	; 0x38
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	623b      	str	r3, [r7, #32]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <xQueueGiveFromISR+0x48>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61fb      	str	r3, [r7, #28]
}
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <xQueueGiveFromISR+0x58>
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <xQueueGiveFromISR+0x5c>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <xQueueGiveFromISR+0x5e>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <xQueueGiveFromISR+0x78>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	61bb      	str	r3, [r7, #24]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800329c:	f002 f990 	bl	80055c0 <vPortValidateInterruptPriority>
	__asm volatile
 80032a0:	f3ef 8211 	mrs	r2, BASEPRI
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	617a      	str	r2, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80032b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d22b      	bcs.n	8003324 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d112      	bne.n	800330e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3324      	adds	r3, #36	; 0x24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f901 	bl	80044fc <xTaskRemoveFromEventList>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e007      	b.n	800331e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800330e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003312:	3301      	adds	r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	b25a      	sxtb	r2, r3
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800331e:	2301      	movs	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	e001      	b.n	8003328 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003324:	2300      	movs	r3, #0
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f383 8811 	msr	BASEPRI, r3
}
 8003332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003336:	4618      	mov	r0, r3
 8003338:	3738      	adds	r7, #56	; 0x38
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <xQueueReceive+0x30>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	623b      	str	r3, [r7, #32]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <xQueueReceive+0x3e>
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <xQueueReceive+0x42>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueReceive+0x44>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueReceive+0x5e>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61fb      	str	r3, [r7, #28]
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800339e:	f001 fa6f 	bl	8004880 <xTaskGetSchedulerState>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <xQueueReceive+0x6e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <xQueueReceive+0x72>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <xQueueReceive+0x74>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xQueueReceive+0x8e>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	61bb      	str	r3, [r7, #24]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ce:	f002 f833 	bl	8005438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01f      	beq.n	800341e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033e2:	f000 faf6 	bl	80039d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00f      	beq.n	8003416 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	3310      	adds	r3, #16
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f87e 	bl	80044fc <xTaskRemoveFromEventList>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <xQueueReceive+0x1bc>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003416:	f002 f83f 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 800341a:	2301      	movs	r3, #1
 800341c:	e069      	b.n	80034f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003424:	f002 f838 	bl	8005498 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003428:	2300      	movs	r3, #0
 800342a:	e062      	b.n	80034f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f8c4 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003440:	f002 f82a 	bl	8005498 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003444:	f000 fe24 	bl	8004090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003448:	f001 fff6 	bl	8005438 <vPortEnterCritical>
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003452:	b25b      	sxtb	r3, r3
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <xQueueReceive+0x122>
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003468:	b25b      	sxtb	r3, r3
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d103      	bne.n	8003478 <xQueueReceive+0x138>
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003478:	f002 f80e 	bl	8005498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800347c:	1d3a      	adds	r2, r7, #4
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f8b3 	bl	80045f0 <xTaskCheckForTimeOut>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d123      	bne.n	80034d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003492:	f000 fb16 	bl	8003ac2 <prvIsQueueEmpty>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d017      	beq.n	80034cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	3324      	adds	r3, #36	; 0x24
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 ffd9 	bl	800445c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ac:	f000 fab7 	bl	8003a1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034b0:	f000 fdfc 	bl	80040ac <xTaskResumeAll>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d189      	bne.n	80033ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <xQueueReceive+0x1bc>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	e780      	b.n	80033ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ce:	f000 faa6 	bl	8003a1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034d2:	f000 fdeb 	bl	80040ac <xTaskResumeAll>
 80034d6:	e77a      	b.n	80033ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034da:	f000 faa0 	bl	8003a1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034de:	f000 fde5 	bl	80040ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e4:	f000 faed 	bl	8003ac2 <prvIsQueueEmpty>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f43f af6f 	beq.w	80033ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3730      	adds	r7, #48	; 0x30
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	623b      	str	r3, [r7, #32]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	61fb      	str	r3, [r7, #28]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003550:	f001 f996 	bl	8004880 <xTaskGetSchedulerState>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <xQueueSemaphoreTake+0x60>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <xQueueSemaphoreTake+0x64>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <xQueueSemaphoreTake+0x66>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	61bb      	str	r3, [r7, #24]
}
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003580:	f001 ff5a 	bl	8005438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d024      	beq.n	80035da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	1e5a      	subs	r2, r3, #1
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80035a0:	f001 faee 	bl	8004b80 <pvTaskIncrementMutexHeldCount>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00f      	beq.n	80035d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	3310      	adds	r3, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ffa0 	bl	80044fc <xTaskRemoveFromEventList>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035c2:	4b54      	ldr	r3, [pc, #336]	; (8003714 <xQueueSemaphoreTake+0x214>)
 80035c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035d2:	f001 ff61 	bl	8005498 <vPortExitCritical>
				return pdPASS;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e097      	b.n	800370a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d111      	bne.n	8003604 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	617b      	str	r3, [r7, #20]
}
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035fc:	f001 ff4c 	bl	8005498 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003600:	2300      	movs	r3, #0
 8003602:	e082      	b.n	800370a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4618      	mov	r0, r3
 8003610:	f000 ffd8 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003618:	f001 ff3e 	bl	8005498 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800361c:	f000 fd38 	bl	8004090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003620:	f001 ff0a 	bl	8005438 <vPortEnterCritical>
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800362a:	b25b      	sxtb	r3, r3
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d103      	bne.n	800363a <xQueueSemaphoreTake+0x13a>
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003640:	b25b      	sxtb	r3, r3
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d103      	bne.n	8003650 <xQueueSemaphoreTake+0x150>
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003650:	f001 ff22 	bl	8005498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003654:	463a      	mov	r2, r7
 8003656:	f107 030c 	add.w	r3, r7, #12
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f000 ffc7 	bl	80045f0 <xTaskCheckForTimeOut>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d132      	bne.n	80036ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800366a:	f000 fa2a 	bl	8003ac2 <prvIsQueueEmpty>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d026      	beq.n	80036c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800367c:	f001 fedc 	bl	8005438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f919 	bl	80048bc <xTaskPriorityInherit>
 800368a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800368c:	f001 ff04 	bl	8005498 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fedf 	bl	800445c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800369e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036a0:	f000 f9bd 	bl	8003a1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036a4:	f000 fd02 	bl	80040ac <xTaskResumeAll>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f47f af68 	bne.w	8003580 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <xQueueSemaphoreTake+0x214>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e75e      	b.n	8003580 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80036c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036c4:	f000 f9ab 	bl	8003a1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036c8:	f000 fcf0 	bl	80040ac <xTaskResumeAll>
 80036cc:	e758      	b.n	8003580 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036d0:	f000 f9a5 	bl	8003a1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036d4:	f000 fcea 	bl	80040ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036da:	f000 f9f2 	bl	8003ac2 <prvIsQueueEmpty>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f43f af4d 	beq.w	8003580 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80036ec:	f001 fea4 	bl	8005438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036f2:	f000 f8ed 	bl	80038d0 <prvGetDisinheritPriorityAfterTimeout>
 80036f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f9b8 	bl	8004a74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003704:	f001 fec8 	bl	8005498 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800370a:	4618      	mov	r0, r3
 800370c:	3738      	adds	r7, #56	; 0x38
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08e      	sub	sp, #56	; 0x38
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	623b      	str	r3, [r7, #32]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <xQueueReceiveFromISR+0x3a>
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <xQueueReceiveFromISR+0x3e>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <xQueueReceiveFromISR+0x40>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	61fb      	str	r3, [r7, #28]
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003772:	f001 ff25 	bl	80055c0 <vPortValidateInterruptPriority>
	__asm volatile
 8003776:	f3ef 8211 	mrs	r2, BASEPRI
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61ba      	str	r2, [r7, #24]
 800378c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800378e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02f      	beq.n	80037fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ac:	f000 f911 	bl	80039d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80037b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d112      	bne.n	80037e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	3310      	adds	r3, #16
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fe94 	bl	80044fc <xTaskRemoveFromEventList>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00e      	beq.n	80037f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e007      	b.n	80037f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80037e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	b25a      	sxtb	r2, r3
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80037f8:	2301      	movs	r3, #1
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	e001      	b.n	8003802 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f383 8811 	msr	BASEPRI, r3
}
 800380c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003810:	4618      	mov	r0, r3
 8003812:	3738      	adds	r7, #56	; 0x38
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800383c:	f001 fdfc 	bl	8005438 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003846:	f001 fe27 	bl	8005498 <vPortExitCritical>

	return uxReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	60bb      	str	r3, [r7, #8]
}
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800387e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <vQueueDelete+0x28>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60bb      	str	r3, [r7, #8]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f95c 	bl	8003b70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 ff7e 	bl	80057c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80038f2:	68fb      	ldr	r3, [r7, #12]
	}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d14d      	bne.n	80039c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f835 	bl	8004998 <xTaskPriorityDisinherit>
 800392e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	e043      	b.n	80039c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d119      	bne.n	8003972 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6898      	ldr	r0, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	461a      	mov	r2, r3
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	f002 f87b 	bl	8005a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	441a      	add	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d32b      	bcc.n	80039c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	e026      	b.n	80039c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68d8      	ldr	r0, [r3, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	461a      	mov	r2, r3
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	f002 f861 	bl	8005a44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	425b      	negs	r3, r3
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d207      	bcs.n	80039ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	425b      	negs	r3, r3
 80039a8:	441a      	add	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d105      	bne.n	80039c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	3b01      	subs	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039c8:	697b      	ldr	r3, [r7, #20]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d303      	bcc.n	8003a06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6838      	ldr	r0, [r7, #0]
 8003a12:	f002 f817 	bl	8005a44 <memcpy>
	}
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a26:	f001 fd07 	bl	8005438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a32:	e011      	b.n	8003a58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd5b 	bl	80044fc <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a4c:	f000 fe32 	bl	80046b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dce9      	bgt.n	8003a34 <prvUnlockQueue+0x16>
 8003a60:	e000      	b.n	8003a64 <prvUnlockQueue+0x46>
					break;
 8003a62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a6c:	f001 fd14 	bl	8005498 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a70:	f001 fce2 	bl	8005438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a7c:	e011      	b.n	8003aa2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3310      	adds	r3, #16
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd36 	bl	80044fc <xTaskRemoveFromEventList>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a96:	f000 fe0d 	bl	80046b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	dce9      	bgt.n	8003a7e <prvUnlockQueue+0x60>
 8003aaa:	e000      	b.n	8003aae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	22ff      	movs	r2, #255	; 0xff
 8003ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ab6:	f001 fcef 	bl	8005498 <vPortExitCritical>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aca:	f001 fcb5 	bl	8005438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e001      	b.n	8003ae0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ae0:	f001 fcda 	bl	8005498 <vPortExitCritical>

	return xReturn;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003af6:	f001 fc9f 	bl	8005438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d102      	bne.n	8003b0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e001      	b.n	8003b10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b10:	f001 fcc2 	bl	8005498 <vPortExitCritical>

	return xReturn;
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e014      	b.n	8003b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b30:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <vQueueAddToRegistry+0x4c>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <vQueueAddToRegistry+0x4c>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <vQueueAddToRegistry+0x4c>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b52:	e006      	b.n	8003b62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b07      	cmp	r3, #7
 8003b5e:	d9e7      	bls.n	8003b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	20000754 	.word	0x20000754

08003b70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e016      	b.n	8003bac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <vQueueUnregisterQueue+0x50>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d10b      	bne.n	8003ba6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <vQueueUnregisterQueue+0x50>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2100      	movs	r1, #0
 8003b94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <vQueueUnregisterQueue+0x50>)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]
				break;
 8003ba4:	e006      	b.n	8003bb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b07      	cmp	r3, #7
 8003bb0:	d9e5      	bls.n	8003b7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000754 	.word	0x20000754

08003bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bd4:	f001 fc30 	bl	8005438 <vPortEnterCritical>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d103      	bne.n	8003bee <vQueueWaitForMessageRestricted+0x2a>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf4:	b25b      	sxtb	r3, r3
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d103      	bne.n	8003c04 <vQueueWaitForMessageRestricted+0x40>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c04:	f001 fc48 	bl	8005498 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3324      	adds	r3, #36	; 0x24
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fc43 	bl	80044a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f7ff fefd 	bl	8003a1e <prvUnlockQueue>
	}
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08e      	sub	sp, #56	; 0x38
 8003c30:	af04      	add	r7, sp, #16
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	623b      	str	r3, [r7, #32]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	61fb      	str	r3, [r7, #28]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c72:	235c      	movs	r3, #92	; 0x5c
 8003c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b5c      	cmp	r3, #92	; 0x5c
 8003c7a:	d00a      	beq.n	8003c92 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61bb      	str	r3, [r7, #24]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01e      	beq.n	8003cd6 <xTaskCreateStatic+0xaa>
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01b      	beq.n	8003cd6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9303      	str	r3, [sp, #12]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	9302      	str	r3, [sp, #8]
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f850 	bl	8003d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cd0:	f000 f8d4 	bl	8003e7c <prvAddNewTaskToReadyList>
 8003cd4:	e001      	b.n	8003cda <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cda:	697b      	ldr	r3, [r7, #20]
	}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	; 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fc9f 	bl	800563c <pvPortMalloc>
 8003cfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d06:	205c      	movs	r0, #92	; 0x5c
 8003d08:	f001 fc98 	bl	800563c <pvPortMalloc>
 8003d0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
 8003d1a:	e005      	b.n	8003d28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f001 fd51 	bl	80057c4 <vPortFree>
 8003d22:	e001      	b.n	8003d28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9303      	str	r3, [sp, #12]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	9302      	str	r3, [sp, #8]
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f80e 	bl	8003d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d52:	69f8      	ldr	r0, [r7, #28]
 8003d54:	f000 f892 	bl	8003e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e002      	b.n	8003d64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d64:	69bb      	ldr	r3, [r7, #24]
	}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	21a5      	movs	r1, #165	; 0xa5
 8003d88:	f001 fe30 	bl	80059ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d96:	3b01      	subs	r3, #1
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f023 0307 	bic.w	r3, r3, #7
 8003da4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	617b      	str	r3, [r7, #20]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e012      	b.n	8003df2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	7819      	ldrb	r1, [r3, #0]
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3334      	adds	r3, #52	; 0x34
 8003ddc:	460a      	mov	r2, r1
 8003dde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	3301      	adds	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d9e9      	bls.n	8003dcc <prvInitialiseNewTask+0x5e>
 8003df8:	e000      	b.n	8003dfc <prvInitialiseNewTask+0x8e>
		{
			break;
 8003dfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	2b37      	cmp	r3, #55	; 0x37
 8003e08:	d901      	bls.n	8003e0e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e0a:	2337      	movs	r3, #55	; 0x37
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe fe2c 	bl	8002a82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fe27 	bl	8002a82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	69b8      	ldr	r0, [r7, #24]
 8003e5e:	f001 fa09 	bl	8005274 <pxPortInitialiseStack>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e74:	bf00      	nop
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e84:	f001 fad8 	bl	8005438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e88:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e92:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <prvAddNewTaskToReadyList+0xc4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d110      	bne.n	8003eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ea8:	f000 fc28 	bl	80046fc <prvInitialiseTaskLists>
 8003eac:	e00d      	b.n	8003eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <prvAddNewTaskToReadyList+0xcc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d802      	bhi.n	8003eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <prvAddNewTaskToReadyList+0xd0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <prvAddNewTaskToReadyList+0xd0>)
 8003ed2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <prvAddNewTaskToReadyList+0xd0>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <prvAddNewTaskToReadyList+0xd4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d903      	bls.n	8003ef0 <prvAddNewTaskToReadyList+0x74>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <prvAddNewTaskToReadyList+0xd4>)
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <prvAddNewTaskToReadyList+0xd8>)
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f7fe fdc7 	bl	8002a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f0c:	f001 fac4 	bl	8005498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <prvAddNewTaskToReadyList+0xcc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvAddNewTaskToReadyList+0xc8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d207      	bcs.n	8003f36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <prvAddNewTaskToReadyList+0xdc>)
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000c68 	.word	0x20000c68
 8003f44:	20000794 	.word	0x20000794
 8003f48:	20000c74 	.word	0x20000c74
 8003f4c:	20000c84 	.word	0x20000c84
 8003f50:	20000c70 	.word	0x20000c70
 8003f54:	20000798 	.word	0x20000798
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d017      	beq.n	8003f9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <vTaskDelay+0x60>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <vTaskDelay+0x30>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60bb      	str	r3, [r7, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f8c:	f000 f880 	bl	8004090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f90:	2100      	movs	r1, #0
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fe08 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f98:	f000 f888 	bl	80040ac <xTaskResumeAll>
 8003f9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <vTaskDelay+0x64>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000c90 	.word	0x20000c90
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fd2:	463a      	mov	r2, r7
 8003fd4:	1d39      	adds	r1, r7, #4
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fd00 	bl	80029e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	9202      	str	r2, [sp, #8]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	4921      	ldr	r1, [pc, #132]	; (8004078 <vTaskStartScheduler+0xb4>)
 8003ff4:	4821      	ldr	r0, [pc, #132]	; (800407c <vTaskStartScheduler+0xb8>)
 8003ff6:	f7ff fe19 	bl	8003c2c <xTaskCreateStatic>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <vTaskStartScheduler+0xbc>)
 8003ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <vTaskStartScheduler+0xbc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e001      	b.n	8004012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d102      	bne.n	800401e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004018:	f000 fe1a 	bl	8004c50 <xTimerCreateTimerTask>
 800401c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d116      	bne.n	8004052 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <vTaskStartScheduler+0xc0>)
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
 800403e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <vTaskStartScheduler+0xc4>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <vTaskStartScheduler+0xc8>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800404c:	f001 f994 	bl	8005378 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004050:	e00e      	b.n	8004070 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d10a      	bne.n	8004070 <vTaskStartScheduler+0xac>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60fb      	str	r3, [r7, #12]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vTaskStartScheduler+0xaa>
}
 8004070:	bf00      	nop
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	08005adc 	.word	0x08005adc
 800407c:	080046cd 	.word	0x080046cd
 8004080:	20000c8c 	.word	0x20000c8c
 8004084:	20000c88 	.word	0x20000c88
 8004088:	20000c74 	.word	0x20000c74
 800408c:	20000c6c 	.word	0x20000c6c

08004090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <vTaskSuspendAll+0x18>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <vTaskSuspendAll+0x18>)
 800409c:	6013      	str	r3, [r2, #0]
}
 800409e:	bf00      	nop
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000c90 	.word	0x20000c90

080040ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <xTaskResumeAll+0x118>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	603b      	str	r3, [r7, #0]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040d8:	f001 f9ae 	bl	8005438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <xTaskResumeAll+0x118>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <xTaskResumeAll+0x118>)
 80040e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <xTaskResumeAll+0x118>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d162      	bne.n	80041b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <xTaskResumeAll+0x11c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d05e      	beq.n	80041b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f6:	e02f      	b.n	8004158 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040f8:	4b34      	ldr	r3, [pc, #208]	; (80041cc <xTaskResumeAll+0x120>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3318      	adds	r3, #24
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fd23 	bl	8002b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fd1e 	bl	8002b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <xTaskResumeAll+0x124>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d903      	bls.n	8004128 <xTaskResumeAll+0x7c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <xTaskResumeAll+0x124>)
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <xTaskResumeAll+0x128>)
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7fe fcab 	bl	8002a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <xTaskResumeAll+0x12c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <xTaskResumeAll+0x130>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <xTaskResumeAll+0x120>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1cb      	bne.n	80040f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004166:	f000 fb67 	bl	8004838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <xTaskResumeAll+0x134>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004176:	f000 f857 	bl	8004228 <xTaskIncrementTick>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <xTaskResumeAll+0x130>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3b01      	subs	r3, #1
 800418a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f1      	bne.n	8004176 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <xTaskResumeAll+0x134>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <xTaskResumeAll+0x130>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <xTaskResumeAll+0x138>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041b4:	f001 f970 	bl	8005498 <vPortExitCritical>

	return xAlreadyYielded;
 80041b8:	68bb      	ldr	r3, [r7, #8]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000c90 	.word	0x20000c90
 80041c8:	20000c68 	.word	0x20000c68
 80041cc:	20000c28 	.word	0x20000c28
 80041d0:	20000c70 	.word	0x20000c70
 80041d4:	20000798 	.word	0x20000798
 80041d8:	20000794 	.word	0x20000794
 80041dc:	20000c7c 	.word	0x20000c7c
 80041e0:	20000c78 	.word	0x20000c78
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <xTaskGetTickCount+0x18>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041f4:	687b      	ldr	r3, [r7, #4]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	20000c6c 	.word	0x20000c6c

08004204 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800420a:	f001 f9d9 	bl	80055c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <xTaskGetTickCountFromISR+0x20>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004218:	683b      	ldr	r3, [r7, #0]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000c6c 	.word	0x20000c6c

08004228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004232:	4b51      	ldr	r3, [pc, #324]	; (8004378 <xTaskIncrementTick+0x150>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 808e 	bne.w	8004358 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800423c:	4b4f      	ldr	r3, [pc, #316]	; (800437c <xTaskIncrementTick+0x154>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004244:	4a4d      	ldr	r2, [pc, #308]	; (800437c <xTaskIncrementTick+0x154>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d120      	bne.n	8004292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <xTaskIncrementTick+0x158>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <xTaskIncrementTick+0x48>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	603b      	str	r3, [r7, #0]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xTaskIncrementTick+0x46>
 8004270:	4b43      	ldr	r3, [pc, #268]	; (8004380 <xTaskIncrementTick+0x158>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <xTaskIncrementTick+0x15c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a41      	ldr	r2, [pc, #260]	; (8004380 <xTaskIncrementTick+0x158>)
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <xTaskIncrementTick+0x15c>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b40      	ldr	r3, [pc, #256]	; (8004388 <xTaskIncrementTick+0x160>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	4a3f      	ldr	r2, [pc, #252]	; (8004388 <xTaskIncrementTick+0x160>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	f000 fad3 	bl	8004838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <xTaskIncrementTick+0x164>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d34e      	bcc.n	800433a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800429c:	4b38      	ldr	r3, [pc, #224]	; (8004380 <xTaskIncrementTick+0x158>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xTaskIncrementTick+0x82>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xTaskIncrementTick+0x84>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <xTaskIncrementTick+0x164>)
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295
 80042b6:	601a      	str	r2, [r3, #0]
					break;
 80042b8:	e03f      	b.n	800433a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xTaskIncrementTick+0x158>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d203      	bcs.n	80042da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <xTaskIncrementTick+0x164>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6013      	str	r3, [r2, #0]
						break;
 80042d8:	e02f      	b.n	800433a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fc36 	bl	8002b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3318      	adds	r3, #24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fc2d 	bl	8002b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <xTaskIncrementTick+0x168>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d903      	bls.n	800430a <xTaskIncrementTick+0xe2>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	4a22      	ldr	r2, [pc, #136]	; (8004390 <xTaskIncrementTick+0x168>)
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <xTaskIncrementTick+0x16c>)
 8004318:	441a      	add	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3304      	adds	r3, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7fe fbba 	bl	8002a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <xTaskIncrementTick+0x170>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d3b3      	bcc.n	800429c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004338:	e7b0      	b.n	800429c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <xTaskIncrementTick+0x170>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	4914      	ldr	r1, [pc, #80]	; (8004394 <xTaskIncrementTick+0x16c>)
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d907      	bls.n	8004362 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e004      	b.n	8004362 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004358:	4b10      	ldr	r3, [pc, #64]	; (800439c <xTaskIncrementTick+0x174>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	4a0f      	ldr	r2, [pc, #60]	; (800439c <xTaskIncrementTick+0x174>)
 8004360:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <xTaskIncrementTick+0x178>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000c90 	.word	0x20000c90
 800437c:	20000c6c 	.word	0x20000c6c
 8004380:	20000c20 	.word	0x20000c20
 8004384:	20000c24 	.word	0x20000c24
 8004388:	20000c80 	.word	0x20000c80
 800438c:	20000c88 	.word	0x20000c88
 8004390:	20000c70 	.word	0x20000c70
 8004394:	20000798 	.word	0x20000798
 8004398:	20000794 	.word	0x20000794
 800439c:	20000c78 	.word	0x20000c78
 80043a0:	20000c7c 	.word	0x20000c7c

080043a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <vTaskSwitchContext+0xa4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <vTaskSwitchContext+0xa8>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043b8:	e041      	b.n	800443e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <vTaskSwitchContext+0xa8>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <vTaskSwitchContext+0xac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e010      	b.n	80043ea <vTaskSwitchContext+0x46>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <vTaskSwitchContext+0x3e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	491a      	ldr	r1, [pc, #104]	; (8004454 <vTaskSwitchContext+0xb0>)
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0e4      	beq.n	80043c8 <vTaskSwitchContext+0x24>
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a12      	ldr	r2, [pc, #72]	; (8004454 <vTaskSwitchContext+0xb0>)
 800440a:	4413      	add	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3308      	adds	r3, #8
 8004420:	429a      	cmp	r2, r3
 8004422:	d104      	bne.n	800442e <vTaskSwitchContext+0x8a>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <vTaskSwitchContext+0xb4>)
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <vTaskSwitchContext+0xac>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6013      	str	r3, [r2, #0]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	20000c90 	.word	0x20000c90
 800444c:	20000c7c 	.word	0x20000c7c
 8004450:	20000c70 	.word	0x20000c70
 8004454:	20000798 	.word	0x20000798
 8004458:	20000794 	.word	0x20000794

0800445c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <vTaskPlaceOnEventList+0x44>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3318      	adds	r3, #24
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe fb28 	bl	8002ae0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004490:	2101      	movs	r1, #1
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f000 fb88 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000794 	.word	0x20000794

080044a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	617b      	str	r3, [r7, #20]
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3318      	adds	r3, #24
 80044d2:	4619      	mov	r1, r3
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7fe fae0 	bl	8002a9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f000 fb5d 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
	}
 80044ee:	bf00      	nop
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000794 	.word	0x20000794

080044fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	3318      	adds	r3, #24
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fb0f 	bl	8002b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <xTaskRemoveFromEventList+0xb0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11d      	bne.n	8004576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fb06 	bl	8002b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <xTaskRemoveFromEventList+0xb4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <xTaskRemoveFromEventList+0x5c>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <xTaskRemoveFromEventList+0xb4>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <xTaskRemoveFromEventList+0xb8>)
 8004566:	441a      	add	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe fa93 	bl	8002a9a <vListInsertEnd>
 8004574:	e005      	b.n	8004582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3318      	adds	r3, #24
 800457a:	4619      	mov	r1, r3
 800457c:	480e      	ldr	r0, [pc, #56]	; (80045b8 <xTaskRemoveFromEventList+0xbc>)
 800457e:	f7fe fa8c 	bl	8002a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <xTaskRemoveFromEventList+0xc0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d905      	bls.n	800459c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <xTaskRemoveFromEventList+0xc4>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e001      	b.n	80045a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80045a0:	697b      	ldr	r3, [r7, #20]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000c90 	.word	0x20000c90
 80045b0:	20000c70 	.word	0x20000c70
 80045b4:	20000798 	.word	0x20000798
 80045b8:	20000c28 	.word	0x20000c28
 80045bc:	20000794 	.word	0x20000794
 80045c0:	20000c7c 	.word	0x20000c7c

080045c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <vTaskInternalSetTimeOutState+0x24>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <vTaskInternalSetTimeOutState+0x28>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000c80 	.word	0x20000c80
 80045ec:	20000c6c 	.word	0x20000c6c

080045f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004632:	f000 ff01 	bl	8005438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <xTaskCheckForTimeOut+0xbc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d102      	bne.n	8004656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e023      	b.n	800469e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <xTaskCheckForTimeOut+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d007      	beq.n	8004672 <xTaskCheckForTimeOut+0x82>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e015      	b.n	800469e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	d20b      	bcs.n	8004694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff9b 	bl	80045c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e004      	b.n	800469e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800469a:	2301      	movs	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800469e:	f000 fefb 	bl	8005498 <vPortExitCritical>

	return xReturn;
 80046a2:	69fb      	ldr	r3, [r7, #28]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000c6c 	.word	0x20000c6c
 80046b0:	20000c80 	.word	0x20000c80

080046b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <vTaskMissedYield+0x14>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000c7c 	.word	0x20000c7c

080046cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046d4:	f000 f852 	bl	800477c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <prvIdleTask+0x28>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d9f9      	bls.n	80046d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <prvIdleTask+0x2c>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046f0:	e7f0      	b.n	80046d4 <prvIdleTask+0x8>
 80046f2:	bf00      	nop
 80046f4:	20000798 	.word	0x20000798
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e00c      	b.n	8004722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <prvInitialiseTaskLists+0x60>)
 8004714:	4413      	add	r3, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f994 	bl	8002a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b37      	cmp	r3, #55	; 0x37
 8004726:	d9ef      	bls.n	8004708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004728:	480d      	ldr	r0, [pc, #52]	; (8004760 <prvInitialiseTaskLists+0x64>)
 800472a:	f7fe f98b 	bl	8002a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800472e:	480d      	ldr	r0, [pc, #52]	; (8004764 <prvInitialiseTaskLists+0x68>)
 8004730:	f7fe f988 	bl	8002a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004734:	480c      	ldr	r0, [pc, #48]	; (8004768 <prvInitialiseTaskLists+0x6c>)
 8004736:	f7fe f985 	bl	8002a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800473a:	480c      	ldr	r0, [pc, #48]	; (800476c <prvInitialiseTaskLists+0x70>)
 800473c:	f7fe f982 	bl	8002a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004740:	480b      	ldr	r0, [pc, #44]	; (8004770 <prvInitialiseTaskLists+0x74>)
 8004742:	f7fe f97f 	bl	8002a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <prvInitialiseTaskLists+0x78>)
 8004748:	4a05      	ldr	r2, [pc, #20]	; (8004760 <prvInitialiseTaskLists+0x64>)
 800474a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <prvInitialiseTaskLists+0x7c>)
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <prvInitialiseTaskLists+0x68>)
 8004750:	601a      	str	r2, [r3, #0]
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000798 	.word	0x20000798
 8004760:	20000bf8 	.word	0x20000bf8
 8004764:	20000c0c 	.word	0x20000c0c
 8004768:	20000c28 	.word	0x20000c28
 800476c:	20000c3c 	.word	0x20000c3c
 8004770:	20000c54 	.word	0x20000c54
 8004774:	20000c20 	.word	0x20000c20
 8004778:	20000c24 	.word	0x20000c24

0800477c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004782:	e019      	b.n	80047b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004784:	f000 fe58 	bl	8005438 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <prvCheckTasksWaitingTermination+0x50>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe f9db 	bl	8002b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <prvCheckTasksWaitingTermination+0x54>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3b01      	subs	r3, #1
 80047a0:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <prvCheckTasksWaitingTermination+0x54>)
 80047a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047ae:	f000 fe73 	bl	8005498 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f810 	bl	80047d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e1      	bne.n	8004784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000c3c 	.word	0x20000c3c
 80047d0:	20000c68 	.word	0x20000c68
 80047d4:	20000c50 	.word	0x20000c50

080047d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 ffe8 	bl	80057c4 <vPortFree>
				vPortFree( pxTCB );
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 ffe5 	bl	80057c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047fa:	e018      	b.n	800482e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004802:	2b01      	cmp	r3, #1
 8004804:	d103      	bne.n	800480e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ffdc 	bl	80057c4 <vPortFree>
	}
 800480c:	e00f      	b.n	800482e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004814:	2b02      	cmp	r3, #2
 8004816:	d00a      	beq.n	800482e <prvDeleteTCB+0x56>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <prvDeleteTCB+0x54>
	}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <prvResetNextTaskUnblockTime+0x40>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <prvResetNextTaskUnblockTime+0x14>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <prvResetNextTaskUnblockTime+0x16>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvResetNextTaskUnblockTime+0x44>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800485a:	e008      	b.n	800486e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <prvResetNextTaskUnblockTime+0x40>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4a04      	ldr	r2, [pc, #16]	; (800487c <prvResetNextTaskUnblockTime+0x44>)
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	20000c20 	.word	0x20000c20
 800487c:	20000c88 	.word	0x20000c88

08004880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <xTaskGetSchedulerState+0x34>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800488e:	2301      	movs	r3, #1
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	e008      	b.n	80048a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <xTaskGetSchedulerState+0x38>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800489c:	2302      	movs	r3, #2
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e001      	b.n	80048a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048a6:	687b      	ldr	r3, [r7, #4]
	}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000c74 	.word	0x20000c74
 80048b8:	20000c90 	.word	0x20000c90

080048bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d056      	beq.n	8004980 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4b2d      	ldr	r3, [pc, #180]	; (800498c <xTaskPriorityInherit+0xd0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	429a      	cmp	r2, r3
 80048de:	d246      	bcs.n	800496e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db06      	blt.n	80048f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	4b28      	ldr	r3, [pc, #160]	; (800498c <xTaskPriorityInherit+0xd0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6959      	ldr	r1, [r3, #20]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4a22      	ldr	r2, [pc, #136]	; (8004990 <xTaskPriorityInherit+0xd4>)
 8004908:	4413      	add	r3, r2
 800490a:	4299      	cmp	r1, r3
 800490c:	d101      	bne.n	8004912 <xTaskPriorityInherit+0x56>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xTaskPriorityInherit+0x58>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d022      	beq.n	800495e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe f917 	bl	8002b50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <xTaskPriorityInherit+0xd0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b18      	ldr	r3, [pc, #96]	; (8004994 <xTaskPriorityInherit+0xd8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <xTaskPriorityInherit+0x84>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <xTaskPriorityInherit+0xd8>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a10      	ldr	r2, [pc, #64]	; (8004990 <xTaskPriorityInherit+0xd4>)
 800494e:	441a      	add	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe f89f 	bl	8002a9a <vListInsertEnd>
 800495c:	e004      	b.n	8004968 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <xTaskPriorityInherit+0xd0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e008      	b.n	8004980 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <xTaskPriorityInherit+0xd0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	429a      	cmp	r2, r3
 800497a:	d201      	bcs.n	8004980 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004980:	68fb      	ldr	r3, [r7, #12]
	}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000794 	.word	0x20000794
 8004990:	20000798 	.word	0x20000798
 8004994:	20000c70 	.word	0x20000c70

08004998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d056      	beq.n	8004a5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ae:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <xTaskPriorityDisinherit+0xd0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d00a      	beq.n	80049ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	60bb      	str	r3, [r7, #8]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d02c      	beq.n	8004a5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d128      	bne.n	8004a5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f89e 	bl	8002b50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <xTaskPriorityDisinherit+0xd4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <xTaskPriorityDisinherit+0xa4>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <xTaskPriorityDisinherit+0xd4>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <xTaskPriorityDisinherit+0xd8>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe f821 	bl	8002a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
	}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000794 	.word	0x20000794
 8004a6c:	20000c70 	.word	0x20000c70
 8004a70:	20000798 	.word	0x20000798

08004a74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d06f      	beq.n	8004b6c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d902      	bls.n	8004aba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e002      	b.n	8004ac0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d050      	beq.n	8004b6c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d14b      	bne.n	8004b6c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10a      	bne.n	8004af4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	60bb      	str	r3, [r7, #8]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db04      	blt.n	8004b12 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	6959      	ldr	r1, [r3, #20]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004b22:	4413      	add	r3, r2
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d101      	bne.n	8004b2c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01c      	beq.n	8004b6c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe f80a 	bl	8002b50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d903      	bls.n	8004b50 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4a06      	ldr	r2, [pc, #24]	; (8004b78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004b5e:	441a      	add	r2, r3
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f7fd ff97 	bl	8002a9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b6c:	bf00      	nop
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000794 	.word	0x20000794
 8004b78:	20000798 	.word	0x20000798
 8004b7c:	20000c70 	.word	0x20000c70

08004b80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b92:	3201      	adds	r2, #1
 8004b94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004b96:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b98:	681b      	ldr	r3, [r3, #0]
	}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000794 	.word	0x20000794

08004ba8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd ffc6 	bl	8002b50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d10a      	bne.n	8004be2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4819      	ldr	r0, [pc, #100]	; (8004c40 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bdc:	f7fd ff5d 	bl	8002a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004be0:	e026      	b.n	8004c30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d209      	bcs.n	8004c0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f7fd ff6a 	bl	8002ae0 <vListInsert>
}
 8004c0c:	e010      	b.n	8004c30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f7fd ff60 	bl	8002ae0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d202      	bcs.n	8004c30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c2a:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000c6c 	.word	0x20000c6c
 8004c3c:	20000794 	.word	0x20000794
 8004c40:	20000c54 	.word	0x20000c54
 8004c44:	20000c24 	.word	0x20000c24
 8004c48:	20000c20 	.word	0x20000c20
 8004c4c:	20000c88 	.word	0x20000c88

08004c50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c5a:	f000 facb 	bl	80051f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <xTimerCreateTimerTask+0x80>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d021      	beq.n	8004caa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c6e:	1d3a      	adds	r2, r7, #4
 8004c70:	f107 0108 	add.w	r1, r7, #8
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fec9 	bl	8002a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	9202      	str	r2, [sp, #8]
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	460a      	mov	r2, r1
 8004c90:	4910      	ldr	r1, [pc, #64]	; (8004cd4 <xTimerCreateTimerTask+0x84>)
 8004c92:	4811      	ldr	r0, [pc, #68]	; (8004cd8 <xTimerCreateTimerTask+0x88>)
 8004c94:	f7fe ffca 	bl	8003c2c <xTaskCreateStatic>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <xTimerCreateTimerTask+0x8c>)
 8004c9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <xTimerCreateTimerTask+0x8c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000cc4 	.word	0x20000cc4
 8004cd4:	08005ae4 	.word	0x08005ae4
 8004cd8:	08004dfd 	.word	0x08004dfd
 8004cdc:	20000cc8 	.word	0x20000cc8

08004ce0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <xTimerGenericCommand+0x98>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02a      	beq.n	8004d6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	dc18      	bgt.n	8004d5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d28:	f7ff fdaa 	bl	8004880 <xTaskGetSchedulerState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d109      	bne.n	8004d46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <xTimerGenericCommand+0x98>)
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	f107 0110 	add.w	r1, r7, #16
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3e:	f7fe f8db 	bl	8002ef8 <xQueueGenericSend>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24
 8004d44:	e012      	b.n	8004d6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <xTimerGenericCommand+0x98>)
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	f107 0110 	add.w	r1, r7, #16
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2200      	movs	r2, #0
 8004d52:	f7fe f8d1 	bl	8002ef8 <xQueueGenericSend>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24
 8004d58:	e008      	b.n	8004d6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <xTimerGenericCommand+0x98>)
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	f107 0110 	add.w	r1, r7, #16
 8004d62:	2300      	movs	r3, #0
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	f7fe f9c5 	bl	80030f4 <xQueueGenericSendFromISR>
 8004d6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000cc4 	.word	0x20000cc4

08004d7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <prvProcessExpiredTimer+0x7c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd fedb 	bl	8002b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d122      	bne.n	8004de8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	18d1      	adds	r1, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f000 f8c8 	bl	8004f44 <prvInsertTimerInActiveList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7ff ff8b 	bl	8004ce0 <xTimerGenericCommand>
 8004dca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	6978      	ldr	r0, [r7, #20]
 8004dee:	4798      	blx	r3
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000cbc 	.word	0x20000cbc

08004dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f857 	bl	8004ebc <prvGetNextExpireTime>
 8004e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f803 	bl	8004e20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e1a:	f000 f8d5 	bl	8004fc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e1e:	e7f1      	b.n	8004e04 <prvTimerTask+0x8>

08004e20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e2a:	f7ff f931 	bl	8004090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f866 	bl	8004f04 <prvSampleTimeNow>
 8004e38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d130      	bne.n	8004ea2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <prvProcessTimerOrBlockTask+0x3c>
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d806      	bhi.n	8004e5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e4e:	f7ff f92d 	bl	80040ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ff91 	bl	8004d7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e5a:	e024      	b.n	8004ea6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <prvProcessTimerOrBlockTask+0x90>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <prvProcessTimerOrBlockTask+0x94>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7fe fe9f 	bl	8003bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e86:	f7ff f911 	bl	80040ac <xTaskResumeAll>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <prvProcessTimerOrBlockTask+0x98>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
}
 8004ea0:	e001      	b.n	8004ea6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ea2:	f7ff f903 	bl	80040ac <xTaskResumeAll>
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000cc0 	.word	0x20000cc0
 8004eb4:	20000cc4 	.word	0x20000cc4
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <prvGetNextExpireTime+0x44>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <prvGetNextExpireTime+0x44>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e001      	b.n	8004ef2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000cbc 	.word	0x20000cbc

08004f04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f0c:	f7ff f96c 	bl	80041e8 <xTaskGetTickCount>
 8004f10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <prvSampleTimeNow+0x3c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d205      	bcs.n	8004f28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f1c:	f000 f908 	bl	8005130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <prvSampleTimeNow+0x3c>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000ccc 	.word	0x20000ccc

08004f44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d812      	bhi.n	8004f90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d302      	bcc.n	8004f7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e01b      	b.n	8004fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <prvInsertTimerInActiveList+0x7c>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7fd fda9 	bl	8002ae0 <vListInsert>
 8004f8e:	e012      	b.n	8004fb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d206      	bcs.n	8004fa6 <prvInsertTimerInActiveList+0x62>
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d302      	bcc.n	8004fa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	e007      	b.n	8004fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <prvInsertTimerInActiveList+0x80>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f7fd fd95 	bl	8002ae0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fb6:	697b      	ldr	r3, [r7, #20]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000cc0 	.word	0x20000cc0
 8004fc4:	20000cbc 	.word	0x20000cbc

08004fc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08e      	sub	sp, #56	; 0x38
 8004fcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fce:	e09d      	b.n	800510c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da18      	bge.n	8005008 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	3304      	adds	r3, #4
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	61fb      	str	r3, [r7, #28]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffe:	6850      	ldr	r0, [r2, #4]
 8005000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005002:	6892      	ldr	r2, [r2, #8]
 8005004:	4611      	mov	r1, r2
 8005006:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	db7e      	blt.n	800510c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fd fd96 	bl	8002b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005024:	463b      	mov	r3, r7
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff6c 	bl	8004f04 <prvSampleTimeNow>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b09      	cmp	r3, #9
 8005032:	d86a      	bhi.n	800510a <prvProcessReceivedCommands+0x142>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <prvProcessReceivedCommands+0x74>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005065 	.word	0x08005065
 8005040:	08005065 	.word	0x08005065
 8005044:	08005065 	.word	0x08005065
 8005048:	0800510d 	.word	0x0800510d
 800504c:	080050c1 	.word	0x080050c1
 8005050:	080050f9 	.word	0x080050f9
 8005054:	08005065 	.word	0x08005065
 8005058:	08005065 	.word	0x08005065
 800505c:	0800510d 	.word	0x0800510d
 8005060:	080050c1 	.word	0x080050c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	18d1      	adds	r1, r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	f7ff ff67 	bl	8004f44 <prvInsertTimerInActiveList>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d047      	beq.n	800510c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005082:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d13f      	bne.n	800510c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	441a      	add	r2, r3
 8005094:	2300      	movs	r3, #0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2300      	movs	r3, #0
 800509a:	2100      	movs	r1, #0
 800509c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509e:	f7ff fe1f 	bl	8004ce0 <xTimerGenericCommand>
 80050a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d130      	bne.n	800510c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61bb      	str	r3, [r7, #24]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	617b      	str	r3, [r7, #20]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	18d1      	adds	r1, r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f2:	f7ff ff27 	bl	8004f44 <prvInsertTimerInActiveList>
					break;
 80050f6:	e009      	b.n	800510c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005104:	f000 fb5e 	bl	80057c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005108:	e000      	b.n	800510c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800510a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <prvProcessReceivedCommands+0x164>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1d39      	adds	r1, r7, #4
 8005112:	2200      	movs	r2, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe f913 	bl	8003340 <xQueueReceive>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	f47f af57 	bne.w	8004fd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	3730      	adds	r7, #48	; 0x30
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000cc4 	.word	0x20000cc4

08005130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005136:	e045      	b.n	80051c4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005138:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <prvSwitchTimerLists+0xbc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005142:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <prvSwitchTimerLists+0xbc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3304      	adds	r3, #4
 8005150:	4618      	mov	r0, r3
 8005152:	f7fd fcfd 	bl	8002b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d12e      	bne.n	80051c4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d90e      	bls.n	8005196 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <prvSwitchTimerLists+0xbc>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fd fca6 	bl	8002ae0 <vListInsert>
 8005194:	e016      	b.n	80051c4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005196:	2300      	movs	r3, #0
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	2100      	movs	r1, #0
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fd9d 	bl	8004ce0 <xTimerGenericCommand>
 80051a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <prvSwitchTimerLists+0xbc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1b4      	bne.n	8005138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <prvSwitchTimerLists+0xbc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvSwitchTimerLists+0xbc>)
 80051da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6013      	str	r3, [r2, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000cbc 	.word	0x20000cbc
 80051f0:	20000cc0 	.word	0x20000cc0

080051f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051fa:	f000 f91d 	bl	8005438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d120      	bne.n	8005248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005206:	4814      	ldr	r0, [pc, #80]	; (8005258 <prvCheckForValidListAndQueue+0x64>)
 8005208:	f7fd fc1c 	bl	8002a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800520c:	4813      	ldr	r0, [pc, #76]	; (800525c <prvCheckForValidListAndQueue+0x68>)
 800520e:	f7fd fc19 	bl	8002a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005212:	4b13      	ldr	r3, [pc, #76]	; (8005260 <prvCheckForValidListAndQueue+0x6c>)
 8005214:	4a10      	ldr	r2, [pc, #64]	; (8005258 <prvCheckForValidListAndQueue+0x64>)
 8005216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <prvCheckForValidListAndQueue+0x70>)
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <prvCheckForValidListAndQueue+0x68>)
 800521c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800521e:	2300      	movs	r3, #0
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <prvCheckForValidListAndQueue+0x74>)
 8005224:	4a11      	ldr	r2, [pc, #68]	; (800526c <prvCheckForValidListAndQueue+0x78>)
 8005226:	2110      	movs	r1, #16
 8005228:	200a      	movs	r0, #10
 800522a:	f7fd fd23 	bl	8002c74 <xQueueGenericCreateStatic>
 800522e:	4603      	mov	r3, r0
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <prvCheckForValidListAndQueue+0x60>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	490b      	ldr	r1, [pc, #44]	; (8005270 <prvCheckForValidListAndQueue+0x7c>)
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fc6c 	bl	8003b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005248:	f000 f926 	bl	8005498 <vPortExitCritical>
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000cc4 	.word	0x20000cc4
 8005258:	20000c94 	.word	0x20000c94
 800525c:	20000ca8 	.word	0x20000ca8
 8005260:	20000cbc 	.word	0x20000cbc
 8005264:	20000cc0 	.word	0x20000cc0
 8005268:	20000d70 	.word	0x20000d70
 800526c:	20000cd0 	.word	0x20000cd0
 8005270:	08005aec 	.word	0x08005aec

08005274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b04      	subs	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <pxPortInitialiseStack+0x54>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b14      	subs	r3, #20
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b20      	subs	r3, #32
 80052ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	080052cd 	.word	0x080052cd

080052cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <prvTaskExitError+0x54>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052de:	d00a      	beq.n	80052f6 <prvTaskExitError+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <prvTaskExitError+0x28>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800530a:	bf00      	nop
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0fc      	beq.n	800530c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	2000000c 	.word	0x2000000c
	...

08005330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <pxCurrentTCBConst2>)
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6808      	ldr	r0, [r1, #0]
 8005336:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800533a:	f380 8809 	msr	PSP, r0
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8811 	msr	BASEPRI, r0
 800534a:	f04e 0e0d 	orr.w	lr, lr, #13
 800534e:	4770      	bx	lr

08005350 <pxCurrentTCBConst2>:
 8005350:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop

08005358 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005358:	4806      	ldr	r0, [pc, #24]	; (8005374 <prvPortStartFirstTask+0x1c>)
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	6800      	ldr	r0, [r0, #0]
 800535e:	f380 8808 	msr	MSP, r0
 8005362:	b662      	cpsie	i
 8005364:	b661      	cpsie	f
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	df00      	svc	0
 8005370:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005372:	bf00      	nop
 8005374:	e000ed08 	.word	0xe000ed08

08005378 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <xPortStartScheduler+0xac>)
 8005380:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <xPortStartScheduler+0xb0>)
 80053a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <xPortStartScheduler+0xb4>)
 80053a8:	2207      	movs	r2, #7
 80053aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ac:	e009      	b.n	80053c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053ae:	4b1f      	ldr	r3, [pc, #124]	; (800542c <xPortStartScheduler+0xb4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <xPortStartScheduler+0xb4>)
 80053b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d0ef      	beq.n	80053ae <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <xPortStartScheduler+0xb4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <xPortStartScheduler+0xb4>)
 80053d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d8:	4b14      	ldr	r3, [pc, #80]	; (800542c <xPortStartScheduler+0xb4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053e0:	4a12      	ldr	r2, [pc, #72]	; (800542c <xPortStartScheduler+0xb4>)
 80053e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xPortStartScheduler+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <xPortStartScheduler+0xb8>)
 80053f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <xPortStartScheduler+0xb8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <xPortStartScheduler+0xb8>)
 80053fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005404:	f000 f8ba 	bl	800557c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <xPortStartScheduler+0xbc>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800540e:	f7ff ffa3 	bl	8005358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005412:	f7fe ffc7 	bl	80043a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005416:	f7ff ff59 	bl	80052cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	e000e400 	.word	0xe000e400
 8005428:	20000dc0 	.word	0x20000dc0
 800542c:	20000dc4 	.word	0x20000dc4
 8005430:	e000ed20 	.word	0xe000ed20
 8005434:	2000000c 	.word	0x2000000c

08005438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <vPortEnterCritical+0x58>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	4a0d      	ldr	r2, [pc, #52]	; (8005490 <vPortEnterCritical+0x58>)
 800545a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <vPortEnterCritical+0x58>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10f      	bne.n	8005484 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <vPortEnterCritical+0x5c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <vPortEnterCritical+0x4c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	603b      	str	r3, [r7, #0]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vPortEnterCritical+0x4a>
	}
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000000c 	.word	0x2000000c
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <vPortExitCritical+0x4c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <vPortExitCritical+0x24>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	607b      	str	r3, [r7, #4]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <vPortExitCritical+0x4c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <vPortExitCritical+0x4c>)
 80054c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <vPortExitCritical+0x4c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <vPortExitCritical+0x42>
 80054ce:	2300      	movs	r3, #0
 80054d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	2000000c 	.word	0x2000000c
	...

080054f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005500:	6010      	str	r0, [r2, #0]
 8005502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800550a:	f380 8811 	msr	BASEPRI, r0
 800550e:	f7fe ff49 	bl	80043a4 <vTaskSwitchContext>
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	6808      	ldr	r0, [r1, #0]
 8005522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005526:	f380 8809 	msr	PSP, r0
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	4770      	bx	lr

08005530 <pxCurrentTCBConst>:
 8005530:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
}
 8005550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005552:	f7fe fe69 	bl	8004228 <xTaskIncrementTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <SysTick_Handler+0x40>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <vPortSetupTimerInterrupt+0x30>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <vPortSetupTimerInterrupt+0x34>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <vPortSetupTimerInterrupt+0x38>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <vPortSetupTimerInterrupt+0x3c>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <vPortSetupTimerInterrupt+0x40>)
 800559a:	3b01      	subs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <vPortSetupTimerInterrupt+0x30>)
 80055a0:	2207      	movs	r2, #7
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	e000e010 	.word	0xe000e010
 80055b0:	e000e018 	.word	0xe000e018
 80055b4:	20000000 	.word	0x20000000
 80055b8:	10624dd3 	.word	0x10624dd3
 80055bc:	e000e014 	.word	0xe000e014

080055c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055c6:	f3ef 8305 	mrs	r3, IPSR
 80055ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d914      	bls.n	80055fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055d2:	4a16      	ldr	r2, [pc, #88]	; (800562c <vPortValidateInterruptPriority+0x6c>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055dc:	4b14      	ldr	r3, [pc, #80]	; (8005630 <vPortValidateInterruptPriority+0x70>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	7afa      	ldrb	r2, [r7, #11]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d20a      	bcs.n	80055fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	607b      	str	r3, [r7, #4]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <vPortValidateInterruptPriority+0x74>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <vPortValidateInterruptPriority+0x78>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d90a      	bls.n	8005622 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	603b      	str	r3, [r7, #0]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <vPortValidateInterruptPriority+0x60>
	}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	e000e3f0 	.word	0xe000e3f0
 8005630:	20000dc0 	.word	0x20000dc0
 8005634:	e000ed0c 	.word	0xe000ed0c
 8005638:	20000dc4 	.word	0x20000dc4

0800563c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005648:	f7fe fd22 	bl	8004090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800564c:	4b58      	ldr	r3, [pc, #352]	; (80057b0 <pvPortMalloc+0x174>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005654:	f000 f910 	bl	8005878 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005658:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <pvPortMalloc+0x178>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 808e 	bne.w	8005782 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01d      	beq.n	80056a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800566c:	2208      	movs	r2, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b00      	cmp	r3, #0
 800567c:	d014      	beq.n	80056a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	3308      	adds	r3, #8
 8005686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <pvPortMalloc+0x6c>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	617b      	str	r3, [r7, #20]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d069      	beq.n	8005782 <pvPortMalloc+0x146>
 80056ae:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <pvPortMalloc+0x17c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d864      	bhi.n	8005782 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056b8:	4b40      	ldr	r3, [pc, #256]	; (80057bc <pvPortMalloc+0x180>)
 80056ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056bc:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <pvPortMalloc+0x180>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c2:	e004      	b.n	80056ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <pvPortMalloc+0xa4>
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f1      	bne.n	80056c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056e0:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <pvPortMalloc+0x174>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d04b      	beq.n	8005782 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2208      	movs	r2, #8
 80056f0:	4413      	add	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	2308      	movs	r3, #8
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	429a      	cmp	r2, r3
 800570a:	d91f      	bls.n	800574c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <pvPortMalloc+0xf8>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	613b      	str	r3, [r7, #16]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f000 f8f8 	bl	800593c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <pvPortMalloc+0x17c>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <pvPortMalloc+0x17c>)
 8005758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <pvPortMalloc+0x17c>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <pvPortMalloc+0x184>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d203      	bcs.n	800576e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <pvPortMalloc+0x17c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <pvPortMalloc+0x184>)
 800576c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <pvPortMalloc+0x178>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	431a      	orrs	r2, r3
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005782:	f7fe fc93 	bl	80040ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <pvPortMalloc+0x16a>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60fb      	str	r3, [r7, #12]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <pvPortMalloc+0x168>
	return pvReturn;
 80057a6:	69fb      	ldr	r3, [r7, #28]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20001dd0 	.word	0x20001dd0
 80057b4:	20001ddc 	.word	0x20001ddc
 80057b8:	20001dd4 	.word	0x20001dd4
 80057bc:	20001dc8 	.word	0x20001dc8
 80057c0:	20001dd8 	.word	0x20001dd8

080057c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d048      	beq.n	8005868 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057d6:	2308      	movs	r3, #8
 80057d8:	425b      	negs	r3, r3
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <vPortFree+0xac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <vPortFree+0x44>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <vPortFree+0x62>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60bb      	str	r3, [r7, #8]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <vPortFree+0xac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d019      	beq.n	8005868 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <vPortFree+0xac>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800584c:	f7fe fc20 	bl	8004090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <vPortFree+0xb0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4413      	add	r3, r2
 800585a:	4a06      	ldr	r2, [pc, #24]	; (8005874 <vPortFree+0xb0>)
 800585c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800585e:	6938      	ldr	r0, [r7, #16]
 8005860:	f000 f86c 	bl	800593c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005864:	f7fe fc22 	bl	80040ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005868:	bf00      	nop
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20001ddc 	.word	0x20001ddc
 8005874:	20001dd4 	.word	0x20001dd4

08005878 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800587e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005882:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <prvHeapInit+0xac>)
 8005886:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3307      	adds	r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <prvHeapInit+0xac>)
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <prvHeapInit+0xb0>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <prvHeapInit+0xb0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4413      	add	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058c4:	2208      	movs	r2, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0307 	bic.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <prvHeapInit+0xb4>)
 80058d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <prvHeapInit+0xb4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <prvHeapInit+0xb4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <prvHeapInit+0xb4>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <prvHeapInit+0xb8>)
 8005906:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a09      	ldr	r2, [pc, #36]	; (8005934 <prvHeapInit+0xbc>)
 800590e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <prvHeapInit+0xc0>)
 8005912:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000dc8 	.word	0x20000dc8
 8005928:	20001dc8 	.word	0x20001dc8
 800592c:	20001dd0 	.word	0x20001dd0
 8005930:	20001dd8 	.word	0x20001dd8
 8005934:	20001dd4 	.word	0x20001dd4
 8005938:	20001ddc 	.word	0x20001ddc

0800593c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005944:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <prvInsertBlockIntoFreeList+0xa8>)
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e002      	b.n	8005950 <prvInsertBlockIntoFreeList+0x14>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d8f7      	bhi.n	800594a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4413      	add	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d108      	bne.n	800597e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d118      	bne.n	80059c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvInsertBlockIntoFreeList+0xac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d00d      	beq.n	80059ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e008      	b.n	80059cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <prvInsertBlockIntoFreeList+0xac>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e003      	b.n	80059cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d002      	beq.n	80059da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	20001dc8 	.word	0x20001dc8
 80059e8:	20001dd0 	.word	0x20001dd0

080059ec <memset>:
 80059ec:	4603      	mov	r3, r0
 80059ee:	4402      	add	r2, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	2600      	movs	r6, #0
 8005a00:	4d0c      	ldr	r5, [pc, #48]	; (8005a34 <__libc_init_array+0x38>)
 8005a02:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	f000 f828 	bl	8005a60 <_init>
 8005a10:	2600      	movs	r6, #0
 8005a12:	4d0a      	ldr	r5, [pc, #40]	; (8005a3c <__libc_init_array+0x40>)
 8005a14:	4c0a      	ldr	r4, [pc, #40]	; (8005a40 <__libc_init_array+0x44>)
 8005a16:	1b64      	subs	r4, r4, r5
 8005a18:	10a4      	asrs	r4, r4, #2
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08005c20 	.word	0x08005c20
 8005a38:	08005c20 	.word	0x08005c20
 8005a3c:	08005c20 	.word	0x08005c20
 8005a40:	08005c24 	.word	0x08005c24

08005a44 <memcpy>:
 8005a44:	440a      	add	r2, r1
 8005a46:	4291      	cmp	r1, r2
 8005a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a4c:	d100      	bne.n	8005a50 <memcpy+0xc>
 8005a4e:	4770      	bx	lr
 8005a50:	b510      	push	{r4, lr}
 8005a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a56:	4291      	cmp	r1, r2
 8005a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5c:	d1f9      	bne.n	8005a52 <memcpy+0xe>
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <_init>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr

08005a6c <_fini>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr
