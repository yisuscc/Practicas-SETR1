
Practica3Fase4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800aa68  0800aa68  0001aa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae4c  0800ae4c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae54  0800ae54  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae58  0800ae58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ae5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  200001d4  0800b030  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800b030  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d36f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba5  00000000  00000000  0003d5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00041160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c5  00000000  00000000  00042c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5cd  00000000  00000000  000440f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fbbf  00000000  00000000  0006f6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108e79  00000000  00000000  0008f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084a8  00000000  00000000  001980fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001a05a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa50 	.word	0x0800aa50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800aa50 	.word	0x0800aa50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HTS221_UpdateCalibration>:

#define HTS_T1_OUT_LSB 0x3E
#define HTS_T1_OUT_MSB 0x3F


void HTS221_UpdateCalibration(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af04      	add	r7, sp, #16
	uint8_t buffer;
	uint8_t tempMSB;


	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	21be      	movs	r1, #190	; 0xbe
 8000ebe:	48ad      	ldr	r0, [pc, #692]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000ec0:	f003 fca4 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.H0_rH_x2 = buffer / 2.0f;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ece:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed6:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8000ed8:	edc3 7a00 	vstr	s15, [r3]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2231      	movs	r2, #49	; 0x31
 8000eee:	21be      	movs	r1, #190	; 0xbe
 8000ef0:	48a0      	ldr	r0, [pc, #640]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000ef2:	f003 fc8b 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.H1_rH_x2 = buffer / 2.0f;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f08:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8000f0a:	edc3 7a01 	vstr	s15, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_T0_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	2235      	movs	r2, #53	; 0x35
 8000f20:	21be      	movs	r1, #190	; 0xbe
 8000f22:	4894      	ldr	r0, [pc, #592]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000f24:	f003 fc72 	bl	800480c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2232      	movs	r2, #50	; 0x32
 8000f3a:	21be      	movs	r1, #190	; 0xbe
 8000f3c:	488d      	ldr	r0, [pc, #564]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000f3e:	f003 fc65 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.T0_degC_x8 = (((tempMSB & 0x03) <<8) |  buffer) / 8.0f ;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5e:	4b86      	ldr	r3, [pc, #536]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8000f60:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	2233      	movs	r2, #51	; 0x33
 8000f76:	21be      	movs	r1, #190	; 0xbe
 8000f78:	487e      	ldr	r0, [pc, #504]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000f7a:	f003 fc47 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.T1_degC_x8 =  (((tempMSB & 0x0C) <<6) |  buffer) / 8.0f ;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f92:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	4b77      	ldr	r3, [pc, #476]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8000f9c:	edc3 7a03 	vstr	s15, [r3, #12]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2236      	movs	r2, #54	; 0x36
 8000fb2:	21be      	movs	r1, #190	; 0xbe
 8000fb4:	486f      	ldr	r0, [pc, #444]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000fb6:	f003 fc29 	bl	800480c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2237      	movs	r2, #55	; 0x37
 8000fcc:	21be      	movs	r1, #190	; 0xbe
 8000fce:	4869      	ldr	r0, [pc, #420]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000fd0:	f003 fc1c 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.H0_T0_OUT = (tempMSB <<8) |  buffer;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b65      	ldr	r3, [pc, #404]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8000fe4:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	223a      	movs	r2, #58	; 0x3a
 8000ff8:	21be      	movs	r1, #190	; 0xbe
 8000ffa:	485e      	ldr	r0, [pc, #376]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8000ffc:	f003 fc06 	bl	800480c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	223b      	movs	r2, #59	; 0x3b
 8001012:	21be      	movs	r1, #190	; 0xbe
 8001014:	4857      	ldr	r0, [pc, #348]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8001016:	f003 fbf9 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.H1_T0_OUT = (tempMSB <<8) |  buffer;
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 800102a:	825a      	strh	r2, [r3, #18]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	223c      	movs	r2, #60	; 0x3c
 800103e:	21be      	movs	r1, #190	; 0xbe
 8001040:	484c      	ldr	r0, [pc, #304]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8001042:	f003 fbe3 	bl	800480c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	223d      	movs	r2, #61	; 0x3d
 8001058:	21be      	movs	r1, #190	; 0xbe
 800105a:	4846      	ldr	r0, [pc, #280]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 800105c:	f003 fbd6 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.T0_OUT = (tempMSB <<8) |  buffer;
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001070:	829a      	strh	r2, [r3, #20]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	223e      	movs	r2, #62	; 0x3e
 8001084:	21be      	movs	r1, #190	; 0xbe
 8001086:	483b      	ldr	r0, [pc, #236]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 8001088:	f003 fbc0 	bl	800480c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	223f      	movs	r2, #63	; 0x3f
 800109e:	21be      	movs	r1, #190	; 0xbe
 80010a0:	4834      	ldr	r0, [pc, #208]	; (8001174 <HTS221_UpdateCalibration+0x2d0>)
 80010a2:	f003 fbb3 	bl	800480c <HAL_I2C_Mem_Read>
	hts_cal.T1_OUT = (tempMSB <<8) |  buffer;
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010b6:	82da      	strh	r2, [r3, #22]


	hts_cal.ha = (hts_cal.H1_rH_x2 - hts_cal.H0_rH_x2) / (hts_cal.H1_T0_OUT - hts_cal.H0_T0_OUT);
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010e6:	edc3 7a06 	vstr	s15, [r3, #24]

	hts_cal.hb = hts_cal.H0_rH_x2 - hts_cal.ha*hts_cal.H0_T0_OUT;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010f2:	edd3 6a06 	vldr	s13, [r3, #24]
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 80010f8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 800110e:	edc3 7a07 	vstr	s15, [r3, #28]

	hts_cal.ta = (hts_cal.T1_degC_x8 - hts_cal.T0_degC_x8) / (hts_cal.T1_OUT - hts_cal.T0_OUT);
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001114:	ed93 7a03 	vldr	s14, [r3, #12]
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 800111a:	edd3 7a02 	vldr	s15, [r3, #8]
 800111e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001124:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001128:	461a      	mov	r2, r3
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 800112c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001140:	edc3 7a08 	vstr	s15, [r3, #32]

	hts_cal.tb = hts_cal.T0_degC_x8 - hts_cal.ha*hts_cal.T0_OUT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001146:	ed93 7a02 	vldr	s14, [r3, #8]
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 800114c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001152:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HTS221_UpdateCalibration+0x2d4>)
 8001168:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002b8 	.word	0x200002b8
 8001178:	200001f0 	.word	0x200001f0

0800117c <HTS221_Init>:

	void HTS221_Init() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
		//0x28
		// los registros de calibración que no se deben modificaar
		// dir ox30 a 0x3F
		// en total 0x87
		uint8_t buffer[1];
		buffer[0] = 0x87;
 8001182:	2387      	movs	r3, #135	; 0x87
 8001184:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c2, 0xBE, 0x20, I2C_MEMADD_SIZE_8BIT, buffer, 1,
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2220      	movs	r2, #32
 8001198:	21be      	movs	r1, #190	; 0xbe
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <HTS221_Init+0x30>)
 800119c:	f003 fa22 	bl	80045e4 <HAL_I2C_Mem_Write>
				1000);
		HTS221_UpdateCalibration();
 80011a0:	f7ff fe80 	bl	8000ea4 <HTS221_UpdateCalibration>
	}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002b8 	.word	0x200002b8

080011b0 <HTS221_Read>:
	THSample HTS221_Read() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af04      	add	r7, sp, #16
		THSample ths;
		// leemos registros de datos
		uint8_t buffer[4];
		HAL_I2C_Mem_Read(&hi2c2, 0XBE, 0x80 | 0x28, I2C_MEMADD_SIZE_8BIT,
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2304      	movs	r3, #4
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	22a8      	movs	r2, #168	; 0xa8
 80011ca:	21be      	movs	r1, #190	; 0xbe
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <HTS221_Read+0xb0>)
 80011ce:	f003 fb1d 	bl	800480c <HAL_I2C_Mem_Read>
				buffer, 4, 1000);
		// Ensamblar medidas  en alores de 16 bits
		int16_t hum;
		int16_t temp;
		hum = (buffer[1] << 8) | buffer[0];
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	83fb      	strh	r3, [r7, #30]
		temp = (buffer[3] << 8) | buffer[2];
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7abb      	ldrb	r3, [r7, #10]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	83bb      	strh	r3, [r7, #28]
		// aplicar calibracion
		ths.hum = hts_cal.ha*hum +hts_cal.hb;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HTS221_Read+0xb4>)
 80011f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80011f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HTS221_Read+0xb4>)
 8001206:	edd3 7a07 	vldr	s15, [r3, #28]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	edc7 7a04 	vstr	s15, [r7, #16]
		ths.temp = hts_cal.ta *temp + hts_cal.tb;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HTS221_Read+0xb4>)
 8001214:	ed93 7a08 	vldr	s14, [r3, #32]
 8001218:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HTS221_Read+0xb4>)
 800122a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	edc7 7a03 	vstr	s15, [r7, #12]
		// Retornar el resultado
		return ths;
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001242:	e883 0003 	stmia.w	r3, {r0, r1}
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	ee07 2a10 	vmov	s14, r2
 800124e:	ee07 3a90 	vmov	s15, r3
	}
 8001252:	eeb0 0a47 	vmov.f32	s0, s14
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200002b8 	.word	0x200002b8
 8001264:	200001f0 	.word	0x200001f0

08001268 <LPS22_Init>:
 *      Author: jesus
 */
#include "stm32l4xx_hal.h"
extern I2C_HandleTypeDef hi2c2;

void LPS22_Init(){
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af04      	add	r7, sp, #16
// inicializamos de tal forma que la frecuenca de muestrea sea 50 hz
	// atcualizacíon post lectida  mSB y LSB
	// odr2 = 1 y bd1 = 1 resto a 0
	uint8_t buffer[1];
	buffer[0] = 0x42;
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2,0xBA,0x10, I2C_MEMADD_SIZE_8BIT,buffer,1,1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	2210      	movs	r2, #16
 8001284:	21ba      	movs	r1, #186	; 0xba
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <LPS22_Init+0x2c>)
 8001288:	f003 f9ac 	bl	80045e4 <HAL_I2C_Mem_Write>
	// escribmos en la direccion 0x10, que el esclabvo 0xBa en un buffer de 8 bits,la orden
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002b8 	.word	0x200002b8

08001298 <LPS22_ReadPress>:
float LPS22_ReadPress(){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
	float press;
	// 1 - Declarar buffer de lectura de 3 bytes.
	uint8_t buffer[3];
	// 2 - Leer los 3 bytes de la presion
	// que empiezan en la direccion ram dn 28 en hex
	HAL_I2C_Mem_Read(&hi2c2,0xBA,0x28, I2C_MEMADD_SIZE_8BIT,buffer,3,1000);
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2303      	movs	r3, #3
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	21ba      	movs	r1, #186	; 0xba
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <LPS22_ReadPress+0x58>)
 80012b4:	f003 faaa 	bl	800480c <HAL_I2C_Mem_Read>
	// 3 ensamblar 3 bytes como palabra de 24 bits.
	// bitwise or |
	uint32_t press_raw = (buffer[2]<<16) |(buffer[1]<<8) |buffer [0];
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	797b      	ldrb	r3, [r7, #5]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	4313      	orrs	r3, r2
 80012c2:	793a      	ldrb	r2, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
	// escalar la presion
	// .0F indica float ?
	press = press_raw / 4096.0f;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80012f4 <LPS22_ReadPress+0x5c>
 80012d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012da:	edc7 7a02 	vstr	s15, [r7, #8]
	return press;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002b8 	.word	0x200002b8
 80012f4:	45800000 	.word	0x45800000

080012f8 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f003 f897 	bl	8004438 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f001 fa86 	bl	800281c <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f003 f88d 	bl	8004438 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f001 fa7c 	bl	800281c <HAL_Delay>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <lcd_reset>:

void lcd_reset(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2104      	movs	r1, #4
 8001330:	4820      	ldr	r0, [pc, #128]	; (80013b4 <lcd_reset+0x8c>)
 8001332:	f003 f881 	bl	8004438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2110      	movs	r1, #16
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f003 f87b 	bl	8004438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2108      	movs	r1, #8
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f003 f875 	bl	8004438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2110      	movs	r1, #16
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <lcd_reset+0x8c>)
 8001354:	f003 f870 	bl	8004438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <lcd_reset+0x8c>)
 800135e:	f003 f86b 	bl	8004438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f003 f864 	bl	8004438 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f003 f85e 	bl	8004438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <lcd_reset+0x8c>)
 8001382:	f003 f859 	bl	8004438 <HAL_GPIO_WritePin>
    lcd_clock();
 8001386:	f7ff ffb7 	bl	80012f8 <lcd_clock>
    lcd_clock();
 800138a:	f7ff ffb5 	bl	80012f8 <lcd_clock>
    lcd_clock();
 800138e:	f7ff ffb3 	bl	80012f8 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2108      	movs	r1, #8
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f003 f84d 	bl	8004438 <HAL_GPIO_WritePin>
    lcd_clock();
 800139e:	f7ff ffab 	bl	80012f8 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f003 f845 	bl	8004438 <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	48000400 	.word	0x48000400

080013b8 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2108      	movs	r1, #8
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f003 f82b 	bl	8004438 <HAL_GPIO_WritePin>
 80013e2:	e005      	b.n	80013f0 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2108      	movs	r1, #8
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f003 f824 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	2110      	movs	r1, #16
 8001402:	4847      	ldr	r0, [pc, #284]	; (8001520 <lcd_write+0x168>)
 8001404:	f003 f818 	bl	8004438 <HAL_GPIO_WritePin>
 8001408:	e004      	b.n	8001414 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2110      	movs	r1, #16
 800140e:	4844      	ldr	r0, [pc, #272]	; (8001520 <lcd_write+0x168>)
 8001410:	f003 f812 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2102      	movs	r1, #2
 8001426:	483e      	ldr	r0, [pc, #248]	; (8001520 <lcd_write+0x168>)
 8001428:	f003 f806 	bl	8004438 <HAL_GPIO_WritePin>
 800142c:	e004      	b.n	8001438 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2102      	movs	r1, #2
 8001432:	483b      	ldr	r0, [pc, #236]	; (8001520 <lcd_write+0x168>)
 8001434:	f003 f800 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	09db      	lsrs	r3, r3, #7
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f002 fff3 	bl	8004438 <HAL_GPIO_WritePin>
 8001452:	e005      	b.n	8001460 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2110      	movs	r1, #16
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f002 ffec 	bl	8004438 <HAL_GPIO_WritePin>

    if(rs)
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2104      	movs	r1, #4
 800146a:	482d      	ldr	r0, [pc, #180]	; (8001520 <lcd_write+0x168>)
 800146c:	f002 ffe4 	bl	8004438 <HAL_GPIO_WritePin>
 8001470:	e004      	b.n	800147c <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2104      	movs	r1, #4
 8001476:	482a      	ldr	r0, [pc, #168]	; (8001520 <lcd_write+0x168>)
 8001478:	f002 ffde 	bl	8004438 <HAL_GPIO_WritePin>

    lcd_clock();
 800147c:	f7ff ff3c 	bl	80012f8 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800148a:	2201      	movs	r2, #1
 800148c:	2108      	movs	r1, #8
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f002 ffd1 	bl	8004438 <HAL_GPIO_WritePin>
 8001496:	e005      	b.n	80014a4 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2108      	movs	r1, #8
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f002 ffca 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2110      	movs	r1, #16
 80014b6:	481a      	ldr	r0, [pc, #104]	; (8001520 <lcd_write+0x168>)
 80014b8:	f002 ffbe 	bl	8004438 <HAL_GPIO_WritePin>
 80014bc:	e004      	b.n	80014c8 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <lcd_write+0x168>)
 80014c4:	f002 ffb8 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2102      	movs	r1, #2
 80014da:	4811      	ldr	r0, [pc, #68]	; (8001520 <lcd_write+0x168>)
 80014dc:	f002 ffac 	bl	8004438 <HAL_GPIO_WritePin>
 80014e0:	e004      	b.n	80014ec <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2102      	movs	r1, #2
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <lcd_write+0x168>)
 80014e8:	f002 ffa6 	bl	8004438 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2110      	movs	r1, #16
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f002 ff99 	bl	8004438 <HAL_GPIO_WritePin>
 8001506:	e005      	b.n	8001514 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f002 ff92 	bl	8004438 <HAL_GPIO_WritePin>

    lcd_clock();
 8001514:	f7ff fef0 	bl	80012f8 <lcd_clock>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	48000400 	.word	0x48000400

08001524 <lcd_clear>:

void lcd_clear(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 8001528:	2100      	movs	r1, #0
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff ff44 	bl	80013b8 <lcd_write>
    _lcd_char = 0;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <lcd_clear+0x1c>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8001536:	4b03      	ldr	r3, [pc, #12]	; (8001544 <lcd_clear+0x20>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000218 	.word	0x20000218
 8001544:	20000219 	.word	0x20000219

08001548 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	460b      	mov	r3, r1
 8001554:	71bb      	strb	r3, [r7, #6]
 8001556:	4613      	mov	r3, r2
 8001558:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	b25a      	sxtb	r2, r3
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25a      	sxtb	r2, r3
 8001570:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001574:	4313      	orrs	r3, r2
 8001576:	b25b      	sxtb	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff1b 	bl	80013b8 <lcd_write>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <ini_lcd>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ini_lcd() {
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
	lcd_reset();
 800158e:	f7ff fecb 	bl	8001328 <lcd_reset>
	lcd_display_settings(1, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff ffd6 	bl	8001548 <lcd_display_settings>
	lcd_clear();
 800159c:	f7ff ffc2 	bl	8001524 <lcd_clear>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <getButton>:
uint8_t getButton(uint16_t sample) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	// uint8_t getButton(uint32_t sample)
	// uint8_t getButton(uint16_t sample)
	//da errores si las declaramos de esta forma
	uint8_t res = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
	if (sample == 4095) {
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <getButton+0x1e>
		res = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e035      	b.n	800162e <getButton+0x8a>
	} else if (sample >= 700 && sample <= 720) {
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015c8:	d306      	bcc.n	80015d8 <getButton+0x34>
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80015d0:	d802      	bhi.n	80015d8 <getButton+0x34>
		// boton up
		res = 2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e02a      	b.n	800162e <getButton+0x8a>
	} else if (sample >= 1618 && sample <= 1630) {
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f240 6251 	movw	r2, #1617	; 0x651
 80015de:	4293      	cmp	r3, r2
 80015e0:	d907      	bls.n	80015f2 <getButton+0x4e>
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f240 625e 	movw	r2, #1630	; 0x65e
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d802      	bhi.n	80015f2 <getButton+0x4e>
		//boton down
		res = 3;
 80015ec:	2303      	movs	r3, #3
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e01d      	b.n	800162e <getButton+0x8a>
	} else if (sample >= 2380 && sample <= 2400) {
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	f640 124b 	movw	r2, #2379	; 0x94b
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d906      	bls.n	800160a <getButton+0x66>
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001602:	d802      	bhi.n	800160a <getButton+0x66>
		// boton left
		res = 4;
 8001604:	2304      	movs	r3, #4
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e011      	b.n	800162e <getButton+0x8a>
	} else if (sample >= 3350 && sample <= 3380) {
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	f640 5215 	movw	r2, #3349	; 0xd15
 8001610:	4293      	cmp	r3, r2
 8001612:	d907      	bls.n	8001624 <getButton+0x80>
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f640 5234 	movw	r2, #3380	; 0xd34
 800161a:	4293      	cmp	r3, r2
 800161c:	d802      	bhi.n	8001624 <getButton+0x80>
		// select 3366
		res = 5;
 800161e:	2305      	movs	r3, #5
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e004      	b.n	800162e <getButton+0x8a>
	} else if (sample >= 0 && sample <= 100) {
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d801      	bhi.n	800162e <getButton+0x8a>
		//boton right 000
		res = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001640:	b098      	sub	sp, #96	; 0x60
 8001642:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001644:	f001 f875 	bl	8002732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001648:	f000 f874 	bl	8001734 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800164c:	f000 f8d4 	bl	80017f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001650:	f000 fae0 	bl	8001c14 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001654:	f000 f974 	bl	8001940 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8001658:	f000 f9ea 	bl	8001a30 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800165c:	f000 fa0e 	bl	8001a7c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001660:	f000 fa7a 	bl	8001b58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001664:	f000 faa8 	bl	8001bb8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001668:	f000 f8f4 	bl	8001854 <MX_ADC1_Init>
  MX_I2C2_Init();
 800166c:	f000 f9a0 	bl	80019b0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001670:	f000 fa42 	bl	8001af8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // inicializamos el lcd
  	ini_lcd();
 8001674:	f7ff ff89 	bl	800158a <ini_lcd>
  //inicializamos el LPS22H
  	LPS22_Init();
 8001678:	f7ff fdf6 	bl	8001268 <LPS22_Init>
  	//inicializamos el HTS221_InitSs
  	HTS221_Init();
 800167c:	f7ff fd7e 	bl	800117c <HTS221_Init>
	  float temp;
	  float hum;
	  char str[40];

	  // leemos el boton
		HAL_ADC_Start(&hadc1);
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <main+0xec>)
 8001682:	f001 fc23 	bl	8002ecc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001686:	2164      	movs	r1, #100	; 0x64
 8001688:	4827      	ldr	r0, [pc, #156]	; (8001728 <main+0xec>)
 800168a:	f001 fcd9 	bl	8003040 <HAL_ADC_PollForConversion>
		uint16_t sample = HAL_ADC_GetValue(&hadc1);
 800168e:	4826      	ldr	r0, [pc, #152]	; (8001728 <main+0xec>)
 8001690:	f001 fdae 	bl	80031f0 <HAL_ADC_GetValue>
 8001694:	4603      	mov	r3, r0
 8001696:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint8_t boton = getButton(sample);
 800169a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff80 	bl	80015a4 <getButton>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	  // leemos la presion
		press = LPS22_ReadPress();
 80016aa:	f7ff fdf5 	bl	8001298 <LPS22_ReadPress>
 80016ae:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	  // leemos la temp y humedad
		THSample aux = HTS221_Read();
 80016b2:	f7ff fd7d 	bl	80011b0 <HTS221_Read>
 80016b6:	eeb0 7a40 	vmov.f32	s14, s0
 80016ba:	eef0 7a60 	vmov.f32	s15, s1
 80016be:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80016c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		temp = aux.temp;
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		hum = aux.hum;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
		// formateamos y enviamos
	  sprintf(str,"Pres:%.1hfPA T:%1fC H:%.1f%% B: %d\r\n",press,temp,hum,boton);
 80016ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016d0:	f7fe ff3a 	bl	8000548 <__aeabi_f2d>
 80016d4:	4680      	mov	r8, r0
 80016d6:	4689      	mov	r9, r1
 80016d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 80016f0:	4638      	mov	r0, r7
 80016f2:	9104      	str	r1, [sp, #16]
 80016f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016f8:	e9cd 4500 	strd	r4, r5, [sp]
 80016fc:	4642      	mov	r2, r8
 80016fe:	464b      	mov	r3, r9
 8001700:	490a      	ldr	r1, [pc, #40]	; (800172c <main+0xf0>)
 8001702:	f007 f84b 	bl	800879c <siprintf>
	  HAL_UART_Transmit(&huart1, str, strlen(str), 1000);
 8001706:	463b      	mov	r3, r7
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fdb1 	bl	8000270 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	4639      	mov	r1, r7
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <main+0xf4>)
 800171a:	f005 fb26 	bl	8006d6a <HAL_UART_Transmit>
	  // esperamos
	  	  HAL_Delay(500);
 800171e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001722:	f001 f87b 	bl	800281c <HAL_Delay>
  {
 8001726:	e7ab      	b.n	8001680 <main+0x44>
 8001728:	2000021c 	.word	0x2000021c
 800172c:	0800aa68 	.word	0x0800aa68
 8001730:	200003b4 	.word	0x200003b4

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b096      	sub	sp, #88	; 0x58
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2244      	movs	r2, #68	; 0x44
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 f88d 	bl	8008862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175a:	f003 fe27 	bl	80053ac <HAL_PWREx_ControlVoltageScaling>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001764:	f000 fbce 	bl	8001f04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001768:	f003 fe02 	bl	8005370 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <SystemClock_Config+0xc0>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <SystemClock_Config+0xc0>)
 8001774:	f023 0318 	bic.w	r3, r3, #24
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800177c:	2314      	movs	r3, #20
 800177e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001780:	2301      	movs	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001784:	2301      	movs	r3, #1
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001794:	2301      	movs	r3, #1
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800179c:	2328      	movs	r3, #40	; 0x28
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017a0:	2307      	movs	r3, #7
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 ff1d 	bl	80055f0 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017bc:	f000 fba2 	bl	8001f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2303      	movs	r3, #3
 80017c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	2104      	movs	r1, #4
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fae5 	bl	8005da8 <HAL_RCC_ClockConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017e4:	f000 fb8e 	bl	8001f04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017e8:	f004 ffec 	bl	80067c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80017ec:	bf00      	nop
 80017ee:	3758      	adds	r7, #88	; 0x58
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0a2      	sub	sp, #136	; 0x88
 80017fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2288      	movs	r2, #136	; 0x88
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f007 f82c 	bl	8008862 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800180a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800180e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001810:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001814:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001816:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800181a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001820:	2301      	movs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001824:	2318      	movs	r3, #24
 8001826:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001828:	2307      	movs	r3, #7
 800182a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001834:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001838:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fcd7 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001848:	f000 fb5c 	bl	8001f04 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3788      	adds	r7, #136	; 0x88
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <MX_ADC1_Init+0xe0>)
 8001878:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <MX_ADC1_Init+0xe4>)
 800187a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_ADC1_Init+0xe0>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <MX_ADC1_Init+0xe0>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <MX_ADC1_Init+0xe0>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <MX_ADC1_Init+0xe0>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <MX_ADC1_Init+0xe0>)
 8001896:	2204      	movs	r2, #4
 8001898:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_ADC1_Init+0xe0>)
 800189c:	2200      	movs	r2, #0
 800189e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d6:	4817      	ldr	r0, [pc, #92]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018d8:	f001 f9a8 	bl	8002c2c <HAL_ADC_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018e2:	f000 fb0f 	bl	8001f04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <MX_ADC1_Init+0xe0>)
 80018f2:	f002 f929 	bl	8003b48 <HAL_ADCEx_MultiModeConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018fc:	f000 fb02 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_ADC1_Init+0xe8>)
 8001902:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001904:	2306      	movs	r3, #6
 8001906:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800190c:	237f      	movs	r3, #127	; 0x7f
 800190e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001910:	2304      	movs	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_ADC1_Init+0xe0>)
 800191e:	f001 fc75 	bl	800320c <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001928:	f000 faec 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000021c 	.word	0x2000021c
 8001938:	50040000 	.word	0x50040000
 800193c:	3ac04000 	.word	0x3ac04000

08001940 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <MX_DFSDM1_Init+0x6c>)
 8001948:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 800194c:	2201      	movs	r2, #1
 800194e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001958:	2202      	movs	r2, #2
 800195a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 800196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001978:	2204      	movs	r2, #4
 800197a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001984:	2201      	movs	r2, #1
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_DFSDM1_Init+0x68>)
 8001996:	f002 fa99 	bl	8003ecc <HAL_DFSDM_ChannelInit>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80019a0:	f000 fab0 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000280 	.word	0x20000280
 80019ac:	40016020 	.word	0x40016020

080019b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <MX_I2C2_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <MX_I2C2_Init+0x7c>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019ec:	f002 fd5f 	bl	80044ae <HAL_I2C_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019f6:	f000 fa85 	bl	8001f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <MX_I2C2_Init+0x74>)
 80019fe:	f003 fad7 	bl	8004fb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a08:	f000 fa7c 	bl	8001f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_I2C2_Init+0x74>)
 8001a10:	f003 fb19 	bl	8005046 <HAL_I2CEx_ConfigDigitalFilter>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 fa73 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002b8 	.word	0x200002b8
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	10909cec 	.word	0x10909cec

08001a30 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <MX_QUADSPI_Init+0x48>)
 8001a38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a4e:	2217      	movs	r2, #23
 8001a50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a60:	f003 fd0a 	bl	8005478 <HAL_QSPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001a6a:	f000 fa4b 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000030c 	.word	0x2000030c
 8001a78:	a0001000 	.word	0xa0001000

08001a7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <MX_SPI3_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001a96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a9a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001aca:	2207      	movs	r2, #7
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_SPI3_Init+0x74>)
 8001adc:	f005 f854 	bl	8006b88 <HAL_SPI_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f000 fa0d 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000350 	.word	0x20000350
 8001af4:	40003c00 	.word	0x40003c00

08001af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <MX_USART1_UART_Init+0x5c>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USART1_UART_Init+0x58>)
 8001b3c:	f005 f8c7 	bl	8006cce <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b46:	f000 f9dd 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200003b4 	.word	0x200003b4
 8001b54:	40013800 	.word	0x40013800

08001b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <MX_USART3_UART_Init+0x5c>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b9c:	f005 f897 	bl	8006cce <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ba6:	f000 f9ad 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000043c 	.word	0x2000043c
 8001bb4:	40004800 	.word	0x40004800

08001bb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bc6:	2206      	movs	r2, #6
 8001bc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfc:	f003 fa6f 	bl	80050de <HAL_PCD_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c06:	f000 f97d 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004c4 	.word	0x200004c4

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2a:	4bb1      	ldr	r3, [pc, #708]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4ab0      	ldr	r2, [pc, #704]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c30:	f043 0310 	orr.w	r3, r3, #16
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4bae      	ldr	r3, [pc, #696]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	4bab      	ldr	r3, [pc, #684]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4aaa      	ldr	r2, [pc, #680]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4ba8      	ldr	r3, [pc, #672]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4ba5      	ldr	r3, [pc, #660]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4aa4      	ldr	r2, [pc, #656]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4ba2      	ldr	r3, [pc, #648]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b9f      	ldr	r3, [pc, #636]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a9e      	ldr	r2, [pc, #632]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b9c      	ldr	r3, [pc, #624]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b99      	ldr	r3, [pc, #612]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a98      	ldr	r2, [pc, #608]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b96      	ldr	r3, [pc, #600]	; (8001ef0 <MX_GPIO_Init+0x2dc>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001ca8:	4892      	ldr	r0, [pc, #584]	; (8001ef4 <MX_GPIO_Init+0x2e0>)
 8001caa:	f002 fbc5 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f248 111c 	movw	r1, #33052	; 0x811c
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f002 fbbe 	bl	8004438 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f24f 0116 	movw	r1, #61462	; 0xf016
 8001cc2:	488d      	ldr	r0, [pc, #564]	; (8001ef8 <MX_GPIO_Init+0x2e4>)
 8001cc4:	f002 fbb8 	bl	8004438 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f241 0181 	movw	r1, #4225	; 0x1081
 8001cce:	488b      	ldr	r0, [pc, #556]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001cd0:	f002 fbb2 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cda:	4888      	ldr	r0, [pc, #544]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001cdc:	f002 fbac 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001ce6:	4886      	ldr	r0, [pc, #536]	; (8001f00 <MX_GPIO_Init+0x2ec>)
 8001ce8:	f002 fba6 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2120      	movs	r1, #32
 8001cf0:	4881      	ldr	r0, [pc, #516]	; (8001ef8 <MX_GPIO_Init+0x2e4>)
 8001cf2:	f002 fba1 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	487e      	ldr	r0, [pc, #504]	; (8001ef4 <MX_GPIO_Init+0x2e0>)
 8001cfc:	f002 fb9c 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001d00:	f240 1315 	movw	r3, #277	; 0x115
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4876      	ldr	r0, [pc, #472]	; (8001ef4 <MX_GPIO_Init+0x2e0>)
 8001d1a:	f002 f9e3 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001d1e:	236a      	movs	r3, #106	; 0x6a
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4870      	ldr	r0, [pc, #448]	; (8001ef4 <MX_GPIO_Init+0x2e0>)
 8001d34:	f002 f9d6 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	486c      	ldr	r0, [pc, #432]	; (8001f00 <MX_GPIO_Init+0x2ec>)
 8001d50:	f002 f9c8 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001d54:	2303      	movs	r3, #3
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d64:	2308      	movs	r3, #8
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f002 f9b7 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001d76:	f248 131c 	movw	r3, #33052	; 0x811c
 8001d7a:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f002 f9a7 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001d96:	23e0      	movs	r3, #224	; 0xe0
 8001d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da6:	2305      	movs	r3, #5
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f002 f996 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001db8:	2301      	movs	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	484a      	ldr	r0, [pc, #296]	; (8001ef8 <MX_GPIO_Init+0x2e4>)
 8001dce:	f002 f989 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001dd2:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001dd6:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4843      	ldr	r0, [pc, #268]	; (8001ef8 <MX_GPIO_Init+0x2e4>)
 8001dec:	f002 f97a 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001df0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001df4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	483d      	ldr	r0, [pc, #244]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001e08:	f002 f96c 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001e0c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4835      	ldr	r0, [pc, #212]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001e26:	f002 f95d 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001e2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	482f      	ldr	r0, [pc, #188]	; (8001f00 <MX_GPIO_Init+0x2ec>)
 8001e44:	f002 f94e 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001e48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4828      	ldr	r0, [pc, #160]	; (8001f00 <MX_GPIO_Init+0x2ec>)
 8001e60:	f002 f940 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001e64:	2302      	movs	r3, #2
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e74:	2305      	movs	r3, #5
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481f      	ldr	r0, [pc, #124]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001e80:	f002 f930 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e84:	2378      	movs	r3, #120	; 0x78
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e94:	2307      	movs	r3, #7
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <MX_GPIO_Init+0x2e8>)
 8001ea0:	f002 f920 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D14_Pin;
 8001ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D14_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <MX_GPIO_Init+0x2e4>)
 8001ec2:	f002 f90f 	bl	80040e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2017      	movs	r0, #23
 8001ecc:	f001 ffc7 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed0:	2017      	movs	r0, #23
 8001ed2:	f001 ffe0 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2028      	movs	r0, #40	; 0x28
 8001edc:	f001 ffbf 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f001 ffd8 	bl	8003e96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000c00 	.word	0x48000c00
 8001f00:	48000800 	.word	0x48000800

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <Error_Handler+0x8>
	...

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x44>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6613      	str	r3, [r2, #96]	; 0x60
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x44>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x44>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x44>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x44>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_ADC_MspInit+0x74>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d123      	bne.n	8001fc2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001faa:	232f      	movs	r3, #47	; 0x2f
 8001fac:	617b      	str	r3, [r7, #20]
                          |ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fae:	230b      	movs	r3, #11
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_ADC_MspInit+0x7c>)
 8001fbe:	f002 f891 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	50040000 	.word	0x50040000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000800 	.word	0x48000800

08001fd8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0ac      	sub	sp, #176	; 0xb0
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2288      	movs	r2, #136	; 0x88
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 fc32 	bl	8008862 <memset>
  if(DFSDM1_Init == 0)
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d142      	bne.n	800208c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4618      	mov	r0, r3
 8002018:	f004 f8ea 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002022:	f7ff ff6f 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800202c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002030:	6613      	str	r3, [r2, #96]	; 0x60
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002056:	f44f 7320 	mov.w	r3, #640	; 0x280
 800205a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002070:	2306      	movs	r3, #6
 8002072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002076:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800207e:	f002 f831 	bl	80040e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	4a02      	ldr	r2, [pc, #8]	; (8002094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800208a:	6013      	str	r3, [r2, #0]
  }

}
 800208c:	bf00      	nop
 800208e:	37b0      	adds	r7, #176	; 0xb0
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200009d0 	.word	0x200009d0
 8002098:	40021000 	.word	0x40021000
 800209c:	48001000 	.word	0x48001000

080020a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ac      	sub	sp, #176	; 0xb0
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2288      	movs	r2, #136	; 0x88
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f006 fbce 	bl	8008862 <memset>
  if(hi2c->Instance==I2C2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_I2C_MspInit+0xb0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d13b      	bne.n	8002148 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 f887 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020e8:	f7ff ff0c 	bl	8001f04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002104:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800211e:	2304      	movs	r3, #4
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002128:	4619      	mov	r1, r3
 800212a:	480b      	ldr	r0, [pc, #44]	; (8002158 <HAL_I2C_MspInit+0xb8>)
 800212c:	f001 ffda 	bl	80040e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 8002136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_I2C_MspInit+0xb4>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	37b0      	adds	r7, #176	; 0xb0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40005800 	.word	0x40005800
 8002154:	40021000 	.word	0x40021000
 8002158:	48000400 	.word	0x48000400

0800215c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_QSPI_MspInit+0x7c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d128      	bne.n	80021d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6513      	str	r3, [r2, #80]	; 0x50
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_QSPI_MspInit+0x80>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80021ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80021b2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021c0:	230a      	movs	r3, #10
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_QSPI_MspInit+0x84>)
 80021cc:	f001 ff8a 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	a0001000 	.word	0xa0001000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48001000 	.word	0x48001000

080021e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_SPI_MspInit+0x7c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d128      	bne.n	8002258 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_SPI_MspInit+0x80>)
 800220c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_SPI_MspInit+0x80>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_SPI_MspInit+0x80>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002236:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002248:	2306      	movs	r3, #6
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_SPI_MspInit+0x84>)
 8002254:	f001 ff46 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40003c00 	.word	0x40003c00
 8002264:	40021000 	.word	0x40021000
 8002268:	48000800 	.word	0x48000800

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0ae      	sub	sp, #184	; 0xb8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2288      	movs	r2, #136	; 0x88
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f006 fae8 	bl	8008862 <memset>
  if(huart->Instance==USART1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_UART_MspInit+0x134>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d13b      	bne.n	8002314 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800229c:	2301      	movs	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a0:	2300      	movs	r3, #0
 80022a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 ffa1 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022b4:	f7ff fe26 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c2:	6613      	str	r3, [r2, #96]	; 0x60
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_UART_MspInit+0x138>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e8:	23c0      	movs	r3, #192	; 0xc0
 80022ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002300:	2307      	movs	r3, #7
 8002302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800230a:	4619      	mov	r1, r3
 800230c:	4826      	ldr	r0, [pc, #152]	; (80023a8 <HAL_UART_MspInit+0x13c>)
 800230e:	f001 fee9 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002312:	e040      	b.n	8002396 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_UART_MspInit+0x140>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d13b      	bne.n	8002396 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800231e:	2304      	movs	r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4618      	mov	r0, r3
 800232c:	f003 ff60 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002336:	f7ff fde5 	bl	8001f04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_UART_MspInit+0x138>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x138>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_UART_MspInit+0x138>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_UART_MspInit+0x138>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_UART_MspInit+0x138>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_UART_MspInit+0x138>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800236a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800236e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002384:	2307      	movs	r3, #7
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800238e:	4619      	mov	r1, r3
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <HAL_UART_MspInit+0x144>)
 8002392:	f001 fea7 	bl	80040e4 <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	37b8      	adds	r7, #184	; 0xb8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000400 	.word	0x48000400
 80023ac:	40004800 	.word	0x40004800
 80023b0:	48000c00 	.word	0x48000c00

080023b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d4:	d154      	bne.n	8002480 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a2b      	ldr	r2, [pc, #172]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002406:	f001 fe6d 	bl	80040e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800240a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800241c:	230a      	movs	r3, #10
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242a:	f001 fe5b 	bl	80040e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d114      	bne.n	800247c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800246a:	f002 fff5 	bl	8005458 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_PCD_MspInit+0xd4>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800247a:	e001      	b.n	8002480 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800247c:	f002 ffec 	bl	8005458 <HAL_PWREx_EnableVddUSB>
}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	; 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f980 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80024e4:	2020      	movs	r0, #32
 80024e6:	f001 ffbf 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80024ea:	2040      	movs	r0, #64	; 0x40
 80024ec:	f001 ffbc 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80024f0:	2080      	movs	r0, #128	; 0x80
 80024f2:	f001 ffb9 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80024f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024fa:	f001 ffb5 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}

08002502 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002506:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800250a:	f001 ffad 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800250e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002512:	f001 ffa9 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002516:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800251a:	f001 ffa5 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800251e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002522:	f001 ffa1 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002526:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800252a:	f001 ff9d 	bl	8004468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}

08002532 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  return 1;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_kill>:

int _kill(int pid, int sig)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800254c:	f006 f9dc 	bl	8008908 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	2216      	movs	r2, #22
 8002554:	601a      	str	r2, [r3, #0]
  return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_exit>:

void _exit (int status)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800256a:	f04f 31ff 	mov.w	r1, #4294967295
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffe7 	bl	8002542 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002574:	e7fe      	b.n	8002574 <_exit+0x12>

08002576 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e00a      	b.n	800259e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002588:	f3af 8000 	nop.w
 800258c:	4601      	mov	r1, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	60ba      	str	r2, [r7, #8]
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbf0      	blt.n	8002588 <_read+0x12>
  }

  return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e009      	b.n	80025d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	60ba      	str	r2, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf1      	blt.n	80025c2 <_write+0x12>
  }
  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_close>:

int _close(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002610:	605a      	str	r2, [r3, #4]
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_isatty>:

int _isatty(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f006 f942 	bl	8008908 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20018000 	.word	0x20018000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	200009d4 	.word	0x200009d4
 80026b8:	20000b50 	.word	0x20000b50

080026bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e4:	f7ff ffea 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026ea:	490d      	ldr	r1, [pc, #52]	; (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <LoopForever+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270e:	f006 f901 	bl	8008914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002712:	f7fe ff93 	bl	800163c <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002718:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002724:	0800ae5c 	.word	0x0800ae5c
  ldr r2, =_sbss
 8002728:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800272c:	20000b4c 	.word	0x20000b4c

08002730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC1_2_IRQHandler>

08002732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f001 fb83 	bl	8003e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f80e 	bl	8002764 <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	e001      	b.n	8002758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002754:	f7ff fbdc 	bl	8001f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002758:	79fb      	ldrb	r3, [r7, #7]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_InitTick+0x6c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_InitTick+0x70>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_InitTick+0x6c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fb8f 	bl	8003eb2 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d809      	bhi.n	80027b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f001 fb59 	bl	8003e5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_InitTick+0x74>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e007      	b.n	80027c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e004      	b.n	80027c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e001      	b.n	80027c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000008 	.word	0x20000008
 8002800:	200009d8 	.word	0x200009d8

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200009d8 	.word	0x200009d8

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_Delay+0x44>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffde 	bl	8002804 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000008 	.word	0x20000008

08002864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <LL_ADC_SetOffset+0x44>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	03fff000 	.word	0x03fff000

08002914 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	461a      	mov	r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3360      	adds	r3, #96	; 0x60
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	431a      	orrs	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3330      	adds	r3, #48	; 0x30
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	4413      	add	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	211f      	movs	r1, #31
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 011f 	and.w	r1, r3, #31
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3314      	adds	r3, #20
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	0e5b      	lsrs	r3, r3, #25
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	0d1b      	lsrs	r3, r3, #20
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2107      	movs	r1, #7
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0d1b      	lsrs	r3, r3, #20
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0318 	and.w	r3, r3, #24
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a70:	40d9      	lsrs	r1, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	400b      	ands	r3, r1
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	0007ffff 	.word	0x0007ffff

08002a94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b04:	d101      	bne.n	8002b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <LL_ADC_IsEnabled+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_ADC_IsEnabled+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d101      	bne.n	8002c1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e130      	b.n	8002ea8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff f97f 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff3f 	bl	8002af0 <LL_ADC_IsDeepPowerDownEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff25 	bl	8002acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff5a 	bl	8002b40 <LL_ADC_IsInternalRegulatorEnabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d115      	bne.n	8002cbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff3e 	bl	8002b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9c:	4b84      	ldr	r3, [pc, #528]	; (8002eb0 <HAL_ADC_Init+0x284>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	4a84      	ldr	r2, [pc, #528]	; (8002eb4 <HAL_ADC_Init+0x288>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff3c 	bl	8002b40 <LL_ADC_IsInternalRegulatorEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff75 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 80c9 	bne.w	8002e96 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80c5 	bne.w	8002e96 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff35 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d2c:	4862      	ldr	r0, [pc, #392]	; (8002eb8 <HAL_ADC_Init+0x28c>)
 8002d2e:	f7ff ff2f 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d32:	4604      	mov	r4, r0
 8002d34:	4861      	ldr	r0, [pc, #388]	; (8002ebc <HAL_ADC_Init+0x290>)
 8002d36:	f7ff ff2b 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	431c      	orrs	r4, r3
 8002d3e:	4860      	ldr	r0, [pc, #384]	; (8002ec0 <HAL_ADC_Init+0x294>)
 8002d40:	f7ff ff26 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4323      	orrs	r3, r4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4619      	mov	r1, r3
 8002d52:	485c      	ldr	r0, [pc, #368]	; (8002ec4 <HAL_ADC_Init+0x298>)
 8002d54:	f7ff fd86 	bl	8002864 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7e5b      	ldrb	r3, [r3, #25]
 8002d5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d106      	bne.n	8002d94 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	045b      	lsls	r3, r3, #17
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_ADC_Init+0x29c>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff1b 	bl	8002c04 <LL_ADC_INJ_IsConversionOngoing>
 8002dce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13d      	bne.n	8002e52 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d13a      	bne.n	8002e52 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df8:	f023 0302 	bic.w	r3, r3, #2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d118      	bne.n	8002e42 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e32:	430a      	orrs	r2, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
 8002e40:	e007      	b.n	8002e52 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10c      	bne.n	8002e74 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f023 010f 	bic.w	r1, r3, #15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
 8002e72:	e007      	b.n	8002e84 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020f 	bic.w	r2, r2, #15
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
 8002e94:	e007      	b.n	8002ea6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3724      	adds	r7, #36	; 0x24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	053e2d63 	.word	0x053e2d63
 8002eb8:	50040000 	.word	0x50040000
 8002ebc:	50040100 	.word	0x50040100
 8002ec0:	50040200 	.word	0x50040200
 8002ec4:	50040300 	.word	0x50040300
 8002ec8:	fff0c007 	.word	0xfff0c007

08002ecc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed4:	4857      	ldr	r0, [pc, #348]	; (8003034 <HAL_ADC_Start+0x168>)
 8002ed6:	f7ff fddd 	bl	8002a94 <LL_ADC_GetMultimode>
 8002eda:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe7c 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 809c 	bne.w	8003026 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_Start+0x30>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e097      	b.n	800302c <HAL_ADC_Start+0x160>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fd73 	bl	80039f0 <ADC_Enable>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 8083 	bne.w	800301c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <HAL_ADC_Start+0x16c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_Start+0x6e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_Start+0x70>
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_ADC_Start+0x170>)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d002      	beq.n	8002f4a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f023 0206 	bic.w	r2, r3, #6
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	221c      	movs	r2, #28
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <HAL_ADC_Start+0x16c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d002      	beq.n	8002f98 <HAL_ADC_Start+0xcc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_Start+0xce>
 8002f98:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_ADC_Start+0x170>)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d008      	beq.n	8002fb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d002      	beq.n	8002fb4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	d114      	bne.n	8002fde <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fded 	bl	8002bb6 <LL_ADC_REG_StartConversion>
 8002fdc:	e025      	b.n	800302a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_ADC_Start+0x16c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d002      	beq.n	8002ffa <HAL_ADC_Start+0x12e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_Start+0x130>
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_ADC_Start+0x170>)
 8002ffc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00f      	beq.n	800302a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
 800301a:	e006      	b.n	800302a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003024:	e001      	b.n	800302a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	50040300 	.word	0x50040300
 8003038:	50040100 	.word	0x50040100
 800303c:	50040000 	.word	0x50040000

08003040 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800304a:	4866      	ldr	r0, [pc, #408]	; (80031e4 <HAL_ADC_PollForConversion+0x1a4>)
 800304c:	f7ff fd22 	bl	8002a94 <LL_ADC_GetMultimode>
 8003050:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b08      	cmp	r3, #8
 8003058:	d102      	bne.n	8003060 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800305a:	2308      	movs	r3, #8
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e02a      	b.n	80030b6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d002      	beq.n	8003072 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b09      	cmp	r3, #9
 8003070:	d111      	bne.n	8003096 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0a4      	b.n	80031da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003090:	2304      	movs	r3, #4
 8003092:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003094:	e00f      	b.n	80030b6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003096:	4853      	ldr	r0, [pc, #332]	; (80031e4 <HAL_ADC_PollForConversion+0x1a4>)
 8003098:	f7ff fd0a 	bl	8002ab0 <LL_ADC_GetMultiDMATransfer>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e093      	b.n	80031da <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030b2:	2304      	movs	r3, #4
 80030b4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80030b6:	f7ff fba5 	bl	8002804 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030bc:	e021      	b.n	8003102 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d01d      	beq.n	8003102 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80030c6:	f7ff fb9d 	bl	8002804 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <HAL_ADC_PollForConversion+0x9c>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d112      	bne.n	8003102 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f043 0204 	orr.w	r2, r3, #4
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e06b      	b.n	80031da <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0d6      	beq.n	80030be <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fc28 	bl	8002976 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e5b      	ldrb	r3, [r3, #25]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d118      	bne.n	8003166 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b08      	cmp	r3, #8
 8003140:	d111      	bne.n	8003166 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_ADC_PollForConversion+0x1a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_ADC_PollForConversion+0x136>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e000      	b.n	8003178 <HAL_ADC_PollForConversion+0x138>
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_ADC_PollForConversion+0x1ac>)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d002      	beq.n	8003192 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b09      	cmp	r3, #9
 8003190:	d104      	bne.n	800319c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e00c      	b.n	80031b6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_ADC_PollForConversion+0x1a8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_PollForConversion+0x16c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_ADC_PollForConversion+0x16e>
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_ADC_PollForConversion+0x1ac>)
 80031ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d104      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e008      	b.n	80031d8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	220c      	movs	r2, #12
 80031d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	50040300 	.word	0x50040300
 80031e8:	50040100 	.word	0x50040100
 80031ec:	50040000 	.word	0x50040000

080031f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0b6      	sub	sp, #216	; 0xd8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x22>
 800322a:	2302      	movs	r3, #2
 800322c:	e3c9      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x7b6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fccf 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 83aa 	bne.w	800399c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d824      	bhi.n	80032a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	3b02      	subs	r3, #2
 800325e:	2b03      	cmp	r3, #3
 8003260:	d81b      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x8e>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_ADC_ConfigChannel+0x5c>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	08003279 	.word	0x08003279
 800326c:	08003281 	.word	0x08003281
 8003270:	08003289 	.word	0x08003289
 8003274:	08003291 	.word	0x08003291
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003278:	230c      	movs	r3, #12
 800327a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800327e:	e010      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003280:	2312      	movs	r3, #18
 8003282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003286:	e00c      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003288:	2318      	movs	r3, #24
 800328a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800328e:	e008      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003298:	e003      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800329a:	2306      	movs	r3, #6
 800329c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80032b0:	f7ff fb74 	bl	800299c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fc90 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 80032be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fc9c 	bl	8002c04 <LL_ADC_INJ_IsConversionOngoing>
 80032cc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 81a4 	bne.w	8003622 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 819f 	bne.w	8003622 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f7ff fb7f 	bl	80029f4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d00a      	beq.n	800332e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003328:	f7ff fad0 	bl	80028cc <LL_ADC_SetOffset>
 800332c:	e179      	b.n	8003622 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff faed 	bl	8002914 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x14e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fae2 	bl	8002914 <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	e01e      	b.n	8003398 <HAL_ADC_ConfigChannel+0x18c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fad7 	bl	8002914 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003378:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800337c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e004      	b.n	8003396 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800338c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1a4>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	e018      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1d6>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80033c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80033cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e004      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d106      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff faa6 	bl	8002940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fa8a 	bl	8002914 <LL_ADC_GetOffsetChannel>
 8003400:	4603      	mov	r3, r0
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x214>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fa7f 	bl	8002914 <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	e01e      	b.n	800345e <HAL_ADC_ConfigChannel+0x252>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fa74 	bl	8002914 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800343e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x26a>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	e018      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x29c>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800348a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800348e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e004      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800349e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d106      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa43 	bl	8002940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fa27 	bl	8002914 <LL_ADC_GetOffsetChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2da>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fa1c 	bl	8002914 <LL_ADC_GetOffsetChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	e01e      	b.n	8003524 <HAL_ADC_ConfigChannel+0x318>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fa11 	bl	8002914 <LL_ADC_GetOffsetChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800350c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_ConfigChannel+0x330>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	e014      	b.n	8003566 <HAL_ADC_ConfigChannel+0x35a>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800354a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e004      	b.n	8003566 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800355c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003566:	429a      	cmp	r2, r3
 8003568:	d106      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f9e4 	bl	8002940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2103      	movs	r1, #3
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f9c8 	bl	8002914 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x398>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2103      	movs	r1, #3
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f9bd 	bl	8002914 <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	e017      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x3c8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2103      	movs	r1, #3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f9b2 	bl	8002914 <LL_ADC_GetOffsetChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80035c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035c6:	2320      	movs	r3, #32
 80035c8:	e003      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x3e0>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	e011      	b.n	8003610 <HAL_ADC_ConfigChannel+0x404>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003610:	429a      	cmp	r2, r3
 8003612:	d106      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	2103      	movs	r1, #3
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff f98f 	bl	8002940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fab2 	bl	8002b90 <LL_ADC_IsEnabled>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	f040 8140 	bne.w	80038b4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	461a      	mov	r2, r3
 8003642:	f7ff fa03 	bl	8002a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a8f      	ldr	r2, [pc, #572]	; (8003888 <HAL_ADC_ConfigChannel+0x67c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	f040 8131 	bne.w	80038b4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <HAL_ADC_ConfigChannel+0x46e>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	3301      	adds	r3, #1
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b09      	cmp	r3, #9
 8003670:	bf94      	ite	ls
 8003672:	2301      	movls	r3, #1
 8003674:	2300      	movhi	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e019      	b.n	80036ae <HAL_ADC_ConfigChannel+0x4a2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d079      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x4c2>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0e9b      	lsrs	r3, r3, #26
 80036c4:	3301      	adds	r3, #1
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036cc:	e015      	b.n	80036fa <HAL_ADC_ConfigChannel+0x4ee>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036de:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036e6:	2320      	movs	r3, #32
 80036e8:	e003      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	069b      	lsls	r3, r3, #26
 80036f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_ADC_ConfigChannel+0x50e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	3301      	adds	r3, #1
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	e017      	b.n	800374a <HAL_ADC_ConfigChannel+0x53e>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800372c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e003      	b.n	800373e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	ea42 0103 	orr.w	r1, r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x564>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	0e9b      	lsrs	r3, r3, #26
 8003760:	3301      	adds	r3, #1
 8003762:	f003 021f 	and.w	r2, r3, #31
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	e018      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x596>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003788:	2320      	movs	r3, #32
 800378a:	e003      	b.n	8003794 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f003 021f 	and.w	r2, r3, #31
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a2:	430b      	orrs	r3, r1
 80037a4:	e081      	b.n	80038aa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x5b6>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	0e9b      	lsrs	r3, r3, #26
 80037b8:	3301      	adds	r3, #1
 80037ba:	069b      	lsls	r3, r3, #26
 80037bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c0:	e015      	b.n	80037ee <HAL_ADC_ConfigChannel+0x5e2>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037da:	2320      	movs	r3, #32
 80037dc:	e003      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	069b      	lsls	r3, r3, #26
 80037ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_ADC_ConfigChannel+0x602>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	3301      	adds	r3, #1
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	e017      	b.n	800383e <HAL_ADC_ConfigChannel+0x632>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	61bb      	str	r3, [r7, #24]
  return result;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003826:	2320      	movs	r3, #32
 8003828:	e003      	b.n	8003832 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	ea42 0103 	orr.w	r1, r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_ADC_ConfigChannel+0x65e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0e9b      	lsrs	r3, r3, #26
 8003854:	3301      	adds	r3, #1
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	3b1e      	subs	r3, #30
 8003862:	051b      	lsls	r3, r3, #20
 8003864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003868:	e01e      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x69c>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	60fb      	str	r3, [r7, #12]
  return result;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003882:	2320      	movs	r3, #32
 8003884:	e006      	b.n	8003894 <HAL_ADC_ConfigChannel+0x688>
 8003886:	bf00      	nop
 8003888:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f003 021f 	and.w	r2, r3, #31
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	3b1e      	subs	r3, #30
 80038a2:	051b      	lsls	r3, r3, #20
 80038a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ae:	4619      	mov	r1, r3
 80038b0:	f7ff f8a0 	bl	80029f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_ADC_ConfigChannel+0x7c0>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07a      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c0:	4843      	ldr	r0, [pc, #268]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80038c2:	f7fe fff5 	bl	80028b0 <LL_ADC_GetCommonPathInternalCh>
 80038c6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d12c      	bne.n	800392e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d126      	bne.n	800392e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x6e8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3b      	ldr	r2, [pc, #236]	; (80039dc <HAL_ADC_ConfigChannel+0x7d0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d15d      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038fc:	4619      	mov	r1, r3
 80038fe:	4834      	ldr	r0, [pc, #208]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003900:	f7fe ffc3 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	4a36      	ldr	r2, [pc, #216]	; (80039e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800391e:	e002      	b.n	8003926 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3b01      	subs	r3, #1
 8003924:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	e040      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d118      	bne.n	800396a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d112      	bne.n	800396a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <HAL_ADC_ConfigChannel+0x7cc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x74c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_ADC_ConfigChannel+0x7d0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d12d      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800395c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003960:	4619      	mov	r1, r3
 8003962:	481b      	ldr	r0, [pc, #108]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003964:	f7fe ff91 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003968:	e024      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_ADC_ConfigChannel+0x7e0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d120      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11a      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d115      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800398e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003992:	4619      	mov	r1, r3
 8003994:	480e      	ldr	r0, [pc, #56]	; (80039d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003996:	f7fe ff78 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 800399a:	e00c      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039ae:	e002      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	37d8      	adds	r7, #216	; 0xd8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	80080000 	.word	0x80080000
 80039d0:	50040300 	.word	0x50040300
 80039d4:	c7520000 	.word	0xc7520000
 80039d8:	50040000 	.word	0x50040000
 80039dc:	50040200 	.word	0x50040200
 80039e0:	20000000 	.word	0x20000000
 80039e4:	053e2d63 	.word	0x053e2d63
 80039e8:	cb840000 	.word	0xcb840000
 80039ec:	80000001 	.word	0x80000001

080039f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8c5 	bl	8002b90 <LL_ADC_IsEnabled>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d169      	bne.n	8003ae0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <ADC_Enable+0xfc>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e055      	b.n	8003ae2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f894 	bl	8002b68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a40:	482b      	ldr	r0, [pc, #172]	; (8003af0 <ADC_Enable+0x100>)
 8003a42:	f7fe ff35 	bl	80028b0 <LL_ADC_GetCommonPathInternalCh>
 8003a46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <ADC_Enable+0x104>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <ADC_Enable+0x108>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a6a:	e002      	b.n	8003a72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a78:	f7fe fec4 	bl	8002804 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7e:	e028      	b.n	8003ad2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f883 	bl	8002b90 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f867 	bl	8002b68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a9a:	f7fe feb3 	bl	8002804 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d914      	bls.n	8003ad2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d00d      	beq.n	8003ad2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f043 0210 	orr.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e007      	b.n	8003ae2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d1cf      	bne.n	8003a80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	8000003f 	.word	0x8000003f
 8003af0:	50040300 	.word	0x50040300
 8003af4:	20000000 	.word	0x20000000
 8003af8:	053e2d63 	.word	0x053e2d63

08003afc <LL_ADC_IsEnabled>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <LL_ADC_IsEnabled+0x18>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <LL_ADC_IsEnabled+0x1a>
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d101      	bne.n	8003b3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b09f      	sub	sp, #124	; 0x7c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e093      	b.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b72:	2300      	movs	r3, #0
 8003b74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a47      	ldr	r2, [pc, #284]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d102      	bne.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	e001      	b.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e072      	b.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffb9 	bl	8003b22 <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ffb3 	bl	8003b22 <LL_ADC_REG_IsConversionOngoing>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d154      	bne.n	8003c6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d151      	bne.n	8003c6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bc8:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003bca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02c      	beq.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003be6:	035b      	lsls	r3, r3, #13
 8003be8:	430b      	orrs	r3, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf0:	4829      	ldr	r0, [pc, #164]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bf2:	f7ff ff83 	bl	8003afc <LL_ADC_IsEnabled>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4828      	ldr	r0, [pc, #160]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bfa:	f7ff ff7f 	bl	8003afc <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	431c      	orrs	r4, r3
 8003c02:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c04:	f7ff ff7a 	bl	8003afc <LL_ADC_IsEnabled>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4323      	orrs	r3, r4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d137      	bne.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c18:	f023 030f 	bic.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	6811      	ldr	r1, [r2, #0]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	6892      	ldr	r2, [r2, #8]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c2c:	e028      	b.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3a:	4817      	ldr	r0, [pc, #92]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c3c:	f7ff ff5e 	bl	8003afc <LL_ADC_IsEnabled>
 8003c40:	4604      	mov	r4, r0
 8003c42:	4816      	ldr	r0, [pc, #88]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c44:	f7ff ff5a 	bl	8003afc <LL_ADC_IsEnabled>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	431c      	orrs	r4, r3
 8003c4c:	4815      	ldr	r0, [pc, #84]	; (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c4e:	f7ff ff55 	bl	8003afc <LL_ADC_IsEnabled>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4323      	orrs	r3, r4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d112      	bne.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c62:	f023 030f 	bic.w	r3, r3, #15
 8003c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c6a:	e009      	b.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c7e:	e000      	b.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	377c      	adds	r7, #124	; 0x7c
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd90      	pop	{r4, r7, pc}
 8003c96:	bf00      	nop
 8003c98:	50040000 	.word	0x50040000
 8003c9c:	50040100 	.word	0x50040100
 8003ca0:	50040300 	.word	0x50040300
 8003ca4:	50040200 	.word	0x50040200

08003ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <__NVIC_SetPriorityGrouping+0x44>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cda:	4a04      	ldr	r2, [pc, #16]	; (8003cec <__NVIC_SetPriorityGrouping+0x44>)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	60d3      	str	r3, [r2, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	f003 0307 	and.w	r3, r3, #7
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	db0b      	blt.n	8003d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	f003 021f 	and.w	r2, r3, #31
 8003d24:	4907      	ldr	r1, [pc, #28]	; (8003d44 <__NVIC_EnableIRQ+0x38>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	e000e100 	.word	0xe000e100

08003d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db0a      	blt.n	8003d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	490c      	ldr	r1, [pc, #48]	; (8003d94 <__NVIC_SetPriority+0x4c>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d70:	e00a      	b.n	8003d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <__NVIC_SetPriority+0x50>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	0112      	lsls	r2, r2, #4
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	440b      	add	r3, r1
 8003d86:	761a      	strb	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000e100 	.word	0xe000e100
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f1c3 0307 	rsb	r3, r3, #7
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf28      	it	cs
 8003dba:	2304      	movcs	r3, #4
 8003dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d902      	bls.n	8003dcc <NVIC_EncodePriority+0x30>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3b03      	subs	r3, #3
 8003dca:	e000      	b.n	8003dce <NVIC_EncodePriority+0x32>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	401a      	ands	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	4313      	orrs	r3, r2
         );
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e14:	d301      	bcc.n	8003e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <SysTick_Config+0x40>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e22:	210f      	movs	r1, #15
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f7ff ff8e 	bl	8003d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SysTick_Config+0x40>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <SysTick_Config+0x40>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff29 	bl	8003ca8 <__NVIC_SetPriorityGrouping>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e70:	f7ff ff3e 	bl	8003cf0 <__NVIC_GetPriorityGrouping>
 8003e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f7ff ff8e 	bl	8003d9c <NVIC_EncodePriority>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff5d 	bl	8003d48 <__NVIC_SetPriority>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff31 	bl	8003d0c <__NVIC_EnableIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ffa2 	bl	8003e04 <SysTick_Config>
 8003ec0:	4603      	mov	r3, r0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0ac      	b.n	8004038 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f8b2 	bl	800404c <DFSDM_GetChannelFromInstance>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4a55      	ldr	r2, [pc, #340]	; (8004040 <HAL_DFSDM_ChannelInit+0x174>)
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e09f      	b.n	8004038 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fe f86d 	bl	8001fd8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <HAL_DFSDM_ChannelInit+0x178>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	4a4f      	ldr	r2, [pc, #316]	; (8004044 <HAL_DFSDM_ChannelInit+0x178>)
 8003f06:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003f08:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <HAL_DFSDM_ChannelInit+0x178>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d125      	bne.n	8003f5c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4c      	ldr	r2, [pc, #304]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4948      	ldr	r1, [pc, #288]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a46      	ldr	r2, [pc, #280]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f30:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003f34:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	493f      	ldr	r1, [pc, #252]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003f50:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <HAL_DFSDM_ChannelInit+0x17c>)
 8003f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003f6a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f7a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003f80:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 020f 	bic.w	r2, r2, #15
 8003f98:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003fc0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 0207 	and.w	r2, r2, #7
 8003fec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004018:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f810 	bl	800404c <DFSDM_GetChannelFromInstance>
 800402c:	4602      	mov	r2, r0
 800402e:	4904      	ldr	r1, [pc, #16]	; (8004040 <HAL_DFSDM_ChannelInit+0x174>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200009e0 	.word	0x200009e0
 8004044:	200009dc 	.word	0x200009dc
 8004048:	40016000 	.word	0x40016000

0800404c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d102      	bne.n	8004062 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e02b      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <DFSDM_GetChannelFromInstance+0x80>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d102      	bne.n	8004070 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e024      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <DFSDM_GetChannelFromInstance+0x84>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d102      	bne.n	800407e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004078:	2302      	movs	r3, #2
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e01d      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <DFSDM_GetChannelFromInstance+0x88>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d102      	bne.n	800408c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004086:	2304      	movs	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e016      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d102      	bne.n	800409a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004094:	2305      	movs	r3, #5
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e00f      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a0f      	ldr	r2, [pc, #60]	; (80040dc <DFSDM_GetChannelFromInstance+0x90>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d102      	bne.n	80040a8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80040a2:	2306      	movs	r3, #6
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e008      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <DFSDM_GetChannelFromInstance+0x94>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d102      	bne.n	80040b6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80040b0:	2307      	movs	r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e001      	b.n	80040ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80040b6:	2303      	movs	r3, #3
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40016000 	.word	0x40016000
 80040cc:	40016020 	.word	0x40016020
 80040d0:	40016040 	.word	0x40016040
 80040d4:	40016080 	.word	0x40016080
 80040d8:	400160a0 	.word	0x400160a0
 80040dc:	400160c0 	.word	0x400160c0
 80040e0:	400160e0 	.word	0x400160e0

080040e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	e17f      	b.n	80043f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8171 	beq.w	80043ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d005      	beq.n	8004124 <HAL_GPIO_Init+0x40>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d130      	bne.n	8004186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800415a:	2201      	movs	r2, #1
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	f003 0201 	and.w	r2, r3, #1
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b03      	cmp	r3, #3
 8004190:	d118      	bne.n	80041c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d017      	beq.n	8004200 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80ac 	beq.w	80043ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <HAL_GPIO_Init+0x330>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4a5e      	ldr	r2, [pc, #376]	; (8004414 <HAL_GPIO_Init+0x330>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6613      	str	r3, [r2, #96]	; 0x60
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_GPIO_Init+0x330>)
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <HAL_GPIO_Init+0x334>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	3302      	adds	r3, #2
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042d8:	d025      	beq.n	8004326 <HAL_GPIO_Init+0x242>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a4f      	ldr	r2, [pc, #316]	; (800441c <HAL_GPIO_Init+0x338>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01f      	beq.n	8004322 <HAL_GPIO_Init+0x23e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a4e      	ldr	r2, [pc, #312]	; (8004420 <HAL_GPIO_Init+0x33c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d019      	beq.n	800431e <HAL_GPIO_Init+0x23a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a4d      	ldr	r2, [pc, #308]	; (8004424 <HAL_GPIO_Init+0x340>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_GPIO_Init+0x236>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <HAL_GPIO_Init+0x344>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00d      	beq.n	8004316 <HAL_GPIO_Init+0x232>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a4b      	ldr	r2, [pc, #300]	; (800442c <HAL_GPIO_Init+0x348>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <HAL_GPIO_Init+0x22e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_GPIO_Init+0x34c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d101      	bne.n	800430e <HAL_GPIO_Init+0x22a>
 800430a:	2306      	movs	r3, #6
 800430c:	e00c      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800430e:	2307      	movs	r3, #7
 8004310:	e00a      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004312:	2305      	movs	r3, #5
 8004314:	e008      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004316:	2304      	movs	r3, #4
 8004318:	e006      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800431a:	2303      	movs	r3, #3
 800431c:	e004      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800431e:	2302      	movs	r3, #2
 8004320:	e002      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004326:	2300      	movs	r3, #0
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	f002 0203 	and.w	r2, r2, #3
 800432e:	0092      	lsls	r2, r2, #2
 8004330:	4093      	lsls	r3, r2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004338:	4937      	ldr	r1, [pc, #220]	; (8004418 <HAL_GPIO_Init+0x334>)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	3302      	adds	r3, #2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_GPIO_Init+0x350>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800436a:	4a32      	ldr	r2, [pc, #200]	; (8004434 <HAL_GPIO_Init+0x350>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004370:	4b30      	ldr	r3, [pc, #192]	; (8004434 <HAL_GPIO_Init+0x350>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43db      	mvns	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <HAL_GPIO_Init+0x350>)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800439a:	4b26      	ldr	r3, [pc, #152]	; (8004434 <HAL_GPIO_Init+0x350>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <HAL_GPIO_Init+0x350>)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_GPIO_Init+0x350>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043e8:	4a12      	ldr	r2, [pc, #72]	; (8004434 <HAL_GPIO_Init+0x350>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3301      	adds	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f47f ae78 	bne.w	80040f4 <HAL_GPIO_Init+0x10>
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	40010000 	.word	0x40010000
 800441c:	48000400 	.word	0x48000400
 8004420:	48000800 	.word	0x48000800
 8004424:	48000c00 	.word	0x48000c00
 8004428:	48001000 	.word	0x48001000
 800442c:	48001400 	.word	0x48001400
 8004430:	48001800 	.word	0x48001800
 8004434:	40010400 	.word	0x40010400

08004438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
 8004444:	4613      	mov	r3, r2
 8004446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004448:	787b      	ldrb	r3, [r7, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004454:	e002      	b.n	800445c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f806 	bl	8004498 <HAL_GPIO_EXTI_Callback>
  }
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40010400 	.word	0x40010400

08004498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e08d      	b.n	80045dc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fd fde3 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2224      	movs	r2, #36	; 0x24
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	e006      	b.n	8004536 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004534:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d108      	bne.n	8004550 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	e007      	b.n	8004560 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004582:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69d9      	ldr	r1, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	461a      	mov	r2, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	817b      	strh	r3, [r7, #10]
 80045f6:	460b      	mov	r3, r1
 80045f8:	813b      	strh	r3, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	f040 80f9 	bne.w	80047fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_I2C_Mem_Write+0x34>
 8004612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0ed      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_I2C_Mem_Write+0x4e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0e6      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800463a:	f7fe f8e3 	bl	8002804 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fac3 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0d1      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	; 0x21
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004684:	88f8      	ldrh	r0, [r7, #6]
 8004686:	893a      	ldrh	r2, [r7, #8]
 8004688:	8979      	ldrh	r1, [r7, #10]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4603      	mov	r3, r0
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f9d3 	bl	8004a40 <I2C_RequestMemoryWrite>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0a9      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	d90e      	bls.n	80046d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fc3d 	bl	8004f4c <I2C_TransferConfig>
 80046d2:	e00f      	b.n	80046f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fc2c 	bl	8004f4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fabc 	bl	8004c76 <I2C_WaitOnTXISFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e07b      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d034      	beq.n	80047ac <HAL_I2C_Mem_Write+0x1c8>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d130      	bne.n	80047ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa3f 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e04d      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2bff      	cmp	r3, #255	; 0xff
 800476c:	d90e      	bls.n	800478c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	b2da      	uxtb	r2, r3
 800477a:	8979      	ldrh	r1, [r7, #10]
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fbe1 	bl	8004f4c <I2C_TransferConfig>
 800478a:	e00f      	b.n	80047ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	b2da      	uxtb	r2, r3
 800479c:	8979      	ldrh	r1, [r7, #10]
 800479e:	2300      	movs	r3, #0
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fbd0 	bl	8004f4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d19e      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 faa2 	bl	8004d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01a      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2220      	movs	r2, #32
 80047d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_I2C_Mem_Write+0x224>)
 80047de:	400b      	ands	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	fe00e800 	.word	0xfe00e800

0800480c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4603      	mov	r3, r0
 800481c:	817b      	strh	r3, [r7, #10]
 800481e:	460b      	mov	r3, r1
 8004820:	813b      	strh	r3, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b20      	cmp	r3, #32
 8004830:	f040 80fd 	bne.w	8004a2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_I2C_Mem_Read+0x34>
 800483a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0f1      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_I2C_Mem_Read+0x4e>
 8004856:	2302      	movs	r3, #2
 8004858:	e0ea      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004862:	f7fd ffcf 	bl	8002804 <HAL_GetTick>
 8004866:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2319      	movs	r3, #25
 800486e:	2201      	movs	r2, #1
 8004870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f9af 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0d5      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2222      	movs	r2, #34	; 0x22
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ac:	88f8      	ldrh	r0, [r7, #6]
 80048ae:	893a      	ldrh	r2, [r7, #8]
 80048b0:	8979      	ldrh	r1, [r7, #10]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4603      	mov	r3, r0
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f913 	bl	8004ae8 <I2C_RequestMemoryRead>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0ad      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2bff      	cmp	r3, #255	; 0xff
 80048dc:	d90e      	bls.n	80048fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	22ff      	movs	r2, #255	; 0xff
 80048e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	8979      	ldrh	r1, [r7, #10]
 80048ec:	4b52      	ldr	r3, [pc, #328]	; (8004a38 <HAL_I2C_Mem_Read+0x22c>)
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fb29 	bl	8004f4c <I2C_TransferConfig>
 80048fa:	e00f      	b.n	800491c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	b2da      	uxtb	r2, r3
 800490c:	8979      	ldrh	r1, [r7, #10]
 800490e:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <HAL_I2C_Mem_Read+0x22c>)
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fb18 	bl	8004f4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2200      	movs	r2, #0
 8004924:	2104      	movs	r1, #4
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f956 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07c      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d034      	beq.n	80049dc <HAL_I2C_Mem_Read+0x1d0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d130      	bne.n	80049dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f927 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e04d      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2bff      	cmp	r3, #255	; 0xff
 800499c:	d90e      	bls.n	80049bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	2300      	movs	r3, #0
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fac9 	bl	8004f4c <I2C_TransferConfig>
 80049ba:	e00f      	b.n	80049dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	8979      	ldrh	r1, [r7, #10]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fab8 	bl	8004f4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d19a      	bne.n	800491c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f98a 	bl	8004d04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e01a      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2220      	movs	r2, #32
 8004a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_I2C_Mem_Read+0x230>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	80002400 	.word	0x80002400
 8004a3c:	fe00e800 	.word	0xfe00e800

08004a40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	8979      	ldrh	r1, [r7, #10]
 8004a60:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <I2C_RequestMemoryWrite+0xa4>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fa6f 	bl	8004f4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	69b9      	ldr	r1, [r7, #24]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f8ff 	bl	8004c76 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e02c      	b.n	8004adc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
 8004a92:	e015      	b.n	8004ac0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a94:	893b      	ldrh	r3, [r7, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8e5 	bl	8004c76 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e012      	b.n	8004adc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab6:	893b      	ldrh	r3, [r7, #8]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f884 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	80002000 	.word	0x80002000

08004ae8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	817b      	strh	r3, [r7, #10]
 8004afa:	460b      	mov	r3, r1
 8004afc:	813b      	strh	r3, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	8979      	ldrh	r1, [r7, #10]
 8004b08:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <I2C_RequestMemoryRead+0xa4>)
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa1c 	bl	8004f4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f8ac 	bl	8004c76 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e02c      	b.n	8004b82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2e:	893b      	ldrh	r3, [r7, #8]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
 8004b38:	e015      	b.n	8004b66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b3a:	893b      	ldrh	r3, [r7, #8]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	69b9      	ldr	r1, [r7, #24]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f892 	bl	8004c76 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e012      	b.n	8004b82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2140      	movs	r1, #64	; 0x40
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f831 	bl	8004bd8 <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	80002000 	.word	0x80002000

08004b90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d103      	bne.n	8004bae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d007      	beq.n	8004bcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	619a      	str	r2, [r3, #24]
  }
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be8:	e031      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d02d      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fd fe07 	bl	8002804 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d122      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d113      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e00f      	b.n	8004c6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d0be      	beq.n	8004bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c82:	e033      	b.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f87f 	bl	8004d8c <I2C_IsErrorOccurred>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e031      	b.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d025      	beq.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fd fdb0 	bl	8002804 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11a      	bne.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d013      	beq.n	8004cec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e007      	b.n	8004cfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d1c4      	bne.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d10:	e02f      	b.n	8004d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f838 	bl	8004d8c <I2C_IsErrorOccurred>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e02d      	b.n	8004d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fd fd6d 	bl	8002804 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11a      	bne.n	8004d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d013      	beq.n	8004d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e007      	b.n	8004d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d1c8      	bne.n	8004d12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d068      	beq.n	8004e8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dc0:	e049      	b.n	8004e56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d045      	beq.n	8004e56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7fd fd1b 	bl	8002804 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_IsErrorOccurred+0x54>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d13a      	bne.n	8004e56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004df2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e02:	d121      	bne.n	8004e48 <I2C_IsErrorOccurred+0xbc>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0a:	d01d      	beq.n	8004e48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d01a      	beq.n	8004e48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e22:	f7fd fcef 	bl	8002804 <HAL_GetTick>
 8004e26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e28:	e00e      	b.n	8004e48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e2a:	f7fd fceb 	bl	8002804 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b19      	cmp	r3, #25
 8004e36:	d907      	bls.n	8004e48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f043 0320 	orr.w	r3, r3, #32
 8004e3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e46:	e006      	b.n	8004e56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d1e9      	bne.n	8004e2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d003      	beq.n	8004e6c <I2C_IsErrorOccurred+0xe0>
 8004e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0aa      	beq.n	8004dc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d103      	bne.n	8004e7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ece:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	f043 0302 	orr.w	r3, r3, #2
 8004ee6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fe45 	bl	8004b90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <I2C_IsErrorOccurred+0x1bc>)
 8004f12:	400b      	ands	r3, r1
 8004f14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	fe00e800 	.word	0xfe00e800

08004f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f64:	7a7b      	ldrb	r3, [r7, #9]
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	0d5b      	lsrs	r3, r3, #21
 8004f86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <I2C_TransferConfig+0x60>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	ea02 0103 	and.w	r1, r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	03ff63ff 	.word	0x03ff63ff

08004fb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d138      	bne.n	8005038 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e032      	b.n	800503a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2224      	movs	r2, #36	; 0x24
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005002:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b20      	cmp	r3, #32
 800505a:	d139      	bne.n	80050d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005066:	2302      	movs	r3, #2
 8005068:	e033      	b.n	80050d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2224      	movs	r2, #36	; 0x24
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005098:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e0:	b08f      	sub	sp, #60	; 0x3c
 80050e2:	af0a      	add	r7, sp, #40	; 0x28
 80050e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e116      	b.n	800531e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd f952 	bl	80023b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2203      	movs	r2, #3
 8005114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f002 fb9f 	bl	8007872 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	687e      	ldr	r6, [r7, #4]
 800513c:	466d      	mov	r5, sp
 800513e:	f106 0410 	add.w	r4, r6, #16
 8005142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800514a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800514e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005152:	1d33      	adds	r3, r6, #4
 8005154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005156:	6838      	ldr	r0, [r7, #0]
 8005158:	f002 fb5f 	bl	800781a <USB_CoreInit>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0d7      	b.n	800531e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f002 fb8d 	bl	8007894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e04a      	b.n	8005216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	333d      	adds	r3, #61	; 0x3d
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005194:	7bfa      	ldrb	r2, [r7, #15]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	333c      	adds	r3, #60	; 0x3c
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	b298      	uxth	r0, r3
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	3356      	adds	r3, #86	; 0x56
 80051bc:	4602      	mov	r2, r0
 80051be:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051c0:	7bfa      	ldrb	r2, [r7, #15]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3340      	adds	r3, #64	; 0x40
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3344      	adds	r3, #68	; 0x44
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3348      	adds	r3, #72	; 0x48
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	334c      	adds	r3, #76	; 0x4c
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	3301      	adds	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d3af      	bcc.n	8005180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	e044      	b.n	80052b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005268:	7bfa      	ldrb	r2, [r7, #15]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	3301      	adds	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3b5      	bcc.n	8005226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	687e      	ldr	r6, [r7, #4]
 80052c2:	466d      	mov	r5, sp
 80052c4:	f106 0410 	add.w	r4, r6, #16
 80052c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80052d8:	1d33      	adds	r3, r6, #4
 80052da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052dc:	6838      	ldr	r0, [r7, #0]
 80052de:	f002 fb25 	bl	800792c <USB_DevInit>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e014      	b.n	800531e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b01      	cmp	r3, #1
 800530a:	d102      	bne.n	8005312 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f80a 	bl	8005326 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f002 fcc7 	bl	8007caa <USB_DevDisconnect>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005326 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	f043 0303 	orr.w	r3, r3, #3
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40007000 	.word	0x40007000

08005390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40007000 	.word	0x40007000

080053ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ba:	d130      	bne.n	800541e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c8:	d038      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2232      	movs	r2, #50	; 0x32
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0c9b      	lsrs	r3, r3, #18
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f0:	e002      	b.n	80053f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d102      	bne.n	800540c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f2      	bne.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d110      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00f      	b.n	800543e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542a:	d007      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40007000 	.word	0x40007000
 8005450:	20000000 	.word	0x20000000
 8005454:	431bde83 	.word	0x431bde83

08005458 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_PWREx_EnableVddUSB+0x1c>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005466:	6053      	str	r3, [r2, #4]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7fd f9c0 	bl	8002804 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e063      	b.n	8005558 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7fc fe59 	bl	800215c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80054aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f858 	bl	8005564 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	021a      	lsls	r2, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2120      	movs	r1, #32
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f850 	bl	8005580 <QSPI_WaitFlagStateUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d131      	bne.n	800554e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	0611      	lsls	r1, r2, #24
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68d2      	ldr	r2, [r2, #12]
 8005502:	4311      	orrs	r1, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	430b      	orrs	r3, r1
 800550a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_QSPI_Init+0xe8>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6912      	ldr	r2, [r2, #16]
 800551a:	0411      	lsls	r1, r2, #16
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6952      	ldr	r2, [r2, #20]
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6992      	ldr	r2, [r2, #24]
 8005526:	4311      	orrs	r1, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	430b      	orrs	r3, r1
 800552e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005556:	7afb      	ldrb	r3, [r7, #11]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	ffe0f8fe 	.word	0xffe0f8fe

08005564 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005590:	e01a      	b.n	80055c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d016      	beq.n	80055c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fd f933 	bl	8002804 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e00e      	b.n	80055e6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf14      	ite	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	2300      	moveq	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1d6      	bne.n	8005592 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e3ca      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b97      	ldr	r3, [pc, #604]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560c:	4b94      	ldr	r3, [pc, #592]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80e4 	beq.w	80057ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <HAL_RCC_OscConfig+0x4a>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b0c      	cmp	r3, #12
 800562e:	f040 808b 	bne.w	8005748 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b01      	cmp	r3, #1
 8005636:	f040 8087 	bne.w	8005748 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800563a:	4b89      	ldr	r3, [pc, #548]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_RCC_OscConfig+0x62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e3a2      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1a      	ldr	r2, [r3, #32]
 8005656:	4b82      	ldr	r3, [pc, #520]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <HAL_RCC_OscConfig+0x7c>
 8005662:	4b7f      	ldr	r3, [pc, #508]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566a:	e005      	b.n	8005678 <HAL_RCC_OscConfig+0x88>
 800566c:	4b7c      	ldr	r3, [pc, #496]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005678:	4293      	cmp	r3, r2
 800567a:	d223      	bcs.n	80056c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fd55 	bl	8006130 <RCC_SetFlashLatencyFromMSIRange>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e383      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005690:	4b73      	ldr	r3, [pc, #460]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a72      	ldr	r2, [pc, #456]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005696:	f043 0308 	orr.w	r3, r3, #8
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b70      	ldr	r3, [pc, #448]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	496d      	ldr	r1, [pc, #436]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ae:	4b6c      	ldr	r3, [pc, #432]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	4968      	ldr	r1, [pc, #416]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
 80056c2:	e025      	b.n	8005710 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056c4:	4b66      	ldr	r3, [pc, #408]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056ca:	f043 0308 	orr.w	r3, r3, #8
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b63      	ldr	r3, [pc, #396]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	4960      	ldr	r1, [pc, #384]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056e2:	4b5f      	ldr	r3, [pc, #380]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	495b      	ldr	r1, [pc, #364]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd15 	bl	8006130 <RCC_SetFlashLatencyFromMSIRange>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e343      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005710:	f000 fc4a 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b52      	ldr	r3, [pc, #328]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	4950      	ldr	r1, [pc, #320]	; (8005864 <HAL_RCC_OscConfig+0x274>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	4a4e      	ldr	r2, [pc, #312]	; (8005868 <HAL_RCC_OscConfig+0x278>)
 800572e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005730:	4b4e      	ldr	r3, [pc, #312]	; (800586c <HAL_RCC_OscConfig+0x27c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd f815 	bl	8002764 <HAL_InitTick>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d052      	beq.n	80057ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	e327      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d032      	beq.n	80057b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a42      	ldr	r2, [pc, #264]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800575c:	f7fd f852 	bl	8002804 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005764:	f7fd f84e 	bl	8002804 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e310      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005776:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005782:	4b37      	ldr	r3, [pc, #220]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	4931      	ldr	r1, [pc, #196]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057a0:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	492c      	ldr	r1, [pc, #176]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	e01a      	b.n	80057ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a29      	ldr	r2, [pc, #164]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057bc:	f023 0301 	bic.w	r3, r3, #1
 80057c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057c2:	f7fd f81f 	bl	8002804 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ca:	f7fd f81b 	bl	8002804 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e2dd      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <HAL_RCC_OscConfig+0x1da>
 80057e8:	e000      	b.n	80057ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d074      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d005      	beq.n	800580a <HAL_RCC_OscConfig+0x21a>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d10e      	bne.n	8005822 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d10b      	bne.n	8005822 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d064      	beq.n	80058e0 <HAL_RCC_OscConfig+0x2f0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d160      	bne.n	80058e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e2ba      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d106      	bne.n	800583a <HAL_RCC_OscConfig+0x24a>
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0b      	ldr	r2, [pc, #44]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e026      	b.n	8005888 <HAL_RCC_OscConfig+0x298>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005842:	d115      	bne.n	8005870 <HAL_RCC_OscConfig+0x280>
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a05      	ldr	r2, [pc, #20]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 800584a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b03      	ldr	r3, [pc, #12]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a02      	ldr	r2, [pc, #8]	; (8005860 <HAL_RCC_OscConfig+0x270>)
 8005856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	e014      	b.n	8005888 <HAL_RCC_OscConfig+0x298>
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	0800aa90 	.word	0x0800aa90
 8005868:	20000000 	.word	0x20000000
 800586c:	20000004 	.word	0x20000004
 8005870:	4ba0      	ldr	r3, [pc, #640]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a9f      	ldr	r2, [pc, #636]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	4b9d      	ldr	r3, [pc, #628]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a9c      	ldr	r2, [pc, #624]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d013      	beq.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fc ffb8 	bl	8002804 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005898:	f7fc ffb4 	bl	8002804 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e276      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058aa:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x2a8>
 80058b6:	e014      	b.n	80058e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fc ffa4 	bl	8002804 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fc ffa0 	bl	8002804 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e262      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058d2:	4b88      	ldr	r3, [pc, #544]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2d0>
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d060      	beq.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_OscConfig+0x310>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d119      	bne.n	800592e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d116      	bne.n	800592e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005900:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_OscConfig+0x328>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e23f      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005918:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	4973      	ldr	r1, [pc, #460]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800592c:	e040      	b.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d023      	beq.n	800597e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005936:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6e      	ldr	r2, [pc, #440]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fc ff5f 	bl	8002804 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594a:	f7fc ff5b 	bl	8002804 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e21d      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800595c:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005968:	4b62      	ldr	r3, [pc, #392]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	061b      	lsls	r3, r3, #24
 8005976:	495f      	ldr	r1, [pc, #380]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005978:	4313      	orrs	r3, r2
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	e018      	b.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597e:	4b5d      	ldr	r3, [pc, #372]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5c      	ldr	r2, [pc, #368]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc ff3b 	bl	8002804 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005992:	f7fc ff37 	bl	8002804 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e1f9      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059a4:	4b53      	ldr	r3, [pc, #332]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03c      	beq.n	8005a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01c      	beq.n	80059fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c4:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7fc ff16 	bl	8002804 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059dc:	f7fc ff12 	bl	8002804 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1d4      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ee:	4b41      	ldr	r3, [pc, #260]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 80059f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ef      	beq.n	80059dc <HAL_RCC_OscConfig+0x3ec>
 80059fc:	e01b      	b.n	8005a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059fe:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a04:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0e:	f7fc fef9 	bl	8002804 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a16:	f7fc fef5 	bl	8002804 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e1b7      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a28:	4b32      	ldr	r3, [pc, #200]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ef      	bne.n	8005a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80a6 	beq.w	8005b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a48:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a54:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCC_OscConfig+0x508>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d118      	bne.n	8005aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCC_OscConfig+0x508>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <HAL_RCC_OscConfig+0x508>)
 8005a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a88:	f7fc febc 	bl	8002804 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a90:	f7fc feb8 	bl	8002804 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e17a      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_RCC_OscConfig+0x508>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d108      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4d8>
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac6:	e029      	b.n	8005b1c <HAL_RCC_OscConfig+0x52c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d115      	bne.n	8005afc <HAL_RCC_OscConfig+0x50c>
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005af0:	e014      	b.n	8005b1c <HAL_RCC_OscConfig+0x52c>
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40007000 	.word	0x40007000
 8005afc:	4b9c      	ldr	r3, [pc, #624]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	4a9b      	ldr	r2, [pc, #620]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b0c:	4b98      	ldr	r3, [pc, #608]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	4a97      	ldr	r2, [pc, #604]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d016      	beq.n	8005b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b24:	f7fc fe6e 	bl	8002804 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2c:	f7fc fe6a 	bl	8002804 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e12a      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b42:	4b8b      	ldr	r3, [pc, #556]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ed      	beq.n	8005b2c <HAL_RCC_OscConfig+0x53c>
 8005b50:	e015      	b.n	8005b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fc fe57 	bl	8002804 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b58:	e00a      	b.n	8005b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fc fe53 	bl	8002804 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e113      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b70:	4b7f      	ldr	r3, [pc, #508]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ed      	bne.n	8005b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d105      	bne.n	8005b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b84:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	4a79      	ldr	r2, [pc, #484]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80fe 	beq.w	8005d96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	f040 80d0 	bne.w	8005d44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ba4:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 0203 	and.w	r2, r3, #3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d130      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d127      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d11f      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be4:	2a07      	cmp	r2, #7
 8005be6:	bf14      	ite	ne
 8005be8:	2201      	movne	r2, #1
 8005bea:	2200      	moveq	r2, #0
 8005bec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d113      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d109      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	3b01      	subs	r3, #1
 8005c14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d06e      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	d069      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0ad      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c3c:	4b4c      	ldr	r3, [pc, #304]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a4b      	ldr	r2, [pc, #300]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c48:	f7fc fddc 	bl	8002804 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c50:	f7fc fdd8 	bl	8002804 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e09a      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c62:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6e:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <HAL_RCC_OscConfig+0x784>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	0112      	lsls	r2, r2, #4
 8005c82:	4311      	orrs	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c88:	0212      	lsls	r2, r2, #8
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c90:	0852      	lsrs	r2, r2, #1
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0552      	lsls	r2, r2, #21
 8005c96:	4311      	orrs	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c9c:	0852      	lsrs	r2, r2, #1
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	0652      	lsls	r2, r2, #25
 8005ca2:	4311      	orrs	r1, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ca8:	0912      	lsrs	r2, r2, #4
 8005caa:	0452      	lsls	r2, r2, #17
 8005cac:	430a      	orrs	r2, r1
 8005cae:	4930      	ldr	r1, [pc, #192]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ccc:	f7fc fd9a 	bl	8002804 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fd96 	bl	8002804 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e058      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf2:	e050      	b.n	8005d96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04f      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d148      	bne.n	8005d96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d04:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d1c:	f7fc fd72 	bl	8002804 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fc fd6e 	bl	8002804 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e030      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d36:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x734>
 8005d42:	e028      	b.n	8005d96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b0c      	cmp	r3, #12
 8005d48:	d023      	beq.n	8005d92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <HAL_RCC_OscConfig+0x780>)
 8005d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fc fd55 	bl	8002804 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5c:	e00c      	b.n	8005d78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5e:	f7fc fd51 	bl	8002804 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d905      	bls.n	8005d78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e013      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
 8005d70:	40021000 	.word	0x40021000
 8005d74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_OscConfig+0x7b0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ec      	bne.n	8005d5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_RCC_OscConfig+0x7b0>)
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	4905      	ldr	r1, [pc, #20]	; (8005da0 <HAL_RCC_OscConfig+0x7b0>)
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCC_OscConfig+0x7b4>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60cb      	str	r3, [r1, #12]
 8005d90:	e001      	b.n	8005d96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	feeefffc 	.word	0xfeeefffc

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0e7      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b75      	ldr	r3, [pc, #468]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d910      	bls.n	8005dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b72      	ldr	r3, [pc, #456]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 0207 	bic.w	r2, r3, #7
 8005dd2:	4970      	ldr	r1, [pc, #448]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b6e      	ldr	r3, [pc, #440]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0cf      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	4b66      	ldr	r3, [pc, #408]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d908      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b63      	ldr	r3, [pc, #396]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4960      	ldr	r1, [pc, #384]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04c      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2e:	4b5a      	ldr	r3, [pc, #360]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0a6      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e46:	4b54      	ldr	r3, [pc, #336]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d115      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e09a      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e5e:	4b4e      	ldr	r3, [pc, #312]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e08e      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6e:	4b4a      	ldr	r3, [pc, #296]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e086      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4943      	ldr	r1, [pc, #268]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e90:	f7fc fcb8 	bl	8002804 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7fc fcb4 	bl	8002804 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e06e      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d208      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005edc:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	492b      	ldr	r1, [pc, #172]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eee:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d210      	bcs.n	8005f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 0207 	bic.w	r2, r3, #7
 8005f04:	4923      	ldr	r1, [pc, #140]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e036      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4918      	ldr	r1, [pc, #96]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4910      	ldr	r1, [pc, #64]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f5c:	f000 f824 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	091b      	lsrs	r3, r3, #4
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	490b      	ldr	r1, [pc, #44]	; (8005f9c <HAL_RCC_ClockConfig+0x1f4>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fc fbef 	bl	8002764 <HAL_InitTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40022000 	.word	0x40022000
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800aa90 	.word	0x0800aa90
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	20000004 	.word	0x20000004

08005fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b089      	sub	sp, #36	; 0x24
 8005fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc0:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x34>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d121      	bne.n	800601a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d11e      	bne.n	800601a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fdc:	4b34      	ldr	r3, [pc, #208]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e005      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006004:	4a2b      	ldr	r2, [pc, #172]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d102      	bne.n	8006026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e004      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d101      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800602c:	4b23      	ldr	r3, [pc, #140]	; (80060bc <HAL_RCC_GetSysClockFreq+0x114>)
 800602e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b0c      	cmp	r3, #12
 8006034:	d134      	bne.n	80060a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006036:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d003      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0xa6>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d003      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0xac>
 800604c:	e005      	b.n	800605a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800604e:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006050:	617b      	str	r3, [r7, #20]
      break;
 8006052:	e005      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006056:	617b      	str	r3, [r7, #20]
      break;
 8006058:	e002      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	617b      	str	r3, [r7, #20]
      break;
 800605e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	3301      	adds	r3, #1
 800606c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	fb03 f202 	mul.w	r2, r3, r2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	0e5b      	lsrs	r3, r3, #25
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	3301      	adds	r3, #1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060a0:	69bb      	ldr	r3, [r7, #24]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	; 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000
 80060b4:	0800aaa8 	.word	0x0800aaa8
 80060b8:	00f42400 	.word	0x00f42400
 80060bc:	007a1200 	.word	0x007a1200

080060c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060c6:	681b      	ldr	r3, [r3, #0]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000000 	.word	0x20000000

080060d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060dc:	f7ff fff0 	bl	80060c0 <HAL_RCC_GetHCLKFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	4904      	ldr	r1, [pc, #16]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40021000 	.word	0x40021000
 8006100:	0800aaa0 	.word	0x0800aaa0

08006104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006108:	f7ff ffda 	bl	80060c0 <HAL_RCC_GetHCLKFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	0adb      	lsrs	r3, r3, #11
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	4904      	ldr	r1, [pc, #16]	; (800612c <HAL_RCC_GetPCLK2Freq+0x28>)
 800611a:	5ccb      	ldrb	r3, [r1, r3]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40021000 	.word	0x40021000
 800612c:	0800aaa0 	.word	0x0800aaa0

08006130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800613c:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006148:	f7ff f922 	bl	8005390 <HAL_PWREx_GetVoltageRange>
 800614c:	6178      	str	r0, [r7, #20]
 800614e:	e014      	b.n	800617a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006150:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	4a24      	ldr	r2, [pc, #144]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615a:	6593      	str	r3, [r2, #88]	; 0x58
 800615c:	4b22      	ldr	r3, [pc, #136]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006168:	f7ff f912 	bl	8005390 <HAL_PWREx_GetVoltageRange>
 800616c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006180:	d10b      	bne.n	800619a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d919      	bls.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2ba0      	cmp	r3, #160	; 0xa0
 800618c:	d902      	bls.n	8006194 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800618e:	2302      	movs	r3, #2
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e013      	b.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006194:	2301      	movs	r3, #1
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	e010      	b.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d902      	bls.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061a0:	2303      	movs	r3, #3
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	e00a      	b.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b80      	cmp	r3, #128	; 0x80
 80061aa:	d102      	bne.n	80061b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061ac:	2302      	movs	r3, #2
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	e004      	b.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b70      	cmp	r3, #112	; 0x70
 80061b6:	d101      	bne.n	80061bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061b8:	2301      	movs	r3, #1
 80061ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 0207 	bic.w	r2, r3, #7
 80061c4:	4909      	ldr	r1, [pc, #36]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d001      	beq.n	80061de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40022000 	.word	0x40022000

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061f8:	2300      	movs	r3, #0
 80061fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061fc:	2300      	movs	r3, #0
 80061fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006208:	2b00      	cmp	r3, #0
 800620a:	d041      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006214:	d02a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006216:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800621a:	d824      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800621c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006220:	d008      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006226:	d81e      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800622c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006230:	d010      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006232:	e018      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006234:	4b86      	ldr	r3, [pc, #536]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a85      	ldr	r2, [pc, #532]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006240:	e015      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f000 facb 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006252:	e00c      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3320      	adds	r3, #32
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fbb6 	bl	80069cc <RCCEx_PLLSAI2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006264:	e003      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	74fb      	strb	r3, [r7, #19]
      break;
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800626c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006274:	4b76      	ldr	r3, [pc, #472]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006282:	4973      	ldr	r1, [pc, #460]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800628a:	e001      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	7cfb      	ldrb	r3, [r7, #19]
 800628e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d041      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062a4:	d02a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80062a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062aa:	d824      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b0:	d008      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b6:	d81e      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80062bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c0:	d010      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062c2:	e018      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062c4:	4b62      	ldr	r3, [pc, #392]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a61      	ldr	r2, [pc, #388]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062d0:	e015      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fa83 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062e2:	e00c      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3320      	adds	r3, #32
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fb6e 	bl	80069cc <RCCEx_PLLSAI2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	74fb      	strb	r3, [r7, #19]
      break;
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fe:	7cfb      	ldrb	r3, [r7, #19]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006304:	4b52      	ldr	r3, [pc, #328]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006312:	494f      	ldr	r1, [pc, #316]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800631a:	e001      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80a0 	beq.w	800646e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800632e:	2300      	movs	r3, #0
 8006330:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006332:	4b47      	ldr	r3, [pc, #284]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00d      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006348:	4b41      	ldr	r3, [pc, #260]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	4a40      	ldr	r2, [pc, #256]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006352:	6593      	str	r3, [r2, #88]	; 0x58
 8006354:	4b3e      	ldr	r3, [pc, #248]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006360:	2301      	movs	r3, #1
 8006362:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006364:	4b3b      	ldr	r3, [pc, #236]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a3a      	ldr	r2, [pc, #232]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006370:	f7fc fa48 	bl	8002804 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006376:	e009      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006378:	f7fc fa44 	bl	8002804 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d902      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	74fb      	strb	r3, [r7, #19]
        break;
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800638c:	4b31      	ldr	r3, [pc, #196]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ef      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006398:	7cfb      	ldrb	r3, [r7, #19]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d15c      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800639e:	4b2c      	ldr	r3, [pc, #176]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01f      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d019      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063bc:	4b24      	ldr	r3, [pc, #144]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063c8:	4b21      	ldr	r3, [pc, #132]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	4a20      	ldr	r2, [pc, #128]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063e8:	4a19      	ldr	r2, [pc, #100]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fa:	f7fc fa03 	bl	8002804 <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006400:	e00b      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006402:	f7fc f9ff 	bl	8002804 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	4293      	cmp	r3, r2
 8006412:	d902      	bls.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	74fb      	strb	r3, [r7, #19]
            break;
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641a:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ec      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	4904      	ldr	r1, [pc, #16]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006446:	e009      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	74bb      	strb	r3, [r7, #18]
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800645c:	7c7b      	ldrb	r3, [r7, #17]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b9e      	ldr	r3, [pc, #632]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	4a9d      	ldr	r2, [pc, #628]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800647a:	4b98      	ldr	r3, [pc, #608]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f023 0203 	bic.w	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	4994      	ldr	r1, [pc, #592]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800649c:	4b8f      	ldr	r3, [pc, #572]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f023 020c 	bic.w	r2, r3, #12
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	498c      	ldr	r1, [pc, #560]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064be:	4b87      	ldr	r3, [pc, #540]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	4983      	ldr	r1, [pc, #524]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064e0:	4b7e      	ldr	r3, [pc, #504]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	497b      	ldr	r1, [pc, #492]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006502:	4b76      	ldr	r3, [pc, #472]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	4972      	ldr	r1, [pc, #456]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006524:	4b6d      	ldr	r3, [pc, #436]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006532:	496a      	ldr	r1, [pc, #424]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006546:	4b65      	ldr	r3, [pc, #404]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	4961      	ldr	r1, [pc, #388]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006568:	4b5c      	ldr	r3, [pc, #368]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006576:	4959      	ldr	r1, [pc, #356]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800658a:	4b54      	ldr	r3, [pc, #336]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	4950      	ldr	r1, [pc, #320]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ac:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	4948      	ldr	r1, [pc, #288]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ce:	4b43      	ldr	r3, [pc, #268]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	493f      	ldr	r1, [pc, #252]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d028      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f0:	4b3a      	ldr	r3, [pc, #232]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fe:	4937      	ldr	r1, [pc, #220]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800660e:	d106      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a31      	ldr	r2, [pc, #196]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
 800661c:	e011      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006626:	d10c      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2101      	movs	r1, #1
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f8d8 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d028      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800664e:	4b23      	ldr	r3, [pc, #140]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	491f      	ldr	r1, [pc, #124]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666e:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006678:	60d3      	str	r3, [r2, #12]
 800667a:	e011      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006684:	d10c      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f8a9 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006696:	7cfb      	ldrb	r3, [r7, #19]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800669c:	7cfb      	ldrb	r3, [r7, #19]
 800669e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d02b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ba:	4908      	ldr	r1, [pc, #32]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ca:	d109      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4a02      	ldr	r2, [pc, #8]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d6:	60d3      	str	r3, [r2, #12]
 80066d8:	e014      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066da:	bf00      	nop
 80066dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f877 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066fa:	7cfb      	ldrb	r3, [r7, #19]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02f      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006710:	4b2b      	ldr	r3, [pc, #172]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006716:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800671e:	4928      	ldr	r1, [pc, #160]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800672a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672e:	d10d      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	2102      	movs	r1, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f854 	bl	80067e4 <RCCEx_PLLSAI1_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d014      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006746:	7cfb      	ldrb	r3, [r7, #19]
 8006748:	74bb      	strb	r3, [r7, #18]
 800674a:	e011      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006754:	d10c      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3320      	adds	r3, #32
 800675a:	2102      	movs	r1, #2
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f935 	bl	80069cc <RCCEx_PLLSAI2_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800676c:	7cfb      	ldrb	r3, [r7, #19]
 800676e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800677c:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678a:	490d      	ldr	r1, [pc, #52]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800679e:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ae:	4904      	ldr	r1, [pc, #16]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000

080067c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	6013      	str	r3, [r2, #0]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067f2:	4b75      	ldr	r3, [pc, #468]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d018      	beq.n	8006830 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067fe:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0203 	and.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d10d      	bne.n	800682a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
       ||
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006816:	4b6c      	ldr	r3, [pc, #432]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
       ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d047      	beq.n	80068ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	e044      	b.n	80068ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d018      	beq.n	800686a <RCCEx_PLLSAI1_Config+0x86>
 8006838:	2b03      	cmp	r3, #3
 800683a:	d825      	bhi.n	8006888 <RCCEx_PLLSAI1_Config+0xa4>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d002      	beq.n	8006846 <RCCEx_PLLSAI1_Config+0x62>
 8006840:	2b02      	cmp	r3, #2
 8006842:	d009      	beq.n	8006858 <RCCEx_PLLSAI1_Config+0x74>
 8006844:	e020      	b.n	8006888 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006846:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11d      	bne.n	800688e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006856:	e01a      	b.n	800688e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006858:	4b5b      	ldr	r3, [pc, #364]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006860:	2b00      	cmp	r3, #0
 8006862:	d116      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006868:	e013      	b.n	8006892 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800686a:	4b57      	ldr	r3, [pc, #348]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10f      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006876:	4b54      	ldr	r3, [pc, #336]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006886:	e006      	b.n	8006896 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e004      	b.n	8006898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006896:	bf00      	nop
    }

    if(status == HAL_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800689e:	4b4a      	ldr	r3, [pc, #296]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	430b      	orrs	r3, r1
 80068b4:	4944      	ldr	r1, [pc, #272]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d17d      	bne.n	80069bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068c0:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a40      	ldr	r2, [pc, #256]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068cc:	f7fb ff9a 	bl	8002804 <HAL_GetTick>
 80068d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068d2:	e009      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068d4:	f7fb ff96 	bl	8002804 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d902      	bls.n	80068e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
        break;
 80068e6:	e005      	b.n	80068f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068e8:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ef      	bne.n	80068d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d160      	bne.n	80069bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d111      	bne.n	8006924 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006900:	4b31      	ldr	r3, [pc, #196]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6892      	ldr	r2, [r2, #8]
 8006910:	0211      	lsls	r1, r2, #8
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68d2      	ldr	r2, [r2, #12]
 8006916:	0912      	lsrs	r2, r2, #4
 8006918:	0452      	lsls	r2, r2, #17
 800691a:	430a      	orrs	r2, r1
 800691c:	492a      	ldr	r1, [pc, #168]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800691e:	4313      	orrs	r3, r2
 8006920:	610b      	str	r3, [r1, #16]
 8006922:	e027      	b.n	8006974 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d112      	bne.n	8006950 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800692a:	4b27      	ldr	r3, [pc, #156]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	0211      	lsls	r1, r2, #8
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6912      	ldr	r2, [r2, #16]
 8006940:	0852      	lsrs	r2, r2, #1
 8006942:	3a01      	subs	r2, #1
 8006944:	0552      	lsls	r2, r2, #21
 8006946:	430a      	orrs	r2, r1
 8006948:	491f      	ldr	r1, [pc, #124]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800694a:	4313      	orrs	r3, r2
 800694c:	610b      	str	r3, [r1, #16]
 800694e:	e011      	b.n	8006974 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006950:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6892      	ldr	r2, [r2, #8]
 8006960:	0211      	lsls	r1, r2, #8
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6952      	ldr	r2, [r2, #20]
 8006966:	0852      	lsrs	r2, r2, #1
 8006968:	3a01      	subs	r2, #1
 800696a:	0652      	lsls	r2, r2, #25
 800696c:	430a      	orrs	r2, r1
 800696e:	4916      	ldr	r1, [pc, #88]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006970:	4313      	orrs	r3, r2
 8006972:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006974:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800697a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800697e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fb ff40 	bl	8002804 <HAL_GetTick>
 8006984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006986:	e009      	b.n	800699c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006988:	f7fb ff3c 	bl	8002804 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d902      	bls.n	800699c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	73fb      	strb	r3, [r7, #15]
          break;
 800699a:	e005      	b.n	80069a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ef      	beq.n	8006988 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	4904      	ldr	r1, [pc, #16]	; (80069c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40021000 	.word	0x40021000

080069cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069da:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069e6:	4b67      	ldr	r3, [pc, #412]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f003 0203 	and.w	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d10d      	bne.n	8006a12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
       ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80069fe:	4b61      	ldr	r3, [pc, #388]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d047      	beq.n	8006aa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
 8006a16:	e044      	b.n	8006aa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d018      	beq.n	8006a52 <RCCEx_PLLSAI2_Config+0x86>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d825      	bhi.n	8006a70 <RCCEx_PLLSAI2_Config+0xa4>
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d002      	beq.n	8006a2e <RCCEx_PLLSAI2_Config+0x62>
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d009      	beq.n	8006a40 <RCCEx_PLLSAI2_Config+0x74>
 8006a2c:	e020      	b.n	8006a70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a2e:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d11d      	bne.n	8006a76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a3e:	e01a      	b.n	8006a76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a40:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d116      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a50:	e013      	b.n	8006a7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a52:	4b4c      	ldr	r3, [pc, #304]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a5e:	4b49      	ldr	r3, [pc, #292]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a6e:	e006      	b.n	8006a7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
      break;
 8006a74:	e004      	b.n	8006a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6819      	ldr	r1, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	4939      	ldr	r1, [pc, #228]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d167      	bne.n	8006b78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006aa8:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a35      	ldr	r2, [pc, #212]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab4:	f7fb fea6 	bl	8002804 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aba:	e009      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006abc:	f7fb fea2 	bl	8002804 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ace:	e005      	b.n	8006adc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ad0:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1ef      	bne.n	8006abc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d14a      	bne.n	8006b78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d111      	bne.n	8006b0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ae8:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6892      	ldr	r2, [r2, #8]
 8006af8:	0211      	lsls	r1, r2, #8
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68d2      	ldr	r2, [r2, #12]
 8006afe:	0912      	lsrs	r2, r2, #4
 8006b00:	0452      	lsls	r2, r2, #17
 8006b02:	430a      	orrs	r2, r1
 8006b04:	491f      	ldr	r1, [pc, #124]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	614b      	str	r3, [r1, #20]
 8006b0a:	e011      	b.n	8006b30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6892      	ldr	r2, [r2, #8]
 8006b1c:	0211      	lsls	r1, r2, #8
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6912      	ldr	r2, [r2, #16]
 8006b22:	0852      	lsrs	r2, r2, #1
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0652      	lsls	r2, r2, #25
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	4916      	ldr	r1, [pc, #88]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b30:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fb fe62 	bl	8002804 <HAL_GetTick>
 8006b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b42:	e009      	b.n	8006b58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b44:	f7fb fe5e 	bl	8002804 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d902      	bls.n	8006b58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	73fb      	strb	r3, [r7, #15]
          break;
 8006b56:	e005      	b.n	8006b64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ef      	beq.n	8006b44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4904      	ldr	r1, [pc, #16]	; (8006b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40021000 	.word	0x40021000

08006b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e095      	b.n	8006cc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006baa:	d009      	beq.n	8006bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	61da      	str	r2, [r3, #28]
 8006bb2:	e005      	b.n	8006bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fb fb02 	bl	80021e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c00:	d902      	bls.n	8006c08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e002      	b.n	8006c0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c16:	d007      	beq.n	8006c28 <HAL_SPI_Init+0xa0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c20:	d002      	beq.n	8006c28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	ea42 0103 	orr.w	r1, r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	0c1b      	lsrs	r3, r3, #16
 8006c84:	f003 0204 	and.w	r2, r3, #4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ca4:	ea42 0103 	orr.w	r1, r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e040      	b.n	8006d62 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fb fabb 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	; 0x24
 8006cfa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb6b 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8b0 	bl	8006e80 <UART_SetConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e01b      	b.n	8006d62 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fbea 	bl	8007534 <UART_CheckIdleState>
 8006d60:	4603      	mov	r3, r0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b08a      	sub	sp, #40	; 0x28
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d178      	bne.n	8006e74 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_UART_Transmit+0x24>
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e071      	b.n	8006e76 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2221      	movs	r2, #33	; 0x21
 8006d9e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da0:	f7fb fd30 	bl	8002804 <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	88fa      	ldrh	r2, [r7, #6]
 8006db2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d108      	bne.n	8006dd2 <HAL_UART_Transmit+0x68>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	e003      	b.n	8006dda <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dda:	e030      	b.n	8006e3e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	; 0x80
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fc4c 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e03c      	b.n	8006e76 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3302      	adds	r3, #2
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e008      	b.n	8006e2c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	b292      	uxth	r2, r2
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1c8      	bne.n	8006ddc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2140      	movs	r1, #64	; 0x40
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fc15 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e005      	b.n	8006e76 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e000      	b.n	8006e76 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e84:	b08a      	sub	sp, #40	; 0x28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4ba4      	ldr	r3, [pc, #656]	; (8007140 <UART_SetConfig+0x2c0>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a99      	ldr	r2, [pc, #612]	; (8007144 <UART_SetConfig+0x2c4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efc:	430a      	orrs	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a90      	ldr	r2, [pc, #576]	; (8007148 <UART_SetConfig+0x2c8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d126      	bne.n	8006f58 <UART_SetConfig+0xd8>
 8006f0a:	4b90      	ldr	r3, [pc, #576]	; (800714c <UART_SetConfig+0x2cc>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d81b      	bhi.n	8006f50 <UART_SetConfig+0xd0>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0xa0>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f31 	.word	0x08006f31
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f36:	e116      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3e:	e112      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f46:	e10e      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4e:	e10a      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f56:	e106      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <UART_SetConfig+0x2d0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d138      	bne.n	8006fd4 <UART_SetConfig+0x154>
 8006f62:	4b7a      	ldr	r3, [pc, #488]	; (800714c <UART_SetConfig+0x2cc>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	d82d      	bhi.n	8006fcc <UART_SetConfig+0x14c>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0xf8>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006fad 	.word	0x08006fad
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006fcd 	.word	0x08006fcd
 8006f84:	08006fcd 	.word	0x08006fcd
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fcd 	.word	0x08006fcd
 8006f94:	08006fcd 	.word	0x08006fcd
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fcd 	.word	0x08006fcd
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb2:	e0d8      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fba:	e0d4      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc2:	e0d0      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fca:	e0cc      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd2:	e0c8      	b.n	8007166 <UART_SetConfig+0x2e6>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <UART_SetConfig+0x2d4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d125      	bne.n	800702a <UART_SetConfig+0x1aa>
 8006fde:	4b5b      	ldr	r3, [pc, #364]	; (800714c <UART_SetConfig+0x2cc>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fe8:	2b30      	cmp	r3, #48	; 0x30
 8006fea:	d016      	beq.n	800701a <UART_SetConfig+0x19a>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d818      	bhi.n	8007022 <UART_SetConfig+0x1a2>
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d00a      	beq.n	800700a <UART_SetConfig+0x18a>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d814      	bhi.n	8007022 <UART_SetConfig+0x1a2>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <UART_SetConfig+0x182>
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d008      	beq.n	8007012 <UART_SetConfig+0x192>
 8007000:	e00f      	b.n	8007022 <UART_SetConfig+0x1a2>
 8007002:	2300      	movs	r3, #0
 8007004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007008:	e0ad      	b.n	8007166 <UART_SetConfig+0x2e6>
 800700a:	2302      	movs	r3, #2
 800700c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007010:	e0a9      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007012:	2304      	movs	r3, #4
 8007014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007018:	e0a5      	b.n	8007166 <UART_SetConfig+0x2e6>
 800701a:	2308      	movs	r3, #8
 800701c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007020:	e0a1      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007022:	2310      	movs	r3, #16
 8007024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007028:	e09d      	b.n	8007166 <UART_SetConfig+0x2e6>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4a      	ldr	r2, [pc, #296]	; (8007158 <UART_SetConfig+0x2d8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d125      	bne.n	8007080 <UART_SetConfig+0x200>
 8007034:	4b45      	ldr	r3, [pc, #276]	; (800714c <UART_SetConfig+0x2cc>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800703e:	2bc0      	cmp	r3, #192	; 0xc0
 8007040:	d016      	beq.n	8007070 <UART_SetConfig+0x1f0>
 8007042:	2bc0      	cmp	r3, #192	; 0xc0
 8007044:	d818      	bhi.n	8007078 <UART_SetConfig+0x1f8>
 8007046:	2b80      	cmp	r3, #128	; 0x80
 8007048:	d00a      	beq.n	8007060 <UART_SetConfig+0x1e0>
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d814      	bhi.n	8007078 <UART_SetConfig+0x1f8>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <UART_SetConfig+0x1d8>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d008      	beq.n	8007068 <UART_SetConfig+0x1e8>
 8007056:	e00f      	b.n	8007078 <UART_SetConfig+0x1f8>
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e082      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007066:	e07e      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706e:	e07a      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007076:	e076      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707e:	e072      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a35      	ldr	r2, [pc, #212]	; (800715c <UART_SetConfig+0x2dc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d12a      	bne.n	80070e0 <UART_SetConfig+0x260>
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <UART_SetConfig+0x2cc>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007098:	d01a      	beq.n	80070d0 <UART_SetConfig+0x250>
 800709a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709e:	d81b      	bhi.n	80070d8 <UART_SetConfig+0x258>
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d00c      	beq.n	80070c0 <UART_SetConfig+0x240>
 80070a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070aa:	d815      	bhi.n	80070d8 <UART_SetConfig+0x258>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <UART_SetConfig+0x238>
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b4:	d008      	beq.n	80070c8 <UART_SetConfig+0x248>
 80070b6:	e00f      	b.n	80070d8 <UART_SetConfig+0x258>
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e052      	b.n	8007166 <UART_SetConfig+0x2e6>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e04e      	b.n	8007166 <UART_SetConfig+0x2e6>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ce:	e04a      	b.n	8007166 <UART_SetConfig+0x2e6>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d6:	e046      	b.n	8007166 <UART_SetConfig+0x2e6>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070de:	e042      	b.n	8007166 <UART_SetConfig+0x2e6>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a17      	ldr	r2, [pc, #92]	; (8007144 <UART_SetConfig+0x2c4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d13a      	bne.n	8007160 <UART_SetConfig+0x2e0>
 80070ea:	4b18      	ldr	r3, [pc, #96]	; (800714c <UART_SetConfig+0x2cc>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070f8:	d01a      	beq.n	8007130 <UART_SetConfig+0x2b0>
 80070fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070fe:	d81b      	bhi.n	8007138 <UART_SetConfig+0x2b8>
 8007100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007104:	d00c      	beq.n	8007120 <UART_SetConfig+0x2a0>
 8007106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710a:	d815      	bhi.n	8007138 <UART_SetConfig+0x2b8>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <UART_SetConfig+0x298>
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007114:	d008      	beq.n	8007128 <UART_SetConfig+0x2a8>
 8007116:	e00f      	b.n	8007138 <UART_SetConfig+0x2b8>
 8007118:	2300      	movs	r3, #0
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711e:	e022      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007126:	e01e      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712e:	e01a      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007136:	e016      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800713e:	e012      	b.n	8007166 <UART_SetConfig+0x2e6>
 8007140:	efff69f3 	.word	0xefff69f3
 8007144:	40008000 	.word	0x40008000
 8007148:	40013800 	.word	0x40013800
 800714c:	40021000 	.word	0x40021000
 8007150:	40004400 	.word	0x40004400
 8007154:	40004800 	.word	0x40004800
 8007158:	40004c00 	.word	0x40004c00
 800715c:	40005000 	.word	0x40005000
 8007160:	2310      	movs	r3, #16
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a9f      	ldr	r2, [pc, #636]	; (80073e8 <UART_SetConfig+0x568>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d17a      	bne.n	8007266 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007174:	2b08      	cmp	r3, #8
 8007176:	d824      	bhi.n	80071c2 <UART_SetConfig+0x342>
 8007178:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x300>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071c3 	.word	0x080071c3
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071c3 	.word	0x080071c3
 8007190:	080071b3 	.word	0x080071b3
 8007194:	080071c3 	.word	0x080071c3
 8007198:	080071c3 	.word	0x080071c3
 800719c:	080071c3 	.word	0x080071c3
 80071a0:	080071bb 	.word	0x080071bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a4:	f7fe ff98 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 80071a8:	61f8      	str	r0, [r7, #28]
        break;
 80071aa:	e010      	b.n	80071ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ac:	4b8f      	ldr	r3, [pc, #572]	; (80073ec <UART_SetConfig+0x56c>)
 80071ae:	61fb      	str	r3, [r7, #28]
        break;
 80071b0:	e00d      	b.n	80071ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b2:	f7fe fef9 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 80071b6:	61f8      	str	r0, [r7, #28]
        break;
 80071b8:	e009      	b.n	80071ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071be:	61fb      	str	r3, [r7, #28]
        break;
 80071c0:	e005      	b.n	80071ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80fb 	beq.w	80073cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d305      	bcc.n	80071f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d903      	bls.n	80071fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071f8:	e0e8      	b.n	80073cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	2200      	movs	r2, #0
 80071fe:	461c      	mov	r4, r3
 8007200:	4615      	mov	r5, r2
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	022b      	lsls	r3, r5, #8
 800720c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007210:	0222      	lsls	r2, r4, #8
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6849      	ldr	r1, [r1, #4]
 8007216:	0849      	lsrs	r1, r1, #1
 8007218:	2000      	movs	r0, #0
 800721a:	4688      	mov	r8, r1
 800721c:	4681      	mov	r9, r0
 800721e:	eb12 0a08 	adds.w	sl, r2, r8
 8007222:	eb43 0b09 	adc.w	fp, r3, r9
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	f7f9 fcb6 	bl	8000ba8 <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4613      	mov	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724a:	d308      	bcc.n	800725e <UART_SetConfig+0x3de>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007252:	d204      	bcs.n	800725e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e0b6      	b.n	80073cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007264:	e0b2      	b.n	80073cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726e:	d15e      	bne.n	800732e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007274:	2b08      	cmp	r3, #8
 8007276:	d828      	bhi.n	80072ca <UART_SetConfig+0x44a>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <UART_SetConfig+0x400>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072b5 	.word	0x080072b5
 800728c:	080072cb 	.word	0x080072cb
 8007290:	080072bb 	.word	0x080072bb
 8007294:	080072cb 	.word	0x080072cb
 8007298:	080072cb 	.word	0x080072cb
 800729c:	080072cb 	.word	0x080072cb
 80072a0:	080072c3 	.word	0x080072c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fe ff18 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 80072a8:	61f8      	str	r0, [r7, #28]
        break;
 80072aa:	e014      	b.n	80072d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ac:	f7fe ff2a 	bl	8006104 <HAL_RCC_GetPCLK2Freq>
 80072b0:	61f8      	str	r0, [r7, #28]
        break;
 80072b2:	e010      	b.n	80072d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b4:	4b4d      	ldr	r3, [pc, #308]	; (80073ec <UART_SetConfig+0x56c>)
 80072b6:	61fb      	str	r3, [r7, #28]
        break;
 80072b8:	e00d      	b.n	80072d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ba:	f7fe fe75 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 80072be:	61f8      	str	r0, [r7, #28]
        break;
 80072c0:	e009      	b.n	80072d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	61fb      	str	r3, [r7, #28]
        break;
 80072c8:	e005      	b.n	80072d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d077      	beq.n	80073cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	005a      	lsls	r2, r3, #1
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	085b      	lsrs	r3, r3, #1
 80072e6:	441a      	add	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b0f      	cmp	r3, #15
 80072f6:	d916      	bls.n	8007326 <UART_SetConfig+0x4a6>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fe:	d212      	bcs.n	8007326 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f023 030f 	bic.w	r3, r3, #15
 8007308:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	085b      	lsrs	r3, r3, #1
 800730e:	b29b      	uxth	r3, r3
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	b29a      	uxth	r2, r3
 8007316:	8afb      	ldrh	r3, [r7, #22]
 8007318:	4313      	orrs	r3, r2
 800731a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	8afa      	ldrh	r2, [r7, #22]
 8007322:	60da      	str	r2, [r3, #12]
 8007324:	e052      	b.n	80073cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800732c:	e04e      	b.n	80073cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800732e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007332:	2b08      	cmp	r3, #8
 8007334:	d827      	bhi.n	8007386 <UART_SetConfig+0x506>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x4bc>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	08007387 	.word	0x08007387
 800734c:	08007377 	.word	0x08007377
 8007350:	08007387 	.word	0x08007387
 8007354:	08007387 	.word	0x08007387
 8007358:	08007387 	.word	0x08007387
 800735c:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007360:	f7fe feba 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 8007364:	61f8      	str	r0, [r7, #28]
        break;
 8007366:	e014      	b.n	8007392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007368:	f7fe fecc 	bl	8006104 <HAL_RCC_GetPCLK2Freq>
 800736c:	61f8      	str	r0, [r7, #28]
        break;
 800736e:	e010      	b.n	8007392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <UART_SetConfig+0x56c>)
 8007372:	61fb      	str	r3, [r7, #28]
        break;
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fe fe17 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 800737a:	61f8      	str	r0, [r7, #28]
        break;
 800737c:	e009      	b.n	8007392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007382:	61fb      	str	r3, [r7, #28]
        break;
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007390:	bf00      	nop
    }

    if (pclk != 0U)
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d019      	beq.n	80073cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	085a      	lsrs	r2, r3, #1
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b0f      	cmp	r3, #15
 80073b0:	d909      	bls.n	80073c6 <UART_SetConfig+0x546>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d205      	bcs.n	80073c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60da      	str	r2, [r3, #12]
 80073c4:	e002      	b.n	80073cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3728      	adds	r7, #40	; 0x28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e6:	bf00      	nop
 80073e8:	40008000 	.word	0x40008000
 80073ec:	00f42400 	.word	0x00f42400

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b098      	sub	sp, #96	; 0x60
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007544:	f7fb f95e 	bl	8002804 <HAL_GetTick>
 8007548:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d12e      	bne.n	80075b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f88c 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d021      	beq.n	80075b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007586:	653b      	str	r3, [r7, #80]	; 0x50
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007590:	647b      	str	r3, [r7, #68]	; 0x44
 8007592:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e062      	b.n	800767c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d149      	bne.n	8007658 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075cc:	2200      	movs	r2, #0
 80075ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f856 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d03c      	beq.n	8007658 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	623b      	str	r3, [r7, #32]
   return(result);
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
 80075fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	64bb      	str	r3, [r7, #72]	; 0x48
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007630:	61fa      	str	r2, [r7, #28]
 8007632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	69b9      	ldr	r1, [r7, #24]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	617b      	str	r3, [r7, #20]
   return(result);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e011      	b.n	800767c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3758      	adds	r7, #88	; 0x58
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007694:	e049      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d045      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fb f8b1 	bl	8002804 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e048      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d031      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d110      	bne.n	80076f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2208      	movs	r2, #8
 80076da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f838 	bl	8007752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2208      	movs	r2, #8
 80076e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e029      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007704:	d111      	bne.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800770e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f81e 	bl	8007752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e00f      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4013      	ands	r3, r2
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	429a      	cmp	r2, r3
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	429a      	cmp	r2, r3
 8007746:	d0a6      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007752:	b480      	push	{r7}
 8007754:	b095      	sub	sp, #84	; 0x54
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800776e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
 800777a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800777e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e6      	bne.n	800775a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3308      	adds	r3, #8
 8007792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	61fb      	str	r3, [r7, #28]
   return(result);
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e5      	bne.n	800778c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d118      	bne.n	80077fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f023 0310 	bic.w	r3, r3, #16
 80077dc:	647b      	str	r3, [r7, #68]	; 0x44
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e6:	61bb      	str	r3, [r7, #24]
 80077e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6979      	ldr	r1, [r7, #20]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	613b      	str	r3, [r7, #16]
   return(result);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e6      	bne.n	80077c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800780e:	bf00      	nop
 8007810:	3754      	adds	r7, #84	; 0x54
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800781a:	b084      	sub	sp, #16
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	f107 001c 	add.w	r0, r7, #28
 8007828:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa65 	bl	8007d08 <USB_CoreReset>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
 8007854:	e005      	b.n	8007862 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800786e:	b004      	add	sp, #16
 8007870:	4770      	bx	lr

08007872 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d115      	bne.n	80078e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078c2:	2001      	movs	r0, #1
 80078c4:	f7fa ffaa 	bl	800281c <HAL_Delay>
      ms++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa0c 	bl	8007cec <USB_GetMode>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d01e      	beq.n	8007918 <USB_SetCurrentMode+0x84>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b31      	cmp	r3, #49	; 0x31
 80078de:	d9f0      	bls.n	80078c2 <USB_SetCurrentMode+0x2e>
 80078e0:	e01a      	b.n	8007918 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d115      	bne.n	8007914 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078f4:	2001      	movs	r0, #1
 80078f6:	f7fa ff91 	bl	800281c <HAL_Delay>
      ms++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f9f3 	bl	8007cec <USB_GetMode>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <USB_SetCurrentMode+0x84>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b31      	cmp	r3, #49	; 0x31
 8007910:	d9f0      	bls.n	80078f4 <USB_SetCurrentMode+0x60>
 8007912:	e001      	b.n	8007918 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e005      	b.n	8007924 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b32      	cmp	r3, #50	; 0x32
 800791c:	d101      	bne.n	8007922 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800792c:	b084      	sub	sp, #16
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800793a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e009      	b.n	8007960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3340      	adds	r3, #64	; 0x40
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3301      	adds	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b0e      	cmp	r3, #14
 8007964:	d9f2      	bls.n	800794c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11c      	bne.n	80079a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797a:	f043 0302 	orr.w	r3, r3, #2
 800797e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e005      	b.n	80079b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b8:	461a      	mov	r2, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079be:	2103      	movs	r1, #3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f959 	bl	8007c78 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079c6:	2110      	movs	r1, #16
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8f1 	bl	8007bb0 <USB_FlushTxFifo>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f91d 	bl	8007c18 <USB_FlushRxFifo>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	461a      	mov	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fa:	461a      	mov	r2, r3
 80079fc:	2300      	movs	r3, #0
 80079fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a06:	461a      	mov	r2, r3
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	e043      	b.n	8007a9a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a28:	d118      	bne.n	8007a5c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	e013      	b.n	8007a6e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	461a      	mov	r2, r3
 8007a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e008      	b.n	8007a6e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3301      	adds	r3, #1
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d3b7      	bcc.n	8007a12 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	e043      	b.n	8007b30 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007abe:	d118      	bne.n	8007af2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	e013      	b.n	8007b04 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	e008      	b.n	8007b04 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afe:	461a      	mov	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	2300      	movs	r3, #0
 8007b14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	461a      	mov	r2, r3
 8007b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d3b7      	bcc.n	8007aa8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f043 0210 	orr.w	r2, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	4b10      	ldr	r3, [pc, #64]	; (8007bac <USB_DevInit+0x280>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f043 0208 	orr.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d107      	bne.n	8007b9a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b92:	f043 0304 	orr.w	r3, r3, #4
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba6:	b004      	add	sp, #16
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	803c3800 	.word	0x803c3800

08007bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <USB_FlushTxFifo+0x64>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d901      	bls.n	8007bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e01b      	b.n	8007c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	daf2      	bge.n	8007bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	019b      	lsls	r3, r3, #6
 8007be0:	f043 0220 	orr.w	r2, r3, #32
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <USB_FlushTxFifo+0x64>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d901      	bls.n	8007bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e006      	b.n	8007c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d0f0      	beq.n	8007be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	00030d40 	.word	0x00030d40

08007c18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a11      	ldr	r2, [pc, #68]	; (8007c74 <USB_FlushRxFifo+0x5c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d901      	bls.n	8007c36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e018      	b.n	8007c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	daf2      	bge.n	8007c24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2210      	movs	r2, #16
 8007c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <USB_FlushRxFifo+0x5c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e006      	b.n	8007c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d0f0      	beq.n	8007c48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	00030d40 	.word	0x00030d40

08007c78 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cc4:	f023 0303 	bic.w	r3, r3, #3
 8007cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <USB_CoreReset+0x64>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e01b      	b.n	8007d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	daf2      	bge.n	8007d14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f043 0201 	orr.w	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3301      	adds	r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <USB_CoreReset+0x64>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d901      	bls.n	8007d50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e006      	b.n	8007d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d0f0      	beq.n	8007d3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	00030d40 	.word	0x00030d40

08007d70 <__cvt>:
 8007d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	ec55 4b10 	vmov	r4, r5, d0
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	460e      	mov	r6, r1
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	462b      	mov	r3, r5
 8007d80:	bfbb      	ittet	lt
 8007d82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d86:	461d      	movlt	r5, r3
 8007d88:	2300      	movge	r3, #0
 8007d8a:	232d      	movlt	r3, #45	; 0x2d
 8007d8c:	700b      	strb	r3, [r1, #0]
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d94:	4691      	mov	r9, r2
 8007d96:	f023 0820 	bic.w	r8, r3, #32
 8007d9a:	bfbc      	itt	lt
 8007d9c:	4622      	movlt	r2, r4
 8007d9e:	4614      	movlt	r4, r2
 8007da0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007da4:	d005      	beq.n	8007db2 <__cvt+0x42>
 8007da6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007daa:	d100      	bne.n	8007dae <__cvt+0x3e>
 8007dac:	3601      	adds	r6, #1
 8007dae:	2102      	movs	r1, #2
 8007db0:	e000      	b.n	8007db4 <__cvt+0x44>
 8007db2:	2103      	movs	r1, #3
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	ab02      	add	r3, sp, #8
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	ec45 4b10 	vmov	d0, r4, r5
 8007dc0:	4653      	mov	r3, sl
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	f000 fe54 	bl	8008a70 <_dtoa_r>
 8007dc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dcc:	4607      	mov	r7, r0
 8007dce:	d102      	bne.n	8007dd6 <__cvt+0x66>
 8007dd0:	f019 0f01 	tst.w	r9, #1
 8007dd4:	d022      	beq.n	8007e1c <__cvt+0xac>
 8007dd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dda:	eb07 0906 	add.w	r9, r7, r6
 8007dde:	d110      	bne.n	8007e02 <__cvt+0x92>
 8007de0:	783b      	ldrb	r3, [r7, #0]
 8007de2:	2b30      	cmp	r3, #48	; 0x30
 8007de4:	d10a      	bne.n	8007dfc <__cvt+0x8c>
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4620      	mov	r0, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	f7f8 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007df2:	b918      	cbnz	r0, 8007dfc <__cvt+0x8c>
 8007df4:	f1c6 0601 	rsb	r6, r6, #1
 8007df8:	f8ca 6000 	str.w	r6, [sl]
 8007dfc:	f8da 3000 	ldr.w	r3, [sl]
 8007e00:	4499      	add	r9, r3
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e0e:	b108      	cbz	r0, 8007e14 <__cvt+0xa4>
 8007e10:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e14:	2230      	movs	r2, #48	; 0x30
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	454b      	cmp	r3, r9
 8007e1a:	d307      	bcc.n	8007e2c <__cvt+0xbc>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e20:	1bdb      	subs	r3, r3, r7
 8007e22:	4638      	mov	r0, r7
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	b004      	add	sp, #16
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	1c59      	adds	r1, r3, #1
 8007e2e:	9103      	str	r1, [sp, #12]
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e7f0      	b.n	8007e16 <__cvt+0xa6>

08007e34 <__exponent>:
 8007e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e36:	4603      	mov	r3, r0
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	bfb8      	it	lt
 8007e3c:	4249      	neglt	r1, r1
 8007e3e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e42:	bfb4      	ite	lt
 8007e44:	222d      	movlt	r2, #45	; 0x2d
 8007e46:	222b      	movge	r2, #43	; 0x2b
 8007e48:	2909      	cmp	r1, #9
 8007e4a:	7042      	strb	r2, [r0, #1]
 8007e4c:	dd2a      	ble.n	8007ea4 <__exponent+0x70>
 8007e4e:	f10d 0207 	add.w	r2, sp, #7
 8007e52:	4617      	mov	r7, r2
 8007e54:	260a      	movs	r6, #10
 8007e56:	4694      	mov	ip, r2
 8007e58:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e5c:	fb06 1415 	mls	r4, r6, r5, r1
 8007e60:	3430      	adds	r4, #48	; 0x30
 8007e62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e66:	460c      	mov	r4, r1
 8007e68:	2c63      	cmp	r4, #99	; 0x63
 8007e6a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e6e:	4629      	mov	r1, r5
 8007e70:	dcf1      	bgt.n	8007e56 <__exponent+0x22>
 8007e72:	3130      	adds	r1, #48	; 0x30
 8007e74:	f1ac 0402 	sub.w	r4, ip, #2
 8007e78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e7c:	1c41      	adds	r1, r0, #1
 8007e7e:	4622      	mov	r2, r4
 8007e80:	42ba      	cmp	r2, r7
 8007e82:	d30a      	bcc.n	8007e9a <__exponent+0x66>
 8007e84:	f10d 0209 	add.w	r2, sp, #9
 8007e88:	eba2 020c 	sub.w	r2, r2, ip
 8007e8c:	42bc      	cmp	r4, r7
 8007e8e:	bf88      	it	hi
 8007e90:	2200      	movhi	r2, #0
 8007e92:	4413      	add	r3, r2
 8007e94:	1a18      	subs	r0, r3, r0
 8007e96:	b003      	add	sp, #12
 8007e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ea2:	e7ed      	b.n	8007e80 <__exponent+0x4c>
 8007ea4:	2330      	movs	r3, #48	; 0x30
 8007ea6:	3130      	adds	r1, #48	; 0x30
 8007ea8:	7083      	strb	r3, [r0, #2]
 8007eaa:	70c1      	strb	r1, [r0, #3]
 8007eac:	1d03      	adds	r3, r0, #4
 8007eae:	e7f1      	b.n	8007e94 <__exponent+0x60>

08007eb0 <_printf_float>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	ed2d 8b02 	vpush	{d8}
 8007eb8:	b08d      	sub	sp, #52	; 0x34
 8007eba:	460c      	mov	r4, r1
 8007ebc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	461f      	mov	r7, r3
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	f000 fcd5 	bl	8008874 <_localeconv_r>
 8007eca:	f8d0 a000 	ldr.w	sl, [r0]
 8007ece:	4650      	mov	r0, sl
 8007ed0:	f7f8 f9ce 	bl	8000270 <strlen>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	f103 0208 	add.w	r2, r3, #8
 8007eee:	f8c8 2000 	str.w	r2, [r8]
 8007ef2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f00:	ee08 0a10 	vmov	s16, r0
 8007f04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f0c:	4b9e      	ldr	r3, [pc, #632]	; (8008188 <_printf_float+0x2d8>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	f7f8 fe0b 	bl	8000b2c <__aeabi_dcmpun>
 8007f16:	bb88      	cbnz	r0, 8007f7c <_printf_float+0xcc>
 8007f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f1c:	4b9a      	ldr	r3, [pc, #616]	; (8008188 <_printf_float+0x2d8>)
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	f7f8 fde5 	bl	8000af0 <__aeabi_dcmple>
 8007f26:	bb48      	cbnz	r0, 8007f7c <_printf_float+0xcc>
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8007f34:	b110      	cbz	r0, 8007f3c <_printf_float+0x8c>
 8007f36:	232d      	movs	r3, #45	; 0x2d
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	4a93      	ldr	r2, [pc, #588]	; (800818c <_printf_float+0x2dc>)
 8007f3e:	4b94      	ldr	r3, [pc, #592]	; (8008190 <_printf_float+0x2e0>)
 8007f40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f44:	bf94      	ite	ls
 8007f46:	4690      	movls	r8, r2
 8007f48:	4698      	movhi	r8, r3
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	f023 0304 	bic.w	r3, r3, #4
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	9700      	str	r7, [sp, #0]
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 f9da 	bl	800831c <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f040 8090 	bne.w	800808e <_printf_float+0x1de>
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	b00d      	add	sp, #52	; 0x34
 8007f74:	ecbd 8b02 	vpop	{d8}
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8007f88:	b140      	cbz	r0, 8007f9c <_printf_float+0xec>
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfbc      	itt	lt
 8007f90:	232d      	movlt	r3, #45	; 0x2d
 8007f92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f96:	4a7f      	ldr	r2, [pc, #508]	; (8008194 <_printf_float+0x2e4>)
 8007f98:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <_printf_float+0x2e8>)
 8007f9a:	e7d1      	b.n	8007f40 <_printf_float+0x90>
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fa2:	9206      	str	r2, [sp, #24]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	d13f      	bne.n	8008028 <_printf_float+0x178>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	6861      	ldr	r1, [r4, #4]
 8007fb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fbe:	ab09      	add	r3, sp, #36	; 0x24
 8007fc0:	ec49 8b10 	vmov	d0, r8, r9
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	6022      	str	r2, [r4, #0]
 8007fc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f7ff fecf 	bl	8007d70 <__cvt>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fd6:	2b47      	cmp	r3, #71	; 0x47
 8007fd8:	4680      	mov	r8, r0
 8007fda:	d108      	bne.n	8007fee <_printf_float+0x13e>
 8007fdc:	1cc8      	adds	r0, r1, #3
 8007fde:	db02      	blt.n	8007fe6 <_printf_float+0x136>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	dd41      	ble.n	800806a <_printf_float+0x1ba>
 8007fe6:	f1ab 0302 	sub.w	r3, fp, #2
 8007fea:	fa5f fb83 	uxtb.w	fp, r3
 8007fee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ff2:	d820      	bhi.n	8008036 <_printf_float+0x186>
 8007ff4:	3901      	subs	r1, #1
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8007ffe:	f7ff ff19 	bl	8007e34 <__exponent>
 8008002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008004:	1813      	adds	r3, r2, r0
 8008006:	2a01      	cmp	r2, #1
 8008008:	4681      	mov	r9, r0
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	dc02      	bgt.n	8008014 <_printf_float+0x164>
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	07d2      	lsls	r2, r2, #31
 8008012:	d501      	bpl.n	8008018 <_printf_float+0x168>
 8008014:	3301      	adds	r3, #1
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800801c:	2b00      	cmp	r3, #0
 800801e:	d09c      	beq.n	8007f5a <_printf_float+0xaa>
 8008020:	232d      	movs	r3, #45	; 0x2d
 8008022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008026:	e798      	b.n	8007f5a <_printf_float+0xaa>
 8008028:	9a06      	ldr	r2, [sp, #24]
 800802a:	2a47      	cmp	r2, #71	; 0x47
 800802c:	d1be      	bne.n	8007fac <_printf_float+0xfc>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1bc      	bne.n	8007fac <_printf_float+0xfc>
 8008032:	2301      	movs	r3, #1
 8008034:	e7b9      	b.n	8007faa <_printf_float+0xfa>
 8008036:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800803a:	d118      	bne.n	800806e <_printf_float+0x1be>
 800803c:	2900      	cmp	r1, #0
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	dd0b      	ble.n	800805a <_printf_float+0x1aa>
 8008042:	6121      	str	r1, [r4, #16]
 8008044:	b913      	cbnz	r3, 800804c <_printf_float+0x19c>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d502      	bpl.n	8008052 <_printf_float+0x1a2>
 800804c:	3301      	adds	r3, #1
 800804e:	440b      	add	r3, r1
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	65a1      	str	r1, [r4, #88]	; 0x58
 8008054:	f04f 0900 	mov.w	r9, #0
 8008058:	e7de      	b.n	8008018 <_printf_float+0x168>
 800805a:	b913      	cbnz	r3, 8008062 <_printf_float+0x1b2>
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	07d2      	lsls	r2, r2, #31
 8008060:	d501      	bpl.n	8008066 <_printf_float+0x1b6>
 8008062:	3302      	adds	r3, #2
 8008064:	e7f4      	b.n	8008050 <_printf_float+0x1a0>
 8008066:	2301      	movs	r3, #1
 8008068:	e7f2      	b.n	8008050 <_printf_float+0x1a0>
 800806a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008070:	4299      	cmp	r1, r3
 8008072:	db05      	blt.n	8008080 <_printf_float+0x1d0>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	6121      	str	r1, [r4, #16]
 8008078:	07d8      	lsls	r0, r3, #31
 800807a:	d5ea      	bpl.n	8008052 <_printf_float+0x1a2>
 800807c:	1c4b      	adds	r3, r1, #1
 800807e:	e7e7      	b.n	8008050 <_printf_float+0x1a0>
 8008080:	2900      	cmp	r1, #0
 8008082:	bfd4      	ite	le
 8008084:	f1c1 0202 	rsble	r2, r1, #2
 8008088:	2201      	movgt	r2, #1
 800808a:	4413      	add	r3, r2
 800808c:	e7e0      	b.n	8008050 <_printf_float+0x1a0>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	055a      	lsls	r2, r3, #21
 8008092:	d407      	bmi.n	80080a4 <_printf_float+0x1f4>
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	4642      	mov	r2, r8
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d12c      	bne.n	80080fc <_printf_float+0x24c>
 80080a2:	e764      	b.n	8007f6e <_printf_float+0xbe>
 80080a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080a8:	f240 80e0 	bls.w	800826c <_printf_float+0x3bc>
 80080ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	f7f8 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d034      	beq.n	8008126 <_printf_float+0x276>
 80080bc:	4a37      	ldr	r2, [pc, #220]	; (800819c <_printf_float+0x2ec>)
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af51 	beq.w	8007f6e <_printf_float+0xbe>
 80080cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d0:	429a      	cmp	r2, r3
 80080d2:	db02      	blt.n	80080da <_printf_float+0x22a>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	07d8      	lsls	r0, r3, #31
 80080d8:	d510      	bpl.n	80080fc <_printf_float+0x24c>
 80080da:	ee18 3a10 	vmov	r3, s16
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af41 	beq.w	8007f6e <_printf_float+0xbe>
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	f104 091a 	add.w	r9, r4, #26
 80080f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	4543      	cmp	r3, r8
 80080fa:	dc09      	bgt.n	8008110 <_printf_float+0x260>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	f100 8107 	bmi.w	8008312 <_printf_float+0x462>
 8008104:	68e0      	ldr	r0, [r4, #12]
 8008106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008108:	4298      	cmp	r0, r3
 800810a:	bfb8      	it	lt
 800810c:	4618      	movlt	r0, r3
 800810e:	e730      	b.n	8007f72 <_printf_float+0xc2>
 8008110:	2301      	movs	r3, #1
 8008112:	464a      	mov	r2, r9
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af27 	beq.w	8007f6e <_printf_float+0xbe>
 8008120:	f108 0801 	add.w	r8, r8, #1
 8008124:	e7e6      	b.n	80080f4 <_printf_float+0x244>
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	dc39      	bgt.n	80081a0 <_printf_float+0x2f0>
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <_printf_float+0x2ec>)
 800812e:	2301      	movs	r3, #1
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	f43f af19 	beq.w	8007f6e <_printf_float+0xbe>
 800813c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008140:	4313      	orrs	r3, r2
 8008142:	d102      	bne.n	800814a <_printf_float+0x29a>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d5d8      	bpl.n	80080fc <_printf_float+0x24c>
 800814a:	ee18 3a10 	vmov	r3, s16
 800814e:	4652      	mov	r2, sl
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af09 	beq.w	8007f6e <_printf_float+0xbe>
 800815c:	f04f 0900 	mov.w	r9, #0
 8008160:	f104 0a1a 	add.w	sl, r4, #26
 8008164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008166:	425b      	negs	r3, r3
 8008168:	454b      	cmp	r3, r9
 800816a:	dc01      	bgt.n	8008170 <_printf_float+0x2c0>
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	e792      	b.n	8008096 <_printf_float+0x1e6>
 8008170:	2301      	movs	r3, #1
 8008172:	4652      	mov	r2, sl
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f aef7 	beq.w	8007f6e <_printf_float+0xbe>
 8008180:	f109 0901 	add.w	r9, r9, #1
 8008184:	e7ee      	b.n	8008164 <_printf_float+0x2b4>
 8008186:	bf00      	nop
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	0800aad8 	.word	0x0800aad8
 8008190:	0800aadc 	.word	0x0800aadc
 8008194:	0800aae0 	.word	0x0800aae0
 8008198:	0800aae4 	.word	0x0800aae4
 800819c:	0800aae8 	.word	0x0800aae8
 80081a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a4:	429a      	cmp	r2, r3
 80081a6:	bfa8      	it	ge
 80081a8:	461a      	movge	r2, r3
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	4691      	mov	r9, r2
 80081ae:	dc37      	bgt.n	8008220 <_printf_float+0x370>
 80081b0:	f04f 0b00 	mov.w	fp, #0
 80081b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081b8:	f104 021a 	add.w	r2, r4, #26
 80081bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	eba3 0309 	sub.w	r3, r3, r9
 80081c4:	455b      	cmp	r3, fp
 80081c6:	dc33      	bgt.n	8008230 <_printf_float+0x380>
 80081c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081cc:	429a      	cmp	r2, r3
 80081ce:	db3b      	blt.n	8008248 <_printf_float+0x398>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	07da      	lsls	r2, r3, #31
 80081d4:	d438      	bmi.n	8008248 <_printf_float+0x398>
 80081d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081da:	eba2 0903 	sub.w	r9, r2, r3
 80081de:	9b05      	ldr	r3, [sp, #20]
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	4591      	cmp	r9, r2
 80081e4:	bfa8      	it	ge
 80081e6:	4691      	movge	r9, r2
 80081e8:	f1b9 0f00 	cmp.w	r9, #0
 80081ec:	dc35      	bgt.n	800825a <_printf_float+0x3aa>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081f6:	f104 0a1a 	add.w	sl, r4, #26
 80081fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	eba3 0309 	sub.w	r3, r3, r9
 8008204:	4543      	cmp	r3, r8
 8008206:	f77f af79 	ble.w	80080fc <_printf_float+0x24c>
 800820a:	2301      	movs	r3, #1
 800820c:	4652      	mov	r2, sl
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	f43f aeaa 	beq.w	8007f6e <_printf_float+0xbe>
 800821a:	f108 0801 	add.w	r8, r8, #1
 800821e:	e7ec      	b.n	80081fa <_printf_float+0x34a>
 8008220:	4613      	mov	r3, r2
 8008222:	4631      	mov	r1, r6
 8008224:	4642      	mov	r2, r8
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	d1c0      	bne.n	80081b0 <_printf_float+0x300>
 800822e:	e69e      	b.n	8007f6e <_printf_float+0xbe>
 8008230:	2301      	movs	r3, #1
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	9205      	str	r2, [sp, #20]
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f ae97 	beq.w	8007f6e <_printf_float+0xbe>
 8008240:	9a05      	ldr	r2, [sp, #20]
 8008242:	f10b 0b01 	add.w	fp, fp, #1
 8008246:	e7b9      	b.n	80081bc <_printf_float+0x30c>
 8008248:	ee18 3a10 	vmov	r3, s16
 800824c:	4652      	mov	r2, sl
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	d1be      	bne.n	80081d6 <_printf_float+0x326>
 8008258:	e689      	b.n	8007f6e <_printf_float+0xbe>
 800825a:	9a05      	ldr	r2, [sp, #20]
 800825c:	464b      	mov	r3, r9
 800825e:	4442      	add	r2, r8
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	d1c1      	bne.n	80081ee <_printf_float+0x33e>
 800826a:	e680      	b.n	8007f6e <_printf_float+0xbe>
 800826c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800826e:	2a01      	cmp	r2, #1
 8008270:	dc01      	bgt.n	8008276 <_printf_float+0x3c6>
 8008272:	07db      	lsls	r3, r3, #31
 8008274:	d53a      	bpl.n	80082ec <_printf_float+0x43c>
 8008276:	2301      	movs	r3, #1
 8008278:	4642      	mov	r2, r8
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f ae74 	beq.w	8007f6e <_printf_float+0xbe>
 8008286:	ee18 3a10 	vmov	r3, s16
 800828a:	4652      	mov	r2, sl
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f ae6b 	beq.w	8007f6e <_printf_float+0xbe>
 8008298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082a4:	f7f8 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a8:	b9d8      	cbnz	r0, 80082e2 <_printf_float+0x432>
 80082aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082ae:	f108 0201 	add.w	r2, r8, #1
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	d10e      	bne.n	80082da <_printf_float+0x42a>
 80082bc:	e657      	b.n	8007f6e <_printf_float+0xbe>
 80082be:	2301      	movs	r3, #1
 80082c0:	4652      	mov	r2, sl
 80082c2:	4631      	mov	r1, r6
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b8      	blx	r7
 80082c8:	3001      	adds	r0, #1
 80082ca:	f43f ae50 	beq.w	8007f6e <_printf_float+0xbe>
 80082ce:	f108 0801 	add.w	r8, r8, #1
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4543      	cmp	r3, r8
 80082d8:	dcf1      	bgt.n	80082be <_printf_float+0x40e>
 80082da:	464b      	mov	r3, r9
 80082dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082e0:	e6da      	b.n	8008098 <_printf_float+0x1e8>
 80082e2:	f04f 0800 	mov.w	r8, #0
 80082e6:	f104 0a1a 	add.w	sl, r4, #26
 80082ea:	e7f2      	b.n	80082d2 <_printf_float+0x422>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4642      	mov	r2, r8
 80082f0:	e7df      	b.n	80082b2 <_printf_float+0x402>
 80082f2:	2301      	movs	r3, #1
 80082f4:	464a      	mov	r2, r9
 80082f6:	4631      	mov	r1, r6
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b8      	blx	r7
 80082fc:	3001      	adds	r0, #1
 80082fe:	f43f ae36 	beq.w	8007f6e <_printf_float+0xbe>
 8008302:	f108 0801 	add.w	r8, r8, #1
 8008306:	68e3      	ldr	r3, [r4, #12]
 8008308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800830a:	1a5b      	subs	r3, r3, r1
 800830c:	4543      	cmp	r3, r8
 800830e:	dcf0      	bgt.n	80082f2 <_printf_float+0x442>
 8008310:	e6f8      	b.n	8008104 <_printf_float+0x254>
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	f104 0919 	add.w	r9, r4, #25
 800831a:	e7f4      	b.n	8008306 <_printf_float+0x456>

0800831c <_printf_common>:
 800831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	4616      	mov	r6, r2
 8008322:	4699      	mov	r9, r3
 8008324:	688a      	ldr	r2, [r1, #8]
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800832c:	4293      	cmp	r3, r2
 800832e:	bfb8      	it	lt
 8008330:	4613      	movlt	r3, r2
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008338:	4607      	mov	r7, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b10a      	cbz	r2, 8008342 <_printf_common+0x26>
 800833e:	3301      	adds	r3, #1
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	0699      	lsls	r1, r3, #26
 8008346:	bf42      	ittt	mi
 8008348:	6833      	ldrmi	r3, [r6, #0]
 800834a:	3302      	addmi	r3, #2
 800834c:	6033      	strmi	r3, [r6, #0]
 800834e:	6825      	ldr	r5, [r4, #0]
 8008350:	f015 0506 	ands.w	r5, r5, #6
 8008354:	d106      	bne.n	8008364 <_printf_common+0x48>
 8008356:	f104 0a19 	add.w	sl, r4, #25
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	6832      	ldr	r2, [r6, #0]
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	42ab      	cmp	r3, r5
 8008362:	dc26      	bgt.n	80083b2 <_printf_common+0x96>
 8008364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008368:	1e13      	subs	r3, r2, #0
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	bf18      	it	ne
 800836e:	2301      	movne	r3, #1
 8008370:	0692      	lsls	r2, r2, #26
 8008372:	d42b      	bmi.n	80083cc <_printf_common+0xb0>
 8008374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008378:	4649      	mov	r1, r9
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	3001      	adds	r0, #1
 8008380:	d01e      	beq.n	80083c0 <_printf_common+0xa4>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	6922      	ldr	r2, [r4, #16]
 8008386:	f003 0306 	and.w	r3, r3, #6
 800838a:	2b04      	cmp	r3, #4
 800838c:	bf02      	ittt	eq
 800838e:	68e5      	ldreq	r5, [r4, #12]
 8008390:	6833      	ldreq	r3, [r6, #0]
 8008392:	1aed      	subeq	r5, r5, r3
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	bf0c      	ite	eq
 8008398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800839c:	2500      	movne	r5, #0
 800839e:	4293      	cmp	r3, r2
 80083a0:	bfc4      	itt	gt
 80083a2:	1a9b      	subgt	r3, r3, r2
 80083a4:	18ed      	addgt	r5, r5, r3
 80083a6:	2600      	movs	r6, #0
 80083a8:	341a      	adds	r4, #26
 80083aa:	42b5      	cmp	r5, r6
 80083ac:	d11a      	bne.n	80083e4 <_printf_common+0xc8>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e008      	b.n	80083c4 <_printf_common+0xa8>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4649      	mov	r1, r9
 80083b8:	4638      	mov	r0, r7
 80083ba:	47c0      	blx	r8
 80083bc:	3001      	adds	r0, #1
 80083be:	d103      	bne.n	80083c8 <_printf_common+0xac>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7c6      	b.n	800835a <_printf_common+0x3e>
 80083cc:	18e1      	adds	r1, r4, r3
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	2030      	movs	r0, #48	; 0x30
 80083d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d6:	4422      	add	r2, r4
 80083d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e0:	3302      	adds	r3, #2
 80083e2:	e7c7      	b.n	8008374 <_printf_common+0x58>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4649      	mov	r1, r9
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d0e6      	beq.n	80083c0 <_printf_common+0xa4>
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7d9      	b.n	80083aa <_printf_common+0x8e>
	...

080083f8 <_printf_i>:
 80083f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	7e0f      	ldrb	r7, [r1, #24]
 80083fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008400:	2f78      	cmp	r7, #120	; 0x78
 8008402:	4691      	mov	r9, r2
 8008404:	4680      	mov	r8, r0
 8008406:	460c      	mov	r4, r1
 8008408:	469a      	mov	sl, r3
 800840a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800840e:	d807      	bhi.n	8008420 <_printf_i+0x28>
 8008410:	2f62      	cmp	r7, #98	; 0x62
 8008412:	d80a      	bhi.n	800842a <_printf_i+0x32>
 8008414:	2f00      	cmp	r7, #0
 8008416:	f000 80d4 	beq.w	80085c2 <_printf_i+0x1ca>
 800841a:	2f58      	cmp	r7, #88	; 0x58
 800841c:	f000 80c0 	beq.w	80085a0 <_printf_i+0x1a8>
 8008420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008428:	e03a      	b.n	80084a0 <_printf_i+0xa8>
 800842a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842e:	2b15      	cmp	r3, #21
 8008430:	d8f6      	bhi.n	8008420 <_printf_i+0x28>
 8008432:	a101      	add	r1, pc, #4	; (adr r1, 8008438 <_printf_i+0x40>)
 8008434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008438:	08008491 	.word	0x08008491
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008421 	.word	0x08008421
 8008444:	08008421 	.word	0x08008421
 8008448:	08008421 	.word	0x08008421
 800844c:	08008421 	.word	0x08008421
 8008450:	080084a5 	.word	0x080084a5
 8008454:	08008421 	.word	0x08008421
 8008458:	08008421 	.word	0x08008421
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	080085a9 	.word	0x080085a9
 8008468:	080084d1 	.word	0x080084d1
 800846c:	08008563 	.word	0x08008563
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085cb 	.word	0x080085cb
 800847c:	08008421 	.word	0x08008421
 8008480:	080084d1 	.word	0x080084d1
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800856b 	.word	0x0800856b
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	602a      	str	r2, [r5, #0]
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e09f      	b.n	80085e4 <_printf_i+0x1ec>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	0607      	lsls	r7, r0, #24
 80084aa:	f103 0104 	add.w	r1, r3, #4
 80084ae:	6029      	str	r1, [r5, #0]
 80084b0:	d501      	bpl.n	80084b6 <_printf_i+0xbe>
 80084b2:	681e      	ldr	r6, [r3, #0]
 80084b4:	e003      	b.n	80084be <_printf_i+0xc6>
 80084b6:	0646      	lsls	r6, r0, #25
 80084b8:	d5fb      	bpl.n	80084b2 <_printf_i+0xba>
 80084ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084be:	2e00      	cmp	r6, #0
 80084c0:	da03      	bge.n	80084ca <_printf_i+0xd2>
 80084c2:	232d      	movs	r3, #45	; 0x2d
 80084c4:	4276      	negs	r6, r6
 80084c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ca:	485a      	ldr	r0, [pc, #360]	; (8008634 <_printf_i+0x23c>)
 80084cc:	230a      	movs	r3, #10
 80084ce:	e012      	b.n	80084f6 <_printf_i+0xfe>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	1d19      	adds	r1, r3, #4
 80084d6:	6029      	str	r1, [r5, #0]
 80084d8:	0605      	lsls	r5, r0, #24
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0xe8>
 80084dc:	681e      	ldr	r6, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0xee>
 80084e0:	0641      	lsls	r1, r0, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0xe4>
 80084e4:	881e      	ldrh	r6, [r3, #0]
 80084e6:	4853      	ldr	r0, [pc, #332]	; (8008634 <_printf_i+0x23c>)
 80084e8:	2f6f      	cmp	r7, #111	; 0x6f
 80084ea:	bf0c      	ite	eq
 80084ec:	2308      	moveq	r3, #8
 80084ee:	230a      	movne	r3, #10
 80084f0:	2100      	movs	r1, #0
 80084f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084f6:	6865      	ldr	r5, [r4, #4]
 80084f8:	60a5      	str	r5, [r4, #8]
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	bfa2      	ittt	ge
 80084fe:	6821      	ldrge	r1, [r4, #0]
 8008500:	f021 0104 	bicge.w	r1, r1, #4
 8008504:	6021      	strge	r1, [r4, #0]
 8008506:	b90e      	cbnz	r6, 800850c <_printf_i+0x114>
 8008508:	2d00      	cmp	r5, #0
 800850a:	d04b      	beq.n	80085a4 <_printf_i+0x1ac>
 800850c:	4615      	mov	r5, r2
 800850e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008512:	fb03 6711 	mls	r7, r3, r1, r6
 8008516:	5dc7      	ldrb	r7, [r0, r7]
 8008518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800851c:	4637      	mov	r7, r6
 800851e:	42bb      	cmp	r3, r7
 8008520:	460e      	mov	r6, r1
 8008522:	d9f4      	bls.n	800850e <_printf_i+0x116>
 8008524:	2b08      	cmp	r3, #8
 8008526:	d10b      	bne.n	8008540 <_printf_i+0x148>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07de      	lsls	r6, r3, #31
 800852c:	d508      	bpl.n	8008540 <_printf_i+0x148>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	4299      	cmp	r1, r3
 8008534:	bfde      	ittt	le
 8008536:	2330      	movle	r3, #48	; 0x30
 8008538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800853c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008540:	1b52      	subs	r2, r2, r5
 8008542:	6122      	str	r2, [r4, #16]
 8008544:	f8cd a000 	str.w	sl, [sp]
 8008548:	464b      	mov	r3, r9
 800854a:	aa03      	add	r2, sp, #12
 800854c:	4621      	mov	r1, r4
 800854e:	4640      	mov	r0, r8
 8008550:	f7ff fee4 	bl	800831c <_printf_common>
 8008554:	3001      	adds	r0, #1
 8008556:	d14a      	bne.n	80085ee <_printf_i+0x1f6>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b004      	add	sp, #16
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	f043 0320 	orr.w	r3, r3, #32
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	4833      	ldr	r0, [pc, #204]	; (8008638 <_printf_i+0x240>)
 800856c:	2778      	movs	r7, #120	; 0x78
 800856e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	6829      	ldr	r1, [r5, #0]
 8008576:	061f      	lsls	r7, r3, #24
 8008578:	f851 6b04 	ldr.w	r6, [r1], #4
 800857c:	d402      	bmi.n	8008584 <_printf_i+0x18c>
 800857e:	065f      	lsls	r7, r3, #25
 8008580:	bf48      	it	mi
 8008582:	b2b6      	uxthmi	r6, r6
 8008584:	07df      	lsls	r7, r3, #31
 8008586:	bf48      	it	mi
 8008588:	f043 0320 	orrmi.w	r3, r3, #32
 800858c:	6029      	str	r1, [r5, #0]
 800858e:	bf48      	it	mi
 8008590:	6023      	strmi	r3, [r4, #0]
 8008592:	b91e      	cbnz	r6, 800859c <_printf_i+0x1a4>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f023 0320 	bic.w	r3, r3, #32
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	2310      	movs	r3, #16
 800859e:	e7a7      	b.n	80084f0 <_printf_i+0xf8>
 80085a0:	4824      	ldr	r0, [pc, #144]	; (8008634 <_printf_i+0x23c>)
 80085a2:	e7e4      	b.n	800856e <_printf_i+0x176>
 80085a4:	4615      	mov	r5, r2
 80085a6:	e7bd      	b.n	8008524 <_printf_i+0x12c>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	6826      	ldr	r6, [r4, #0]
 80085ac:	6961      	ldr	r1, [r4, #20]
 80085ae:	1d18      	adds	r0, r3, #4
 80085b0:	6028      	str	r0, [r5, #0]
 80085b2:	0635      	lsls	r5, r6, #24
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	d501      	bpl.n	80085bc <_printf_i+0x1c4>
 80085b8:	6019      	str	r1, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <_printf_i+0x1ca>
 80085bc:	0670      	lsls	r0, r6, #25
 80085be:	d5fb      	bpl.n	80085b8 <_printf_i+0x1c0>
 80085c0:	8019      	strh	r1, [r3, #0]
 80085c2:	2300      	movs	r3, #0
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	4615      	mov	r5, r2
 80085c8:	e7bc      	b.n	8008544 <_printf_i+0x14c>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	602a      	str	r2, [r5, #0]
 80085d0:	681d      	ldr	r5, [r3, #0]
 80085d2:	6862      	ldr	r2, [r4, #4]
 80085d4:	2100      	movs	r1, #0
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7f7 fdfa 	bl	80001d0 <memchr>
 80085dc:	b108      	cbz	r0, 80085e2 <_printf_i+0x1ea>
 80085de:	1b40      	subs	r0, r0, r5
 80085e0:	6060      	str	r0, [r4, #4]
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	2300      	movs	r3, #0
 80085e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ec:	e7aa      	b.n	8008544 <_printf_i+0x14c>
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4649      	mov	r1, r9
 80085f4:	4640      	mov	r0, r8
 80085f6:	47d0      	blx	sl
 80085f8:	3001      	adds	r0, #1
 80085fa:	d0ad      	beq.n	8008558 <_printf_i+0x160>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	d413      	bmi.n	800862a <_printf_i+0x232>
 8008602:	68e0      	ldr	r0, [r4, #12]
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	4298      	cmp	r0, r3
 8008608:	bfb8      	it	lt
 800860a:	4618      	movlt	r0, r3
 800860c:	e7a6      	b.n	800855c <_printf_i+0x164>
 800860e:	2301      	movs	r3, #1
 8008610:	4632      	mov	r2, r6
 8008612:	4649      	mov	r1, r9
 8008614:	4640      	mov	r0, r8
 8008616:	47d0      	blx	sl
 8008618:	3001      	adds	r0, #1
 800861a:	d09d      	beq.n	8008558 <_printf_i+0x160>
 800861c:	3501      	adds	r5, #1
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	9903      	ldr	r1, [sp, #12]
 8008622:	1a5b      	subs	r3, r3, r1
 8008624:	42ab      	cmp	r3, r5
 8008626:	dcf2      	bgt.n	800860e <_printf_i+0x216>
 8008628:	e7eb      	b.n	8008602 <_printf_i+0x20a>
 800862a:	2500      	movs	r5, #0
 800862c:	f104 0619 	add.w	r6, r4, #25
 8008630:	e7f5      	b.n	800861e <_printf_i+0x226>
 8008632:	bf00      	nop
 8008634:	0800aaea 	.word	0x0800aaea
 8008638:	0800aafb 	.word	0x0800aafb

0800863c <std>:
 800863c:	2300      	movs	r3, #0
 800863e:	b510      	push	{r4, lr}
 8008640:	4604      	mov	r4, r0
 8008642:	e9c0 3300 	strd	r3, r3, [r0]
 8008646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800864a:	6083      	str	r3, [r0, #8]
 800864c:	8181      	strh	r1, [r0, #12]
 800864e:	6643      	str	r3, [r0, #100]	; 0x64
 8008650:	81c2      	strh	r2, [r0, #14]
 8008652:	6183      	str	r3, [r0, #24]
 8008654:	4619      	mov	r1, r3
 8008656:	2208      	movs	r2, #8
 8008658:	305c      	adds	r0, #92	; 0x5c
 800865a:	f000 f902 	bl	8008862 <memset>
 800865e:	4b05      	ldr	r3, [pc, #20]	; (8008674 <std+0x38>)
 8008660:	6263      	str	r3, [r4, #36]	; 0x24
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <std+0x3c>)
 8008664:	62a3      	str	r3, [r4, #40]	; 0x28
 8008666:	4b05      	ldr	r3, [pc, #20]	; (800867c <std+0x40>)
 8008668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <std+0x44>)
 800866c:	6224      	str	r4, [r4, #32]
 800866e:	6323      	str	r3, [r4, #48]	; 0x30
 8008670:	bd10      	pop	{r4, pc}
 8008672:	bf00      	nop
 8008674:	080087dd 	.word	0x080087dd
 8008678:	080087ff 	.word	0x080087ff
 800867c:	08008837 	.word	0x08008837
 8008680:	0800885b 	.word	0x0800885b

08008684 <stdio_exit_handler>:
 8008684:	4a02      	ldr	r2, [pc, #8]	; (8008690 <stdio_exit_handler+0xc>)
 8008686:	4903      	ldr	r1, [pc, #12]	; (8008694 <stdio_exit_handler+0x10>)
 8008688:	4803      	ldr	r0, [pc, #12]	; (8008698 <stdio_exit_handler+0x14>)
 800868a:	f000 b869 	b.w	8008760 <_fwalk_sglue>
 800868e:	bf00      	nop
 8008690:	2000000c 	.word	0x2000000c
 8008694:	0800a309 	.word	0x0800a309
 8008698:	20000018 	.word	0x20000018

0800869c <cleanup_stdio>:
 800869c:	6841      	ldr	r1, [r0, #4]
 800869e:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <cleanup_stdio+0x34>)
 80086a0:	4299      	cmp	r1, r3
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
 80086a6:	d001      	beq.n	80086ac <cleanup_stdio+0x10>
 80086a8:	f001 fe2e 	bl	800a308 <_fflush_r>
 80086ac:	68a1      	ldr	r1, [r4, #8]
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <cleanup_stdio+0x38>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	d002      	beq.n	80086ba <cleanup_stdio+0x1e>
 80086b4:	4620      	mov	r0, r4
 80086b6:	f001 fe27 	bl	800a308 <_fflush_r>
 80086ba:	68e1      	ldr	r1, [r4, #12]
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <cleanup_stdio+0x3c>)
 80086be:	4299      	cmp	r1, r3
 80086c0:	d004      	beq.n	80086cc <cleanup_stdio+0x30>
 80086c2:	4620      	mov	r0, r4
 80086c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c8:	f001 be1e 	b.w	800a308 <_fflush_r>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	20000a00 	.word	0x20000a00
 80086d4:	20000a68 	.word	0x20000a68
 80086d8:	20000ad0 	.word	0x20000ad0

080086dc <global_stdio_init.part.0>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <global_stdio_init.part.0+0x30>)
 80086e0:	4c0b      	ldr	r4, [pc, #44]	; (8008710 <global_stdio_init.part.0+0x34>)
 80086e2:	4a0c      	ldr	r2, [pc, #48]	; (8008714 <global_stdio_init.part.0+0x38>)
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	2200      	movs	r2, #0
 80086ea:	2104      	movs	r1, #4
 80086ec:	f7ff ffa6 	bl	800863c <std>
 80086f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086f4:	2201      	movs	r2, #1
 80086f6:	2109      	movs	r1, #9
 80086f8:	f7ff ffa0 	bl	800863c <std>
 80086fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008700:	2202      	movs	r2, #2
 8008702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008706:	2112      	movs	r1, #18
 8008708:	f7ff bf98 	b.w	800863c <std>
 800870c:	20000b38 	.word	0x20000b38
 8008710:	20000a00 	.word	0x20000a00
 8008714:	08008685 	.word	0x08008685

08008718 <__sfp_lock_acquire>:
 8008718:	4801      	ldr	r0, [pc, #4]	; (8008720 <__sfp_lock_acquire+0x8>)
 800871a:	f000 b91f 	b.w	800895c <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20000b41 	.word	0x20000b41

08008724 <__sfp_lock_release>:
 8008724:	4801      	ldr	r0, [pc, #4]	; (800872c <__sfp_lock_release+0x8>)
 8008726:	f000 b91a 	b.w	800895e <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20000b41 	.word	0x20000b41

08008730 <__sinit>:
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	f7ff fff0 	bl	8008718 <__sfp_lock_acquire>
 8008738:	6a23      	ldr	r3, [r4, #32]
 800873a:	b11b      	cbz	r3, 8008744 <__sinit+0x14>
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f7ff bff0 	b.w	8008724 <__sfp_lock_release>
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <__sinit+0x28>)
 8008746:	6223      	str	r3, [r4, #32]
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <__sinit+0x2c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f5      	bne.n	800873c <__sinit+0xc>
 8008750:	f7ff ffc4 	bl	80086dc <global_stdio_init.part.0>
 8008754:	e7f2      	b.n	800873c <__sinit+0xc>
 8008756:	bf00      	nop
 8008758:	0800869d 	.word	0x0800869d
 800875c:	20000b38 	.word	0x20000b38

08008760 <_fwalk_sglue>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	4607      	mov	r7, r0
 8008766:	4688      	mov	r8, r1
 8008768:	4614      	mov	r4, r2
 800876a:	2600      	movs	r6, #0
 800876c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008770:	f1b9 0901 	subs.w	r9, r9, #1
 8008774:	d505      	bpl.n	8008782 <_fwalk_sglue+0x22>
 8008776:	6824      	ldr	r4, [r4, #0]
 8008778:	2c00      	cmp	r4, #0
 800877a:	d1f7      	bne.n	800876c <_fwalk_sglue+0xc>
 800877c:	4630      	mov	r0, r6
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d907      	bls.n	8008798 <_fwalk_sglue+0x38>
 8008788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800878c:	3301      	adds	r3, #1
 800878e:	d003      	beq.n	8008798 <_fwalk_sglue+0x38>
 8008790:	4629      	mov	r1, r5
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	4306      	orrs	r6, r0
 8008798:	3568      	adds	r5, #104	; 0x68
 800879a:	e7e9      	b.n	8008770 <_fwalk_sglue+0x10>

0800879c <siprintf>:
 800879c:	b40e      	push	{r1, r2, r3}
 800879e:	b500      	push	{lr}
 80087a0:	b09c      	sub	sp, #112	; 0x70
 80087a2:	ab1d      	add	r3, sp, #116	; 0x74
 80087a4:	9002      	str	r0, [sp, #8]
 80087a6:	9006      	str	r0, [sp, #24]
 80087a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087ac:	4809      	ldr	r0, [pc, #36]	; (80087d4 <siprintf+0x38>)
 80087ae:	9107      	str	r1, [sp, #28]
 80087b0:	9104      	str	r1, [sp, #16]
 80087b2:	4909      	ldr	r1, [pc, #36]	; (80087d8 <siprintf+0x3c>)
 80087b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b8:	9105      	str	r1, [sp, #20]
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	a902      	add	r1, sp, #8
 80087c0:	f001 fc1e 	bl	800a000 <_svfiprintf_r>
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	b01c      	add	sp, #112	; 0x70
 80087cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d0:	b003      	add	sp, #12
 80087d2:	4770      	bx	lr
 80087d4:	20000064 	.word	0x20000064
 80087d8:	ffff0208 	.word	0xffff0208

080087dc <__sread>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	460c      	mov	r4, r1
 80087e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e4:	f000 f86c 	bl	80088c0 <_read_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	bfab      	itete	ge
 80087ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ee:	89a3      	ldrhlt	r3, [r4, #12]
 80087f0:	181b      	addge	r3, r3, r0
 80087f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087f6:	bfac      	ite	ge
 80087f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80087fa:	81a3      	strhlt	r3, [r4, #12]
 80087fc:	bd10      	pop	{r4, pc}

080087fe <__swrite>:
 80087fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008802:	461f      	mov	r7, r3
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	05db      	lsls	r3, r3, #23
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	4616      	mov	r6, r2
 800880e:	d505      	bpl.n	800881c <__swrite+0x1e>
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	2302      	movs	r3, #2
 8008816:	2200      	movs	r2, #0
 8008818:	f000 f840 	bl	800889c <_lseek_r>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	4632      	mov	r2, r6
 800882a:	463b      	mov	r3, r7
 800882c:	4628      	mov	r0, r5
 800882e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	f000 b857 	b.w	80088e4 <_write_r>

08008836 <__sseek>:
 8008836:	b510      	push	{r4, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 f82d 	bl	800889c <_lseek_r>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	bf15      	itete	ne
 8008848:	6560      	strne	r0, [r4, #84]	; 0x54
 800884a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800884e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008852:	81a3      	strheq	r3, [r4, #12]
 8008854:	bf18      	it	ne
 8008856:	81a3      	strhne	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__sclose>:
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 b80d 	b.w	800887c <_close_r>

08008862 <memset>:
 8008862:	4402      	add	r2, r0
 8008864:	4603      	mov	r3, r0
 8008866:	4293      	cmp	r3, r2
 8008868:	d100      	bne.n	800886c <memset+0xa>
 800886a:	4770      	bx	lr
 800886c:	f803 1b01 	strb.w	r1, [r3], #1
 8008870:	e7f9      	b.n	8008866 <memset+0x4>
	...

08008874 <_localeconv_r>:
 8008874:	4800      	ldr	r0, [pc, #0]	; (8008878 <_localeconv_r+0x4>)
 8008876:	4770      	bx	lr
 8008878:	20000158 	.word	0x20000158

0800887c <_close_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	; (8008898 <_close_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 feae 	bl	80025e8 <_close>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_close_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_close_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000b3c 	.word	0x20000b3c

0800889c <_lseek_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d07      	ldr	r5, [pc, #28]	; (80088bc <_lseek_r+0x20>)
 80088a0:	4604      	mov	r4, r0
 80088a2:	4608      	mov	r0, r1
 80088a4:	4611      	mov	r1, r2
 80088a6:	2200      	movs	r2, #0
 80088a8:	602a      	str	r2, [r5, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f7f9 fec3 	bl	8002636 <_lseek>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_lseek_r+0x1e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_lseek_r+0x1e>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000b3c 	.word	0x20000b3c

080088c0 <_read_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d07      	ldr	r5, [pc, #28]	; (80088e0 <_read_r+0x20>)
 80088c4:	4604      	mov	r4, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	4611      	mov	r1, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	602a      	str	r2, [r5, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7f9 fe51 	bl	8002576 <_read>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_read_r+0x1e>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_read_r+0x1e>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20000b3c 	.word	0x20000b3c

080088e4 <_write_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_write_r+0x20>)
 80088e8:	4604      	mov	r4, r0
 80088ea:	4608      	mov	r0, r1
 80088ec:	4611      	mov	r1, r2
 80088ee:	2200      	movs	r2, #0
 80088f0:	602a      	str	r2, [r5, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f7f9 fe5c 	bl	80025b0 <_write>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_write_r+0x1e>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_write_r+0x1e>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20000b3c 	.word	0x20000b3c

08008908 <__errno>:
 8008908:	4b01      	ldr	r3, [pc, #4]	; (8008910 <__errno+0x8>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20000064 	.word	0x20000064

08008914 <__libc_init_array>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4d0d      	ldr	r5, [pc, #52]	; (800894c <__libc_init_array+0x38>)
 8008918:	4c0d      	ldr	r4, [pc, #52]	; (8008950 <__libc_init_array+0x3c>)
 800891a:	1b64      	subs	r4, r4, r5
 800891c:	10a4      	asrs	r4, r4, #2
 800891e:	2600      	movs	r6, #0
 8008920:	42a6      	cmp	r6, r4
 8008922:	d109      	bne.n	8008938 <__libc_init_array+0x24>
 8008924:	4d0b      	ldr	r5, [pc, #44]	; (8008954 <__libc_init_array+0x40>)
 8008926:	4c0c      	ldr	r4, [pc, #48]	; (8008958 <__libc_init_array+0x44>)
 8008928:	f002 f892 	bl	800aa50 <_init>
 800892c:	1b64      	subs	r4, r4, r5
 800892e:	10a4      	asrs	r4, r4, #2
 8008930:	2600      	movs	r6, #0
 8008932:	42a6      	cmp	r6, r4
 8008934:	d105      	bne.n	8008942 <__libc_init_array+0x2e>
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	f855 3b04 	ldr.w	r3, [r5], #4
 800893c:	4798      	blx	r3
 800893e:	3601      	adds	r6, #1
 8008940:	e7ee      	b.n	8008920 <__libc_init_array+0xc>
 8008942:	f855 3b04 	ldr.w	r3, [r5], #4
 8008946:	4798      	blx	r3
 8008948:	3601      	adds	r6, #1
 800894a:	e7f2      	b.n	8008932 <__libc_init_array+0x1e>
 800894c:	0800ae54 	.word	0x0800ae54
 8008950:	0800ae54 	.word	0x0800ae54
 8008954:	0800ae54 	.word	0x0800ae54
 8008958:	0800ae58 	.word	0x0800ae58

0800895c <__retarget_lock_acquire_recursive>:
 800895c:	4770      	bx	lr

0800895e <__retarget_lock_release_recursive>:
 800895e:	4770      	bx	lr

08008960 <quorem>:
 8008960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	6903      	ldr	r3, [r0, #16]
 8008966:	690c      	ldr	r4, [r1, #16]
 8008968:	42a3      	cmp	r3, r4
 800896a:	4607      	mov	r7, r0
 800896c:	db7e      	blt.n	8008a6c <quorem+0x10c>
 800896e:	3c01      	subs	r4, #1
 8008970:	f101 0814 	add.w	r8, r1, #20
 8008974:	f100 0514 	add.w	r5, r0, #20
 8008978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008986:	3301      	adds	r3, #1
 8008988:	429a      	cmp	r2, r3
 800898a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800898e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008992:	fbb2 f6f3 	udiv	r6, r2, r3
 8008996:	d331      	bcc.n	80089fc <quorem+0x9c>
 8008998:	f04f 0e00 	mov.w	lr, #0
 800899c:	4640      	mov	r0, r8
 800899e:	46ac      	mov	ip, r5
 80089a0:	46f2      	mov	sl, lr
 80089a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80089a6:	b293      	uxth	r3, r2
 80089a8:	fb06 e303 	mla	r3, r6, r3, lr
 80089ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089b0:	0c1a      	lsrs	r2, r3, #16
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	ebaa 0303 	sub.w	r3, sl, r3
 80089b8:	f8dc a000 	ldr.w	sl, [ip]
 80089bc:	fa13 f38a 	uxtah	r3, r3, sl
 80089c0:	fb06 220e 	mla	r2, r6, lr, r2
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089cc:	b292      	uxth	r2, r2
 80089ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80089da:	4581      	cmp	r9, r0
 80089dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089e0:	f84c 3b04 	str.w	r3, [ip], #4
 80089e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089e8:	d2db      	bcs.n	80089a2 <quorem+0x42>
 80089ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80089ee:	b92b      	cbnz	r3, 80089fc <quorem+0x9c>
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	3b04      	subs	r3, #4
 80089f4:	429d      	cmp	r5, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	d32c      	bcc.n	8008a54 <quorem+0xf4>
 80089fa:	613c      	str	r4, [r7, #16]
 80089fc:	4638      	mov	r0, r7
 80089fe:	f001 f9a5 	bl	8009d4c <__mcmp>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	db22      	blt.n	8008a4c <quorem+0xec>
 8008a06:	3601      	adds	r6, #1
 8008a08:	4629      	mov	r1, r5
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a10:	f8d1 c000 	ldr.w	ip, [r1]
 8008a14:	b293      	uxth	r3, r2
 8008a16:	1ac3      	subs	r3, r0, r3
 8008a18:	0c12      	lsrs	r2, r2, #16
 8008a1a:	fa13 f38c 	uxtah	r3, r3, ip
 8008a1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2c:	45c1      	cmp	r9, r8
 8008a2e:	f841 3b04 	str.w	r3, [r1], #4
 8008a32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a36:	d2e9      	bcs.n	8008a0c <quorem+0xac>
 8008a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a40:	b922      	cbnz	r2, 8008a4c <quorem+0xec>
 8008a42:	3b04      	subs	r3, #4
 8008a44:	429d      	cmp	r5, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	d30a      	bcc.n	8008a60 <quorem+0x100>
 8008a4a:	613c      	str	r4, [r7, #16]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	b003      	add	sp, #12
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	3b04      	subs	r3, #4
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d1ce      	bne.n	80089fa <quorem+0x9a>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	e7c9      	b.n	80089f4 <quorem+0x94>
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	3b04      	subs	r3, #4
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d1f0      	bne.n	8008a4a <quorem+0xea>
 8008a68:	3c01      	subs	r4, #1
 8008a6a:	e7eb      	b.n	8008a44 <quorem+0xe4>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7ee      	b.n	8008a4e <quorem+0xee>

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	ed2d 8b04 	vpush	{d8-d9}
 8008a78:	69c5      	ldr	r5, [r0, #28]
 8008a7a:	b093      	sub	sp, #76	; 0x4c
 8008a7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a80:	ec57 6b10 	vmov	r6, r7, d0
 8008a84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a88:	9107      	str	r1, [sp, #28]
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a90:	b975      	cbnz	r5, 8008ab0 <_dtoa_r+0x40>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f000 fe2a 	bl	80096ec <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	61e0      	str	r0, [r4, #28]
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_dtoa_r+0x38>
 8008a9e:	4bae      	ldr	r3, [pc, #696]	; (8008d58 <_dtoa_r+0x2e8>)
 8008aa0:	21ef      	movs	r1, #239	; 0xef
 8008aa2:	48ae      	ldr	r0, [pc, #696]	; (8008d5c <_dtoa_r+0x2ec>)
 8008aa4:	f001 fc90 	bl	800a3c8 <__assert_func>
 8008aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aac:	6005      	str	r5, [r0, #0]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	69e3      	ldr	r3, [r4, #28]
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	b151      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	604a      	str	r2, [r1, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4093      	lsls	r3, r2
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 ff07 	bl	80098d4 <_Bfree>
 8008ac6:	69e3      	ldr	r3, [r4, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e3b      	subs	r3, r7, #0
 8008ace:	bfbb      	ittet	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	2201      	movlt	r2, #1
 8008ada:	bfac      	ite	ge
 8008adc:	f8c8 3000 	strge.w	r3, [r8]
 8008ae0:	f8c8 2000 	strlt.w	r2, [r8]
 8008ae4:	4b9e      	ldr	r3, [pc, #632]	; (8008d60 <_dtoa_r+0x2f0>)
 8008ae6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008aea:	ea33 0308 	bics.w	r3, r3, r8
 8008aee:	d11b      	bne.n	8008b28 <_dtoa_r+0xb8>
 8008af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008afc:	4333      	orrs	r3, r6
 8008afe:	f000 8593 	beq.w	8009628 <_dtoa_r+0xbb8>
 8008b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b04:	b963      	cbnz	r3, 8008b20 <_dtoa_r+0xb0>
 8008b06:	4b97      	ldr	r3, [pc, #604]	; (8008d64 <_dtoa_r+0x2f4>)
 8008b08:	e027      	b.n	8008b5a <_dtoa_r+0xea>
 8008b0a:	4b97      	ldr	r3, [pc, #604]	; (8008d68 <_dtoa_r+0x2f8>)
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	9800      	ldr	r0, [sp, #0]
 8008b16:	b013      	add	sp, #76	; 0x4c
 8008b18:	ecbd 8b04 	vpop	{d8-d9}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	4b90      	ldr	r3, [pc, #576]	; (8008d64 <_dtoa_r+0x2f4>)
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	3303      	adds	r3, #3
 8008b26:	e7f3      	b.n	8008b10 <_dtoa_r+0xa0>
 8008b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	ec51 0b17 	vmov	r0, r1, d7
 8008b32:	eeb0 8a47 	vmov.f32	s16, s14
 8008b36:	eef0 8a67 	vmov.f32	s17, s15
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f7f7 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b40:	4681      	mov	r9, r0
 8008b42:	b160      	cbz	r0, 8008b5e <_dtoa_r+0xee>
 8008b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b46:	2301      	movs	r3, #1
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8568 	beq.w	8009622 <_dtoa_r+0xbb2>
 8008b52:	4b86      	ldr	r3, [pc, #536]	; (8008d6c <_dtoa_r+0x2fc>)
 8008b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	e7da      	b.n	8008b14 <_dtoa_r+0xa4>
 8008b5e:	aa10      	add	r2, sp, #64	; 0x40
 8008b60:	a911      	add	r1, sp, #68	; 0x44
 8008b62:	4620      	mov	r0, r4
 8008b64:	eeb0 0a48 	vmov.f32	s0, s16
 8008b68:	eef0 0a68 	vmov.f32	s1, s17
 8008b6c:	f001 f994 	bl	8009e98 <__d2b>
 8008b70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b74:	4682      	mov	sl, r0
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	d07f      	beq.n	8008c7a <_dtoa_r+0x20a>
 8008b7a:	ee18 3a90 	vmov	r3, s17
 8008b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008b86:	ec51 0b18 	vmov	r0, r1, d8
 8008b8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b96:	4619      	mov	r1, r3
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4b75      	ldr	r3, [pc, #468]	; (8008d70 <_dtoa_r+0x300>)
 8008b9c:	f7f7 fb74 	bl	8000288 <__aeabi_dsub>
 8008ba0:	a367      	add	r3, pc, #412	; (adr r3, 8008d40 <_dtoa_r+0x2d0>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	a367      	add	r3, pc, #412	; (adr r3, 8008d48 <_dtoa_r+0x2d8>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb6c 	bl	800028c <__adddf3>
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	460f      	mov	r7, r1
 8008bba:	f7f7 fcb3 	bl	8000524 <__aeabi_i2d>
 8008bbe:	a364      	add	r3, pc, #400	; (adr r3, 8008d50 <_dtoa_r+0x2e0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb5c 	bl	800028c <__adddf3>
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	f7f7 ffbe 	bl	8000b58 <__aeabi_d2iz>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4683      	mov	fp, r0
 8008be0:	2300      	movs	r3, #0
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 ff79 	bl	8000adc <__aeabi_dcmplt>
 8008bea:	b148      	cbz	r0, 8008c00 <_dtoa_r+0x190>
 8008bec:	4658      	mov	r0, fp
 8008bee:	f7f7 fc99 	bl	8000524 <__aeabi_i2d>
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	f7f7 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bfa:	b908      	cbnz	r0, 8008c00 <_dtoa_r+0x190>
 8008bfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c00:	f1bb 0f16 	cmp.w	fp, #22
 8008c04:	d857      	bhi.n	8008cb6 <_dtoa_r+0x246>
 8008c06:	4b5b      	ldr	r3, [pc, #364]	; (8008d74 <_dtoa_r+0x304>)
 8008c08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	ec51 0b18 	vmov	r0, r1, d8
 8008c14:	f7f7 ff62 	bl	8000adc <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d04e      	beq.n	8008cba <_dtoa_r+0x24a>
 8008c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c20:	2300      	movs	r3, #0
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c26:	1b5b      	subs	r3, r3, r5
 8008c28:	1e5a      	subs	r2, r3, #1
 8008c2a:	bf45      	ittet	mi
 8008c2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c30:	9305      	strmi	r3, [sp, #20]
 8008c32:	2300      	movpl	r3, #0
 8008c34:	2300      	movmi	r3, #0
 8008c36:	9206      	str	r2, [sp, #24]
 8008c38:	bf54      	ite	pl
 8008c3a:	9305      	strpl	r3, [sp, #20]
 8008c3c:	9306      	strmi	r3, [sp, #24]
 8008c3e:	f1bb 0f00 	cmp.w	fp, #0
 8008c42:	db3c      	blt.n	8008cbe <_dtoa_r+0x24e>
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c4a:	445b      	add	r3, fp
 8008c4c:	9306      	str	r3, [sp, #24]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	9308      	str	r3, [sp, #32]
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d868      	bhi.n	8008d2a <_dtoa_r+0x2ba>
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	bfc4      	itt	gt
 8008c5c:	3b04      	subgt	r3, #4
 8008c5e:	9307      	strgt	r3, [sp, #28]
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	f1a3 0302 	sub.w	r3, r3, #2
 8008c66:	bfcc      	ite	gt
 8008c68:	2500      	movgt	r5, #0
 8008c6a:	2501      	movle	r5, #1
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	f200 8085 	bhi.w	8008d7c <_dtoa_r+0x30c>
 8008c72:	e8df f003 	tbb	[pc, r3]
 8008c76:	3b2e      	.short	0x3b2e
 8008c78:	5839      	.short	0x5839
 8008c7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c7e:	441d      	add	r5, r3
 8008c80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	bfc1      	itttt	gt
 8008c88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c98:	bfd6      	itet	le
 8008c9a:	f1c3 0320 	rsble	r3, r3, #32
 8008c9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ca2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ca6:	f7f7 fc2d 	bl	8000504 <__aeabi_ui2d>
 8008caa:	2201      	movs	r2, #1
 8008cac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008cb0:	3d01      	subs	r5, #1
 8008cb2:	920e      	str	r2, [sp, #56]	; 0x38
 8008cb4:	e76f      	b.n	8008b96 <_dtoa_r+0x126>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7b3      	b.n	8008c22 <_dtoa_r+0x1b2>
 8008cba:	900c      	str	r0, [sp, #48]	; 0x30
 8008cbc:	e7b2      	b.n	8008c24 <_dtoa_r+0x1b4>
 8008cbe:	9b05      	ldr	r3, [sp, #20]
 8008cc0:	eba3 030b 	sub.w	r3, r3, fp
 8008cc4:	9305      	str	r3, [sp, #20]
 8008cc6:	f1cb 0300 	rsb	r3, fp, #0
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cd0:	e7bf      	b.n	8008c52 <_dtoa_r+0x1e2>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	dc52      	bgt.n	8008d82 <_dtoa_r+0x312>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ce6:	e00b      	b.n	8008d00 <_dtoa_r+0x290>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e7f3      	b.n	8008cd4 <_dtoa_r+0x264>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf2:	445b      	add	r3, fp
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	bfb8      	it	lt
 8008cfe:	2301      	movlt	r3, #1
 8008d00:	69e0      	ldr	r0, [r4, #28]
 8008d02:	2100      	movs	r1, #0
 8008d04:	2204      	movs	r2, #4
 8008d06:	f102 0614 	add.w	r6, r2, #20
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	d93d      	bls.n	8008d8a <_dtoa_r+0x31a>
 8008d0e:	6041      	str	r1, [r0, #4]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fd9f 	bl	8009854 <_Balloc>
 8008d16:	9000      	str	r0, [sp, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d139      	bne.n	8008d90 <_dtoa_r+0x320>
 8008d1c:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <_dtoa_r+0x308>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f240 11af 	movw	r1, #431	; 0x1af
 8008d24:	e6bd      	b.n	8008aa2 <_dtoa_r+0x32>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7e1      	b.n	8008cee <_dtoa_r+0x27e>
 8008d2a:	2501      	movs	r5, #1
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	9509      	str	r5, [sp, #36]	; 0x24
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2312      	movs	r3, #18
 8008d3e:	e7d1      	b.n	8008ce4 <_dtoa_r+0x274>
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800ab19 	.word	0x0800ab19
 8008d5c:	0800ab30 	.word	0x0800ab30
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800ab15 	.word	0x0800ab15
 8008d68:	0800ab0c 	.word	0x0800ab0c
 8008d6c:	0800aae9 	.word	0x0800aae9
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800ac20 	.word	0x0800ac20
 8008d78:	0800ab88 	.word	0x0800ab88
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d80:	e7d7      	b.n	8008d32 <_dtoa_r+0x2c2>
 8008d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	e7ba      	b.n	8008d00 <_dtoa_r+0x290>
 8008d8a:	3101      	adds	r1, #1
 8008d8c:	0052      	lsls	r2, r2, #1
 8008d8e:	e7ba      	b.n	8008d06 <_dtoa_r+0x296>
 8008d90:	69e3      	ldr	r3, [r4, #28]
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	2b0e      	cmp	r3, #14
 8008d9a:	f200 80a8 	bhi.w	8008eee <_dtoa_r+0x47e>
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	f000 80a5 	beq.w	8008eee <_dtoa_r+0x47e>
 8008da4:	f1bb 0f00 	cmp.w	fp, #0
 8008da8:	dd38      	ble.n	8008e1c <_dtoa_r+0x3ac>
 8008daa:	4bc0      	ldr	r3, [pc, #768]	; (80090ac <_dtoa_r+0x63c>)
 8008dac:	f00b 020f 	and.w	r2, fp, #15
 8008db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008db8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008dbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008dc0:	d019      	beq.n	8008df6 <_dtoa_r+0x386>
 8008dc2:	4bbb      	ldr	r3, [pc, #748]	; (80090b0 <_dtoa_r+0x640>)
 8008dc4:	ec51 0b18 	vmov	r0, r1, d8
 8008dc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dcc:	f7f7 fd3e 	bl	800084c <__aeabi_ddiv>
 8008dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd4:	f008 080f 	and.w	r8, r8, #15
 8008dd8:	2503      	movs	r5, #3
 8008dda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090b0 <_dtoa_r+0x640>
 8008dde:	f1b8 0f00 	cmp.w	r8, #0
 8008de2:	d10a      	bne.n	8008dfa <_dtoa_r+0x38a>
 8008de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	f7f7 fd2e 	bl	800084c <__aeabi_ddiv>
 8008df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df4:	e02b      	b.n	8008e4e <_dtoa_r+0x3de>
 8008df6:	2502      	movs	r5, #2
 8008df8:	e7ef      	b.n	8008dda <_dtoa_r+0x36a>
 8008dfa:	f018 0f01 	tst.w	r8, #1
 8008dfe:	d008      	beq.n	8008e12 <_dtoa_r+0x3a2>
 8008e00:	4630      	mov	r0, r6
 8008e02:	4639      	mov	r1, r7
 8008e04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e08:	f7f7 fbf6 	bl	80005f8 <__aeabi_dmul>
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e16:	f109 0908 	add.w	r9, r9, #8
 8008e1a:	e7e0      	b.n	8008dde <_dtoa_r+0x36e>
 8008e1c:	f000 809f 	beq.w	8008f5e <_dtoa_r+0x4ee>
 8008e20:	f1cb 0600 	rsb	r6, fp, #0
 8008e24:	4ba1      	ldr	r3, [pc, #644]	; (80090ac <_dtoa_r+0x63c>)
 8008e26:	4fa2      	ldr	r7, [pc, #648]	; (80090b0 <_dtoa_r+0x640>)
 8008e28:	f006 020f 	and.w	r2, r6, #15
 8008e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	ec51 0b18 	vmov	r0, r1, d8
 8008e38:	f7f7 fbde 	bl	80005f8 <__aeabi_dmul>
 8008e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e40:	1136      	asrs	r6, r6, #4
 8008e42:	2300      	movs	r3, #0
 8008e44:	2502      	movs	r5, #2
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d17e      	bne.n	8008f48 <_dtoa_r+0x4d8>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d0      	bne.n	8008df0 <_dtoa_r+0x380>
 8008e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8084 	beq.w	8008f62 <_dtoa_r+0x4f2>
 8008e5a:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <_dtoa_r+0x644>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d07b      	beq.n	8008f62 <_dtoa_r+0x4f2>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d078      	beq.n	8008f62 <_dtoa_r+0x4f2>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dd39      	ble.n	8008eea <_dtoa_r+0x47a>
 8008e76:	4b90      	ldr	r3, [pc, #576]	; (80090b8 <_dtoa_r+0x648>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e86:	9e01      	ldr	r6, [sp, #4]
 8008e88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7f7 fb46 	bl	8000524 <__aeabi_i2d>
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	4b86      	ldr	r3, [pc, #536]	; (80090bc <_dtoa_r+0x64c>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 f9f2 	bl	800028c <__adddf3>
 8008ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d158      	bne.n	8008f68 <_dtoa_r+0x4f8>
 8008eb6:	4b82      	ldr	r3, [pc, #520]	; (80090c0 <_dtoa_r+0x650>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 f9e3 	bl	8000288 <__aeabi_dsub>
 8008ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	f7f7 fe25 	bl	8000b18 <__aeabi_dcmpgt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f040 8296 	bne.w	8009400 <_dtoa_r+0x990>
 8008ed4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ed8:	4640      	mov	r0, r8
 8008eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f040 8289 	bne.w	80093fc <_dtoa_r+0x98c>
 8008eea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f2c0 814e 	blt.w	8009192 <_dtoa_r+0x722>
 8008ef6:	f1bb 0f0e 	cmp.w	fp, #14
 8008efa:	f300 814a 	bgt.w	8009192 <_dtoa_r+0x722>
 8008efe:	4b6b      	ldr	r3, [pc, #428]	; (80090ac <_dtoa_r+0x63c>)
 8008f00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f280 80dc 	bge.w	80090c8 <_dtoa_r+0x658>
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f300 80d8 	bgt.w	80090c8 <_dtoa_r+0x658>
 8008f18:	f040 826f 	bne.w	80093fa <_dtoa_r+0x98a>
 8008f1c:	4b68      	ldr	r3, [pc, #416]	; (80090c0 <_dtoa_r+0x650>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fb68 	bl	80005f8 <__aeabi_dmul>
 8008f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f2c:	f7f7 fdea 	bl	8000b04 <__aeabi_dcmpge>
 8008f30:	9e04      	ldr	r6, [sp, #16]
 8008f32:	4637      	mov	r7, r6
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f040 8245 	bne.w	80093c4 <_dtoa_r+0x954>
 8008f3a:	9d00      	ldr	r5, [sp, #0]
 8008f3c:	2331      	movs	r3, #49	; 0x31
 8008f3e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f42:	f10b 0b01 	add.w	fp, fp, #1
 8008f46:	e241      	b.n	80093cc <_dtoa_r+0x95c>
 8008f48:	07f2      	lsls	r2, r6, #31
 8008f4a:	d505      	bpl.n	8008f58 <_dtoa_r+0x4e8>
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	f7f7 fb52 	bl	80005f8 <__aeabi_dmul>
 8008f54:	3501      	adds	r5, #1
 8008f56:	2301      	movs	r3, #1
 8008f58:	1076      	asrs	r6, r6, #1
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	e773      	b.n	8008e46 <_dtoa_r+0x3d6>
 8008f5e:	2502      	movs	r5, #2
 8008f60:	e775      	b.n	8008e4e <_dtoa_r+0x3de>
 8008f62:	9e04      	ldr	r6, [sp, #16]
 8008f64:	465f      	mov	r7, fp
 8008f66:	e792      	b.n	8008e8e <_dtoa_r+0x41e>
 8008f68:	9900      	ldr	r1, [sp, #0]
 8008f6a:	4b50      	ldr	r3, [pc, #320]	; (80090ac <_dtoa_r+0x63c>)
 8008f6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f70:	4431      	add	r1, r6
 8008f72:	9102      	str	r1, [sp, #8]
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	eeb0 9a47 	vmov.f32	s18, s14
 8008f7a:	eef0 9a67 	vmov.f32	s19, s15
 8008f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d044      	beq.n	8009014 <_dtoa_r+0x5a4>
 8008f8a:	494e      	ldr	r1, [pc, #312]	; (80090c4 <_dtoa_r+0x654>)
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7f7 fc5d 	bl	800084c <__aeabi_ddiv>
 8008f92:	ec53 2b19 	vmov	r2, r3, d9
 8008f96:	f7f7 f977 	bl	8000288 <__aeabi_dsub>
 8008f9a:	9d00      	ldr	r5, [sp, #0]
 8008f9c:	ec41 0b19 	vmov	d9, r0, r1
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	f7f7 fdd8 	bl	8000b58 <__aeabi_d2iz>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	f7f7 fabb 	bl	8000524 <__aeabi_i2d>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 f967 	bl	8000288 <__aeabi_dsub>
 8008fba:	3630      	adds	r6, #48	; 0x30
 8008fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc0:	ec53 2b19 	vmov	r2, r3, d9
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	f7f7 fd88 	bl	8000adc <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d164      	bne.n	800909a <_dtoa_r+0x62a>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4937      	ldr	r1, [pc, #220]	; (80090b4 <_dtoa_r+0x644>)
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	f7f7 f956 	bl	8000288 <__aeabi_dsub>
 8008fdc:	ec53 2b19 	vmov	r2, r3, d9
 8008fe0:	f7f7 fd7c 	bl	8000adc <__aeabi_dcmplt>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f040 80b6 	bne.w	8009156 <_dtoa_r+0x6e6>
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	429d      	cmp	r5, r3
 8008fee:	f43f af7c 	beq.w	8008eea <_dtoa_r+0x47a>
 8008ff2:	4b31      	ldr	r3, [pc, #196]	; (80090b8 <_dtoa_r+0x648>)
 8008ff4:	ec51 0b19 	vmov	r0, r1, d9
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f7f7 fafd 	bl	80005f8 <__aeabi_dmul>
 8008ffe:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <_dtoa_r+0x648>)
 8009000:	ec41 0b19 	vmov	d9, r0, r1
 8009004:	2200      	movs	r2, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	4680      	mov	r8, r0
 8009010:	4689      	mov	r9, r1
 8009012:	e7c5      	b.n	8008fa0 <_dtoa_r+0x530>
 8009014:	ec51 0b17 	vmov	r0, r1, d7
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	9d00      	ldr	r5, [sp, #0]
 8009020:	930f      	str	r3, [sp, #60]	; 0x3c
 8009022:	ec41 0b19 	vmov	d9, r0, r1
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	f7f7 fd95 	bl	8000b58 <__aeabi_d2iz>
 800902e:	4606      	mov	r6, r0
 8009030:	f7f7 fa78 	bl	8000524 <__aeabi_i2d>
 8009034:	3630      	adds	r6, #48	; 0x30
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f923 	bl	8000288 <__aeabi_dsub>
 8009042:	f805 6b01 	strb.w	r6, [r5], #1
 8009046:	9b02      	ldr	r3, [sp, #8]
 8009048:	429d      	cmp	r5, r3
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	d124      	bne.n	800909e <_dtoa_r+0x62e>
 8009054:	4b1b      	ldr	r3, [pc, #108]	; (80090c4 <_dtoa_r+0x654>)
 8009056:	ec51 0b19 	vmov	r0, r1, d9
 800905a:	f7f7 f917 	bl	800028c <__adddf3>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800906a:	2800      	cmp	r0, #0
 800906c:	d173      	bne.n	8009156 <_dtoa_r+0x6e6>
 800906e:	ec53 2b19 	vmov	r2, r3, d9
 8009072:	4914      	ldr	r1, [pc, #80]	; (80090c4 <_dtoa_r+0x654>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 f907 	bl	8000288 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 fd2b 	bl	8000adc <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f af2f 	beq.w	8008eea <_dtoa_r+0x47a>
 800908c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800908e:	1e6b      	subs	r3, r5, #1
 8009090:	930f      	str	r3, [sp, #60]	; 0x3c
 8009092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009096:	2b30      	cmp	r3, #48	; 0x30
 8009098:	d0f8      	beq.n	800908c <_dtoa_r+0x61c>
 800909a:	46bb      	mov	fp, r7
 800909c:	e04a      	b.n	8009134 <_dtoa_r+0x6c4>
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <_dtoa_r+0x648>)
 80090a0:	f7f7 faaa 	bl	80005f8 <__aeabi_dmul>
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	e7bd      	b.n	8009026 <_dtoa_r+0x5b6>
 80090aa:	bf00      	nop
 80090ac:	0800ac20 	.word	0x0800ac20
 80090b0:	0800abf8 	.word	0x0800abf8
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	401c0000 	.word	0x401c0000
 80090c0:	40140000 	.word	0x40140000
 80090c4:	3fe00000 	.word	0x3fe00000
 80090c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090cc:	9d00      	ldr	r5, [sp, #0]
 80090ce:	4642      	mov	r2, r8
 80090d0:	464b      	mov	r3, r9
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fbb9 	bl	800084c <__aeabi_ddiv>
 80090da:	f7f7 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80090de:	9001      	str	r0, [sp, #4]
 80090e0:	f7f7 fa20 	bl	8000524 <__aeabi_i2d>
 80090e4:	4642      	mov	r2, r8
 80090e6:	464b      	mov	r3, r9
 80090e8:	f7f7 fa86 	bl	80005f8 <__aeabi_dmul>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f8c8 	bl	8000288 <__aeabi_dsub>
 80090f8:	9e01      	ldr	r6, [sp, #4]
 80090fa:	9f04      	ldr	r7, [sp, #16]
 80090fc:	3630      	adds	r6, #48	; 0x30
 80090fe:	f805 6b01 	strb.w	r6, [r5], #1
 8009102:	9e00      	ldr	r6, [sp, #0]
 8009104:	1bae      	subs	r6, r5, r6
 8009106:	42b7      	cmp	r7, r6
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	d134      	bne.n	8009178 <_dtoa_r+0x708>
 800910e:	f7f7 f8bd 	bl	800028c <__adddf3>
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	4606      	mov	r6, r0
 8009118:	460f      	mov	r7, r1
 800911a:	f7f7 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800911e:	b9c8      	cbnz	r0, 8009154 <_dtoa_r+0x6e4>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800912c:	b110      	cbz	r0, 8009134 <_dtoa_r+0x6c4>
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d40f      	bmi.n	8009154 <_dtoa_r+0x6e4>
 8009134:	4651      	mov	r1, sl
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fbcc 	bl	80098d4 <_Bfree>
 800913c:	2300      	movs	r3, #0
 800913e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009140:	702b      	strb	r3, [r5, #0]
 8009142:	f10b 0301 	add.w	r3, fp, #1
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800914a:	2b00      	cmp	r3, #0
 800914c:	f43f ace2 	beq.w	8008b14 <_dtoa_r+0xa4>
 8009150:	601d      	str	r5, [r3, #0]
 8009152:	e4df      	b.n	8008b14 <_dtoa_r+0xa4>
 8009154:	465f      	mov	r7, fp
 8009156:	462b      	mov	r3, r5
 8009158:	461d      	mov	r5, r3
 800915a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800915e:	2a39      	cmp	r2, #57	; 0x39
 8009160:	d106      	bne.n	8009170 <_dtoa_r+0x700>
 8009162:	9a00      	ldr	r2, [sp, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d1f7      	bne.n	8009158 <_dtoa_r+0x6e8>
 8009168:	9900      	ldr	r1, [sp, #0]
 800916a:	2230      	movs	r2, #48	; 0x30
 800916c:	3701      	adds	r7, #1
 800916e:	700a      	strb	r2, [r1, #0]
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	3201      	adds	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e790      	b.n	800909a <_dtoa_r+0x62a>
 8009178:	4ba3      	ldr	r3, [pc, #652]	; (8009408 <_dtoa_r+0x998>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	2200      	movs	r2, #0
 8009182:	2300      	movs	r3, #0
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	f7f7 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800918c:	2800      	cmp	r0, #0
 800918e:	d09e      	beq.n	80090ce <_dtoa_r+0x65e>
 8009190:	e7d0      	b.n	8009134 <_dtoa_r+0x6c4>
 8009192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009194:	2a00      	cmp	r2, #0
 8009196:	f000 80ca 	beq.w	800932e <_dtoa_r+0x8be>
 800919a:	9a07      	ldr	r2, [sp, #28]
 800919c:	2a01      	cmp	r2, #1
 800919e:	f300 80ad 	bgt.w	80092fc <_dtoa_r+0x88c>
 80091a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	f000 80a5 	beq.w	80092f4 <_dtoa_r+0x884>
 80091aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091ae:	9e08      	ldr	r6, [sp, #32]
 80091b0:	9d05      	ldr	r5, [sp, #20]
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	441a      	add	r2, r3
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	9a06      	ldr	r2, [sp, #24]
 80091ba:	2101      	movs	r1, #1
 80091bc:	441a      	add	r2, r3
 80091be:	4620      	mov	r0, r4
 80091c0:	9206      	str	r2, [sp, #24]
 80091c2:	f000 fc3d 	bl	8009a40 <__i2b>
 80091c6:	4607      	mov	r7, r0
 80091c8:	b165      	cbz	r5, 80091e4 <_dtoa_r+0x774>
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd09      	ble.n	80091e4 <_dtoa_r+0x774>
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	9a05      	ldr	r2, [sp, #20]
 80091d4:	bfa8      	it	ge
 80091d6:	462b      	movge	r3, r5
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	9205      	str	r2, [sp, #20]
 80091dc:	9a06      	ldr	r2, [sp, #24]
 80091de:	1aed      	subs	r5, r5, r3
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	9306      	str	r3, [sp, #24]
 80091e4:	9b08      	ldr	r3, [sp, #32]
 80091e6:	b1f3      	cbz	r3, 8009226 <_dtoa_r+0x7b6>
 80091e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 80a3 	beq.w	8009336 <_dtoa_r+0x8c6>
 80091f0:	2e00      	cmp	r6, #0
 80091f2:	dd10      	ble.n	8009216 <_dtoa_r+0x7a6>
 80091f4:	4639      	mov	r1, r7
 80091f6:	4632      	mov	r2, r6
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 fce1 	bl	8009bc0 <__pow5mult>
 80091fe:	4652      	mov	r2, sl
 8009200:	4601      	mov	r1, r0
 8009202:	4607      	mov	r7, r0
 8009204:	4620      	mov	r0, r4
 8009206:	f000 fc31 	bl	8009a6c <__multiply>
 800920a:	4651      	mov	r1, sl
 800920c:	4680      	mov	r8, r0
 800920e:	4620      	mov	r0, r4
 8009210:	f000 fb60 	bl	80098d4 <_Bfree>
 8009214:	46c2      	mov	sl, r8
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	1b9a      	subs	r2, r3, r6
 800921a:	d004      	beq.n	8009226 <_dtoa_r+0x7b6>
 800921c:	4651      	mov	r1, sl
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fcce 	bl	8009bc0 <__pow5mult>
 8009224:	4682      	mov	sl, r0
 8009226:	2101      	movs	r1, #1
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fc09 	bl	8009a40 <__i2b>
 800922e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	4606      	mov	r6, r0
 8009234:	f340 8081 	ble.w	800933a <_dtoa_r+0x8ca>
 8009238:	461a      	mov	r2, r3
 800923a:	4601      	mov	r1, r0
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fcbf 	bl	8009bc0 <__pow5mult>
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	2b01      	cmp	r3, #1
 8009246:	4606      	mov	r6, r0
 8009248:	dd7a      	ble.n	8009340 <_dtoa_r+0x8d0>
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	6933      	ldr	r3, [r6, #16]
 8009250:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009254:	6918      	ldr	r0, [r3, #16]
 8009256:	f000 fba5 	bl	80099a4 <__hi0bits>
 800925a:	f1c0 0020 	rsb	r0, r0, #32
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	4418      	add	r0, r3
 8009262:	f010 001f 	ands.w	r0, r0, #31
 8009266:	f000 8094 	beq.w	8009392 <_dtoa_r+0x922>
 800926a:	f1c0 0320 	rsb	r3, r0, #32
 800926e:	2b04      	cmp	r3, #4
 8009270:	f340 8085 	ble.w	800937e <_dtoa_r+0x90e>
 8009274:	9b05      	ldr	r3, [sp, #20]
 8009276:	f1c0 001c 	rsb	r0, r0, #28
 800927a:	4403      	add	r3, r0
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	4403      	add	r3, r0
 8009282:	4405      	add	r5, r0
 8009284:	9306      	str	r3, [sp, #24]
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dd05      	ble.n	8009298 <_dtoa_r+0x828>
 800928c:	4651      	mov	r1, sl
 800928e:	461a      	mov	r2, r3
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fcef 	bl	8009c74 <__lshift>
 8009296:	4682      	mov	sl, r0
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dd05      	ble.n	80092aa <_dtoa_r+0x83a>
 800929e:	4631      	mov	r1, r6
 80092a0:	461a      	mov	r2, r3
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fce6 	bl	8009c74 <__lshift>
 80092a8:	4606      	mov	r6, r0
 80092aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d072      	beq.n	8009396 <_dtoa_r+0x926>
 80092b0:	4631      	mov	r1, r6
 80092b2:	4650      	mov	r0, sl
 80092b4:	f000 fd4a 	bl	8009d4c <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	da6c      	bge.n	8009396 <_dtoa_r+0x926>
 80092bc:	2300      	movs	r3, #0
 80092be:	4651      	mov	r1, sl
 80092c0:	220a      	movs	r2, #10
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fb28 	bl	8009918 <__multadd>
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092ce:	4682      	mov	sl, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 81b0 	beq.w	8009636 <_dtoa_r+0xbc6>
 80092d6:	2300      	movs	r3, #0
 80092d8:	4639      	mov	r1, r7
 80092da:	220a      	movs	r2, #10
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fb1b 	bl	8009918 <__multadd>
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	4607      	mov	r7, r0
 80092e8:	f300 8096 	bgt.w	8009418 <_dtoa_r+0x9a8>
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dc59      	bgt.n	80093a6 <_dtoa_r+0x936>
 80092f2:	e091      	b.n	8009418 <_dtoa_r+0x9a8>
 80092f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092fa:	e758      	b.n	80091ae <_dtoa_r+0x73e>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	1e5e      	subs	r6, r3, #1
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	42b3      	cmp	r3, r6
 8009304:	bfbf      	itttt	lt
 8009306:	9b08      	ldrlt	r3, [sp, #32]
 8009308:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800930a:	9608      	strlt	r6, [sp, #32]
 800930c:	1af3      	sublt	r3, r6, r3
 800930e:	bfb4      	ite	lt
 8009310:	18d2      	addlt	r2, r2, r3
 8009312:	1b9e      	subge	r6, r3, r6
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	bfbc      	itt	lt
 8009318:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800931a:	2600      	movlt	r6, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb7      	itett	lt
 8009320:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009324:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009328:	1a9d      	sublt	r5, r3, r2
 800932a:	2300      	movlt	r3, #0
 800932c:	e741      	b.n	80091b2 <_dtoa_r+0x742>
 800932e:	9e08      	ldr	r6, [sp, #32]
 8009330:	9d05      	ldr	r5, [sp, #20]
 8009332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009334:	e748      	b.n	80091c8 <_dtoa_r+0x758>
 8009336:	9a08      	ldr	r2, [sp, #32]
 8009338:	e770      	b.n	800921c <_dtoa_r+0x7ac>
 800933a:	9b07      	ldr	r3, [sp, #28]
 800933c:	2b01      	cmp	r3, #1
 800933e:	dc19      	bgt.n	8009374 <_dtoa_r+0x904>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	b9bb      	cbnz	r3, 8009374 <_dtoa_r+0x904>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800934a:	b99b      	cbnz	r3, 8009374 <_dtoa_r+0x904>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009352:	0d1b      	lsrs	r3, r3, #20
 8009354:	051b      	lsls	r3, r3, #20
 8009356:	b183      	cbz	r3, 800937a <_dtoa_r+0x90a>
 8009358:	9b05      	ldr	r3, [sp, #20]
 800935a:	3301      	adds	r3, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	3301      	adds	r3, #1
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	f04f 0801 	mov.w	r8, #1
 8009368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f af6f 	bne.w	800924e <_dtoa_r+0x7de>
 8009370:	2001      	movs	r0, #1
 8009372:	e774      	b.n	800925e <_dtoa_r+0x7ee>
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	e7f6      	b.n	8009368 <_dtoa_r+0x8f8>
 800937a:	4698      	mov	r8, r3
 800937c:	e7f4      	b.n	8009368 <_dtoa_r+0x8f8>
 800937e:	d082      	beq.n	8009286 <_dtoa_r+0x816>
 8009380:	9a05      	ldr	r2, [sp, #20]
 8009382:	331c      	adds	r3, #28
 8009384:	441a      	add	r2, r3
 8009386:	9205      	str	r2, [sp, #20]
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	441a      	add	r2, r3
 800938c:	441d      	add	r5, r3
 800938e:	9206      	str	r2, [sp, #24]
 8009390:	e779      	b.n	8009286 <_dtoa_r+0x816>
 8009392:	4603      	mov	r3, r0
 8009394:	e7f4      	b.n	8009380 <_dtoa_r+0x910>
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dc37      	bgt.n	800940c <_dtoa_r+0x99c>
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	dd34      	ble.n	800940c <_dtoa_r+0x99c>
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	b963      	cbnz	r3, 80093c4 <_dtoa_r+0x954>
 80093aa:	4631      	mov	r1, r6
 80093ac:	2205      	movs	r2, #5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fab2 	bl	8009918 <__multadd>
 80093b4:	4601      	mov	r1, r0
 80093b6:	4606      	mov	r6, r0
 80093b8:	4650      	mov	r0, sl
 80093ba:	f000 fcc7 	bl	8009d4c <__mcmp>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f73f adbb 	bgt.w	8008f3a <_dtoa_r+0x4ca>
 80093c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c6:	9d00      	ldr	r5, [sp, #0]
 80093c8:	ea6f 0b03 	mvn.w	fp, r3
 80093cc:	f04f 0800 	mov.w	r8, #0
 80093d0:	4631      	mov	r1, r6
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fa7e 	bl	80098d4 <_Bfree>
 80093d8:	2f00      	cmp	r7, #0
 80093da:	f43f aeab 	beq.w	8009134 <_dtoa_r+0x6c4>
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	d005      	beq.n	80093f0 <_dtoa_r+0x980>
 80093e4:	45b8      	cmp	r8, r7
 80093e6:	d003      	beq.n	80093f0 <_dtoa_r+0x980>
 80093e8:	4641      	mov	r1, r8
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fa72 	bl	80098d4 <_Bfree>
 80093f0:	4639      	mov	r1, r7
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fa6e 	bl	80098d4 <_Bfree>
 80093f8:	e69c      	b.n	8009134 <_dtoa_r+0x6c4>
 80093fa:	2600      	movs	r6, #0
 80093fc:	4637      	mov	r7, r6
 80093fe:	e7e1      	b.n	80093c4 <_dtoa_r+0x954>
 8009400:	46bb      	mov	fp, r7
 8009402:	4637      	mov	r7, r6
 8009404:	e599      	b.n	8008f3a <_dtoa_r+0x4ca>
 8009406:	bf00      	nop
 8009408:	40240000 	.word	0x40240000
 800940c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80c8 	beq.w	80095a4 <_dtoa_r+0xb34>
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	2d00      	cmp	r5, #0
 800941a:	dd05      	ble.n	8009428 <_dtoa_r+0x9b8>
 800941c:	4639      	mov	r1, r7
 800941e:	462a      	mov	r2, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fc27 	bl	8009c74 <__lshift>
 8009426:	4607      	mov	r7, r0
 8009428:	f1b8 0f00 	cmp.w	r8, #0
 800942c:	d05b      	beq.n	80094e6 <_dtoa_r+0xa76>
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fa0f 	bl	8009854 <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b928      	cbnz	r0, 8009446 <_dtoa_r+0x9d6>
 800943a:	4b83      	ldr	r3, [pc, #524]	; (8009648 <_dtoa_r+0xbd8>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009442:	f7ff bb2e 	b.w	8008aa2 <_dtoa_r+0x32>
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	3202      	adds	r2, #2
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	f107 010c 	add.w	r1, r7, #12
 8009450:	300c      	adds	r0, #12
 8009452:	f000 ffab 	bl	800a3ac <memcpy>
 8009456:	2201      	movs	r2, #1
 8009458:	4629      	mov	r1, r5
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fc0a 	bl	8009c74 <__lshift>
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800946a:	4413      	add	r3, r2
 800946c:	9308      	str	r3, [sp, #32]
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	46b8      	mov	r8, r7
 8009476:	9306      	str	r3, [sp, #24]
 8009478:	4607      	mov	r7, r0
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	4631      	mov	r1, r6
 800947e:	3b01      	subs	r3, #1
 8009480:	4650      	mov	r0, sl
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	f7ff fa6c 	bl	8008960 <quorem>
 8009488:	4641      	mov	r1, r8
 800948a:	9002      	str	r0, [sp, #8]
 800948c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009490:	4650      	mov	r0, sl
 8009492:	f000 fc5b 	bl	8009d4c <__mcmp>
 8009496:	463a      	mov	r2, r7
 8009498:	9005      	str	r0, [sp, #20]
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fc71 	bl	8009d84 <__mdiff>
 80094a2:	68c2      	ldr	r2, [r0, #12]
 80094a4:	4605      	mov	r5, r0
 80094a6:	bb02      	cbnz	r2, 80094ea <_dtoa_r+0xa7a>
 80094a8:	4601      	mov	r1, r0
 80094aa:	4650      	mov	r0, sl
 80094ac:	f000 fc4e 	bl	8009d4c <__mcmp>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4629      	mov	r1, r5
 80094b4:	4620      	mov	r0, r4
 80094b6:	9209      	str	r2, [sp, #36]	; 0x24
 80094b8:	f000 fa0c 	bl	80098d4 <_Bfree>
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c0:	9d04      	ldr	r5, [sp, #16]
 80094c2:	ea43 0102 	orr.w	r1, r3, r2
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	4319      	orrs	r1, r3
 80094ca:	d110      	bne.n	80094ee <_dtoa_r+0xa7e>
 80094cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094d0:	d029      	beq.n	8009526 <_dtoa_r+0xab6>
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dd02      	ble.n	80094de <_dtoa_r+0xa6e>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	f883 9000 	strb.w	r9, [r3]
 80094e4:	e774      	b.n	80093d0 <_dtoa_r+0x960>
 80094e6:	4638      	mov	r0, r7
 80094e8:	e7ba      	b.n	8009460 <_dtoa_r+0x9f0>
 80094ea:	2201      	movs	r2, #1
 80094ec:	e7e1      	b.n	80094b2 <_dtoa_r+0xa42>
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	db04      	blt.n	80094fe <_dtoa_r+0xa8e>
 80094f4:	9907      	ldr	r1, [sp, #28]
 80094f6:	430b      	orrs	r3, r1
 80094f8:	9906      	ldr	r1, [sp, #24]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	d120      	bne.n	8009540 <_dtoa_r+0xad0>
 80094fe:	2a00      	cmp	r2, #0
 8009500:	dded      	ble.n	80094de <_dtoa_r+0xa6e>
 8009502:	4651      	mov	r1, sl
 8009504:	2201      	movs	r2, #1
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fbb4 	bl	8009c74 <__lshift>
 800950c:	4631      	mov	r1, r6
 800950e:	4682      	mov	sl, r0
 8009510:	f000 fc1c 	bl	8009d4c <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	dc03      	bgt.n	8009520 <_dtoa_r+0xab0>
 8009518:	d1e1      	bne.n	80094de <_dtoa_r+0xa6e>
 800951a:	f019 0f01 	tst.w	r9, #1
 800951e:	d0de      	beq.n	80094de <_dtoa_r+0xa6e>
 8009520:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009524:	d1d8      	bne.n	80094d8 <_dtoa_r+0xa68>
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	2339      	movs	r3, #57	; 0x39
 800952a:	7013      	strb	r3, [r2, #0]
 800952c:	462b      	mov	r3, r5
 800952e:	461d      	mov	r5, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009536:	2a39      	cmp	r2, #57	; 0x39
 8009538:	d06c      	beq.n	8009614 <_dtoa_r+0xba4>
 800953a:	3201      	adds	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	e747      	b.n	80093d0 <_dtoa_r+0x960>
 8009540:	2a00      	cmp	r2, #0
 8009542:	dd07      	ble.n	8009554 <_dtoa_r+0xae4>
 8009544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009548:	d0ed      	beq.n	8009526 <_dtoa_r+0xab6>
 800954a:	9a01      	ldr	r2, [sp, #4]
 800954c:	f109 0301 	add.w	r3, r9, #1
 8009550:	7013      	strb	r3, [r2, #0]
 8009552:	e73d      	b.n	80093d0 <_dtoa_r+0x960>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	9a08      	ldr	r2, [sp, #32]
 8009558:	f803 9c01 	strb.w	r9, [r3, #-1]
 800955c:	4293      	cmp	r3, r2
 800955e:	d043      	beq.n	80095e8 <_dtoa_r+0xb78>
 8009560:	4651      	mov	r1, sl
 8009562:	2300      	movs	r3, #0
 8009564:	220a      	movs	r2, #10
 8009566:	4620      	mov	r0, r4
 8009568:	f000 f9d6 	bl	8009918 <__multadd>
 800956c:	45b8      	cmp	r8, r7
 800956e:	4682      	mov	sl, r0
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	f04f 020a 	mov.w	r2, #10
 8009578:	4641      	mov	r1, r8
 800957a:	4620      	mov	r0, r4
 800957c:	d107      	bne.n	800958e <_dtoa_r+0xb1e>
 800957e:	f000 f9cb 	bl	8009918 <__multadd>
 8009582:	4680      	mov	r8, r0
 8009584:	4607      	mov	r7, r0
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	e775      	b.n	800947a <_dtoa_r+0xa0a>
 800958e:	f000 f9c3 	bl	8009918 <__multadd>
 8009592:	4639      	mov	r1, r7
 8009594:	4680      	mov	r8, r0
 8009596:	2300      	movs	r3, #0
 8009598:	220a      	movs	r2, #10
 800959a:	4620      	mov	r0, r4
 800959c:	f000 f9bc 	bl	8009918 <__multadd>
 80095a0:	4607      	mov	r7, r0
 80095a2:	e7f0      	b.n	8009586 <_dtoa_r+0xb16>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	9d00      	ldr	r5, [sp, #0]
 80095aa:	4631      	mov	r1, r6
 80095ac:	4650      	mov	r0, sl
 80095ae:	f7ff f9d7 	bl	8008960 <quorem>
 80095b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	f805 9b01 	strb.w	r9, [r5], #1
 80095bc:	1aea      	subs	r2, r5, r3
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	dd07      	ble.n	80095d4 <_dtoa_r+0xb64>
 80095c4:	4651      	mov	r1, sl
 80095c6:	2300      	movs	r3, #0
 80095c8:	220a      	movs	r2, #10
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 f9a4 	bl	8009918 <__multadd>
 80095d0:	4682      	mov	sl, r0
 80095d2:	e7ea      	b.n	80095aa <_dtoa_r+0xb3a>
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfc8      	it	gt
 80095da:	461d      	movgt	r5, r3
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	bfd8      	it	le
 80095e0:	2501      	movle	r5, #1
 80095e2:	441d      	add	r5, r3
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	4651      	mov	r1, sl
 80095ea:	2201      	movs	r2, #1
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fb41 	bl	8009c74 <__lshift>
 80095f2:	4631      	mov	r1, r6
 80095f4:	4682      	mov	sl, r0
 80095f6:	f000 fba9 	bl	8009d4c <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	dc96      	bgt.n	800952c <_dtoa_r+0xabc>
 80095fe:	d102      	bne.n	8009606 <_dtoa_r+0xb96>
 8009600:	f019 0f01 	tst.w	r9, #1
 8009604:	d192      	bne.n	800952c <_dtoa_r+0xabc>
 8009606:	462b      	mov	r3, r5
 8009608:	461d      	mov	r5, r3
 800960a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800960e:	2a30      	cmp	r2, #48	; 0x30
 8009610:	d0fa      	beq.n	8009608 <_dtoa_r+0xb98>
 8009612:	e6dd      	b.n	80093d0 <_dtoa_r+0x960>
 8009614:	9a00      	ldr	r2, [sp, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d189      	bne.n	800952e <_dtoa_r+0xabe>
 800961a:	f10b 0b01 	add.w	fp, fp, #1
 800961e:	2331      	movs	r3, #49	; 0x31
 8009620:	e796      	b.n	8009550 <_dtoa_r+0xae0>
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <_dtoa_r+0xbdc>)
 8009624:	f7ff ba99 	b.w	8008b5a <_dtoa_r+0xea>
 8009628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800962a:	2b00      	cmp	r3, #0
 800962c:	f47f aa6d 	bne.w	8008b0a <_dtoa_r+0x9a>
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <_dtoa_r+0xbe0>)
 8009632:	f7ff ba92 	b.w	8008b5a <_dtoa_r+0xea>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	dcb5      	bgt.n	80095a8 <_dtoa_r+0xb38>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	2b02      	cmp	r3, #2
 8009640:	f73f aeb1 	bgt.w	80093a6 <_dtoa_r+0x936>
 8009644:	e7b0      	b.n	80095a8 <_dtoa_r+0xb38>
 8009646:	bf00      	nop
 8009648:	0800ab88 	.word	0x0800ab88
 800964c:	0800aae8 	.word	0x0800aae8
 8009650:	0800ab0c 	.word	0x0800ab0c

08009654 <_free_r>:
 8009654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009656:	2900      	cmp	r1, #0
 8009658:	d044      	beq.n	80096e4 <_free_r+0x90>
 800965a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965e:	9001      	str	r0, [sp, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f1a1 0404 	sub.w	r4, r1, #4
 8009666:	bfb8      	it	lt
 8009668:	18e4      	addlt	r4, r4, r3
 800966a:	f000 f8e7 	bl	800983c <__malloc_lock>
 800966e:	4a1e      	ldr	r2, [pc, #120]	; (80096e8 <_free_r+0x94>)
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	b933      	cbnz	r3, 8009684 <_free_r+0x30>
 8009676:	6063      	str	r3, [r4, #4]
 8009678:	6014      	str	r4, [r2, #0]
 800967a:	b003      	add	sp, #12
 800967c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009680:	f000 b8e2 	b.w	8009848 <__malloc_unlock>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d908      	bls.n	800969a <_free_r+0x46>
 8009688:	6825      	ldr	r5, [r4, #0]
 800968a:	1961      	adds	r1, r4, r5
 800968c:	428b      	cmp	r3, r1
 800968e:	bf01      	itttt	eq
 8009690:	6819      	ldreq	r1, [r3, #0]
 8009692:	685b      	ldreq	r3, [r3, #4]
 8009694:	1949      	addeq	r1, r1, r5
 8009696:	6021      	streq	r1, [r4, #0]
 8009698:	e7ed      	b.n	8009676 <_free_r+0x22>
 800969a:	461a      	mov	r2, r3
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b10b      	cbz	r3, 80096a4 <_free_r+0x50>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x46>
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	1855      	adds	r5, r2, r1
 80096a8:	42a5      	cmp	r5, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x70>
 80096ac:	6824      	ldr	r4, [r4, #0]
 80096ae:	4421      	add	r1, r4
 80096b0:	1854      	adds	r4, r2, r1
 80096b2:	42a3      	cmp	r3, r4
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	d1e0      	bne.n	800967a <_free_r+0x26>
 80096b8:	681c      	ldr	r4, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	6053      	str	r3, [r2, #4]
 80096be:	440c      	add	r4, r1
 80096c0:	6014      	str	r4, [r2, #0]
 80096c2:	e7da      	b.n	800967a <_free_r+0x26>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x78>
 80096c6:	230c      	movs	r3, #12
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	e7d6      	b.n	800967a <_free_r+0x26>
 80096cc:	6825      	ldr	r5, [r4, #0]
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf04      	itt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	bf04      	itt	eq
 80096dc:	1949      	addeq	r1, r1, r5
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	6054      	str	r4, [r2, #4]
 80096e2:	e7ca      	b.n	800967a <_free_r+0x26>
 80096e4:	b003      	add	sp, #12
 80096e6:	bd30      	pop	{r4, r5, pc}
 80096e8:	20000b44 	.word	0x20000b44

080096ec <malloc>:
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <malloc+0xc>)
 80096ee:	4601      	mov	r1, r0
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f000 b823 	b.w	800973c <_malloc_r>
 80096f6:	bf00      	nop
 80096f8:	20000064 	.word	0x20000064

080096fc <sbrk_aligned>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4e0e      	ldr	r6, [pc, #56]	; (8009738 <sbrk_aligned+0x3c>)
 8009700:	460c      	mov	r4, r1
 8009702:	6831      	ldr	r1, [r6, #0]
 8009704:	4605      	mov	r5, r0
 8009706:	b911      	cbnz	r1, 800970e <sbrk_aligned+0x12>
 8009708:	f000 fe40 	bl	800a38c <_sbrk_r>
 800970c:	6030      	str	r0, [r6, #0]
 800970e:	4621      	mov	r1, r4
 8009710:	4628      	mov	r0, r5
 8009712:	f000 fe3b 	bl	800a38c <_sbrk_r>
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	d00a      	beq.n	8009730 <sbrk_aligned+0x34>
 800971a:	1cc4      	adds	r4, r0, #3
 800971c:	f024 0403 	bic.w	r4, r4, #3
 8009720:	42a0      	cmp	r0, r4
 8009722:	d007      	beq.n	8009734 <sbrk_aligned+0x38>
 8009724:	1a21      	subs	r1, r4, r0
 8009726:	4628      	mov	r0, r5
 8009728:	f000 fe30 	bl	800a38c <_sbrk_r>
 800972c:	3001      	adds	r0, #1
 800972e:	d101      	bne.n	8009734 <sbrk_aligned+0x38>
 8009730:	f04f 34ff 	mov.w	r4, #4294967295
 8009734:	4620      	mov	r0, r4
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	20000b48 	.word	0x20000b48

0800973c <_malloc_r>:
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	1ccd      	adds	r5, r1, #3
 8009742:	f025 0503 	bic.w	r5, r5, #3
 8009746:	3508      	adds	r5, #8
 8009748:	2d0c      	cmp	r5, #12
 800974a:	bf38      	it	cc
 800974c:	250c      	movcc	r5, #12
 800974e:	2d00      	cmp	r5, #0
 8009750:	4607      	mov	r7, r0
 8009752:	db01      	blt.n	8009758 <_malloc_r+0x1c>
 8009754:	42a9      	cmp	r1, r5
 8009756:	d905      	bls.n	8009764 <_malloc_r+0x28>
 8009758:	230c      	movs	r3, #12
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	2600      	movs	r6, #0
 800975e:	4630      	mov	r0, r6
 8009760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009838 <_malloc_r+0xfc>
 8009768:	f000 f868 	bl	800983c <__malloc_lock>
 800976c:	f8d8 3000 	ldr.w	r3, [r8]
 8009770:	461c      	mov	r4, r3
 8009772:	bb5c      	cbnz	r4, 80097cc <_malloc_r+0x90>
 8009774:	4629      	mov	r1, r5
 8009776:	4638      	mov	r0, r7
 8009778:	f7ff ffc0 	bl	80096fc <sbrk_aligned>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	4604      	mov	r4, r0
 8009780:	d155      	bne.n	800982e <_malloc_r+0xf2>
 8009782:	f8d8 4000 	ldr.w	r4, [r8]
 8009786:	4626      	mov	r6, r4
 8009788:	2e00      	cmp	r6, #0
 800978a:	d145      	bne.n	8009818 <_malloc_r+0xdc>
 800978c:	2c00      	cmp	r4, #0
 800978e:	d048      	beq.n	8009822 <_malloc_r+0xe6>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	4631      	mov	r1, r6
 8009794:	4638      	mov	r0, r7
 8009796:	eb04 0903 	add.w	r9, r4, r3
 800979a:	f000 fdf7 	bl	800a38c <_sbrk_r>
 800979e:	4581      	cmp	r9, r0
 80097a0:	d13f      	bne.n	8009822 <_malloc_r+0xe6>
 80097a2:	6821      	ldr	r1, [r4, #0]
 80097a4:	1a6d      	subs	r5, r5, r1
 80097a6:	4629      	mov	r1, r5
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff ffa7 	bl	80096fc <sbrk_aligned>
 80097ae:	3001      	adds	r0, #1
 80097b0:	d037      	beq.n	8009822 <_malloc_r+0xe6>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	442b      	add	r3, r5
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	f8d8 3000 	ldr.w	r3, [r8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d038      	beq.n	8009832 <_malloc_r+0xf6>
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	42a2      	cmp	r2, r4
 80097c4:	d12b      	bne.n	800981e <_malloc_r+0xe2>
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	e00f      	b.n	80097ec <_malloc_r+0xb0>
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	1b52      	subs	r2, r2, r5
 80097d0:	d41f      	bmi.n	8009812 <_malloc_r+0xd6>
 80097d2:	2a0b      	cmp	r2, #11
 80097d4:	d917      	bls.n	8009806 <_malloc_r+0xca>
 80097d6:	1961      	adds	r1, r4, r5
 80097d8:	42a3      	cmp	r3, r4
 80097da:	6025      	str	r5, [r4, #0]
 80097dc:	bf18      	it	ne
 80097de:	6059      	strne	r1, [r3, #4]
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	bf08      	it	eq
 80097e4:	f8c8 1000 	streq.w	r1, [r8]
 80097e8:	5162      	str	r2, [r4, r5]
 80097ea:	604b      	str	r3, [r1, #4]
 80097ec:	4638      	mov	r0, r7
 80097ee:	f104 060b 	add.w	r6, r4, #11
 80097f2:	f000 f829 	bl	8009848 <__malloc_unlock>
 80097f6:	f026 0607 	bic.w	r6, r6, #7
 80097fa:	1d23      	adds	r3, r4, #4
 80097fc:	1af2      	subs	r2, r6, r3
 80097fe:	d0ae      	beq.n	800975e <_malloc_r+0x22>
 8009800:	1b9b      	subs	r3, r3, r6
 8009802:	50a3      	str	r3, [r4, r2]
 8009804:	e7ab      	b.n	800975e <_malloc_r+0x22>
 8009806:	42a3      	cmp	r3, r4
 8009808:	6862      	ldr	r2, [r4, #4]
 800980a:	d1dd      	bne.n	80097c8 <_malloc_r+0x8c>
 800980c:	f8c8 2000 	str.w	r2, [r8]
 8009810:	e7ec      	b.n	80097ec <_malloc_r+0xb0>
 8009812:	4623      	mov	r3, r4
 8009814:	6864      	ldr	r4, [r4, #4]
 8009816:	e7ac      	b.n	8009772 <_malloc_r+0x36>
 8009818:	4634      	mov	r4, r6
 800981a:	6876      	ldr	r6, [r6, #4]
 800981c:	e7b4      	b.n	8009788 <_malloc_r+0x4c>
 800981e:	4613      	mov	r3, r2
 8009820:	e7cc      	b.n	80097bc <_malloc_r+0x80>
 8009822:	230c      	movs	r3, #12
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	4638      	mov	r0, r7
 8009828:	f000 f80e 	bl	8009848 <__malloc_unlock>
 800982c:	e797      	b.n	800975e <_malloc_r+0x22>
 800982e:	6025      	str	r5, [r4, #0]
 8009830:	e7dc      	b.n	80097ec <_malloc_r+0xb0>
 8009832:	605b      	str	r3, [r3, #4]
 8009834:	deff      	udf	#255	; 0xff
 8009836:	bf00      	nop
 8009838:	20000b44 	.word	0x20000b44

0800983c <__malloc_lock>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__malloc_lock+0x8>)
 800983e:	f7ff b88d 	b.w	800895c <__retarget_lock_acquire_recursive>
 8009842:	bf00      	nop
 8009844:	20000b40 	.word	0x20000b40

08009848 <__malloc_unlock>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__malloc_unlock+0x8>)
 800984a:	f7ff b888 	b.w	800895e <__retarget_lock_release_recursive>
 800984e:	bf00      	nop
 8009850:	20000b40 	.word	0x20000b40

08009854 <_Balloc>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	69c6      	ldr	r6, [r0, #28]
 8009858:	4604      	mov	r4, r0
 800985a:	460d      	mov	r5, r1
 800985c:	b976      	cbnz	r6, 800987c <_Balloc+0x28>
 800985e:	2010      	movs	r0, #16
 8009860:	f7ff ff44 	bl	80096ec <malloc>
 8009864:	4602      	mov	r2, r0
 8009866:	61e0      	str	r0, [r4, #28]
 8009868:	b920      	cbnz	r0, 8009874 <_Balloc+0x20>
 800986a:	4b18      	ldr	r3, [pc, #96]	; (80098cc <_Balloc+0x78>)
 800986c:	4818      	ldr	r0, [pc, #96]	; (80098d0 <_Balloc+0x7c>)
 800986e:	216b      	movs	r1, #107	; 0x6b
 8009870:	f000 fdaa 	bl	800a3c8 <__assert_func>
 8009874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009878:	6006      	str	r6, [r0, #0]
 800987a:	60c6      	str	r6, [r0, #12]
 800987c:	69e6      	ldr	r6, [r4, #28]
 800987e:	68f3      	ldr	r3, [r6, #12]
 8009880:	b183      	cbz	r3, 80098a4 <_Balloc+0x50>
 8009882:	69e3      	ldr	r3, [r4, #28]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800988a:	b9b8      	cbnz	r0, 80098bc <_Balloc+0x68>
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f605 	lsl.w	r6, r1, r5
 8009892:	1d72      	adds	r2, r6, #5
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	4620      	mov	r0, r4
 8009898:	f000 fdb4 	bl	800a404 <_calloc_r>
 800989c:	b160      	cbz	r0, 80098b8 <_Balloc+0x64>
 800989e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098a2:	e00e      	b.n	80098c2 <_Balloc+0x6e>
 80098a4:	2221      	movs	r2, #33	; 0x21
 80098a6:	2104      	movs	r1, #4
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fdab 	bl	800a404 <_calloc_r>
 80098ae:	69e3      	ldr	r3, [r4, #28]
 80098b0:	60f0      	str	r0, [r6, #12]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e4      	bne.n	8009882 <_Balloc+0x2e>
 80098b8:	2000      	movs	r0, #0
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	6802      	ldr	r2, [r0, #0]
 80098be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098c2:	2300      	movs	r3, #0
 80098c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098c8:	e7f7      	b.n	80098ba <_Balloc+0x66>
 80098ca:	bf00      	nop
 80098cc:	0800ab19 	.word	0x0800ab19
 80098d0:	0800ab99 	.word	0x0800ab99

080098d4 <_Bfree>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	69c6      	ldr	r6, [r0, #28]
 80098d8:	4605      	mov	r5, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b976      	cbnz	r6, 80098fc <_Bfree+0x28>
 80098de:	2010      	movs	r0, #16
 80098e0:	f7ff ff04 	bl	80096ec <malloc>
 80098e4:	4602      	mov	r2, r0
 80098e6:	61e8      	str	r0, [r5, #28]
 80098e8:	b920      	cbnz	r0, 80098f4 <_Bfree+0x20>
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <_Bfree+0x3c>)
 80098ec:	4809      	ldr	r0, [pc, #36]	; (8009914 <_Bfree+0x40>)
 80098ee:	218f      	movs	r1, #143	; 0x8f
 80098f0:	f000 fd6a 	bl	800a3c8 <__assert_func>
 80098f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f8:	6006      	str	r6, [r0, #0]
 80098fa:	60c6      	str	r6, [r0, #12]
 80098fc:	b13c      	cbz	r4, 800990e <_Bfree+0x3a>
 80098fe:	69eb      	ldr	r3, [r5, #28]
 8009900:	6862      	ldr	r2, [r4, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009908:	6021      	str	r1, [r4, #0]
 800990a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	0800ab19 	.word	0x0800ab19
 8009914:	0800ab99 	.word	0x0800ab99

08009918 <__multadd>:
 8009918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991c:	690d      	ldr	r5, [r1, #16]
 800991e:	4607      	mov	r7, r0
 8009920:	460c      	mov	r4, r1
 8009922:	461e      	mov	r6, r3
 8009924:	f101 0c14 	add.w	ip, r1, #20
 8009928:	2000      	movs	r0, #0
 800992a:	f8dc 3000 	ldr.w	r3, [ip]
 800992e:	b299      	uxth	r1, r3
 8009930:	fb02 6101 	mla	r1, r2, r1, r6
 8009934:	0c1e      	lsrs	r6, r3, #16
 8009936:	0c0b      	lsrs	r3, r1, #16
 8009938:	fb02 3306 	mla	r3, r2, r6, r3
 800993c:	b289      	uxth	r1, r1
 800993e:	3001      	adds	r0, #1
 8009940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009944:	4285      	cmp	r5, r0
 8009946:	f84c 1b04 	str.w	r1, [ip], #4
 800994a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800994e:	dcec      	bgt.n	800992a <__multadd+0x12>
 8009950:	b30e      	cbz	r6, 8009996 <__multadd+0x7e>
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	42ab      	cmp	r3, r5
 8009956:	dc19      	bgt.n	800998c <__multadd+0x74>
 8009958:	6861      	ldr	r1, [r4, #4]
 800995a:	4638      	mov	r0, r7
 800995c:	3101      	adds	r1, #1
 800995e:	f7ff ff79 	bl	8009854 <_Balloc>
 8009962:	4680      	mov	r8, r0
 8009964:	b928      	cbnz	r0, 8009972 <__multadd+0x5a>
 8009966:	4602      	mov	r2, r0
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <__multadd+0x84>)
 800996a:	480d      	ldr	r0, [pc, #52]	; (80099a0 <__multadd+0x88>)
 800996c:	21ba      	movs	r1, #186	; 0xba
 800996e:	f000 fd2b 	bl	800a3c8 <__assert_func>
 8009972:	6922      	ldr	r2, [r4, #16]
 8009974:	3202      	adds	r2, #2
 8009976:	f104 010c 	add.w	r1, r4, #12
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	300c      	adds	r0, #12
 800997e:	f000 fd15 	bl	800a3ac <memcpy>
 8009982:	4621      	mov	r1, r4
 8009984:	4638      	mov	r0, r7
 8009986:	f7ff ffa5 	bl	80098d4 <_Bfree>
 800998a:	4644      	mov	r4, r8
 800998c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009990:	3501      	adds	r5, #1
 8009992:	615e      	str	r6, [r3, #20]
 8009994:	6125      	str	r5, [r4, #16]
 8009996:	4620      	mov	r0, r4
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	0800ab88 	.word	0x0800ab88
 80099a0:	0800ab99 	.word	0x0800ab99

080099a4 <__hi0bits>:
 80099a4:	0c03      	lsrs	r3, r0, #16
 80099a6:	041b      	lsls	r3, r3, #16
 80099a8:	b9d3      	cbnz	r3, 80099e0 <__hi0bits+0x3c>
 80099aa:	0400      	lsls	r0, r0, #16
 80099ac:	2310      	movs	r3, #16
 80099ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099b2:	bf04      	itt	eq
 80099b4:	0200      	lsleq	r0, r0, #8
 80099b6:	3308      	addeq	r3, #8
 80099b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099bc:	bf04      	itt	eq
 80099be:	0100      	lsleq	r0, r0, #4
 80099c0:	3304      	addeq	r3, #4
 80099c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099c6:	bf04      	itt	eq
 80099c8:	0080      	lsleq	r0, r0, #2
 80099ca:	3302      	addeq	r3, #2
 80099cc:	2800      	cmp	r0, #0
 80099ce:	db05      	blt.n	80099dc <__hi0bits+0x38>
 80099d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099d4:	f103 0301 	add.w	r3, r3, #1
 80099d8:	bf08      	it	eq
 80099da:	2320      	moveq	r3, #32
 80099dc:	4618      	mov	r0, r3
 80099de:	4770      	bx	lr
 80099e0:	2300      	movs	r3, #0
 80099e2:	e7e4      	b.n	80099ae <__hi0bits+0xa>

080099e4 <__lo0bits>:
 80099e4:	6803      	ldr	r3, [r0, #0]
 80099e6:	f013 0207 	ands.w	r2, r3, #7
 80099ea:	d00c      	beq.n	8009a06 <__lo0bits+0x22>
 80099ec:	07d9      	lsls	r1, r3, #31
 80099ee:	d422      	bmi.n	8009a36 <__lo0bits+0x52>
 80099f0:	079a      	lsls	r2, r3, #30
 80099f2:	bf49      	itett	mi
 80099f4:	085b      	lsrmi	r3, r3, #1
 80099f6:	089b      	lsrpl	r3, r3, #2
 80099f8:	6003      	strmi	r3, [r0, #0]
 80099fa:	2201      	movmi	r2, #1
 80099fc:	bf5c      	itt	pl
 80099fe:	6003      	strpl	r3, [r0, #0]
 8009a00:	2202      	movpl	r2, #2
 8009a02:	4610      	mov	r0, r2
 8009a04:	4770      	bx	lr
 8009a06:	b299      	uxth	r1, r3
 8009a08:	b909      	cbnz	r1, 8009a0e <__lo0bits+0x2a>
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	2210      	movs	r2, #16
 8009a0e:	b2d9      	uxtb	r1, r3
 8009a10:	b909      	cbnz	r1, 8009a16 <__lo0bits+0x32>
 8009a12:	3208      	adds	r2, #8
 8009a14:	0a1b      	lsrs	r3, r3, #8
 8009a16:	0719      	lsls	r1, r3, #28
 8009a18:	bf04      	itt	eq
 8009a1a:	091b      	lsreq	r3, r3, #4
 8009a1c:	3204      	addeq	r2, #4
 8009a1e:	0799      	lsls	r1, r3, #30
 8009a20:	bf04      	itt	eq
 8009a22:	089b      	lsreq	r3, r3, #2
 8009a24:	3202      	addeq	r2, #2
 8009a26:	07d9      	lsls	r1, r3, #31
 8009a28:	d403      	bmi.n	8009a32 <__lo0bits+0x4e>
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	f102 0201 	add.w	r2, r2, #1
 8009a30:	d003      	beq.n	8009a3a <__lo0bits+0x56>
 8009a32:	6003      	str	r3, [r0, #0]
 8009a34:	e7e5      	b.n	8009a02 <__lo0bits+0x1e>
 8009a36:	2200      	movs	r2, #0
 8009a38:	e7e3      	b.n	8009a02 <__lo0bits+0x1e>
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	e7e1      	b.n	8009a02 <__lo0bits+0x1e>
	...

08009a40 <__i2b>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	460c      	mov	r4, r1
 8009a44:	2101      	movs	r1, #1
 8009a46:	f7ff ff05 	bl	8009854 <_Balloc>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	b928      	cbnz	r0, 8009a5a <__i2b+0x1a>
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <__i2b+0x24>)
 8009a50:	4805      	ldr	r0, [pc, #20]	; (8009a68 <__i2b+0x28>)
 8009a52:	f240 1145 	movw	r1, #325	; 0x145
 8009a56:	f000 fcb7 	bl	800a3c8 <__assert_func>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	6144      	str	r4, [r0, #20]
 8009a5e:	6103      	str	r3, [r0, #16]
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	0800ab88 	.word	0x0800ab88
 8009a68:	0800ab99 	.word	0x0800ab99

08009a6c <__multiply>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	4691      	mov	r9, r2
 8009a72:	690a      	ldr	r2, [r1, #16]
 8009a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	bfb8      	it	lt
 8009a7c:	460b      	movlt	r3, r1
 8009a7e:	460c      	mov	r4, r1
 8009a80:	bfbc      	itt	lt
 8009a82:	464c      	movlt	r4, r9
 8009a84:	4699      	movlt	r9, r3
 8009a86:	6927      	ldr	r7, [r4, #16]
 8009a88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a8c:	68a3      	ldr	r3, [r4, #8]
 8009a8e:	6861      	ldr	r1, [r4, #4]
 8009a90:	eb07 060a 	add.w	r6, r7, sl
 8009a94:	42b3      	cmp	r3, r6
 8009a96:	b085      	sub	sp, #20
 8009a98:	bfb8      	it	lt
 8009a9a:	3101      	addlt	r1, #1
 8009a9c:	f7ff feda 	bl	8009854 <_Balloc>
 8009aa0:	b930      	cbnz	r0, 8009ab0 <__multiply+0x44>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	4b44      	ldr	r3, [pc, #272]	; (8009bb8 <__multiply+0x14c>)
 8009aa6:	4845      	ldr	r0, [pc, #276]	; (8009bbc <__multiply+0x150>)
 8009aa8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009aac:	f000 fc8c 	bl	800a3c8 <__assert_func>
 8009ab0:	f100 0514 	add.w	r5, r0, #20
 8009ab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ab8:	462b      	mov	r3, r5
 8009aba:	2200      	movs	r2, #0
 8009abc:	4543      	cmp	r3, r8
 8009abe:	d321      	bcc.n	8009b04 <__multiply+0x98>
 8009ac0:	f104 0314 	add.w	r3, r4, #20
 8009ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ac8:	f109 0314 	add.w	r3, r9, #20
 8009acc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ad0:	9202      	str	r2, [sp, #8]
 8009ad2:	1b3a      	subs	r2, r7, r4
 8009ad4:	3a15      	subs	r2, #21
 8009ad6:	f022 0203 	bic.w	r2, r2, #3
 8009ada:	3204      	adds	r2, #4
 8009adc:	f104 0115 	add.w	r1, r4, #21
 8009ae0:	428f      	cmp	r7, r1
 8009ae2:	bf38      	it	cc
 8009ae4:	2204      	movcc	r2, #4
 8009ae6:	9201      	str	r2, [sp, #4]
 8009ae8:	9a02      	ldr	r2, [sp, #8]
 8009aea:	9303      	str	r3, [sp, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d80c      	bhi.n	8009b0a <__multiply+0x9e>
 8009af0:	2e00      	cmp	r6, #0
 8009af2:	dd03      	ble.n	8009afc <__multiply+0x90>
 8009af4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d05b      	beq.n	8009bb4 <__multiply+0x148>
 8009afc:	6106      	str	r6, [r0, #16]
 8009afe:	b005      	add	sp, #20
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	f843 2b04 	str.w	r2, [r3], #4
 8009b08:	e7d8      	b.n	8009abc <__multiply+0x50>
 8009b0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b0e:	f1ba 0f00 	cmp.w	sl, #0
 8009b12:	d024      	beq.n	8009b5e <__multiply+0xf2>
 8009b14:	f104 0e14 	add.w	lr, r4, #20
 8009b18:	46a9      	mov	r9, r5
 8009b1a:	f04f 0c00 	mov.w	ip, #0
 8009b1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b22:	f8d9 1000 	ldr.w	r1, [r9]
 8009b26:	fa1f fb82 	uxth.w	fp, r2
 8009b2a:	b289      	uxth	r1, r1
 8009b2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b34:	f8d9 2000 	ldr.w	r2, [r9]
 8009b38:	4461      	add	r1, ip
 8009b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b46:	b289      	uxth	r1, r1
 8009b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b4c:	4577      	cmp	r7, lr
 8009b4e:	f849 1b04 	str.w	r1, [r9], #4
 8009b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b56:	d8e2      	bhi.n	8009b1e <__multiply+0xb2>
 8009b58:	9a01      	ldr	r2, [sp, #4]
 8009b5a:	f845 c002 	str.w	ip, [r5, r2]
 8009b5e:	9a03      	ldr	r2, [sp, #12]
 8009b60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b64:	3304      	adds	r3, #4
 8009b66:	f1b9 0f00 	cmp.w	r9, #0
 8009b6a:	d021      	beq.n	8009bb0 <__multiply+0x144>
 8009b6c:	6829      	ldr	r1, [r5, #0]
 8009b6e:	f104 0c14 	add.w	ip, r4, #20
 8009b72:	46ae      	mov	lr, r5
 8009b74:	f04f 0a00 	mov.w	sl, #0
 8009b78:	f8bc b000 	ldrh.w	fp, [ip]
 8009b7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b80:	fb09 220b 	mla	r2, r9, fp, r2
 8009b84:	4452      	add	r2, sl
 8009b86:	b289      	uxth	r1, r1
 8009b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b8c:	f84e 1b04 	str.w	r1, [lr], #4
 8009b90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b98:	f8be 1000 	ldrh.w	r1, [lr]
 8009b9c:	fb09 110a 	mla	r1, r9, sl, r1
 8009ba0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009ba4:	4567      	cmp	r7, ip
 8009ba6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009baa:	d8e5      	bhi.n	8009b78 <__multiply+0x10c>
 8009bac:	9a01      	ldr	r2, [sp, #4]
 8009bae:	50a9      	str	r1, [r5, r2]
 8009bb0:	3504      	adds	r5, #4
 8009bb2:	e799      	b.n	8009ae8 <__multiply+0x7c>
 8009bb4:	3e01      	subs	r6, #1
 8009bb6:	e79b      	b.n	8009af0 <__multiply+0x84>
 8009bb8:	0800ab88 	.word	0x0800ab88
 8009bbc:	0800ab99 	.word	0x0800ab99

08009bc0 <__pow5mult>:
 8009bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	f012 0203 	ands.w	r2, r2, #3
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	d007      	beq.n	8009be0 <__pow5mult+0x20>
 8009bd0:	4c25      	ldr	r4, [pc, #148]	; (8009c68 <__pow5mult+0xa8>)
 8009bd2:	3a01      	subs	r2, #1
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bda:	f7ff fe9d 	bl	8009918 <__multadd>
 8009bde:	4607      	mov	r7, r0
 8009be0:	10ad      	asrs	r5, r5, #2
 8009be2:	d03d      	beq.n	8009c60 <__pow5mult+0xa0>
 8009be4:	69f4      	ldr	r4, [r6, #28]
 8009be6:	b97c      	cbnz	r4, 8009c08 <__pow5mult+0x48>
 8009be8:	2010      	movs	r0, #16
 8009bea:	f7ff fd7f 	bl	80096ec <malloc>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	61f0      	str	r0, [r6, #28]
 8009bf2:	b928      	cbnz	r0, 8009c00 <__pow5mult+0x40>
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	; (8009c6c <__pow5mult+0xac>)
 8009bf6:	481e      	ldr	r0, [pc, #120]	; (8009c70 <__pow5mult+0xb0>)
 8009bf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009bfc:	f000 fbe4 	bl	800a3c8 <__assert_func>
 8009c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c04:	6004      	str	r4, [r0, #0]
 8009c06:	60c4      	str	r4, [r0, #12]
 8009c08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c10:	b94c      	cbnz	r4, 8009c26 <__pow5mult+0x66>
 8009c12:	f240 2171 	movw	r1, #625	; 0x271
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7ff ff12 	bl	8009a40 <__i2b>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c22:	4604      	mov	r4, r0
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	f04f 0900 	mov.w	r9, #0
 8009c2a:	07eb      	lsls	r3, r5, #31
 8009c2c:	d50a      	bpl.n	8009c44 <__pow5mult+0x84>
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4622      	mov	r2, r4
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ff1a 	bl	8009a6c <__multiply>
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff fe49 	bl	80098d4 <_Bfree>
 8009c42:	4647      	mov	r7, r8
 8009c44:	106d      	asrs	r5, r5, #1
 8009c46:	d00b      	beq.n	8009c60 <__pow5mult+0xa0>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	b938      	cbnz	r0, 8009c5c <__pow5mult+0x9c>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff ff0b 	bl	8009a6c <__multiply>
 8009c56:	6020      	str	r0, [r4, #0]
 8009c58:	f8c0 9000 	str.w	r9, [r0]
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	e7e4      	b.n	8009c2a <__pow5mult+0x6a>
 8009c60:	4638      	mov	r0, r7
 8009c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c66:	bf00      	nop
 8009c68:	0800ace8 	.word	0x0800ace8
 8009c6c:	0800ab19 	.word	0x0800ab19
 8009c70:	0800ab99 	.word	0x0800ab99

08009c74 <__lshift>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	6849      	ldr	r1, [r1, #4]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	4607      	mov	r7, r0
 8009c86:	4691      	mov	r9, r2
 8009c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c8c:	f108 0601 	add.w	r6, r8, #1
 8009c90:	42b3      	cmp	r3, r6
 8009c92:	db0b      	blt.n	8009cac <__lshift+0x38>
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff fddd 	bl	8009854 <_Balloc>
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	b948      	cbnz	r0, 8009cb2 <__lshift+0x3e>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <__lshift+0xd0>)
 8009ca2:	4829      	ldr	r0, [pc, #164]	; (8009d48 <__lshift+0xd4>)
 8009ca4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ca8:	f000 fb8e 	bl	800a3c8 <__assert_func>
 8009cac:	3101      	adds	r1, #1
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	e7ee      	b.n	8009c90 <__lshift+0x1c>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f100 0114 	add.w	r1, r0, #20
 8009cb8:	f100 0210 	add.w	r2, r0, #16
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	4553      	cmp	r3, sl
 8009cc0:	db33      	blt.n	8009d2a <__lshift+0xb6>
 8009cc2:	6920      	ldr	r0, [r4, #16]
 8009cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cc8:	f104 0314 	add.w	r3, r4, #20
 8009ccc:	f019 091f 	ands.w	r9, r9, #31
 8009cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cd8:	d02b      	beq.n	8009d32 <__lshift+0xbe>
 8009cda:	f1c9 0e20 	rsb	lr, r9, #32
 8009cde:	468a      	mov	sl, r1
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ce8:	4310      	orrs	r0, r2
 8009cea:	f84a 0b04 	str.w	r0, [sl], #4
 8009cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf2:	459c      	cmp	ip, r3
 8009cf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cf8:	d8f3      	bhi.n	8009ce2 <__lshift+0x6e>
 8009cfa:	ebac 0304 	sub.w	r3, ip, r4
 8009cfe:	3b15      	subs	r3, #21
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	3304      	adds	r3, #4
 8009d06:	f104 0015 	add.w	r0, r4, #21
 8009d0a:	4584      	cmp	ip, r0
 8009d0c:	bf38      	it	cc
 8009d0e:	2304      	movcc	r3, #4
 8009d10:	50ca      	str	r2, [r1, r3]
 8009d12:	b10a      	cbz	r2, 8009d18 <__lshift+0xa4>
 8009d14:	f108 0602 	add.w	r6, r8, #2
 8009d18:	3e01      	subs	r6, #1
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	612e      	str	r6, [r5, #16]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f7ff fdd8 	bl	80098d4 <_Bfree>
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d2e:	3301      	adds	r3, #1
 8009d30:	e7c5      	b.n	8009cbe <__lshift+0x4a>
 8009d32:	3904      	subs	r1, #4
 8009d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d3c:	459c      	cmp	ip, r3
 8009d3e:	d8f9      	bhi.n	8009d34 <__lshift+0xc0>
 8009d40:	e7ea      	b.n	8009d18 <__lshift+0xa4>
 8009d42:	bf00      	nop
 8009d44:	0800ab88 	.word	0x0800ab88
 8009d48:	0800ab99 	.word	0x0800ab99

08009d4c <__mcmp>:
 8009d4c:	b530      	push	{r4, r5, lr}
 8009d4e:	6902      	ldr	r2, [r0, #16]
 8009d50:	690c      	ldr	r4, [r1, #16]
 8009d52:	1b12      	subs	r2, r2, r4
 8009d54:	d10e      	bne.n	8009d74 <__mcmp+0x28>
 8009d56:	f100 0314 	add.w	r3, r0, #20
 8009d5a:	3114      	adds	r1, #20
 8009d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d6c:	42a5      	cmp	r5, r4
 8009d6e:	d003      	beq.n	8009d78 <__mcmp+0x2c>
 8009d70:	d305      	bcc.n	8009d7e <__mcmp+0x32>
 8009d72:	2201      	movs	r2, #1
 8009d74:	4610      	mov	r0, r2
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d3f3      	bcc.n	8009d64 <__mcmp+0x18>
 8009d7c:	e7fa      	b.n	8009d74 <__mcmp+0x28>
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	e7f7      	b.n	8009d74 <__mcmp+0x28>

08009d84 <__mdiff>:
 8009d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460c      	mov	r4, r1
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4690      	mov	r8, r2
 8009d92:	f7ff ffdb 	bl	8009d4c <__mcmp>
 8009d96:	1e05      	subs	r5, r0, #0
 8009d98:	d110      	bne.n	8009dbc <__mdiff+0x38>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff fd59 	bl	8009854 <_Balloc>
 8009da2:	b930      	cbnz	r0, 8009db2 <__mdiff+0x2e>
 8009da4:	4b3a      	ldr	r3, [pc, #232]	; (8009e90 <__mdiff+0x10c>)
 8009da6:	4602      	mov	r2, r0
 8009da8:	f240 2137 	movw	r1, #567	; 0x237
 8009dac:	4839      	ldr	r0, [pc, #228]	; (8009e94 <__mdiff+0x110>)
 8009dae:	f000 fb0b 	bl	800a3c8 <__assert_func>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	bfa4      	itt	ge
 8009dbe:	4643      	movge	r3, r8
 8009dc0:	46a0      	movge	r8, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dc8:	bfa6      	itte	ge
 8009dca:	461c      	movge	r4, r3
 8009dcc:	2500      	movge	r5, #0
 8009dce:	2501      	movlt	r5, #1
 8009dd0:	f7ff fd40 	bl	8009854 <_Balloc>
 8009dd4:	b920      	cbnz	r0, 8009de0 <__mdiff+0x5c>
 8009dd6:	4b2e      	ldr	r3, [pc, #184]	; (8009e90 <__mdiff+0x10c>)
 8009dd8:	4602      	mov	r2, r0
 8009dda:	f240 2145 	movw	r1, #581	; 0x245
 8009dde:	e7e5      	b.n	8009dac <__mdiff+0x28>
 8009de0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009de4:	6926      	ldr	r6, [r4, #16]
 8009de6:	60c5      	str	r5, [r0, #12]
 8009de8:	f104 0914 	add.w	r9, r4, #20
 8009dec:	f108 0514 	add.w	r5, r8, #20
 8009df0:	f100 0e14 	add.w	lr, r0, #20
 8009df4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009df8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dfc:	f108 0210 	add.w	r2, r8, #16
 8009e00:	46f2      	mov	sl, lr
 8009e02:	2100      	movs	r1, #0
 8009e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e0c:	fa11 f88b 	uxtah	r8, r1, fp
 8009e10:	b299      	uxth	r1, r3
 8009e12:	0c1b      	lsrs	r3, r3, #16
 8009e14:	eba8 0801 	sub.w	r8, r8, r1
 8009e18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e20:	fa1f f888 	uxth.w	r8, r8
 8009e24:	1419      	asrs	r1, r3, #16
 8009e26:	454e      	cmp	r6, r9
 8009e28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e2c:	f84a 3b04 	str.w	r3, [sl], #4
 8009e30:	d8e8      	bhi.n	8009e04 <__mdiff+0x80>
 8009e32:	1b33      	subs	r3, r6, r4
 8009e34:	3b15      	subs	r3, #21
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	3415      	adds	r4, #21
 8009e3e:	42a6      	cmp	r6, r4
 8009e40:	bf38      	it	cc
 8009e42:	2304      	movcc	r3, #4
 8009e44:	441d      	add	r5, r3
 8009e46:	4473      	add	r3, lr
 8009e48:	469e      	mov	lr, r3
 8009e4a:	462e      	mov	r6, r5
 8009e4c:	4566      	cmp	r6, ip
 8009e4e:	d30e      	bcc.n	8009e6e <__mdiff+0xea>
 8009e50:	f10c 0203 	add.w	r2, ip, #3
 8009e54:	1b52      	subs	r2, r2, r5
 8009e56:	f022 0203 	bic.w	r2, r2, #3
 8009e5a:	3d03      	subs	r5, #3
 8009e5c:	45ac      	cmp	ip, r5
 8009e5e:	bf38      	it	cc
 8009e60:	2200      	movcc	r2, #0
 8009e62:	4413      	add	r3, r2
 8009e64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e68:	b17a      	cbz	r2, 8009e8a <__mdiff+0x106>
 8009e6a:	6107      	str	r7, [r0, #16]
 8009e6c:	e7a4      	b.n	8009db8 <__mdiff+0x34>
 8009e6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e72:	fa11 f288 	uxtah	r2, r1, r8
 8009e76:	1414      	asrs	r4, r2, #16
 8009e78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e7c:	b292      	uxth	r2, r2
 8009e7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e82:	f84e 2b04 	str.w	r2, [lr], #4
 8009e86:	1421      	asrs	r1, r4, #16
 8009e88:	e7e0      	b.n	8009e4c <__mdiff+0xc8>
 8009e8a:	3f01      	subs	r7, #1
 8009e8c:	e7ea      	b.n	8009e64 <__mdiff+0xe0>
 8009e8e:	bf00      	nop
 8009e90:	0800ab88 	.word	0x0800ab88
 8009e94:	0800ab99 	.word	0x0800ab99

08009e98 <__d2b>:
 8009e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	ec59 8b10 	vmov	r8, r9, d0
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	f7ff fcd5 	bl	8009854 <_Balloc>
 8009eaa:	4604      	mov	r4, r0
 8009eac:	b930      	cbnz	r0, 8009ebc <__d2b+0x24>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <__d2b+0xac>)
 8009eb2:	4825      	ldr	r0, [pc, #148]	; (8009f48 <__d2b+0xb0>)
 8009eb4:	f240 310f 	movw	r1, #783	; 0x30f
 8009eb8:	f000 fa86 	bl	800a3c8 <__assert_func>
 8009ebc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ec4:	bb2d      	cbnz	r5, 8009f12 <__d2b+0x7a>
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8009ecc:	d026      	beq.n	8009f1c <__d2b+0x84>
 8009ece:	4668      	mov	r0, sp
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	f7ff fd87 	bl	80099e4 <__lo0bits>
 8009ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009eda:	b1e8      	cbz	r0, 8009f18 <__d2b+0x80>
 8009edc:	f1c0 0320 	rsb	r3, r0, #32
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	40c2      	lsrs	r2, r0
 8009ee8:	6163      	str	r3, [r4, #20]
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	61a3      	str	r3, [r4, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bf14      	ite	ne
 8009ef4:	2202      	movne	r2, #2
 8009ef6:	2201      	moveq	r2, #1
 8009ef8:	6122      	str	r2, [r4, #16]
 8009efa:	b1bd      	cbz	r5, 8009f2c <__d2b+0x94>
 8009efc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f00:	4405      	add	r5, r0
 8009f02:	603d      	str	r5, [r7, #0]
 8009f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f08:	6030      	str	r0, [r6, #0]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f16:	e7d6      	b.n	8009ec6 <__d2b+0x2e>
 8009f18:	6161      	str	r1, [r4, #20]
 8009f1a:	e7e7      	b.n	8009eec <__d2b+0x54>
 8009f1c:	a801      	add	r0, sp, #4
 8009f1e:	f7ff fd61 	bl	80099e4 <__lo0bits>
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	6163      	str	r3, [r4, #20]
 8009f26:	3020      	adds	r0, #32
 8009f28:	2201      	movs	r2, #1
 8009f2a:	e7e5      	b.n	8009ef8 <__d2b+0x60>
 8009f2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f34:	6038      	str	r0, [r7, #0]
 8009f36:	6918      	ldr	r0, [r3, #16]
 8009f38:	f7ff fd34 	bl	80099a4 <__hi0bits>
 8009f3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f40:	e7e2      	b.n	8009f08 <__d2b+0x70>
 8009f42:	bf00      	nop
 8009f44:	0800ab88 	.word	0x0800ab88
 8009f48:	0800ab99 	.word	0x0800ab99

08009f4c <__ssputs_r>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	688e      	ldr	r6, [r1, #8]
 8009f52:	461f      	mov	r7, r3
 8009f54:	42be      	cmp	r6, r7
 8009f56:	680b      	ldr	r3, [r1, #0]
 8009f58:	4682      	mov	sl, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	4690      	mov	r8, r2
 8009f5e:	d82c      	bhi.n	8009fba <__ssputs_r+0x6e>
 8009f60:	898a      	ldrh	r2, [r1, #12]
 8009f62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f66:	d026      	beq.n	8009fb6 <__ssputs_r+0x6a>
 8009f68:	6965      	ldr	r5, [r4, #20]
 8009f6a:	6909      	ldr	r1, [r1, #16]
 8009f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f70:	eba3 0901 	sub.w	r9, r3, r1
 8009f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f78:	1c7b      	adds	r3, r7, #1
 8009f7a:	444b      	add	r3, r9
 8009f7c:	106d      	asrs	r5, r5, #1
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	bf38      	it	cc
 8009f82:	461d      	movcc	r5, r3
 8009f84:	0553      	lsls	r3, r2, #21
 8009f86:	d527      	bpl.n	8009fd8 <__ssputs_r+0x8c>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7ff fbd7 	bl	800973c <_malloc_r>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	b360      	cbz	r0, 8009fec <__ssputs_r+0xa0>
 8009f92:	6921      	ldr	r1, [r4, #16]
 8009f94:	464a      	mov	r2, r9
 8009f96:	f000 fa09 	bl	800a3ac <memcpy>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	6126      	str	r6, [r4, #16]
 8009fa8:	6165      	str	r5, [r4, #20]
 8009faa:	444e      	add	r6, r9
 8009fac:	eba5 0509 	sub.w	r5, r5, r9
 8009fb0:	6026      	str	r6, [r4, #0]
 8009fb2:	60a5      	str	r5, [r4, #8]
 8009fb4:	463e      	mov	r6, r7
 8009fb6:	42be      	cmp	r6, r7
 8009fb8:	d900      	bls.n	8009fbc <__ssputs_r+0x70>
 8009fba:	463e      	mov	r6, r7
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	f000 f9c9 	bl	800a358 <memmove>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	1b9b      	subs	r3, r3, r6
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	4433      	add	r3, r6
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	462a      	mov	r2, r5
 8009fda:	f000 fa3b 	bl	800a454 <_realloc_r>
 8009fde:	4606      	mov	r6, r0
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1e0      	bne.n	8009fa6 <__ssputs_r+0x5a>
 8009fe4:	6921      	ldr	r1, [r4, #16]
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	f7ff fb34 	bl	8009654 <_free_r>
 8009fec:	230c      	movs	r3, #12
 8009fee:	f8ca 3000 	str.w	r3, [sl]
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff8:	81a3      	strh	r3, [r4, #12]
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffe:	e7e9      	b.n	8009fd4 <__ssputs_r+0x88>

0800a000 <_svfiprintf_r>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	4698      	mov	r8, r3
 800a006:	898b      	ldrh	r3, [r1, #12]
 800a008:	061b      	lsls	r3, r3, #24
 800a00a:	b09d      	sub	sp, #116	; 0x74
 800a00c:	4607      	mov	r7, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	4614      	mov	r4, r2
 800a012:	d50e      	bpl.n	800a032 <_svfiprintf_r+0x32>
 800a014:	690b      	ldr	r3, [r1, #16]
 800a016:	b963      	cbnz	r3, 800a032 <_svfiprintf_r+0x32>
 800a018:	2140      	movs	r1, #64	; 0x40
 800a01a:	f7ff fb8f 	bl	800973c <_malloc_r>
 800a01e:	6028      	str	r0, [r5, #0]
 800a020:	6128      	str	r0, [r5, #16]
 800a022:	b920      	cbnz	r0, 800a02e <_svfiprintf_r+0x2e>
 800a024:	230c      	movs	r3, #12
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	e0d0      	b.n	800a1d0 <_svfiprintf_r+0x1d0>
 800a02e:	2340      	movs	r3, #64	; 0x40
 800a030:	616b      	str	r3, [r5, #20]
 800a032:	2300      	movs	r3, #0
 800a034:	9309      	str	r3, [sp, #36]	; 0x24
 800a036:	2320      	movs	r3, #32
 800a038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a040:	2330      	movs	r3, #48	; 0x30
 800a042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1e8 <_svfiprintf_r+0x1e8>
 800a046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a04a:	f04f 0901 	mov.w	r9, #1
 800a04e:	4623      	mov	r3, r4
 800a050:	469a      	mov	sl, r3
 800a052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a056:	b10a      	cbz	r2, 800a05c <_svfiprintf_r+0x5c>
 800a058:	2a25      	cmp	r2, #37	; 0x25
 800a05a:	d1f9      	bne.n	800a050 <_svfiprintf_r+0x50>
 800a05c:	ebba 0b04 	subs.w	fp, sl, r4
 800a060:	d00b      	beq.n	800a07a <_svfiprintf_r+0x7a>
 800a062:	465b      	mov	r3, fp
 800a064:	4622      	mov	r2, r4
 800a066:	4629      	mov	r1, r5
 800a068:	4638      	mov	r0, r7
 800a06a:	f7ff ff6f 	bl	8009f4c <__ssputs_r>
 800a06e:	3001      	adds	r0, #1
 800a070:	f000 80a9 	beq.w	800a1c6 <_svfiprintf_r+0x1c6>
 800a074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a076:	445a      	add	r2, fp
 800a078:	9209      	str	r2, [sp, #36]	; 0x24
 800a07a:	f89a 3000 	ldrb.w	r3, [sl]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 80a1 	beq.w	800a1c6 <_svfiprintf_r+0x1c6>
 800a084:	2300      	movs	r3, #0
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a08e:	f10a 0a01 	add.w	sl, sl, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	9307      	str	r3, [sp, #28]
 800a096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a09a:	931a      	str	r3, [sp, #104]	; 0x68
 800a09c:	4654      	mov	r4, sl
 800a09e:	2205      	movs	r2, #5
 800a0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a4:	4850      	ldr	r0, [pc, #320]	; (800a1e8 <_svfiprintf_r+0x1e8>)
 800a0a6:	f7f6 f893 	bl	80001d0 <memchr>
 800a0aa:	9a04      	ldr	r2, [sp, #16]
 800a0ac:	b9d8      	cbnz	r0, 800a0e6 <_svfiprintf_r+0xe6>
 800a0ae:	06d0      	lsls	r0, r2, #27
 800a0b0:	bf44      	itt	mi
 800a0b2:	2320      	movmi	r3, #32
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b8:	0711      	lsls	r1, r2, #28
 800a0ba:	bf44      	itt	mi
 800a0bc:	232b      	movmi	r3, #43	; 0x2b
 800a0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c8:	d015      	beq.n	800a0f6 <_svfiprintf_r+0xf6>
 800a0ca:	9a07      	ldr	r2, [sp, #28]
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f04f 0c0a 	mov.w	ip, #10
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0da:	3b30      	subs	r3, #48	; 0x30
 800a0dc:	2b09      	cmp	r3, #9
 800a0de:	d94d      	bls.n	800a17c <_svfiprintf_r+0x17c>
 800a0e0:	b1b0      	cbz	r0, 800a110 <_svfiprintf_r+0x110>
 800a0e2:	9207      	str	r2, [sp, #28]
 800a0e4:	e014      	b.n	800a110 <_svfiprintf_r+0x110>
 800a0e6:	eba0 0308 	sub.w	r3, r0, r8
 800a0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	46a2      	mov	sl, r4
 800a0f4:	e7d2      	b.n	800a09c <_svfiprintf_r+0x9c>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	1d19      	adds	r1, r3, #4
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	9103      	str	r1, [sp, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfbb      	ittet	lt
 800a102:	425b      	neglt	r3, r3
 800a104:	f042 0202 	orrlt.w	r2, r2, #2
 800a108:	9307      	strge	r3, [sp, #28]
 800a10a:	9307      	strlt	r3, [sp, #28]
 800a10c:	bfb8      	it	lt
 800a10e:	9204      	strlt	r2, [sp, #16]
 800a110:	7823      	ldrb	r3, [r4, #0]
 800a112:	2b2e      	cmp	r3, #46	; 0x2e
 800a114:	d10c      	bne.n	800a130 <_svfiprintf_r+0x130>
 800a116:	7863      	ldrb	r3, [r4, #1]
 800a118:	2b2a      	cmp	r3, #42	; 0x2a
 800a11a:	d134      	bne.n	800a186 <_svfiprintf_r+0x186>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	1d1a      	adds	r2, r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	9203      	str	r2, [sp, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	bfb8      	it	lt
 800a128:	f04f 33ff 	movlt.w	r3, #4294967295
 800a12c:	3402      	adds	r4, #2
 800a12e:	9305      	str	r3, [sp, #20]
 800a130:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1f8 <_svfiprintf_r+0x1f8>
 800a134:	7821      	ldrb	r1, [r4, #0]
 800a136:	2203      	movs	r2, #3
 800a138:	4650      	mov	r0, sl
 800a13a:	f7f6 f849 	bl	80001d0 <memchr>
 800a13e:	b138      	cbz	r0, 800a150 <_svfiprintf_r+0x150>
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	eba0 000a 	sub.w	r0, r0, sl
 800a146:	2240      	movs	r2, #64	; 0x40
 800a148:	4082      	lsls	r2, r0
 800a14a:	4313      	orrs	r3, r2
 800a14c:	3401      	adds	r4, #1
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a154:	4825      	ldr	r0, [pc, #148]	; (800a1ec <_svfiprintf_r+0x1ec>)
 800a156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a15a:	2206      	movs	r2, #6
 800a15c:	f7f6 f838 	bl	80001d0 <memchr>
 800a160:	2800      	cmp	r0, #0
 800a162:	d038      	beq.n	800a1d6 <_svfiprintf_r+0x1d6>
 800a164:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <_svfiprintf_r+0x1f0>)
 800a166:	bb1b      	cbnz	r3, 800a1b0 <_svfiprintf_r+0x1b0>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	3307      	adds	r3, #7
 800a16c:	f023 0307 	bic.w	r3, r3, #7
 800a170:	3308      	adds	r3, #8
 800a172:	9303      	str	r3, [sp, #12]
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	4433      	add	r3, r6
 800a178:	9309      	str	r3, [sp, #36]	; 0x24
 800a17a:	e768      	b.n	800a04e <_svfiprintf_r+0x4e>
 800a17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a180:	460c      	mov	r4, r1
 800a182:	2001      	movs	r0, #1
 800a184:	e7a6      	b.n	800a0d4 <_svfiprintf_r+0xd4>
 800a186:	2300      	movs	r3, #0
 800a188:	3401      	adds	r4, #1
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	4619      	mov	r1, r3
 800a18e:	f04f 0c0a 	mov.w	ip, #10
 800a192:	4620      	mov	r0, r4
 800a194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a198:	3a30      	subs	r2, #48	; 0x30
 800a19a:	2a09      	cmp	r2, #9
 800a19c:	d903      	bls.n	800a1a6 <_svfiprintf_r+0x1a6>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0c6      	beq.n	800a130 <_svfiprintf_r+0x130>
 800a1a2:	9105      	str	r1, [sp, #20]
 800a1a4:	e7c4      	b.n	800a130 <_svfiprintf_r+0x130>
 800a1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e7f0      	b.n	800a192 <_svfiprintf_r+0x192>
 800a1b0:	ab03      	add	r3, sp, #12
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	462a      	mov	r2, r5
 800a1b6:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <_svfiprintf_r+0x1f4>)
 800a1b8:	a904      	add	r1, sp, #16
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	f7fd fe78 	bl	8007eb0 <_printf_float>
 800a1c0:	1c42      	adds	r2, r0, #1
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	d1d6      	bne.n	800a174 <_svfiprintf_r+0x174>
 800a1c6:	89ab      	ldrh	r3, [r5, #12]
 800a1c8:	065b      	lsls	r3, r3, #25
 800a1ca:	f53f af2d 	bmi.w	800a028 <_svfiprintf_r+0x28>
 800a1ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d0:	b01d      	add	sp, #116	; 0x74
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	ab03      	add	r3, sp, #12
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <_svfiprintf_r+0x1f4>)
 800a1de:	a904      	add	r1, sp, #16
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7fe f909 	bl	80083f8 <_printf_i>
 800a1e6:	e7eb      	b.n	800a1c0 <_svfiprintf_r+0x1c0>
 800a1e8:	0800acf4 	.word	0x0800acf4
 800a1ec:	0800acfe 	.word	0x0800acfe
 800a1f0:	08007eb1 	.word	0x08007eb1
 800a1f4:	08009f4d 	.word	0x08009f4d
 800a1f8:	0800acfa 	.word	0x0800acfa

0800a1fc <__sflush_r>:
 800a1fc:	898a      	ldrh	r2, [r1, #12]
 800a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	4605      	mov	r5, r0
 800a204:	0710      	lsls	r0, r2, #28
 800a206:	460c      	mov	r4, r1
 800a208:	d458      	bmi.n	800a2bc <__sflush_r+0xc0>
 800a20a:	684b      	ldr	r3, [r1, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dc05      	bgt.n	800a21c <__sflush_r+0x20>
 800a210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	dc02      	bgt.n	800a21c <__sflush_r+0x20>
 800a216:	2000      	movs	r0, #0
 800a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a21e:	2e00      	cmp	r6, #0
 800a220:	d0f9      	beq.n	800a216 <__sflush_r+0x1a>
 800a222:	2300      	movs	r3, #0
 800a224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a228:	682f      	ldr	r7, [r5, #0]
 800a22a:	6a21      	ldr	r1, [r4, #32]
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	d032      	beq.n	800a296 <__sflush_r+0x9a>
 800a230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	075a      	lsls	r2, r3, #29
 800a236:	d505      	bpl.n	800a244 <__sflush_r+0x48>
 800a238:	6863      	ldr	r3, [r4, #4]
 800a23a:	1ac0      	subs	r0, r0, r3
 800a23c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a23e:	b10b      	cbz	r3, 800a244 <__sflush_r+0x48>
 800a240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a242:	1ac0      	subs	r0, r0, r3
 800a244:	2300      	movs	r3, #0
 800a246:	4602      	mov	r2, r0
 800a248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a24a:	6a21      	ldr	r1, [r4, #32]
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b0      	blx	r6
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	d106      	bne.n	800a264 <__sflush_r+0x68>
 800a256:	6829      	ldr	r1, [r5, #0]
 800a258:	291d      	cmp	r1, #29
 800a25a:	d82b      	bhi.n	800a2b4 <__sflush_r+0xb8>
 800a25c:	4a29      	ldr	r2, [pc, #164]	; (800a304 <__sflush_r+0x108>)
 800a25e:	410a      	asrs	r2, r1
 800a260:	07d6      	lsls	r6, r2, #31
 800a262:	d427      	bmi.n	800a2b4 <__sflush_r+0xb8>
 800a264:	2200      	movs	r2, #0
 800a266:	6062      	str	r2, [r4, #4]
 800a268:	04d9      	lsls	r1, r3, #19
 800a26a:	6922      	ldr	r2, [r4, #16]
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	d504      	bpl.n	800a27a <__sflush_r+0x7e>
 800a270:	1c42      	adds	r2, r0, #1
 800a272:	d101      	bne.n	800a278 <__sflush_r+0x7c>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b903      	cbnz	r3, 800a27a <__sflush_r+0x7e>
 800a278:	6560      	str	r0, [r4, #84]	; 0x54
 800a27a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a27c:	602f      	str	r7, [r5, #0]
 800a27e:	2900      	cmp	r1, #0
 800a280:	d0c9      	beq.n	800a216 <__sflush_r+0x1a>
 800a282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a286:	4299      	cmp	r1, r3
 800a288:	d002      	beq.n	800a290 <__sflush_r+0x94>
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7ff f9e2 	bl	8009654 <_free_r>
 800a290:	2000      	movs	r0, #0
 800a292:	6360      	str	r0, [r4, #52]	; 0x34
 800a294:	e7c0      	b.n	800a218 <__sflush_r+0x1c>
 800a296:	2301      	movs	r3, #1
 800a298:	4628      	mov	r0, r5
 800a29a:	47b0      	blx	r6
 800a29c:	1c41      	adds	r1, r0, #1
 800a29e:	d1c8      	bne.n	800a232 <__sflush_r+0x36>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c5      	beq.n	800a232 <__sflush_r+0x36>
 800a2a6:	2b1d      	cmp	r3, #29
 800a2a8:	d001      	beq.n	800a2ae <__sflush_r+0xb2>
 800a2aa:	2b16      	cmp	r3, #22
 800a2ac:	d101      	bne.n	800a2b2 <__sflush_r+0xb6>
 800a2ae:	602f      	str	r7, [r5, #0]
 800a2b0:	e7b1      	b.n	800a216 <__sflush_r+0x1a>
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	e7ad      	b.n	800a218 <__sflush_r+0x1c>
 800a2bc:	690f      	ldr	r7, [r1, #16]
 800a2be:	2f00      	cmp	r7, #0
 800a2c0:	d0a9      	beq.n	800a216 <__sflush_r+0x1a>
 800a2c2:	0793      	lsls	r3, r2, #30
 800a2c4:	680e      	ldr	r6, [r1, #0]
 800a2c6:	bf08      	it	eq
 800a2c8:	694b      	ldreq	r3, [r1, #20]
 800a2ca:	600f      	str	r7, [r1, #0]
 800a2cc:	bf18      	it	ne
 800a2ce:	2300      	movne	r3, #0
 800a2d0:	eba6 0807 	sub.w	r8, r6, r7
 800a2d4:	608b      	str	r3, [r1, #8]
 800a2d6:	f1b8 0f00 	cmp.w	r8, #0
 800a2da:	dd9c      	ble.n	800a216 <__sflush_r+0x1a>
 800a2dc:	6a21      	ldr	r1, [r4, #32]
 800a2de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2e0:	4643      	mov	r3, r8
 800a2e2:	463a      	mov	r2, r7
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b0      	blx	r6
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	dc06      	bgt.n	800a2fa <__sflush_r+0xfe>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	e78e      	b.n	800a218 <__sflush_r+0x1c>
 800a2fa:	4407      	add	r7, r0
 800a2fc:	eba8 0800 	sub.w	r8, r8, r0
 800a300:	e7e9      	b.n	800a2d6 <__sflush_r+0xda>
 800a302:	bf00      	nop
 800a304:	dfbffffe 	.word	0xdfbffffe

0800a308 <_fflush_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	690b      	ldr	r3, [r1, #16]
 800a30c:	4605      	mov	r5, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	b913      	cbnz	r3, 800a318 <_fflush_r+0x10>
 800a312:	2500      	movs	r5, #0
 800a314:	4628      	mov	r0, r5
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	b118      	cbz	r0, 800a322 <_fflush_r+0x1a>
 800a31a:	6a03      	ldr	r3, [r0, #32]
 800a31c:	b90b      	cbnz	r3, 800a322 <_fflush_r+0x1a>
 800a31e:	f7fe fa07 	bl	8008730 <__sinit>
 800a322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0f3      	beq.n	800a312 <_fflush_r+0xa>
 800a32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a32c:	07d0      	lsls	r0, r2, #31
 800a32e:	d404      	bmi.n	800a33a <_fflush_r+0x32>
 800a330:	0599      	lsls	r1, r3, #22
 800a332:	d402      	bmi.n	800a33a <_fflush_r+0x32>
 800a334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a336:	f7fe fb11 	bl	800895c <__retarget_lock_acquire_recursive>
 800a33a:	4628      	mov	r0, r5
 800a33c:	4621      	mov	r1, r4
 800a33e:	f7ff ff5d 	bl	800a1fc <__sflush_r>
 800a342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a344:	07da      	lsls	r2, r3, #31
 800a346:	4605      	mov	r5, r0
 800a348:	d4e4      	bmi.n	800a314 <_fflush_r+0xc>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	059b      	lsls	r3, r3, #22
 800a34e:	d4e1      	bmi.n	800a314 <_fflush_r+0xc>
 800a350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a352:	f7fe fb04 	bl	800895e <__retarget_lock_release_recursive>
 800a356:	e7dd      	b.n	800a314 <_fflush_r+0xc>

0800a358 <memmove>:
 800a358:	4288      	cmp	r0, r1
 800a35a:	b510      	push	{r4, lr}
 800a35c:	eb01 0402 	add.w	r4, r1, r2
 800a360:	d902      	bls.n	800a368 <memmove+0x10>
 800a362:	4284      	cmp	r4, r0
 800a364:	4623      	mov	r3, r4
 800a366:	d807      	bhi.n	800a378 <memmove+0x20>
 800a368:	1e43      	subs	r3, r0, #1
 800a36a:	42a1      	cmp	r1, r4
 800a36c:	d008      	beq.n	800a380 <memmove+0x28>
 800a36e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a372:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a376:	e7f8      	b.n	800a36a <memmove+0x12>
 800a378:	4402      	add	r2, r0
 800a37a:	4601      	mov	r1, r0
 800a37c:	428a      	cmp	r2, r1
 800a37e:	d100      	bne.n	800a382 <memmove+0x2a>
 800a380:	bd10      	pop	{r4, pc}
 800a382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a38a:	e7f7      	b.n	800a37c <memmove+0x24>

0800a38c <_sbrk_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d06      	ldr	r5, [pc, #24]	; (800a3a8 <_sbrk_r+0x1c>)
 800a390:	2300      	movs	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	4608      	mov	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7f8 f95a 	bl	8002650 <_sbrk>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_sbrk_r+0x1a>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_sbrk_r+0x1a>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20000b3c 	.word	0x20000b3c

0800a3ac <memcpy>:
 800a3ac:	440a      	add	r2, r1
 800a3ae:	4291      	cmp	r1, r2
 800a3b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3b4:	d100      	bne.n	800a3b8 <memcpy+0xc>
 800a3b6:	4770      	bx	lr
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	d1f9      	bne.n	800a3ba <memcpy+0xe>
 800a3c6:	bd10      	pop	{r4, pc}

0800a3c8 <__assert_func>:
 800a3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ca:	4614      	mov	r4, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <__assert_func+0x2c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	68d8      	ldr	r0, [r3, #12]
 800a3d6:	b14c      	cbz	r4, 800a3ec <__assert_func+0x24>
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <__assert_func+0x30>)
 800a3da:	9100      	str	r1, [sp, #0]
 800a3dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e0:	4906      	ldr	r1, [pc, #24]	; (800a3fc <__assert_func+0x34>)
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	f000 f872 	bl	800a4cc <fiprintf>
 800a3e8:	f000 f882 	bl	800a4f0 <abort>
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <__assert_func+0x38>)
 800a3ee:	461c      	mov	r4, r3
 800a3f0:	e7f3      	b.n	800a3da <__assert_func+0x12>
 800a3f2:	bf00      	nop
 800a3f4:	20000064 	.word	0x20000064
 800a3f8:	0800ad0f 	.word	0x0800ad0f
 800a3fc:	0800ad1c 	.word	0x0800ad1c
 800a400:	0800ad4a 	.word	0x0800ad4a

0800a404 <_calloc_r>:
 800a404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a406:	fba1 2402 	umull	r2, r4, r1, r2
 800a40a:	b94c      	cbnz	r4, 800a420 <_calloc_r+0x1c>
 800a40c:	4611      	mov	r1, r2
 800a40e:	9201      	str	r2, [sp, #4]
 800a410:	f7ff f994 	bl	800973c <_malloc_r>
 800a414:	9a01      	ldr	r2, [sp, #4]
 800a416:	4605      	mov	r5, r0
 800a418:	b930      	cbnz	r0, 800a428 <_calloc_r+0x24>
 800a41a:	4628      	mov	r0, r5
 800a41c:	b003      	add	sp, #12
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	220c      	movs	r2, #12
 800a422:	6002      	str	r2, [r0, #0]
 800a424:	2500      	movs	r5, #0
 800a426:	e7f8      	b.n	800a41a <_calloc_r+0x16>
 800a428:	4621      	mov	r1, r4
 800a42a:	f7fe fa1a 	bl	8008862 <memset>
 800a42e:	e7f4      	b.n	800a41a <_calloc_r+0x16>

0800a430 <__ascii_mbtowc>:
 800a430:	b082      	sub	sp, #8
 800a432:	b901      	cbnz	r1, 800a436 <__ascii_mbtowc+0x6>
 800a434:	a901      	add	r1, sp, #4
 800a436:	b142      	cbz	r2, 800a44a <__ascii_mbtowc+0x1a>
 800a438:	b14b      	cbz	r3, 800a44e <__ascii_mbtowc+0x1e>
 800a43a:	7813      	ldrb	r3, [r2, #0]
 800a43c:	600b      	str	r3, [r1, #0]
 800a43e:	7812      	ldrb	r2, [r2, #0]
 800a440:	1e10      	subs	r0, r2, #0
 800a442:	bf18      	it	ne
 800a444:	2001      	movne	r0, #1
 800a446:	b002      	add	sp, #8
 800a448:	4770      	bx	lr
 800a44a:	4610      	mov	r0, r2
 800a44c:	e7fb      	b.n	800a446 <__ascii_mbtowc+0x16>
 800a44e:	f06f 0001 	mvn.w	r0, #1
 800a452:	e7f8      	b.n	800a446 <__ascii_mbtowc+0x16>

0800a454 <_realloc_r>:
 800a454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a458:	4680      	mov	r8, r0
 800a45a:	4614      	mov	r4, r2
 800a45c:	460e      	mov	r6, r1
 800a45e:	b921      	cbnz	r1, 800a46a <_realloc_r+0x16>
 800a460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a464:	4611      	mov	r1, r2
 800a466:	f7ff b969 	b.w	800973c <_malloc_r>
 800a46a:	b92a      	cbnz	r2, 800a478 <_realloc_r+0x24>
 800a46c:	f7ff f8f2 	bl	8009654 <_free_r>
 800a470:	4625      	mov	r5, r4
 800a472:	4628      	mov	r0, r5
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	f000 f841 	bl	800a4fe <_malloc_usable_size_r>
 800a47c:	4284      	cmp	r4, r0
 800a47e:	4607      	mov	r7, r0
 800a480:	d802      	bhi.n	800a488 <_realloc_r+0x34>
 800a482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a486:	d812      	bhi.n	800a4ae <_realloc_r+0x5a>
 800a488:	4621      	mov	r1, r4
 800a48a:	4640      	mov	r0, r8
 800a48c:	f7ff f956 	bl	800973c <_malloc_r>
 800a490:	4605      	mov	r5, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	d0ed      	beq.n	800a472 <_realloc_r+0x1e>
 800a496:	42bc      	cmp	r4, r7
 800a498:	4622      	mov	r2, r4
 800a49a:	4631      	mov	r1, r6
 800a49c:	bf28      	it	cs
 800a49e:	463a      	movcs	r2, r7
 800a4a0:	f7ff ff84 	bl	800a3ac <memcpy>
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	f7ff f8d4 	bl	8009654 <_free_r>
 800a4ac:	e7e1      	b.n	800a472 <_realloc_r+0x1e>
 800a4ae:	4635      	mov	r5, r6
 800a4b0:	e7df      	b.n	800a472 <_realloc_r+0x1e>

0800a4b2 <__ascii_wctomb>:
 800a4b2:	b149      	cbz	r1, 800a4c8 <__ascii_wctomb+0x16>
 800a4b4:	2aff      	cmp	r2, #255	; 0xff
 800a4b6:	bf85      	ittet	hi
 800a4b8:	238a      	movhi	r3, #138	; 0x8a
 800a4ba:	6003      	strhi	r3, [r0, #0]
 800a4bc:	700a      	strbls	r2, [r1, #0]
 800a4be:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4c2:	bf98      	it	ls
 800a4c4:	2001      	movls	r0, #1
 800a4c6:	4770      	bx	lr
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	4770      	bx	lr

0800a4cc <fiprintf>:
 800a4cc:	b40e      	push	{r1, r2, r3}
 800a4ce:	b503      	push	{r0, r1, lr}
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	4805      	ldr	r0, [pc, #20]	; (800a4ec <fiprintf+0x20>)
 800a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	f000 f83f 	bl	800a560 <_vfiprintf_r>
 800a4e2:	b002      	add	sp, #8
 800a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e8:	b003      	add	sp, #12
 800a4ea:	4770      	bx	lr
 800a4ec:	20000064 	.word	0x20000064

0800a4f0 <abort>:
 800a4f0:	b508      	push	{r3, lr}
 800a4f2:	2006      	movs	r0, #6
 800a4f4:	f000 fa0c 	bl	800a910 <raise>
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	f7f8 f832 	bl	8002562 <_exit>

0800a4fe <_malloc_usable_size_r>:
 800a4fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a502:	1f18      	subs	r0, r3, #4
 800a504:	2b00      	cmp	r3, #0
 800a506:	bfbc      	itt	lt
 800a508:	580b      	ldrlt	r3, [r1, r0]
 800a50a:	18c0      	addlt	r0, r0, r3
 800a50c:	4770      	bx	lr

0800a50e <__sfputc_r>:
 800a50e:	6893      	ldr	r3, [r2, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	b410      	push	{r4}
 800a516:	6093      	str	r3, [r2, #8]
 800a518:	da08      	bge.n	800a52c <__sfputc_r+0x1e>
 800a51a:	6994      	ldr	r4, [r2, #24]
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	db01      	blt.n	800a524 <__sfputc_r+0x16>
 800a520:	290a      	cmp	r1, #10
 800a522:	d103      	bne.n	800a52c <__sfputc_r+0x1e>
 800a524:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a528:	f000 b934 	b.w	800a794 <__swbuf_r>
 800a52c:	6813      	ldr	r3, [r2, #0]
 800a52e:	1c58      	adds	r0, r3, #1
 800a530:	6010      	str	r0, [r2, #0]
 800a532:	7019      	strb	r1, [r3, #0]
 800a534:	4608      	mov	r0, r1
 800a536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <__sfputs_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	4614      	mov	r4, r2
 800a544:	18d5      	adds	r5, r2, r3
 800a546:	42ac      	cmp	r4, r5
 800a548:	d101      	bne.n	800a54e <__sfputs_r+0x12>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e007      	b.n	800a55e <__sfputs_r+0x22>
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	463a      	mov	r2, r7
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff ffda 	bl	800a50e <__sfputc_r>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d1f3      	bne.n	800a546 <__sfputs_r+0xa>
 800a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a560 <_vfiprintf_r>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	460d      	mov	r5, r1
 800a566:	b09d      	sub	sp, #116	; 0x74
 800a568:	4614      	mov	r4, r2
 800a56a:	4698      	mov	r8, r3
 800a56c:	4606      	mov	r6, r0
 800a56e:	b118      	cbz	r0, 800a578 <_vfiprintf_r+0x18>
 800a570:	6a03      	ldr	r3, [r0, #32]
 800a572:	b90b      	cbnz	r3, 800a578 <_vfiprintf_r+0x18>
 800a574:	f7fe f8dc 	bl	8008730 <__sinit>
 800a578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a57a:	07d9      	lsls	r1, r3, #31
 800a57c:	d405      	bmi.n	800a58a <_vfiprintf_r+0x2a>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	059a      	lsls	r2, r3, #22
 800a582:	d402      	bmi.n	800a58a <_vfiprintf_r+0x2a>
 800a584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a586:	f7fe f9e9 	bl	800895c <__retarget_lock_acquire_recursive>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	071b      	lsls	r3, r3, #28
 800a58e:	d501      	bpl.n	800a594 <_vfiprintf_r+0x34>
 800a590:	692b      	ldr	r3, [r5, #16]
 800a592:	b99b      	cbnz	r3, 800a5bc <_vfiprintf_r+0x5c>
 800a594:	4629      	mov	r1, r5
 800a596:	4630      	mov	r0, r6
 800a598:	f000 f93a 	bl	800a810 <__swsetup_r>
 800a59c:	b170      	cbz	r0, 800a5bc <_vfiprintf_r+0x5c>
 800a59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a0:	07dc      	lsls	r4, r3, #31
 800a5a2:	d504      	bpl.n	800a5ae <_vfiprintf_r+0x4e>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	b01d      	add	sp, #116	; 0x74
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	0598      	lsls	r0, r3, #22
 800a5b2:	d4f7      	bmi.n	800a5a4 <_vfiprintf_r+0x44>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b6:	f7fe f9d2 	bl	800895e <__retarget_lock_release_recursive>
 800a5ba:	e7f3      	b.n	800a5a4 <_vfiprintf_r+0x44>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	2320      	movs	r3, #32
 800a5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ca:	2330      	movs	r3, #48	; 0x30
 800a5cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a780 <_vfiprintf_r+0x220>
 800a5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d4:	f04f 0901 	mov.w	r9, #1
 800a5d8:	4623      	mov	r3, r4
 800a5da:	469a      	mov	sl, r3
 800a5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e0:	b10a      	cbz	r2, 800a5e6 <_vfiprintf_r+0x86>
 800a5e2:	2a25      	cmp	r2, #37	; 0x25
 800a5e4:	d1f9      	bne.n	800a5da <_vfiprintf_r+0x7a>
 800a5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ea:	d00b      	beq.n	800a604 <_vfiprintf_r+0xa4>
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7ff ffa2 	bl	800a53c <__sfputs_r>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f000 80a9 	beq.w	800a750 <_vfiprintf_r+0x1f0>
 800a5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a600:	445a      	add	r2, fp
 800a602:	9209      	str	r2, [sp, #36]	; 0x24
 800a604:	f89a 3000 	ldrb.w	r3, [sl]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80a1 	beq.w	800a750 <_vfiprintf_r+0x1f0>
 800a60e:	2300      	movs	r3, #0
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a618:	f10a 0a01 	add.w	sl, sl, #1
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a624:	931a      	str	r3, [sp, #104]	; 0x68
 800a626:	4654      	mov	r4, sl
 800a628:	2205      	movs	r2, #5
 800a62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62e:	4854      	ldr	r0, [pc, #336]	; (800a780 <_vfiprintf_r+0x220>)
 800a630:	f7f5 fdce 	bl	80001d0 <memchr>
 800a634:	9a04      	ldr	r2, [sp, #16]
 800a636:	b9d8      	cbnz	r0, 800a670 <_vfiprintf_r+0x110>
 800a638:	06d1      	lsls	r1, r2, #27
 800a63a:	bf44      	itt	mi
 800a63c:	2320      	movmi	r3, #32
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a642:	0713      	lsls	r3, r2, #28
 800a644:	bf44      	itt	mi
 800a646:	232b      	movmi	r3, #43	; 0x2b
 800a648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64c:	f89a 3000 	ldrb.w	r3, [sl]
 800a650:	2b2a      	cmp	r3, #42	; 0x2a
 800a652:	d015      	beq.n	800a680 <_vfiprintf_r+0x120>
 800a654:	9a07      	ldr	r2, [sp, #28]
 800a656:	4654      	mov	r4, sl
 800a658:	2000      	movs	r0, #0
 800a65a:	f04f 0c0a 	mov.w	ip, #10
 800a65e:	4621      	mov	r1, r4
 800a660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a664:	3b30      	subs	r3, #48	; 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d94d      	bls.n	800a706 <_vfiprintf_r+0x1a6>
 800a66a:	b1b0      	cbz	r0, 800a69a <_vfiprintf_r+0x13a>
 800a66c:	9207      	str	r2, [sp, #28]
 800a66e:	e014      	b.n	800a69a <_vfiprintf_r+0x13a>
 800a670:	eba0 0308 	sub.w	r3, r0, r8
 800a674:	fa09 f303 	lsl.w	r3, r9, r3
 800a678:	4313      	orrs	r3, r2
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	46a2      	mov	sl, r4
 800a67e:	e7d2      	b.n	800a626 <_vfiprintf_r+0xc6>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	1d19      	adds	r1, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	9103      	str	r1, [sp, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfbb      	ittet	lt
 800a68c:	425b      	neglt	r3, r3
 800a68e:	f042 0202 	orrlt.w	r2, r2, #2
 800a692:	9307      	strge	r3, [sp, #28]
 800a694:	9307      	strlt	r3, [sp, #28]
 800a696:	bfb8      	it	lt
 800a698:	9204      	strlt	r2, [sp, #16]
 800a69a:	7823      	ldrb	r3, [r4, #0]
 800a69c:	2b2e      	cmp	r3, #46	; 0x2e
 800a69e:	d10c      	bne.n	800a6ba <_vfiprintf_r+0x15a>
 800a6a0:	7863      	ldrb	r3, [r4, #1]
 800a6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a4:	d134      	bne.n	800a710 <_vfiprintf_r+0x1b0>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	1d1a      	adds	r2, r3, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	9203      	str	r2, [sp, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfb8      	it	lt
 800a6b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b6:	3402      	adds	r4, #2
 800a6b8:	9305      	str	r3, [sp, #20]
 800a6ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a790 <_vfiprintf_r+0x230>
 800a6be:	7821      	ldrb	r1, [r4, #0]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f7f5 fd84 	bl	80001d0 <memchr>
 800a6c8:	b138      	cbz	r0, 800a6da <_vfiprintf_r+0x17a>
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	eba0 000a 	sub.w	r0, r0, sl
 800a6d0:	2240      	movs	r2, #64	; 0x40
 800a6d2:	4082      	lsls	r2, r0
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6de:	4829      	ldr	r0, [pc, #164]	; (800a784 <_vfiprintf_r+0x224>)
 800a6e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e4:	2206      	movs	r2, #6
 800a6e6:	f7f5 fd73 	bl	80001d0 <memchr>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d03f      	beq.n	800a76e <_vfiprintf_r+0x20e>
 800a6ee:	4b26      	ldr	r3, [pc, #152]	; (800a788 <_vfiprintf_r+0x228>)
 800a6f0:	bb1b      	cbnz	r3, 800a73a <_vfiprintf_r+0x1da>
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	3307      	adds	r3, #7
 800a6f6:	f023 0307 	bic.w	r3, r3, #7
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	443b      	add	r3, r7
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	e768      	b.n	800a5d8 <_vfiprintf_r+0x78>
 800a706:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70a:	460c      	mov	r4, r1
 800a70c:	2001      	movs	r0, #1
 800a70e:	e7a6      	b.n	800a65e <_vfiprintf_r+0xfe>
 800a710:	2300      	movs	r3, #0
 800a712:	3401      	adds	r4, #1
 800a714:	9305      	str	r3, [sp, #20]
 800a716:	4619      	mov	r1, r3
 800a718:	f04f 0c0a 	mov.w	ip, #10
 800a71c:	4620      	mov	r0, r4
 800a71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a722:	3a30      	subs	r2, #48	; 0x30
 800a724:	2a09      	cmp	r2, #9
 800a726:	d903      	bls.n	800a730 <_vfiprintf_r+0x1d0>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0c6      	beq.n	800a6ba <_vfiprintf_r+0x15a>
 800a72c:	9105      	str	r1, [sp, #20]
 800a72e:	e7c4      	b.n	800a6ba <_vfiprintf_r+0x15a>
 800a730:	fb0c 2101 	mla	r1, ip, r1, r2
 800a734:	4604      	mov	r4, r0
 800a736:	2301      	movs	r3, #1
 800a738:	e7f0      	b.n	800a71c <_vfiprintf_r+0x1bc>
 800a73a:	ab03      	add	r3, sp, #12
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	462a      	mov	r2, r5
 800a740:	4b12      	ldr	r3, [pc, #72]	; (800a78c <_vfiprintf_r+0x22c>)
 800a742:	a904      	add	r1, sp, #16
 800a744:	4630      	mov	r0, r6
 800a746:	f7fd fbb3 	bl	8007eb0 <_printf_float>
 800a74a:	4607      	mov	r7, r0
 800a74c:	1c78      	adds	r0, r7, #1
 800a74e:	d1d6      	bne.n	800a6fe <_vfiprintf_r+0x19e>
 800a750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x202>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x202>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7fe f8fe 	bl	800895e <__retarget_lock_release_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	065b      	lsls	r3, r3, #25
 800a766:	f53f af1d 	bmi.w	800a5a4 <_vfiprintf_r+0x44>
 800a76a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76c:	e71c      	b.n	800a5a8 <_vfiprintf_r+0x48>
 800a76e:	ab03      	add	r3, sp, #12
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	462a      	mov	r2, r5
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <_vfiprintf_r+0x22c>)
 800a776:	a904      	add	r1, sp, #16
 800a778:	4630      	mov	r0, r6
 800a77a:	f7fd fe3d 	bl	80083f8 <_printf_i>
 800a77e:	e7e4      	b.n	800a74a <_vfiprintf_r+0x1ea>
 800a780:	0800acf4 	.word	0x0800acf4
 800a784:	0800acfe 	.word	0x0800acfe
 800a788:	08007eb1 	.word	0x08007eb1
 800a78c:	0800a53d 	.word	0x0800a53d
 800a790:	0800acfa 	.word	0x0800acfa

0800a794 <__swbuf_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	460e      	mov	r6, r1
 800a798:	4614      	mov	r4, r2
 800a79a:	4605      	mov	r5, r0
 800a79c:	b118      	cbz	r0, 800a7a6 <__swbuf_r+0x12>
 800a79e:	6a03      	ldr	r3, [r0, #32]
 800a7a0:	b90b      	cbnz	r3, 800a7a6 <__swbuf_r+0x12>
 800a7a2:	f7fd ffc5 	bl	8008730 <__sinit>
 800a7a6:	69a3      	ldr	r3, [r4, #24]
 800a7a8:	60a3      	str	r3, [r4, #8]
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	071a      	lsls	r2, r3, #28
 800a7ae:	d525      	bpl.n	800a7fc <__swbuf_r+0x68>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	b31b      	cbz	r3, 800a7fc <__swbuf_r+0x68>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	6922      	ldr	r2, [r4, #16]
 800a7b8:	1a98      	subs	r0, r3, r2
 800a7ba:	6963      	ldr	r3, [r4, #20]
 800a7bc:	b2f6      	uxtb	r6, r6
 800a7be:	4283      	cmp	r3, r0
 800a7c0:	4637      	mov	r7, r6
 800a7c2:	dc04      	bgt.n	800a7ce <__swbuf_r+0x3a>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f7ff fd9e 	bl	800a308 <_fflush_r>
 800a7cc:	b9e0      	cbnz	r0, 800a808 <__swbuf_r+0x74>
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	60a3      	str	r3, [r4, #8]
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	6022      	str	r2, [r4, #0]
 800a7da:	701e      	strb	r6, [r3, #0]
 800a7dc:	6962      	ldr	r2, [r4, #20]
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d004      	beq.n	800a7ee <__swbuf_r+0x5a>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	07db      	lsls	r3, r3, #31
 800a7e8:	d506      	bpl.n	800a7f8 <__swbuf_r+0x64>
 800a7ea:	2e0a      	cmp	r6, #10
 800a7ec:	d104      	bne.n	800a7f8 <__swbuf_r+0x64>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7ff fd89 	bl	800a308 <_fflush_r>
 800a7f6:	b938      	cbnz	r0, 800a808 <__swbuf_r+0x74>
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 f806 	bl	800a810 <__swsetup_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	d0d5      	beq.n	800a7b4 <__swbuf_r+0x20>
 800a808:	f04f 37ff 	mov.w	r7, #4294967295
 800a80c:	e7f4      	b.n	800a7f8 <__swbuf_r+0x64>
	...

0800a810 <__swsetup_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4b2a      	ldr	r3, [pc, #168]	; (800a8bc <__swsetup_r+0xac>)
 800a814:	4605      	mov	r5, r0
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	460c      	mov	r4, r1
 800a81a:	b118      	cbz	r0, 800a824 <__swsetup_r+0x14>
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	b90b      	cbnz	r3, 800a824 <__swsetup_r+0x14>
 800a820:	f7fd ff86 	bl	8008730 <__sinit>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a82a:	0718      	lsls	r0, r3, #28
 800a82c:	d422      	bmi.n	800a874 <__swsetup_r+0x64>
 800a82e:	06d9      	lsls	r1, r3, #27
 800a830:	d407      	bmi.n	800a842 <__swsetup_r+0x32>
 800a832:	2309      	movs	r3, #9
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	f04f 30ff 	mov.w	r0, #4294967295
 800a840:	e034      	b.n	800a8ac <__swsetup_r+0x9c>
 800a842:	0758      	lsls	r0, r3, #29
 800a844:	d512      	bpl.n	800a86c <__swsetup_r+0x5c>
 800a846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a848:	b141      	cbz	r1, 800a85c <__swsetup_r+0x4c>
 800a84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a84e:	4299      	cmp	r1, r3
 800a850:	d002      	beq.n	800a858 <__swsetup_r+0x48>
 800a852:	4628      	mov	r0, r5
 800a854:	f7fe fefe 	bl	8009654 <_free_r>
 800a858:	2300      	movs	r3, #0
 800a85a:	6363      	str	r3, [r4, #52]	; 0x34
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	2300      	movs	r3, #0
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	6923      	ldr	r3, [r4, #16]
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0308 	orr.w	r3, r3, #8
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	b94b      	cbnz	r3, 800a88c <__swsetup_r+0x7c>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a882:	d003      	beq.n	800a88c <__swsetup_r+0x7c>
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f884 	bl	800a994 <__smakebuf_r>
 800a88c:	89a0      	ldrh	r0, [r4, #12]
 800a88e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a892:	f010 0301 	ands.w	r3, r0, #1
 800a896:	d00a      	beq.n	800a8ae <__swsetup_r+0x9e>
 800a898:	2300      	movs	r3, #0
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	6963      	ldr	r3, [r4, #20]
 800a89e:	425b      	negs	r3, r3
 800a8a0:	61a3      	str	r3, [r4, #24]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	b943      	cbnz	r3, 800a8b8 <__swsetup_r+0xa8>
 800a8a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8aa:	d1c4      	bne.n	800a836 <__swsetup_r+0x26>
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	0781      	lsls	r1, r0, #30
 800a8b0:	bf58      	it	pl
 800a8b2:	6963      	ldrpl	r3, [r4, #20]
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	e7f4      	b.n	800a8a2 <__swsetup_r+0x92>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7f7      	b.n	800a8ac <__swsetup_r+0x9c>
 800a8bc:	20000064 	.word	0x20000064

0800a8c0 <_raise_r>:
 800a8c0:	291f      	cmp	r1, #31
 800a8c2:	b538      	push	{r3, r4, r5, lr}
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	d904      	bls.n	800a8d4 <_raise_r+0x14>
 800a8ca:	2316      	movs	r3, #22
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8d6:	b112      	cbz	r2, 800a8de <_raise_r+0x1e>
 800a8d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8dc:	b94b      	cbnz	r3, 800a8f2 <_raise_r+0x32>
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f830 	bl	800a944 <_getpid_r>
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ee:	f000 b817 	b.w	800a920 <_kill_r>
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d00a      	beq.n	800a90c <_raise_r+0x4c>
 800a8f6:	1c59      	adds	r1, r3, #1
 800a8f8:	d103      	bne.n	800a902 <_raise_r+0x42>
 800a8fa:	2316      	movs	r3, #22
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7e7      	b.n	800a8d2 <_raise_r+0x12>
 800a902:	2400      	movs	r4, #0
 800a904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a908:	4628      	mov	r0, r5
 800a90a:	4798      	blx	r3
 800a90c:	2000      	movs	r0, #0
 800a90e:	e7e0      	b.n	800a8d2 <_raise_r+0x12>

0800a910 <raise>:
 800a910:	4b02      	ldr	r3, [pc, #8]	; (800a91c <raise+0xc>)
 800a912:	4601      	mov	r1, r0
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	f7ff bfd3 	b.w	800a8c0 <_raise_r>
 800a91a:	bf00      	nop
 800a91c:	20000064 	.word	0x20000064

0800a920 <_kill_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	; (800a940 <_kill_r+0x20>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	f7f7 fe08 	bl	8002542 <_kill>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d102      	bne.n	800a93c <_kill_r+0x1c>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b103      	cbz	r3, 800a93c <_kill_r+0x1c>
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	20000b3c 	.word	0x20000b3c

0800a944 <_getpid_r>:
 800a944:	f7f7 bdf5 	b.w	8002532 <_getpid>

0800a948 <__swhatbuf_r>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	460c      	mov	r4, r1
 800a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a950:	2900      	cmp	r1, #0
 800a952:	b096      	sub	sp, #88	; 0x58
 800a954:	4615      	mov	r5, r2
 800a956:	461e      	mov	r6, r3
 800a958:	da0d      	bge.n	800a976 <__swhatbuf_r+0x2e>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a960:	f04f 0100 	mov.w	r1, #0
 800a964:	bf0c      	ite	eq
 800a966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a96a:	2340      	movne	r3, #64	; 0x40
 800a96c:	2000      	movs	r0, #0
 800a96e:	6031      	str	r1, [r6, #0]
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	b016      	add	sp, #88	; 0x58
 800a974:	bd70      	pop	{r4, r5, r6, pc}
 800a976:	466a      	mov	r2, sp
 800a978:	f000 f848 	bl	800aa0c <_fstat_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dbec      	blt.n	800a95a <__swhatbuf_r+0x12>
 800a980:	9901      	ldr	r1, [sp, #4]
 800a982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a98a:	4259      	negs	r1, r3
 800a98c:	4159      	adcs	r1, r3
 800a98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a992:	e7eb      	b.n	800a96c <__swhatbuf_r+0x24>

0800a994 <__smakebuf_r>:
 800a994:	898b      	ldrh	r3, [r1, #12]
 800a996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a998:	079d      	lsls	r5, r3, #30
 800a99a:	4606      	mov	r6, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	d507      	bpl.n	800a9b0 <__smakebuf_r+0x1c>
 800a9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	6163      	str	r3, [r4, #20]
 800a9ac:	b002      	add	sp, #8
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	ab01      	add	r3, sp, #4
 800a9b2:	466a      	mov	r2, sp
 800a9b4:	f7ff ffc8 	bl	800a948 <__swhatbuf_r>
 800a9b8:	9900      	ldr	r1, [sp, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7fe febd 	bl	800973c <_malloc_r>
 800a9c2:	b948      	cbnz	r0, 800a9d8 <__smakebuf_r+0x44>
 800a9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c8:	059a      	lsls	r2, r3, #22
 800a9ca:	d4ef      	bmi.n	800a9ac <__smakebuf_r+0x18>
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	f043 0302 	orr.w	r3, r3, #2
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7e3      	b.n	800a9a0 <__smakebuf_r+0xc>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	6020      	str	r0, [r4, #0]
 800a9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e0:	81a3      	strh	r3, [r4, #12]
 800a9e2:	9b00      	ldr	r3, [sp, #0]
 800a9e4:	6163      	str	r3, [r4, #20]
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	6120      	str	r0, [r4, #16]
 800a9ea:	b15b      	cbz	r3, 800aa04 <__smakebuf_r+0x70>
 800a9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f000 f81d 	bl	800aa30 <_isatty_r>
 800a9f6:	b128      	cbz	r0, 800aa04 <__smakebuf_r+0x70>
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	f023 0303 	bic.w	r3, r3, #3
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	81a3      	strh	r3, [r4, #12]
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	431d      	orrs	r5, r3
 800aa08:	81a5      	strh	r5, [r4, #12]
 800aa0a:	e7cf      	b.n	800a9ac <__smakebuf_r+0x18>

0800aa0c <_fstat_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d07      	ldr	r5, [pc, #28]	; (800aa2c <_fstat_r+0x20>)
 800aa10:	2300      	movs	r3, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	f7f7 fdf1 	bl	8002600 <_fstat>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	d102      	bne.n	800aa28 <_fstat_r+0x1c>
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	b103      	cbz	r3, 800aa28 <_fstat_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd38      	pop	{r3, r4, r5, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000b3c 	.word	0x20000b3c

0800aa30 <_isatty_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_isatty_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f7 fdf0 	bl	8002620 <_isatty>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_isatty_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_isatty_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	20000b3c 	.word	0x20000b3c

0800aa50 <_init>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr

0800aa5c <_fini>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr
