
P6_f5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800e070  0800e070  0001e070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e49c  0800e49c  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e49c  0800e49c  0001e49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4a4  0800e4a4  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4a4  0800e4a4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4a8  0800e4a8  0001e4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200002e0  0800e78c  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  0800e78c  00021124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228dd  00000000  00000000  00020353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a4d  00000000  00000000  00042c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002010  00000000  00000000  00047680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018d9  00000000  00000000  00049690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbb9  00000000  00000000  0004af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002781e  00000000  00000000  00077b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101ec8  00000000  00000000  0009f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000098dc  00000000  00000000  001a1208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001aaae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e058 	.word	0x0800e058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800e058 	.word	0x0800e058

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f001 fe29 	bl	8002b08 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 fa3a 	bl	8002330 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f001 fe1f 	bl	8002b08 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f001 fa30 	bl	8002330 <HAL_Delay>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lcd_reset>:

void lcd_reset(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	4820      	ldr	r0, [pc, #128]	; (8000f60 <lcd_reset+0x8c>)
 8000ede:	f001 fe13 	bl	8002b08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f001 fe0d 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f001 fe07 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4818      	ldr	r0, [pc, #96]	; (8000f60 <lcd_reset+0x8c>)
 8000f00:	f001 fe02 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	4815      	ldr	r0, [pc, #84]	; (8000f60 <lcd_reset+0x8c>)
 8000f0a:	f001 fdfd 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 fdf6 	bl	8002b08 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2108      	movs	r1, #8
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f001 fdf0 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <lcd_reset+0x8c>)
 8000f2e:	f001 fdeb 	bl	8002b08 <HAL_GPIO_WritePin>
    lcd_clock();
 8000f32:	f7ff ffb7 	bl	8000ea4 <lcd_clock>
    lcd_clock();
 8000f36:	f7ff ffb5 	bl	8000ea4 <lcd_clock>
    lcd_clock();
 8000f3a:	f7ff ffb3 	bl	8000ea4 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2108      	movs	r1, #8
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f001 fddf 	bl	8002b08 <HAL_GPIO_WritePin>
    lcd_clock();
 8000f4a:	f7ff ffab 	bl	8000ea4 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2104      	movs	r1, #4
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fdd7 	bl	8002b08 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	48000400 	.word	0x48000400

08000f64 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f001 fdbd 	bl	8002b08 <HAL_GPIO_WritePin>
 8000f8e:	e005      	b.n	8000f9c <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 fdb6 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	4847      	ldr	r0, [pc, #284]	; (80010cc <lcd_write+0x168>)
 8000fb0:	f001 fdaa 	bl	8002b08 <HAL_GPIO_WritePin>
 8000fb4:	e004      	b.n	8000fc0 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4844      	ldr	r0, [pc, #272]	; (80010cc <lcd_write+0x168>)
 8000fbc:	f001 fda4 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	099b      	lsrs	r3, r3, #6
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	483e      	ldr	r0, [pc, #248]	; (80010cc <lcd_write+0x168>)
 8000fd4:	f001 fd98 	bl	8002b08 <HAL_GPIO_WritePin>
 8000fd8:	e004      	b.n	8000fe4 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2102      	movs	r1, #2
 8000fde:	483b      	ldr	r0, [pc, #236]	; (80010cc <lcd_write+0x168>)
 8000fe0:	f001 fd92 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	09db      	lsrs	r3, r3, #7
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f001 fd85 	bl	8002b08 <HAL_GPIO_WritePin>
 8000ffe:	e005      	b.n	800100c <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2110      	movs	r1, #16
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 fd7e 	bl	8002b08 <HAL_GPIO_WritePin>

    if(rs)
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	2104      	movs	r1, #4
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <lcd_write+0x168>)
 8001018:	f001 fd76 	bl	8002b08 <HAL_GPIO_WritePin>
 800101c:	e004      	b.n	8001028 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2104      	movs	r1, #4
 8001022:	482a      	ldr	r0, [pc, #168]	; (80010cc <lcd_write+0x168>)
 8001024:	f001 fd70 	bl	8002b08 <HAL_GPIO_WritePin>

    lcd_clock();
 8001028:	f7ff ff3c 	bl	8000ea4 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2108      	movs	r1, #8
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 fd63 	bl	8002b08 <HAL_GPIO_WritePin>
 8001042:	e005      	b.n	8001050 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2108      	movs	r1, #8
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f001 fd5c 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <lcd_write+0x168>)
 8001064:	f001 fd50 	bl	8002b08 <HAL_GPIO_WritePin>
 8001068:	e004      	b.n	8001074 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2110      	movs	r1, #16
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <lcd_write+0x168>)
 8001070:	f001 fd4a 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	2102      	movs	r1, #2
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <lcd_write+0x168>)
 8001088:	f001 fd3e 	bl	8002b08 <HAL_GPIO_WritePin>
 800108c:	e004      	b.n	8001098 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <lcd_write+0x168>)
 8001094:	f001 fd38 	bl	8002b08 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f001 fd2b 	bl	8002b08 <HAL_GPIO_WritePin>
 80010b2:	e005      	b.n	80010c0 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2110      	movs	r1, #16
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f001 fd24 	bl	8002b08 <HAL_GPIO_WritePin>

    lcd_clock();
 80010c0:	f7ff fef0 	bl	8000ea4 <lcd_clock>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <lcd_clear>:

void lcd_clear(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff ff44 	bl	8000f64 <lcd_write>
    _lcd_char = 0;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <lcd_clear+0x1c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <lcd_clear+0x20>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000304 	.word	0x20000304
 80010f0:	20000305 	.word	0x20000305

080010f4 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	460b      	mov	r3, r1
 8001100:	71bb      	strb	r3, [r7, #6]
 8001102:	4613      	mov	r3, r2
 8001104:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	b25a      	sxtb	r2, r3
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	b25b      	sxtb	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b25a      	sxtb	r2, r3
 800111c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001120:	4313      	orrs	r3, r2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff1b 	bl	8000f64 <lcd_write>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff0a 	bl	8000f64 <lcd_write>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e055      	b.n	8001212 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <lcd_print+0xd0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01c      	beq.n	80011a8 <lcd_print+0x50>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d116      	bne.n	80011a8 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <lcd_print+0xd4>)
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <lcd_print+0xd0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d242      	bcs.n	800120c <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <lcd_print+0xd8>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <lcd_print+0xd4>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	1c59      	adds	r1, r3, #1
 8001190:	b2c8      	uxtb	r0, r1
 8001192:	4926      	ldr	r1, [pc, #152]	; (800122c <lcd_print+0xd4>)
 8001194:	7008      	strb	r0, [r1, #0]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffcb 	bl	8001136 <lcd_display_address>
                _lcd_char = 0;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <lcd_print+0xdc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80011a6:	e031      	b.n	800120c <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <lcd_print+0xe0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01b      	beq.n	80011e8 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <lcd_print+0xdc>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <lcd_print+0xe0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d115      	bne.n	80011e8 <lcd_print+0x90>
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <lcd_print+0xd4>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <lcd_print+0xd0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d20f      	bcs.n	80011e8 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <lcd_print+0xd8>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <lcd_print+0xd4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	b2c8      	uxtb	r0, r1
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <lcd_print+0xd4>)
 80011d6:	7008      	strb	r0, [r1, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffaa 	bl	8001136 <lcd_display_address>
                    _lcd_char = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <lcd_print+0xdc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff feb6 	bl	8000f64 <lcd_write>
            if(lcd_chars) _lcd_char++;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <lcd_print+0xe0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <lcd_print+0xb4>
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <lcd_print+0xdc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <lcd_print+0xdc>)
 800120a:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1a3      	bne.n	8001166 <lcd_print+0xe>
        }
    }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002fd 	.word	0x200002fd
 800122c:	20000305 	.word	0x20000305
 8001230:	20000300 	.word	0x20000300
 8001234:	20000304 	.word	0x20000304
 8001238:	200002fc 	.word	0x200002fc

0800123c <ini_acelerometro>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;
extern uint8_t miflag;

void ini_acelerometro(){
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	// que metemos en el buffer
	// pues los datos a escribir
	buffer[0]= 0x40;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	713b      	strb	r3, [r7, #4]
	// debe escribir en la dirección del esclabo
	// 0xD4
	// el tamaño es de 8 byrtes
	//creo que no hace falta meterle 1000 de timeaout
	// ya qyue no hay que calentarlo
	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 100);
 8001246:	2364      	movs	r3, #100	; 0x64
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	2210      	movs	r2, #16
 8001256:	21d4      	movs	r1, #212	; 0xd4
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <ini_acelerometro+0x2c>)
 800125a:	f001 fd2b 	bl	8002cb4 <HAL_I2C_Mem_Write>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000340 	.word	0x20000340
 800126c:	00000000 	.word	0x00000000

08001270 <readAccel>:
int16_t readAccel(uint8_t axis){
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af04      	add	r7, sp, #16
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	int16_t res = 0 ;
 800127a:	2300      	movs	r3, #0
 800127c:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];
	HAL_I2C_Mem_Read(&hi2c2, 0xD4, 0x28+2*axis, I2C_MEMADD_SIZE_8BIT, buffer,2, 100);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	3314      	adds	r3, #20
 8001282:	b29b      	uxth	r3, r3
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2302      	movs	r3, #2
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	21d4      	movs	r1, #212	; 0xd4
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <readAccel+0x70>)
 800129c:	f001 fe1e 	bl	8002edc <HAL_I2C_Mem_Read>
	res = ((int16_t)(buffer[1]<<8)| buffer[0])*0.061;
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	7b3b      	ldrb	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f939 	bl	8000524 <__aeabi_i2d>
 80012b2:	a309      	add	r3, pc, #36	; (adr r3, 80012d8 <readAccel+0x68>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f99e 	bl	80005f8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fc48 	bl	8000b58 <__aeabi_d2iz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	81fb      	strh	r3, [r7, #14]
	return res;
 80012cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	5a1cac08 	.word	0x5a1cac08
 80012dc:	3faf3b64 	.word	0x3faf3b64
 80012e0:	20000340 	.word	0x20000340

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f000 ffac 	bl	8002246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f865 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f2:	f000 fa5b 	bl	80017ac <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80012f6:	f000 f8c3 	bl	8001480 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80012fa:	f000 f8f9 	bl	80014f0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80012fe:	f000 f937 	bl	8001570 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001302:	f000 f95b 	bl	80015bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001306:	f000 f9f1 	bl	80016ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800130a:	f000 fa1f 	bl	800174c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800130e:	f009 fc2f 	bl	800ab70 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001312:	f000 f991 	bl	8001638 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

lcd_reset();
 8001316:	f7ff fddd 	bl	8000ed4 <lcd_reset>
lcd_display_settings(1,0,0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fee8 	bl	80010f4 <lcd_display_settings>
lcd_clear();
 8001324:	f7ff fed4 	bl	80010d0 <lcd_clear>
HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	2104      	movs	r1, #4
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f001 fbea 	bl	8002b08 <HAL_GPIO_WritePin>
lcd_print("Fase5");
 8001334:	481e      	ldr	r0, [pc, #120]	; (80013b0 <main+0xcc>)
 8001336:	f7ff ff0f 	bl	8001158 <lcd_print>
ini_acelerometro();
 800133a:	f7ff ff7f 	bl	800123c <ini_acelerometro>
HAL_Delay(5000);
 800133e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001342:	f000 fff5 	bl	8002330 <HAL_Delay>

uint8_t dato[6];
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	2306      	movs	r3, #6
 800134c:	2101      	movs	r1, #1
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <main+0xd0>)
 8001350:	f00a f936 	bl	800b5c0 <USBD_LL_PrepareReceive>
uint8_t datoCiclo[6] = {115,101,116,114,0,0}; //setr ascii
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <main+0xd4>)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135c:	6018      	str	r0, [r3, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 lecturaejeX = readAccel(0);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff ff84 	bl	8001270 <readAccel>
 8001368:	4603      	mov	r3, r0
 800136a:	82fb      	strh	r3, [r7, #22]

dato[0]= lecturaejeX;
 800136c:	8afb      	ldrh	r3, [r7, #22]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	733b      	strb	r3, [r7, #12]
dato[1]= lecturaejeX>>8;
 8001372:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001376:	121b      	asrs	r3, r3, #8
 8001378:	b21b      	sxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	737b      	strb	r3, [r7, #13]
lecturaejeY= readAccel(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff ff76 	bl	8001270 <readAccel>
 8001384:	4603      	mov	r3, r0
 8001386:	82bb      	strh	r3, [r7, #20]
dato[2]= lecturaejeY;
 8001388:	8abb      	ldrh	r3, [r7, #20]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	73bb      	strb	r3, [r7, #14]
dato[3]= lecturaejeY>>8;
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	121b      	asrs	r3, r3, #8
 8001394:	b21b      	sxth	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	73fb      	strb	r3, [r7, #15]




//enviamos esta cadena  para saber que se ha terminado el ciclo
USBD_CUSTOM_HID_SendReport_FS(dato,6);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2106      	movs	r1, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 fc39 	bl	800ac18 <USBD_CUSTOM_HID_SendReport_FS>
HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f000 ffc2 	bl	8002330 <HAL_Delay>
  {
 80013ac:	e7d9      	b.n	8001362 <main+0x7e>
 80013ae:	bf00      	nop
 80013b0:	0800e070 	.word	0x0800e070
 80013b4:	200005cc 	.word	0x200005cc
 80013b8:	0800e078 	.word	0x0800e078

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b096      	sub	sp, #88	; 0x58
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2244      	movs	r2, #68	; 0x44
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00a fef5 	bl	800c1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013e2:	f003 fb91 	bl	8004b08 <HAL_PWREx_ControlVoltageScaling>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013ec:	f000 fb62 	bl	8001ab4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013f0:	f003 fb6c 	bl	8004acc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <SystemClock_Config+0xc0>)
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <SystemClock_Config+0xc0>)
 80013fc:	f023 0318 	bic.w	r3, r3, #24
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001404:	2314      	movs	r3, #20
 8001406:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800141c:	2301      	movs	r3, #1
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	; 0x28
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001428:	2307      	movs	r3, #7
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fc87 	bl	8004d4c <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001444:	f000 fb36 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2303      	movs	r3, #3
 800144e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2104      	movs	r1, #4
 8001460:	4618      	mov	r0, r3
 8001462:	f004 f84f 	bl	8005504 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800146c:	f000 fb22 	bl	8001ab4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001470:	f004 fd56 	bl	8005f20 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001474:	bf00      	nop
 8001476:	3758      	adds	r7, #88	; 0x58
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <MX_DFSDM1_Init+0x6c>)
 8001488:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 800148c:	2201      	movs	r2, #1
 800148e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 8001498:	2202      	movs	r2, #2
 800149a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_DFSDM1_Init+0x68>)
 80014d6:	f001 f861 	bl	800259c <HAL_DFSDM_ChannelInit>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80014e0:	f000 fae8 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000308 	.word	0x20000308
 80014ec:	40016020 	.word	0x40016020

080014f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_I2C2_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_I2C2_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_I2C2_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <MX_I2C2_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_I2C2_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_I2C2_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_I2C2_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_I2C2_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C2_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C2_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C2_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <MX_I2C2_Init+0x74>)
 800152c:	f001 fb27 	bl	8002b7e <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 fabd 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <MX_I2C2_Init+0x74>)
 800153e:	f002 f89f 	bl	8003680 <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 fab4 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_I2C2_Init+0x74>)
 8001550:	f002 f8e1 	bl	8003716 <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 faab 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000340 	.word	0x20000340
 8001568:	40005800 	.word	0x40005800
 800156c:	10909cec 	.word	0x10909cec

08001570 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <MX_QUADSPI_Init+0x48>)
 8001578:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 800157c:	2202      	movs	r2, #2
 800157e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 8001582:	2204      	movs	r2, #4
 8001584:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 8001588:	2210      	movs	r2, #16
 800158a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 800158e:	2217      	movs	r2, #23
 8001590:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_QUADSPI_Init+0x44>)
 80015a0:	f003 fb18 	bl	8004bd4 <HAL_QSPI_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80015aa:	f000 fa83 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000394 	.word	0x20000394
 80015b8:	a0001000 	.word	0xa0001000

080015bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_SPI3_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_SPI3_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_SPI3_Init+0x74>)
 80015c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_SPI3_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI3_Init+0x74>)
 80015d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI3_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_SPI3_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI3_Init+0x74>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI3_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI3_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI3_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_SPI3_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI3_Init+0x74>)
 800160a:	2207      	movs	r2, #7
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_SPI3_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI3_Init+0x74>)
 8001616:	2208      	movs	r2, #8
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_SPI3_Init+0x74>)
 800161c:	f004 fe62 	bl	80062e4 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 fa45 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003d8 	.word	0x200003d8
 8001634:	40003c00 	.word	0x40003c00

08001638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_TIM2_Init+0xb0>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_TIM2_Init+0xb0>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM2_Init+0xb0>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM2_Init+0xb0>)
 8001672:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_TIM2_Init+0xb0>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM2_Init+0xb0>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_TIM2_Init+0xb0>)
 8001686:	f004 fed0 	bl	800642a <HAL_TIM_PWM_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001690:	f000 fa10 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_TIM2_Init+0xb0>)
 80016a4:	f005 fb9c 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80016ae:	f000 fa01 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b2:	2360      	movs	r3, #96	; 0x60
 80016b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM2_Init+0xb0>)
 80016ca:	f004 ff05 	bl	80064d8 <HAL_TIM_PWM_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80016d4:	f000 f9ee 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM2_Init+0xb0>)
 80016da:	f000 fb7d 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000043c 	.word	0x2000043c

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USART1_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <MX_USART1_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_USART1_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001730:	f005 fbde 	bl	8006ef0 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 f9bb 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000488 	.word	0x20000488
 8001748:	40013800 	.word	0x40013800

0800174c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_USART3_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART3_UART_Init+0x58>)
 8001790:	f005 fbae 	bl	8006ef0 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f000 f98b 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000510 	.word	0x20000510
 80017a8:	40004800 	.word	0x40004800

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	4bb7      	ldr	r3, [pc, #732]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4ab6      	ldr	r2, [pc, #728]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4bb4      	ldr	r3, [pc, #720]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4bb1      	ldr	r3, [pc, #708]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	4ab0      	ldr	r2, [pc, #704]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e6:	4bae      	ldr	r3, [pc, #696]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4bab      	ldr	r3, [pc, #684]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4aaa      	ldr	r2, [pc, #680]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4ba8      	ldr	r3, [pc, #672]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	4ba5      	ldr	r3, [pc, #660]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4aa4      	ldr	r2, [pc, #656]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4ba2      	ldr	r3, [pc, #648]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	4b9f      	ldr	r3, [pc, #636]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a9e      	ldr	r2, [pc, #632]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001840:	4898      	ldr	r0, [pc, #608]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 8001842:	f001 f961 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001846:	2200      	movs	r2, #0
 8001848:	f248 111c 	movw	r1, #33052	; 0x811c
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f001 f95a 	bl	8002b08 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001854:	2200      	movs	r2, #0
 8001856:	f24f 0116 	movw	r1, #61462	; 0xf016
 800185a:	4893      	ldr	r0, [pc, #588]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 800185c:	f001 f954 	bl	8002b08 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f241 0181 	movw	r1, #4225	; 0x1081
 8001866:	4891      	ldr	r0, [pc, #580]	; (8001aac <MX_GPIO_Init+0x300>)
 8001868:	f001 f94e 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001872:	488e      	ldr	r0, [pc, #568]	; (8001aac <MX_GPIO_Init+0x300>)
 8001874:	f001 f948 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800187e:	488c      	ldr	r0, [pc, #560]	; (8001ab0 <MX_GPIO_Init+0x304>)
 8001880:	f001 f942 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2120      	movs	r1, #32
 8001888:	4887      	ldr	r0, [pc, #540]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 800188a:	f001 f93d 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2101      	movs	r1, #1
 8001892:	4884      	ldr	r0, [pc, #528]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 8001894:	f001 f938 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001898:	f240 1315 	movw	r3, #277	; 0x115
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	487c      	ldr	r0, [pc, #496]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 80018b2:	f000 ff7f 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018b6:	236a      	movs	r3, #106	; 0x6a
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4876      	ldr	r0, [pc, #472]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 80018cc:	f000 ff72 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4872      	ldr	r0, [pc, #456]	; (8001ab0 <MX_GPIO_Init+0x304>)
 80018e8:	f000 ff64 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80018ec:	233f      	movs	r3, #63	; 0x3f
 80018ee:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018f0:	230b      	movs	r3, #11
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	486c      	ldr	r0, [pc, #432]	; (8001ab0 <MX_GPIO_Init+0x304>)
 8001900:	f000 ff58 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001904:	2303      	movs	r3, #3
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001914:	2308      	movs	r3, #8
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 ff47 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001926:	f248 131c 	movw	r3, #33052	; 0x811c
 800192a:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f000 ff37 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001956:	2305      	movs	r3, #5
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f000 ff26 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001968:	2301      	movs	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 800197e:	f000 ff19 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001982:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001986:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4843      	ldr	r0, [pc, #268]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 800199c:	f000 ff0a 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019a0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80019a4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	483d      	ldr	r0, [pc, #244]	; (8001aac <MX_GPIO_Init+0x300>)
 80019b8:	f000 fefc 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80019bc:	f243 0381 	movw	r3, #12417	; 0x3081
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4835      	ldr	r0, [pc, #212]	; (8001aac <MX_GPIO_Init+0x300>)
 80019d6:	f000 feed 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80019da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	482f      	ldr	r0, [pc, #188]	; (8001ab0 <MX_GPIO_Init+0x304>)
 80019f4:	f000 fede 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80019f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <MX_GPIO_Init+0x304>)
 8001a10:	f000 fed0 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a14:	2302      	movs	r3, #2
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a24:	2305      	movs	r3, #5
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481f      	ldr	r0, [pc, #124]	; (8001aac <MX_GPIO_Init+0x300>)
 8001a30:	f000 fec0 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a34:	2378      	movs	r3, #120	; 0x78
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a44:	2307      	movs	r3, #7
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <MX_GPIO_Init+0x300>)
 8001a50:	f000 feb0 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5a:	2312      	movs	r3, #18
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a66:	2304      	movs	r3, #4
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 8001a72:	f000 fe9f 	bl	80027b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2017      	movs	r0, #23
 8001a7c:	f000 fd57 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a80:	2017      	movs	r0, #23
 8001a82:	f000 fd70 	bl	8002566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2028      	movs	r0, #40	; 0x28
 8001a8c:	f000 fd4f 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a90:	2028      	movs	r0, #40	; 0x28
 8001a92:	f000 fd68 	bl	8002566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48001000 	.word	0x48001000
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	48000800 	.word	0x48000800

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_MspInit+0x44>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <HAL_MspInit+0x44>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_MspInit+0x44>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_MspInit+0x44>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_MspInit+0x44>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0ac      	sub	sp, #176	; 0xb0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2288      	movs	r2, #136	; 0x88
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00a fb46 	bl	800c1ba <memset>
  if(DFSDM1_Init == 0)
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d142      	bne.n	8001bbc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 ff00 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b52:	f7ff ffaf 	bl	8001ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6613      	str	r3, [r2, #96]	; 0x60
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b86:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001bae:	f000 fe01 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a02      	ldr	r2, [pc, #8]	; (8001bc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bba:	6013      	str	r3, [r2, #0]
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	; 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000598 	.word	0x20000598
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48001000 	.word	0x48001000

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0ac      	sub	sp, #176	; 0xb0
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2288      	movs	r2, #136	; 0x88
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00a fae2 	bl	800c1ba <memset>
  if(hi2c->Instance==I2C2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <HAL_I2C_MspInit+0xb0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d13b      	bne.n	8001c78 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fe9d 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c18:	f7ff ff4c 	bl	8001ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480b      	ldr	r0, [pc, #44]	; (8001c88 <HAL_I2C_MspInit+0xb8>)
 8001c5c:	f000 fdaa 	bl	80027b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_I2C_MspInit+0xb4>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	37b0      	adds	r7, #176	; 0xb0
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40005800 	.word	0x40005800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000400 	.word	0x48000400

08001c8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_QSPI_MspInit+0x7c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d128      	bne.n	8001d00 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6513      	str	r3, [r2, #80]	; 0x50
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_QSPI_MspInit+0x80>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001cde:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ce2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_QSPI_MspInit+0x84>)
 8001cfc:	f000 fd5a 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	a0001000 	.word	0xa0001000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48001000 	.word	0x48001000

08001d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_SPI_MspInit+0x7c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d128      	bne.n	8001d88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_SPI_MspInit+0x80>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001d66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_SPI_MspInit+0x84>)
 8001d84:	f000 fd16 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40003c00 	.word	0x40003c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000800 	.word	0x48000800

08001d9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d10b      	bne.n	8001dc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d11c      	bne.n	8001e34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_TIM_MspPostInit+0x64>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_TIM_MspPostInit+0x64>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_TIM_MspPostInit+0x64>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e12:	2320      	movs	r3, #32
 8001e14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e30:	f000 fcc0 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0ae      	sub	sp, #184	; 0xb8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	2288      	movs	r2, #136	; 0x88
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00a f9aa 	bl	800c1ba <memset>
  if(huart->Instance==USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a42      	ldr	r2, [pc, #264]	; (8001f74 <HAL_UART_MspInit+0x134>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d13b      	bne.n	8001ee8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e74:	2300      	movs	r3, #0
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fd65 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e88:	f7ff fe14 	bl	8001ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a39      	ldr	r2, [pc, #228]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4826      	ldr	r0, [pc, #152]	; (8001f7c <HAL_UART_MspInit+0x13c>)
 8001ee2:	f000 fc67 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ee6:	e040      	b.n	8001f6a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d13b      	bne.n	8001f6a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fd24 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001f0a:	f7ff fdd3 	bl	8001ab4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0x138>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <HAL_UART_MspInit+0x144>)
 8001f66:	f000 fc25 	bl	80027b4 <HAL_GPIO_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	37b8      	adds	r7, #184	; 0xb8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40004800 	.word	0x40004800
 8001f84:	48000c00 	.word	0x48000c00

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f98c 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001fe0:	2020      	movs	r0, #32
 8001fe2:	f000 fda9 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001fe6:	2040      	movs	r0, #64	; 0x40
 8001fe8:	f000 fda6 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001fec:	2080      	movs	r0, #128	; 0x80
 8001fee:	f000 fda3 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001ff2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ff6:	f000 fd9f 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002002:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002006:	f000 fd97 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800200a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800200e:	f000 fd93 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002012:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002016:	f000 fd8f 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800201a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800201e:	f000 fd8b 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002022:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002026:	f000 fd87 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <OTG_FS_IRQHandler+0x10>)
 8002036:	f001 fd0d 	bl	8003a54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000aac 	.word	0x20000aac

08002044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return 1;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_kill>:

int _kill(int pid, int sig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800205e:	f00a f8ff 	bl	800c260 <__errno>
 8002062:	4603      	mov	r3, r0
 8002064:	2216      	movs	r2, #22
 8002066:	601a      	str	r2, [r3, #0]
  return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_exit>:

void _exit (int status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffe7 	bl	8002054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002086:	e7fe      	b.n	8002086 <_exit+0x12>

08002088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e00a      	b.n	80020b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209a:	f3af 8000 	nop.w
 800209e:	4601      	mov	r1, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	b2ca      	uxtb	r2, r1
 80020a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf0      	blt.n	800209a <_read+0x12>
  }

  return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e009      	b.n	80020e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf1      	blt.n	80020d4 <_write+0x12>
  }
  return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_close>:

int _close(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	605a      	str	r2, [r3, #4]
  return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_isatty>:

int _isatty(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f00a f864 	bl	800c260 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20018000 	.word	0x20018000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	2000059c 	.word	0x2000059c
 80021cc:	20001128 	.word	0x20001128

080021d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7ff ffea 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <LoopForever+0x6>)
  ldr r1, =_edata
 80021fe:	490d      	ldr	r1, [pc, #52]	; (8002234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <LoopForever+0xe>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002214:	4c0a      	ldr	r4, [pc, #40]	; (8002240 <LoopForever+0x16>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f00a f823 	bl	800c26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002226:	f7ff f85d 	bl	80012e4 <main>

0800222a <LoopForever>:

LoopForever:
    b LoopForever
 800222a:	e7fe      	b.n	800222a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800222c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002238:	0800e4ac 	.word	0x0800e4ac
  ldr r2, =_sbss
 800223c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002240:	20001124 	.word	0x20001124

08002244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC1_2_IRQHandler>

08002246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f961 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f80e 	bl	8002278 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	e001      	b.n	800226c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002268:	f7ff fc2a 	bl	8001ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800226c:	79fb      	ldrb	r3, [r7, #7]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_InitTick+0x6c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_InitTick+0x70>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_InitTick+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f96d 	bl	8002582 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d809      	bhi.n	80022c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f937 	bl	800252e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_InitTick+0x74>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e007      	b.n	80022d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e004      	b.n	80022d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e001      	b.n	80022d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000008 	.word	0x20000008
 8002314:	200005a0 	.word	0x200005a0

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	200005a0 	.word	0x200005a0

08002330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff ffee 	bl	8002318 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d005      	beq.n	8002356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_Delay+0x44>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002356:	bf00      	nop
 8002358:	f7ff ffde 	bl	8002318 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d8f7      	bhi.n	8002358 <HAL_Delay+0x28>
  {
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000008 	.word	0x20000008

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff3e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff31 	bl	80023dc <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa2 	bl	80024d4 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0ac      	b.n	8002708 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f8b2 	bl	800271c <DFSDM_GetChannelFromInstance>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_DFSDM_ChannelInit+0x174>)
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e09f      	b.n	8002708 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fa9d 	bl	8001b08 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80025ce:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_DFSDM_ChannelInit+0x178>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_DFSDM_ChannelInit+0x178>)
 80025d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <HAL_DFSDM_ChannelInit+0x178>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d125      	bne.n	800262c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 80025e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4948      	ldr	r1, [pc, #288]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 8002600:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002604:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d108      	bne.n	8002620 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800260e:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	493f      	ldr	r1, [pc, #252]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3c      	ldr	r2, [pc, #240]	; (8002718 <HAL_DFSDM_ChannelInit+0x17c>)
 8002626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800263a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800264a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002650:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 020f 	bic.w	r2, r2, #15
 8002668:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002690:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 0207 	and.w	r2, r2, #7
 80026bc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f810 	bl	800271c <DFSDM_GetChannelFromInstance>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_DFSDM_ChannelInit+0x174>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200005a8 	.word	0x200005a8
 8002714:	200005a4 	.word	0x200005a4
 8002718:	40016000 	.word	0x40016000

0800271c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <DFSDM_GetChannelFromInstance+0x7c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e02b      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a19      	ldr	r2, [pc, #100]	; (800279c <DFSDM_GetChannelFromInstance+0x80>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d102      	bne.n	8002740 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e024      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <DFSDM_GetChannelFromInstance+0x84>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d102      	bne.n	800274e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002748:	2302      	movs	r3, #2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e01d      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <DFSDM_GetChannelFromInstance+0x88>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d102      	bne.n	800275c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002756:	2304      	movs	r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e016      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002764:	2305      	movs	r3, #5
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e00f      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <DFSDM_GetChannelFromInstance+0x90>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d102      	bne.n	8002778 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002772:	2306      	movs	r3, #6
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e008      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <DFSDM_GetChannelFromInstance+0x94>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d102      	bne.n	8002786 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002780:	2307      	movs	r3, #7
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e001      	b.n	800278a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002786:	2303      	movs	r3, #3
 8002788:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40016000 	.word	0x40016000
 800279c:	40016020 	.word	0x40016020
 80027a0:	40016040 	.word	0x40016040
 80027a4:	40016080 	.word	0x40016080
 80027a8:	400160a0 	.word	0x400160a0
 80027ac:	400160c0 	.word	0x400160c0
 80027b0:	400160e0 	.word	0x400160e0

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e17f      	b.n	8002ac4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8171 	beq.w	8002abe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d005      	beq.n	80027f4 <HAL_GPIO_Init+0x40>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d130      	bne.n	8002856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800282a:	2201      	movs	r2, #1
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 0201 	and.w	r2, r3, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b03      	cmp	r3, #3
 8002860:	d118      	bne.n	8002894 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002868:	2201      	movs	r2, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	f003 0201 	and.w	r2, r3, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b03      	cmp	r3, #3
 800289e:	d017      	beq.n	80028d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d123      	bne.n	8002924 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3208      	adds	r2, #8
 80028e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	6939      	ldr	r1, [r7, #16]
 8002920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80ac 	beq.w	8002abe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_GPIO_Init+0x330>)
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	4a5e      	ldr	r2, [pc, #376]	; (8002ae4 <HAL_GPIO_Init+0x330>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6613      	str	r3, [r2, #96]	; 0x60
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_GPIO_Init+0x330>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800297e:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <HAL_GPIO_Init+0x334>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x242>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_GPIO_Init+0x338>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x23e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_GPIO_Init+0x33c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x23a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_GPIO_Init+0x340>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x236>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x344>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x232>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_GPIO_Init+0x348>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x22e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_GPIO_Init+0x34c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x22a>
 80029da:	2306      	movs	r3, #6
 80029dc:	e00c      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029de:	2307      	movs	r3, #7
 80029e0:	e00a      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029e2:	2305      	movs	r3, #5
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x244>
 80029f6:	2300      	movs	r3, #0
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_GPIO_Init+0x334>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a3a:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_GPIO_Init+0x350>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f47f ae78 	bne.w	80027c4 <HAL_GPIO_Init+0x10>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800
 8002af4:	48000c00 	.word	0x48000c00
 8002af8:	48001000 	.word	0x48001000
 8002afc:	48001400 	.word	0x48001400
 8002b00:	48001800 	.word	0x48001800
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f806 	bl	8002b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e08d      	b.n	8002cac <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff f813 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	; 0x24
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e006      	b.n	8002c06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d108      	bne.n	8002c20 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e007      	b.n	8002c30 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69d9      	ldr	r1, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f040 80f9 	bne.w	8002ece <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x34>
 8002ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ed      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Mem_Write+0x4e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0e6      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d0a:	f7ff fb05 	bl	8002318 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fac3 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d1      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2221      	movs	r2, #33	; 0x21
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d54:	88f8      	ldrh	r0, [r7, #6]
 8002d56:	893a      	ldrh	r2, [r7, #8]
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f9d3 	bl	8003110 <I2C_RequestMemoryWrite>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0a9      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d90e      	bls.n	8002da4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fc3d 	bl	800361c <I2C_TransferConfig>
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fc2c 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fabc 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07b      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d034      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d130      	bne.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	2200      	movs	r2, #0
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fa3f 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e04d      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2bff      	cmp	r3, #255	; 0xff
 8002e3c:	d90e      	bls.n	8002e5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fbe1 	bl	800361c <I2C_TransferConfig>
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fbd0 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d19e      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 faa2 	bl	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01a      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_I2C_Mem_Write+0x224>)
 8002eae:	400b      	ands	r3, r1
 8002eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	f040 80fd 	bne.w	80030fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x34>
 8002f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0f1      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Mem_Read+0x4e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0ea      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f32:	f7ff f9f1 	bl	8002318 <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2319      	movs	r3, #25
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f9af 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d5      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2222      	movs	r2, #34	; 0x22
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7c:	88f8      	ldrh	r0, [r7, #6]
 8002f7e:	893a      	ldrh	r2, [r7, #8]
 8002f80:	8979      	ldrh	r1, [r7, #10]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f913 	bl	80031b8 <I2C_RequestMemoryRead>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0ad      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d90e      	bls.n	8002fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	; 0xff
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_I2C_Mem_Read+0x22c>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fb29 	bl	800361c <I2C_TransferConfig>
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_I2C_Mem_Read+0x22c>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fb18 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f956 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07c      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d034      	beq.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d130      	bne.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f927 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04d      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d90e      	bls.n	800308c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fac9 	bl	800361c <I2C_TransferConfig>
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fab8 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d19a      	bne.n	8002fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f98a 	bl	80033d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01a      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2220      	movs	r2, #32
 80030d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_I2C_Mem_Read+0x230>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	80002400 	.word	0x80002400
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <I2C_RequestMemoryWrite+0xa4>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fa6f 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	69b9      	ldr	r1, [r7, #24]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8ff 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e02c      	b.n	80031ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003158:	893b      	ldrh	r3, [r7, #8]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
 8003162:	e015      	b.n	8003190 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	b29b      	uxth	r3, r3
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8e5 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e012      	b.n	80031ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f884 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	80002000 	.word	0x80002000

080031b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <I2C_RequestMemoryRead+0xa4>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa1c 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	69b9      	ldr	r1, [r7, #24]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f8ac 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e02c      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031fe:	893b      	ldrh	r3, [r7, #8]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
 8003208:	e015      	b.n	8003236 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800320a:	893b      	ldrh	r3, [r7, #8]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	b29b      	uxth	r3, r3
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f892 	bl	8003346 <I2C_WaitOnTXISFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e012      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f831 	bl	80032a8 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	80002000 	.word	0x80002000

08003260 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d103      	bne.n	800327e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	619a      	str	r2, [r3, #24]
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b8:	e031      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d02d      	beq.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7ff f829 	bl	8002318 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d122      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d113      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d0be      	beq.n	80032ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003352:	e033      	b.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f87f 	bl	800345c <I2C_IsErrorOccurred>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e031      	b.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d025      	beq.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe ffd2 	bl	8002318 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11a      	bne.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d013      	beq.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e007      	b.n	80033cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d1c4      	bne.n	8003354 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e0:	e02f      	b.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f838 	bl	800345c <I2C_IsErrorOccurred>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e02d      	b.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe ff8f 	bl	8002318 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11a      	bne.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d013      	beq.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d1c8      	bne.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d068      	beq.n	800355a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003490:	e049      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d045      	beq.n	8003526 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe ff3d 	bl	8002318 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_IsErrorOccurred+0x54>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d13a      	bne.n	8003526 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d2:	d121      	bne.n	8003518 <I2C_IsErrorOccurred+0xbc>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034da:	d01d      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d01a      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f2:	f7fe ff11 	bl	8002318 <HAL_GetTick>
 80034f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f8:	e00e      	b.n	8003518 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fa:	f7fe ff0d 	bl	8002318 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b19      	cmp	r3, #25
 8003506:	d907      	bls.n	8003518 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003516:	e006      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d1e9      	bne.n	80034fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d003      	beq.n	800353c <I2C_IsErrorOccurred+0xe0>
 8003534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0aa      	beq.n	8003492 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fe45 	bl	8003260 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <I2C_IsErrorOccurred+0x1bc>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800360a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003634:	7a7b      	ldrb	r3, [r7, #9]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	4313      	orrs	r3, r2
 8003646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800364a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <I2C_TransferConfig+0x60>)
 800365c:	430b      	orrs	r3, r1
 800365e:	43db      	mvns	r3, r3
 8003660:	ea02 0103 	and.w	r1, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	03ff63ff 	.word	0x03ff63ff

08003680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d138      	bne.n	8003708 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e032      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d139      	bne.n	80037a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003736:	2302      	movs	r3, #2
 8003738:	e033      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003768:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b0:	b08f      	sub	sp, #60	; 0x3c
 80037b2:	af0a      	add	r7, sp, #40	; 0x28
 80037b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e116      	b.n	80039ee <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f007 fb52 	bl	800ae84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 f96b 	bl	8007ada <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	687e      	ldr	r6, [r7, #4]
 800380c:	466d      	mov	r5, sp
 800380e:	f106 0410 	add.w	r4, r6, #16
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003822:	1d33      	adds	r3, r6, #4
 8003824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	f004 f87d 	bl	8007926 <USB_CoreInit>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0d7      	b.n	80039ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f004 f959 	bl	8007afc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e04a      	b.n	80038e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	333d      	adds	r3, #61	; 0x3d
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	333c      	adds	r3, #60	; 0x3c
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	b298      	uxth	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3356      	adds	r3, #86	; 0x56
 800388c:	4602      	mov	r2, r0
 800388e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3340      	adds	r3, #64	; 0x40
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3344      	adds	r3, #68	; 0x44
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3348      	adds	r3, #72	; 0x48
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334c      	adds	r3, #76	; 0x4c
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	3301      	adds	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3af      	bcc.n	8003850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e044      	b.n	8003980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3301      	adds	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d3b5      	bcc.n	80038f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	687e      	ldr	r6, [r7, #4]
 8003992:	466d      	mov	r5, sp
 8003994:	f106 0410 	add.w	r4, r6, #16
 8003998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039a8:	1d33      	adds	r3, r6, #4
 80039aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ac:	6838      	ldr	r0, [r7, #0]
 80039ae:	f004 f8f1 	bl	8007b94 <USB_DevInit>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e014      	b.n	80039ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f001 f851 	bl	8004a84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f005 f89f 	bl	8008b2a <USB_DevDisconnect>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_PCD_Start+0x1c>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e01c      	b.n	8003a4c <HAL_PCD_Start+0x56>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f840 	bl	8007ab8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f005 f853 	bl	8008ae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b08d      	sub	sp, #52	; 0x34
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f005 f911 	bl	8008c92 <USB_GetMode>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 847e 	bne.w	8004374 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f005 f875 	bl	8008b6c <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8474 	beq.w	8004372 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 f862 	bl	8008b6c <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d107      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f002 0202 	and.w	r2, r2, #2
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f850 	bl	8008b6c <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d161      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0210 	bic.w	r2, r2, #16
 8003ae4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	0c5b      	lsrs	r3, r3, #17
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d124      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d035      	beq.n	8003b8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6a38      	ldr	r0, [r7, #32]
 8003b32:	f004 fe87 	bl	8008844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b42:	441a      	add	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b54:	441a      	add	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	e016      	b.n	8003b8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	0c5b      	lsrs	r3, r3, #17
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d110      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b6e:	2208      	movs	r2, #8
 8003b70:	4619      	mov	r1, r3
 8003b72:	6a38      	ldr	r0, [r7, #32]
 8003b74:	f004 fe66 	bl	8008844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b84:	441a      	add	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0210 	orr.w	r2, r2, #16
 8003b98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f004 ffe4 	bl	8008b6c <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bae:	f040 80a7 	bne.w	8003d00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 ffe9 	bl	8008b92 <USB_ReadDevAllOutEpInterrupt>
 8003bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bc2:	e099      	b.n	8003cf8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 808e 	beq.w	8003cec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 f80d 	bl	8008bfa <USB_ReadDevOutEPInterrupt>
 8003be0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fe65 	bl	80048d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2308      	movs	r3, #8
 8003c20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fea1 	bl	800496c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	2310      	movs	r3, #16
 8003c44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d030      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d109      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	3304      	adds	r3, #4
 8003c84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d108      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2200      	movs	r2, #0
 8003c92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f007 fa58 	bl	800b150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	461a      	mov	r2, r3
 8003cae:	2302      	movs	r3, #2
 8003cb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2320      	movs	r3, #32
 8003ccc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	3301      	adds	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f47f af62 	bne.w	8003bc4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 ff31 	bl	8008b6c <USB_ReadInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d14:	f040 80a4 	bne.w	8003e60 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 ff52 	bl	8008bc6 <USB_ReadDevAllInEpInterrupt>
 8003d22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d28:	e096      	b.n	8003e58 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 808b 	beq.w	8003e4c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f004 ff78 	bl	8008c36 <USB_ReadDevInEPInterrupt>
 8003d46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d020      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2201      	movs	r2, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d72:	4013      	ands	r3, r2
 8003d74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	461a      	mov	r2, r3
 8003d84:	2301      	movs	r3, #1
 8003d86:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f007 f949 	bl	800b026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	461a      	mov	r2, r3
 8003dac:	2308      	movs	r3, #8
 8003dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	461a      	mov	r2, r3
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d023      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df4:	6a38      	ldr	r0, [r7, #32]
 8003df6:	f004 f80f 	bl	8007e18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3338      	adds	r3, #56	; 0x38
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f007 f9a6 	bl	800b174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2302      	movs	r3, #2
 8003e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fcba 	bl	80047c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	3301      	adds	r3, #1
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f47f af65 	bne.w	8003d2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fe81 	bl	8008b6c <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e74:	d122      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d108      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f007 fbc6 	bl	800b630 <HAL_PCDEx_LPM_Callback>
 8003ea4:	e002      	b.n	8003eac <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f007 f92a 	bl	800b100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 fe53 	bl	8008b6c <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d112      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f007 f8e6 	bl	800b0b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fe35 	bl	8008b6c <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0c:	d121      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f1c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f42:	2101      	movs	r1, #1
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f007 fb73 	bl	800b630 <HAL_PCDEx_LPM_Callback>
 8003f4a:	e002      	b.n	8003f52 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f007 f8b1 	bl	800b0b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fe08 	bl	8008b6c <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f040 80b5 	bne.w	80040d4 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2110      	movs	r1, #16
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 ff47 	bl	8007e18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8e:	e046      	b.n	800401e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fa2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fd6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ff6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	440a      	add	r2, r1
 800400e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004016:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	3301      	adds	r3, #1
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004024:	429a      	cmp	r2, r3
 8004026:	d3b3      	bcc.n	8003f90 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004036:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800403a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004054:	f043 030b 	orr.w	r3, r3, #11
 8004058:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406a:	f043 030b 	orr.w	r3, r3, #11
 800406e:	6453      	str	r3, [r2, #68]	; 0x44
 8004070:	e015      	b.n	800409e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004084:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004088:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004098:	f043 030b 	orr.w	r3, r3, #11
 800409c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f004 fe18 	bl	8008cf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f004 fd47 	bl	8008b6c <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d124      	bne.n	8004134 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 fddd 	bl	8008cae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 ff0a 	bl	8007f12 <USB_GetDevSpeed>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681c      	ldr	r4, [r3, #0]
 800410a:	f001 fb87 	bl	800581c <HAL_RCC_GetHCLKFreq>
 800410e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	4620      	mov	r0, r4
 800411a:	f003 fc31 	bl	8007980 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f006 ffa9 	bl	800b076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004132:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fd17 	bl	8008b6c <USB_ReadInterrupts>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10a      	bne.n	800415e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f006 ff86 	bl	800b05a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 0208 	and.w	r2, r2, #8
 800415c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f004 fd02 	bl	8008b6c <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d122      	bne.n	80041b8 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e014      	b.n	80041ae <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fadb 	bl	800475e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	3301      	adds	r3, #1
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3e5      	bcc.n	8004184 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fcd5 	bl	8008b6c <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041cc:	d13b      	bne.n	8004246 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ce:	2301      	movs	r3, #1
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	e02b      	b.n	800422c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3340      	adds	r3, #64	; 0x40
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d115      	bne.n	8004226 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da12      	bge.n	8004226 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	333f      	adds	r3, #63	; 0x3f
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa9c 	bl	800475e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	3301      	adds	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	429a      	cmp	r2, r3
 8004234:	d3ce      	bcc.n	80041d4 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fc8e 	bl	8008b6c <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425a:	d155      	bne.n	8004308 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	e045      	b.n	80042ee <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d12e      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800428a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800428c:	2b00      	cmp	r3, #0
 800428e:	da2b      	bge.n	80042e8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800429c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d121      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e4:	6053      	str	r3, [r2, #4]
            break;
 80042e6:	e007      	b.n	80042f8 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	3301      	adds	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3b4      	bcc.n	8004262 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fc2d 	bl	8008b6c <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d10a      	bne.n	8004334 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f006 ff3a 	bl	800b198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f004 fc17 	bl	8008b6c <USB_ReadInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d115      	bne.n	8004374 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f006 ff2a 	bl	800b1b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	e000      	b.n	8004374 <HAL_PCD_IRQHandler+0x920>
      return;
 8004372:	bf00      	nop
    }
  }
}
 8004374:	3734      	adds	r7, #52	; 0x34
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}

0800437a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_PCD_SetAddress+0x1a>
 8004390:	2302      	movs	r3, #2
 8004392:	e013      	b.n	80043bc <HAL_PCD_SetAddress+0x42>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f004 fb75 	bl	8008a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	70fb      	strb	r3, [r7, #3]
 80043d6:	460b      	mov	r3, r1
 80043d8:	803b      	strh	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	da0f      	bge.n	800440a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	3338      	adds	r3, #56	; 0x38
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	705a      	strb	r2, [r3, #1]
 8004408:	e00f      	b.n	800442a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004436:	883a      	ldrh	r2, [r7, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	78ba      	ldrb	r2, [r7, #2]
 8004440:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004454:	78bb      	ldrb	r3, [r7, #2]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d102      	bne.n	8004460 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_PCD_EP_Open+0xaa>
 800446a:	2302      	movs	r3, #2
 800446c:	e00e      	b.n	800448c <HAL_PCD_EP_Open+0xc8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	4618      	mov	r0, r3
 800447e:	f003 fd67 	bl	8007f50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800448a:	7afb      	ldrb	r3, [r7, #11]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da0f      	bge.n	80044c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3338      	adds	r3, #56	; 0x38
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	705a      	strb	r2, [r3, #1]
 80044c6:	e00f      	b.n	80044e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 020f 	and.w	r2, r3, #15
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	3304      	adds	r3, #4
 80044e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_PCD_EP_Close+0x6e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e00e      	b.n	8004520 <HAL_PCD_EP_Close+0x8c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	4618      	mov	r0, r3
 8004512:	f003 fda5 	bl	8008060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	460b      	mov	r3, r1
 8004536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	f003 020f 	and.w	r2, r3, #15
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	b2da      	uxtb	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	4618      	mov	r0, r3
 800457e:	f003 fe4b 	bl	8008218 <USB_EPStartXfer>

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	460b      	mov	r3, r1
 800459a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459c:	7afb      	ldrb	r3, [r7, #11]
 800459e:	f003 020f 	and.w	r2, r3, #15
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	3338      	adds	r3, #56	; 0x38
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	3304      	adds	r3, #4
 80045b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2201      	movs	r2, #1
 80045ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045cc:	7afb      	ldrb	r3, [r7, #11]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6979      	ldr	r1, [r7, #20]
 80045de:	4618      	mov	r0, r3
 80045e0:	f003 fe1a 	bl	8008218 <USB_EPStartXfer>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d901      	bls.n	800460c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e04e      	b.n	80046aa <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800460c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da0f      	bge.n	8004634 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	705a      	strb	r2, [r3, #1]
 8004632:	e00d      	b.n	8004650 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	3304      	adds	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_EP_SetStall+0x82>
 800466c:	2302      	movs	r3, #2
 800466e:	e01c      	b.n	80046aa <HAL_PCD_EP_SetStall+0xbc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 f938 	bl	80088f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f004 fb2a 	bl	8008cf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d901      	bls.n	80046d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e042      	b.n	8004756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da0f      	bge.n	80046f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	3338      	adds	r3, #56	; 0x38
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	705a      	strb	r2, [r3, #1]
 80046f6:	e00f      	b.n	8004718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	3304      	adds	r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_PCD_EP_ClrStall+0x86>
 8004734:	2302      	movs	r3, #2
 8004736:	e00e      	b.n	8004756 <HAL_PCD_EP_ClrStall+0xa4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68f9      	ldr	r1, [r7, #12]
 8004746:	4618      	mov	r0, r3
 8004748:	f004 f942 	bl	80089d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800476a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da0c      	bge.n	800478c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3338      	adds	r3, #56	; 0x38
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e00c      	b.n	80047a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f003 ff65 	bl	800867c <USB_EPStopXfer>
 80047b2:	4603      	mov	r3, r0
 80047b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047b6:	7afb      	ldrb	r3, [r7, #11]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	3338      	adds	r3, #56	; 0x38
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d901      	bls.n	80047f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e067      	b.n	80048c8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	429a      	cmp	r2, r3
 800480c:	d902      	bls.n	8004814 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3303      	adds	r3, #3
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800481c:	e026      	b.n	800486c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	429a      	cmp	r2, r3
 8004832:	d902      	bls.n	800483a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3303      	adds	r3, #3
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68d9      	ldr	r1, [r3, #12]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	b29b      	uxth	r3, r3
 800484e:	6978      	ldr	r0, [r7, #20]
 8004850:	f003 ffbe 	bl	80087d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d809      	bhi.n	8004896 <PCD_WriteEmptyTxFifo+0xd6>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800488a:	429a      	cmp	r2, r3
 800488c:	d203      	bcs.n	8004896 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1c3      	bne.n	800481e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d811      	bhi.n	80048c6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c2:	4013      	ands	r3, r2
 80048c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	333c      	adds	r3, #60	; 0x3c
 80048e8:	3304      	adds	r3, #4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <PCD_EP_OutXfrComplete_int+0x98>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d124      	bne.n	8004950 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	6093      	str	r3, [r2, #8]
 8004924:	e01a      	b.n	800495c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	2320      	movs	r3, #32
 8004940:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f006 fb51 	bl	800aff0 <HAL_PCD_DataOutStageCallback>
 800494e:	e005      	b.n	800495c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f006 fb4a 	bl	800aff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	4f54310a 	.word	0x4f54310a

0800496c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	333c      	adds	r3, #60	; 0x3c
 8004984:	3304      	adds	r3, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <PCD_EP_OutSetupPacket_int+0x64>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d90e      	bls.n	80049c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	461a      	mov	r2, r3
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f006 fb03 	bl	800afcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	4f54300a 	.word	0x4f54300a

080049d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
 80049e0:	4613      	mov	r3, r2
 80049e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049f2:	883b      	ldrh	r3, [r7, #0]
 80049f4:	0419      	lsls	r1, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004a00:	e028      	b.n	8004a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e00d      	b.n	8004a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	3340      	adds	r3, #64	; 0x40
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3ec      	bcc.n	8004a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a3c:	883b      	ldrh	r3, [r7, #0]
 8004a3e:	0418      	lsls	r0, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	4302      	orrs	r2, r0
 8004a4c:	3340      	adds	r3, #64	; 0x40
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	f043 0303 	orr.w	r3, r3, #3
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40007000 	.word	0x40007000

08004b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b16:	d130      	bne.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d038      	beq.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2232      	movs	r2, #50	; 0x32
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0c9b      	lsrs	r3, r3, #18
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4c:	e002      	b.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d102      	bne.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f2      	bne.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b74:	d110      	bne.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b86:	d007      	beq.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b90:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	431bde83 	.word	0x431bde83

08004bb4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc2:	6053      	str	r3, [r2, #4]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40007000 	.word	0x40007000

08004bd4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7fd fb9c 	bl	8002318 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e063      	b.n	8004cb4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fd f843 	bl	8001c8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004c06:	f241 3188 	movw	r1, #5000	; 0x1388
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f858 	bl	8004cc0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	021a      	lsls	r2, r3, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2120      	movs	r1, #32
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f850 	bl	8004cdc <QSPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004c40:	7afb      	ldrb	r3, [r7, #11]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d131      	bne.n	8004caa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6852      	ldr	r2, [r2, #4]
 8004c58:	0611      	lsls	r1, r2, #24
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_QSPI_Init+0xe8>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6912      	ldr	r2, [r2, #16]
 8004c76:	0411      	lsls	r1, r2, #16
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6952      	ldr	r2, [r2, #20]
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6992      	ldr	r2, [r2, #24]
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	ffe0f8fe 	.word	0xffe0f8fe

08004cc0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004cec:	e01a      	b.n	8004d24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d016      	beq.n	8004d24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fd fb0f 	bl	8002318 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	f043 0201 	orr.w	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00e      	b.n	8004d42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d1d6      	bne.n	8004cee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e3ca      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5e:	4b97      	ldr	r3, [pc, #604]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d68:	4b94      	ldr	r3, [pc, #592]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80e4 	beq.w	8004f48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_RCC_OscConfig+0x4a>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	f040 808b 	bne.w	8004ea4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 8087 	bne.w	8004ea4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d96:	4b89      	ldr	r3, [pc, #548]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x62>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e3a2      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1a      	ldr	r2, [r3, #32]
 8004db2:	4b82      	ldr	r3, [pc, #520]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x7c>
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCC_OscConfig+0x88>
 8004dc8:	4b7c      	ldr	r3, [pc, #496]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d223      	bcs.n	8004e20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd55 	bl	800588c <RCC_SetFlashLatencyFromMSIRange>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e383      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dec:	4b73      	ldr	r3, [pc, #460]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a72      	ldr	r2, [pc, #456]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004df2:	f043 0308 	orr.w	r3, r3, #8
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b70      	ldr	r3, [pc, #448]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	496d      	ldr	r1, [pc, #436]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e0a:	4b6c      	ldr	r3, [pc, #432]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	4968      	ldr	r1, [pc, #416]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
 8004e1e:	e025      	b.n	8004e6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e20:	4b66      	ldr	r3, [pc, #408]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a65      	ldr	r2, [pc, #404]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e26:	f043 0308 	orr.w	r3, r3, #8
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b63      	ldr	r3, [pc, #396]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4960      	ldr	r1, [pc, #384]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3e:	4b5f      	ldr	r3, [pc, #380]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	495b      	ldr	r1, [pc, #364]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fd15 	bl	800588c <RCC_SetFlashLatencyFromMSIRange>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e343      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e6c:	f000 fc4a 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	4950      	ldr	r1, [pc, #320]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	4a4e      	ldr	r2, [pc, #312]	; (8004fc4 <HAL_RCC_OscConfig+0x278>)
 8004e8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e8c:	4b4e      	ldr	r3, [pc, #312]	; (8004fc8 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fd f9f1 	bl	8002278 <HAL_InitTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d052      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	e327      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d032      	beq.n	8004f12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eac:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eb8:	f7fd fa2e 	bl	8002318 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ec0:	f7fd fa2a 	bl	8002318 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e310      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ed2:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ede:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ee4:	f043 0308 	orr.w	r3, r3, #8
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b34      	ldr	r3, [pc, #208]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4931      	ldr	r1, [pc, #196]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004efc:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	492c      	ldr	r1, [pc, #176]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
 8004f10:	e01a      	b.n	8004f48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f12:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f1e:	f7fd f9fb 	bl	8002318 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f26:	f7fd f9f7 	bl	8002318 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e2dd      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f38:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x1da>
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d074      	beq.n	800503e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x21a>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d10e      	bne.n	8004f7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d10b      	bne.n	8004f7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f66:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d064      	beq.n	800503c <HAL_RCC_OscConfig+0x2f0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d160      	bne.n	800503c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e2ba      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x24a>
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e026      	b.n	8004fe4 <HAL_RCC_OscConfig+0x298>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9e:	d115      	bne.n	8004fcc <HAL_RCC_OscConfig+0x280>
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a05      	ldr	r2, [pc, #20]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a02      	ldr	r2, [pc, #8]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x298>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	0800e0e0 	.word	0x0800e0e0
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	20000004 	.word	0x20000004
 8004fcc:	4ba0      	ldr	r3, [pc, #640]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a9f      	ldr	r2, [pc, #636]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b9d      	ldr	r3, [pc, #628]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a9c      	ldr	r2, [pc, #624]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fd f994 	bl	8002318 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fd f990 	bl	8002318 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e276      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005006:	4b92      	ldr	r3, [pc, #584]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x2a8>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd f980 	bl	8002318 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800501c:	f7fd f97c 	bl	8002318 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e262      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800502e:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x2d0>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d060      	beq.n	800510c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d005      	beq.n	800505c <HAL_RCC_OscConfig+0x310>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d119      	bne.n	800508a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d116      	bne.n	800508a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800505c:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_OscConfig+0x328>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e23f      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005074:	4b76      	ldr	r3, [pc, #472]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	061b      	lsls	r3, r3, #24
 8005082:	4973      	ldr	r1, [pc, #460]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005088:	e040      	b.n	800510c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d023      	beq.n	80050da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005092:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6e      	ldr	r2, [pc, #440]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd f93b 	bl	8002318 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fd f937 	bl	8002318 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e21d      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	4b65      	ldr	r3, [pc, #404]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b62      	ldr	r3, [pc, #392]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	495f      	ldr	r1, [pc, #380]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	604b      	str	r3, [r1, #4]
 80050d8:	e018      	b.n	800510c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a5c      	ldr	r2, [pc, #368]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80050e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fd f917 	bl	8002318 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ee:	f7fd f913 	bl	8002318 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e1f9      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03c      	beq.n	8005192 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01c      	beq.n	800515a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005120:	4b4b      	ldr	r3, [pc, #300]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005126:	4a4a      	ldr	r2, [pc, #296]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fd f8f2 	bl	8002318 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005138:	f7fd f8ee 	bl	8002318 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1d4      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800514a:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800514c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ef      	beq.n	8005138 <HAL_RCC_OscConfig+0x3ec>
 8005158:	e01b      	b.n	8005192 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005160:	4a3b      	ldr	r2, [pc, #236]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fd f8d5 	bl	8002318 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005172:	f7fd f8d1 	bl	8002318 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1b7      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ef      	bne.n	8005172 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80a6 	beq.w	80052ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a0:	2300      	movs	r3, #0
 80051a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10d      	bne.n	80051cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a26      	ldr	r2, [pc, #152]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c8:	2301      	movs	r3, #1
 80051ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_RCC_OscConfig+0x508>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d118      	bne.n	800520a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCC_OscConfig+0x508>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <HAL_RCC_OscConfig+0x508>)
 80051de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e4:	f7fd f898 	bl	8002318 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ec:	f7fd f894 	bl	8002318 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e17a      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <HAL_RCC_OscConfig+0x508>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d108      	bne.n	8005224 <HAL_RCC_OscConfig+0x4d8>
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005222:	e029      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d115      	bne.n	8005258 <HAL_RCC_OscConfig+0x50c>
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	4a07      	ldr	r2, [pc, #28]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005234:	f043 0304 	orr.w	r3, r3, #4
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	4a03      	ldr	r2, [pc, #12]	; (8005250 <HAL_RCC_OscConfig+0x504>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800524c:	e014      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000
 8005254:	40007000 	.word	0x40007000
 8005258:	4b9c      	ldr	r3, [pc, #624]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	4a9b      	ldr	r2, [pc, #620]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005268:	4b98      	ldr	r3, [pc, #608]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	4a97      	ldr	r2, [pc, #604]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d016      	beq.n	80052ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fd f84a 	bl	8002318 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fd f846 	bl	8002318 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e12a      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529e:	4b8b      	ldr	r3, [pc, #556]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ed      	beq.n	8005288 <HAL_RCC_OscConfig+0x53c>
 80052ac:	e015      	b.n	80052da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fd f833 	bl	8002318 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b4:	e00a      	b.n	80052cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fd f82f 	bl	8002318 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e113      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052cc:	4b7f      	ldr	r3, [pc, #508]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1ed      	bne.n	80052b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052da:	7ffb      	ldrb	r3, [r7, #31]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e0:	4b7a      	ldr	r3, [pc, #488]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	4a79      	ldr	r2, [pc, #484]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80fe 	beq.w	80054f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	f040 80d0 	bne.w	80054a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005300:	4b72      	ldr	r3, [pc, #456]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0203 	and.w	r2, r3, #3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	429a      	cmp	r2, r3
 8005312:	d130      	bne.n	8005376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	3b01      	subs	r3, #1
 8005320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d127      	bne.n	8005376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11f      	bne.n	8005376 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005340:	2a07      	cmp	r2, #7
 8005342:	bf14      	ite	ne
 8005344:	2201      	movne	r2, #1
 8005346:	2200      	moveq	r2, #0
 8005348:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800534a:	4293      	cmp	r3, r2
 800534c:	d113      	bne.n	8005376 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	3b01      	subs	r3, #1
 800535c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d109      	bne.n	8005376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d06e      	beq.n	8005454 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b0c      	cmp	r3, #12
 800537a:	d069      	beq.n	8005450 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005388:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0ad      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005398:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4b      	ldr	r2, [pc, #300]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053a4:	f7fc ffb8 	bl	8002318 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fc ffb4 	bl	8002318 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e09a      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053be:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ca:	4b40      	ldr	r3, [pc, #256]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_RCC_OscConfig+0x784>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053da:	3a01      	subs	r2, #1
 80053dc:	0112      	lsls	r2, r2, #4
 80053de:	4311      	orrs	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e4:	0212      	lsls	r2, r2, #8
 80053e6:	4311      	orrs	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053ec:	0852      	lsrs	r2, r2, #1
 80053ee:	3a01      	subs	r2, #1
 80053f0:	0552      	lsls	r2, r2, #21
 80053f2:	4311      	orrs	r1, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053f8:	0852      	lsrs	r2, r2, #1
 80053fa:	3a01      	subs	r2, #1
 80053fc:	0652      	lsls	r2, r2, #25
 80053fe:	4311      	orrs	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005404:	0912      	lsrs	r2, r2, #4
 8005406:	0452      	lsls	r2, r2, #17
 8005408:	430a      	orrs	r2, r1
 800540a:	4930      	ldr	r1, [pc, #192]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800540c:	4313      	orrs	r3, r2
 800540e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005410:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005426:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005428:	f7fc ff76 	bl	8002318 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fc ff72 	bl	8002318 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e058      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800544e:	e050      	b.n	80054f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e04f      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d148      	bne.n	80054f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005478:	f7fc ff4e 	bl	8002318 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005480:	f7fc ff4a 	bl	8002318 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e030      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x734>
 800549e:	e028      	b.n	80054f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d023      	beq.n	80054ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a08      	ldr	r2, [pc, #32]	; (80054cc <HAL_RCC_OscConfig+0x780>)
 80054ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fc ff31 	bl	8002318 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b8:	e00c      	b.n	80054d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fc ff2d 	bl	8002318 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d905      	bls.n	80054d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e013      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_OscConfig+0x7b0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ec      	bne.n	80054ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_OscConfig+0x7b0>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4905      	ldr	r1, [pc, #20]	; (80054fc <HAL_RCC_OscConfig+0x7b0>)
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_RCC_OscConfig+0x7b4>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	60cb      	str	r3, [r1, #12]
 80054ec:	e001      	b.n	80054f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	feeefffc 	.word	0xfeeefffc

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0e7      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b75      	ldr	r3, [pc, #468]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d910      	bls.n	8005548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b72      	ldr	r3, [pc, #456]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 0207 	bic.w	r2, r3, #7
 800552e:	4970      	ldr	r1, [pc, #448]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b6e      	ldr	r3, [pc, #440]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0cf      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b66      	ldr	r3, [pc, #408]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005560:	429a      	cmp	r2, r3
 8005562:	d908      	bls.n	8005576 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b63      	ldr	r3, [pc, #396]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4960      	ldr	r1, [pc, #384]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d04c      	beq.n	800561c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558a:	4b5a      	ldr	r3, [pc, #360]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d121      	bne.n	80055da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0a6      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055a2:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d115      	bne.n	80055da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e09a      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055ba:	4b4e      	ldr	r3, [pc, #312]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e08e      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ca:	4b4a      	ldr	r3, [pc, #296]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e086      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055da:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 0203 	bic.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4943      	ldr	r1, [pc, #268]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fc fe94 	bl	8002318 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	e00a      	b.n	800560a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f4:	f7fc fe90 	bl	8002318 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e06e      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 020c 	and.w	r2, r3, #12
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	429a      	cmp	r2, r3
 800561a:	d1eb      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005634:	429a      	cmp	r2, r3
 8005636:	d208      	bcs.n	800564a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	492b      	ldr	r1, [pc, #172]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800564a:	4b29      	ldr	r3, [pc, #164]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d210      	bcs.n	800567a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005658:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 0207 	bic.w	r2, r3, #7
 8005660:	4923      	ldr	r1, [pc, #140]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_RCC_ClockConfig+0x1ec>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e036      	b.n	80056e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005686:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4918      	ldr	r1, [pc, #96]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4910      	ldr	r1, [pc, #64]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056b8:	f000 f824 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	490b      	ldr	r1, [pc, #44]	; (80056f8 <HAL_RCC_ClockConfig+0x1f4>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	4a09      	ldr	r2, [pc, #36]	; (80056fc <HAL_RCC_ClockConfig+0x1f8>)
 80056d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_RCC_ClockConfig+0x1fc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fc fdcb 	bl	8002278 <HAL_InitTick>
 80056e2:	4603      	mov	r3, r0
 80056e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80056e6:	7afb      	ldrb	r3, [r7, #11]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40022000 	.word	0x40022000
 80056f4:	40021000 	.word	0x40021000
 80056f8:	0800e0e0 	.word	0x0800e0e0
 80056fc:	20000000 	.word	0x20000000
 8005700:	20000004 	.word	0x20000004

08005704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800571c:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x34>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d121      	bne.n	8005776 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11e      	bne.n	8005776 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005738:	4b34      	ldr	r3, [pc, #208]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005744:	4b31      	ldr	r3, [pc, #196]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 8005746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e005      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005774:	e00a      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d102      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <HAL_RCC_GetSysClockFreq+0x110>)
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e004      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d101      	bne.n	800578c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <HAL_RCC_GetSysClockFreq+0x114>)
 800578a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d134      	bne.n	80057fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005792:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d003      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0xa6>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d003      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0xac>
 80057a8:	e005      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057aa:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <HAL_RCC_GetSysClockFreq+0x110>)
 80057ac:	617b      	str	r3, [r7, #20]
      break;
 80057ae:	e005      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_RCC_GetSysClockFreq+0x114>)
 80057b2:	617b      	str	r3, [r7, #20]
      break;
 80057b4:	e002      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	617b      	str	r3, [r7, #20]
      break;
 80057ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057bc:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	3301      	adds	r3, #1
 80057c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	fb03 f202 	mul.w	r2, r3, r2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCC_GetSysClockFreq+0x108>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	0e5b      	lsrs	r3, r3, #25
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	3301      	adds	r3, #1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057fc:	69bb      	ldr	r3, [r7, #24]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3724      	adds	r7, #36	; 0x24
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	0800e0f8 	.word	0x0800e0f8
 8005814:	00f42400 	.word	0x00f42400
 8005818:	007a1200 	.word	0x007a1200

0800581c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <HAL_RCC_GetHCLKFreq+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000000 	.word	0x20000000

08005834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005838:	f7ff fff0 	bl	800581c <HAL_RCC_GetHCLKFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4904      	ldr	r1, [pc, #16]	; (800585c <HAL_RCC_GetPCLK1Freq+0x28>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40021000 	.word	0x40021000
 800585c:	0800e0f0 	.word	0x0800e0f0

08005860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005864:	f7ff ffda 	bl	800581c <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0adb      	lsrs	r3, r3, #11
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000
 8005888:	0800e0f0 	.word	0x0800e0f0

0800588c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005898:	4b2a      	ldr	r3, [pc, #168]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058a4:	f7ff f922 	bl	8004aec <HAL_PWREx_GetVoltageRange>
 80058a8:	6178      	str	r0, [r7, #20]
 80058aa:	e014      	b.n	80058d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58
 80058b8:	4b22      	ldr	r3, [pc, #136]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058c4:	f7ff f912 	bl	8004aec <HAL_PWREx_GetVoltageRange>
 80058c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d10b      	bne.n	80058f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d919      	bls.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2ba0      	cmp	r3, #160	; 0xa0
 80058e8:	d902      	bls.n	80058f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058ea:	2302      	movs	r3, #2
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	e013      	b.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058f0:	2301      	movs	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e010      	b.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d902      	bls.n	8005902 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058fc:	2303      	movs	r3, #3
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e00a      	b.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d102      	bne.n	800590e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005908:	2302      	movs	r3, #2
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e004      	b.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b70      	cmp	r3, #112	; 0x70
 8005912:	d101      	bne.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005914:	2301      	movs	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f023 0207 	bic.w	r2, r3, #7
 8005920:	4909      	ldr	r1, [pc, #36]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d001      	beq.n	800593a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000
 8005948:	40022000 	.word	0x40022000

0800594c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005954:	2300      	movs	r3, #0
 8005956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005958:	2300      	movs	r3, #0
 800595a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	2b00      	cmp	r3, #0
 8005966:	d041      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005970:	d02a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005972:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005976:	d824      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800597c:	d008      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800597e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005982:	d81e      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598c:	d010      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800598e:	e018      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005990:	4b86      	ldr	r3, [pc, #536]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a85      	ldr	r2, [pc, #532]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800599c:	e015      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 facb 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ae:	e00c      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3320      	adds	r3, #32
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fbb6 	bl	8006128 <RCCEx_PLLSAI2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	74fb      	strb	r3, [r7, #19]
      break;
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d0:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059de:	4973      	ldr	r1, [pc, #460]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059e6:	e001      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d041      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a00:	d02a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a06:	d824      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a0c:	d008      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a12:	d81e      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a1e:	e018      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a20:	4b62      	ldr	r3, [pc, #392]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a2c:	e015      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fa83 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a3e:	e00c      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3320      	adds	r3, #32
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb6e 	bl	8006128 <RCCEx_PLLSAI2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a50:	e003      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	74fb      	strb	r3, [r7, #19]
      break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a60:	4b52      	ldr	r3, [pc, #328]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6e:	494f      	ldr	r1, [pc, #316]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a76:	e001      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	7cfb      	ldrb	r3, [r7, #19]
 8005a7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80a0 	beq.w	8005bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a8e:	4b47      	ldr	r3, [pc, #284]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa4:	4b41      	ldr	r3, [pc, #260]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa8:	4a40      	ldr	r2, [pc, #256]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005abc:	2301      	movs	r3, #1
 8005abe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005acc:	f7fc fc24 	bl	8002318 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ad2:	e009      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad4:	f7fc fc20 	bl	8002318 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d902      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	74fb      	strb	r3, [r7, #19]
        break;
 8005ae6:	e005      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ae8:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ef      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d15c      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01f      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d019      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	4a20      	ldr	r2, [pc, #128]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d016      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc fbdf 	bl	8002318 <HAL_GetTick>
 8005b5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5c:	e00b      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fc fbdb 	bl	8002318 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d902      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	74fb      	strb	r3, [r7, #19]
            break;
 8005b74:	e006      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0ec      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	4904      	ldr	r1, [pc, #16]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ba2:	e009      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
 8005ba8:	e006      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	7cfb      	ldrb	r3, [r7, #19]
 8005bb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb8:	7c7b      	ldrb	r3, [r7, #17]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b9e      	ldr	r3, [pc, #632]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc2:	4a9d      	ldr	r2, [pc, #628]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bd6:	4b98      	ldr	r3, [pc, #608]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f023 0203 	bic.w	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	4994      	ldr	r1, [pc, #592]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf8:	4b8f      	ldr	r3, [pc, #572]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 020c 	bic.w	r2, r3, #12
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	498c      	ldr	r1, [pc, #560]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c1a:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4983      	ldr	r1, [pc, #524]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c3c:	4b7e      	ldr	r3, [pc, #504]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	497b      	ldr	r1, [pc, #492]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5e:	4b76      	ldr	r3, [pc, #472]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6c:	4972      	ldr	r1, [pc, #456]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c80:	4b6d      	ldr	r3, [pc, #436]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	496a      	ldr	r1, [pc, #424]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ca2:	4b65      	ldr	r3, [pc, #404]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb0:	4961      	ldr	r1, [pc, #388]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc4:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	4959      	ldr	r1, [pc, #356]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ce6:	4b54      	ldr	r3, [pc, #336]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	4950      	ldr	r1, [pc, #320]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d08:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	4948      	ldr	r1, [pc, #288]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d2a:	4b43      	ldr	r3, [pc, #268]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	493f      	ldr	r1, [pc, #252]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d028      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d4c:	4b3a      	ldr	r3, [pc, #232]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5a:	4937      	ldr	r1, [pc, #220]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a31      	ldr	r2, [pc, #196]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
 8005d78:	e011      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f8d8 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d94:	7cfb      	ldrb	r3, [r7, #19]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
 8005d9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	491f      	ldr	r1, [pc, #124]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc8:	d106      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dd4:	60d3      	str	r3, [r2, #12]
 8005dd6:	e011      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3304      	adds	r3, #4
 8005de6:	2101      	movs	r1, #1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f8a9 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005df2:	7cfb      	ldrb	r3, [r7, #19]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005df8:	7cfb      	ldrb	r3, [r7, #19]
 8005dfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02b      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	4908      	ldr	r1, [pc, #32]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e26:	d109      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a02      	ldr	r2, [pc, #8]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e32:	60d3      	str	r3, [r2, #12]
 8005e34:	e014      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e44:	d10c      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f877 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02f      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e6c:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7a:	4928      	ldr	r1, [pc, #160]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8a:	d10d      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f854 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9c:	7cfb      	ldrb	r3, [r7, #19]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d014      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	74bb      	strb	r3, [r7, #18]
 8005ea6:	e011      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3320      	adds	r3, #32
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 f935 	bl	8006128 <RCCEx_PLLSAI2_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ec2:	7cfb      	ldrb	r3, [r7, #19]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ed8:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee6:	490d      	ldr	r1, [pc, #52]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0a:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f12:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000

08005f20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f2a:	f043 0304 	orr.w	r3, r3, #4
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000

08005f40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f4e:	4b75      	ldr	r3, [pc, #468]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f5a:	4b72      	ldr	r3, [pc, #456]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10d      	bne.n	8005f86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f72:	4b6c      	ldr	r3, [pc, #432]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
       ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d047      	beq.n	8006016 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e044      	b.n	8006016 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d018      	beq.n	8005fc6 <RCCEx_PLLSAI1_Config+0x86>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d825      	bhi.n	8005fe4 <RCCEx_PLLSAI1_Config+0xa4>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d002      	beq.n	8005fa2 <RCCEx_PLLSAI1_Config+0x62>
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d009      	beq.n	8005fb4 <RCCEx_PLLSAI1_Config+0x74>
 8005fa0:	e020      	b.n	8005fe4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa2:	4b60      	ldr	r3, [pc, #384]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb2:	e01a      	b.n	8005fea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb4:	4b5b      	ldr	r3, [pc, #364]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d116      	bne.n	8005fee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc4:	e013      	b.n	8005fee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fc6:	4b57      	ldr	r3, [pc, #348]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10f      	bne.n	8005ff2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd2:	4b54      	ldr	r3, [pc, #336]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe2:	e006      	b.n	8005ff2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e004      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	430b      	orrs	r3, r1
 8006010:	4944      	ldr	r1, [pc, #272]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d17d      	bne.n	8006118 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a40      	ldr	r2, [pc, #256]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006028:	f7fc f976 	bl	8002318 <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800602e:	e009      	b.n	8006044 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006030:	f7fc f972 	bl	8002318 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d902      	bls.n	8006044 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e005      	b.n	8006050 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006044:	4b37      	ldr	r3, [pc, #220]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ef      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d160      	bne.n	8006118 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d111      	bne.n	8006080 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	0912      	lsrs	r2, r2, #4
 8006074:	0452      	lsls	r2, r2, #17
 8006076:	430a      	orrs	r2, r1
 8006078:	492a      	ldr	r1, [pc, #168]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	610b      	str	r3, [r1, #16]
 800607e:	e027      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d112      	bne.n	80060ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800608e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6892      	ldr	r2, [r2, #8]
 8006096:	0211      	lsls	r1, r2, #8
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6912      	ldr	r2, [r2, #16]
 800609c:	0852      	lsrs	r2, r2, #1
 800609e:	3a01      	subs	r2, #1
 80060a0:	0552      	lsls	r2, r2, #21
 80060a2:	430a      	orrs	r2, r1
 80060a4:	491f      	ldr	r1, [pc, #124]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	610b      	str	r3, [r1, #16]
 80060aa:	e011      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6892      	ldr	r2, [r2, #8]
 80060bc:	0211      	lsls	r1, r2, #8
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6952      	ldr	r2, [r2, #20]
 80060c2:	0852      	lsrs	r2, r2, #1
 80060c4:	3a01      	subs	r2, #1
 80060c6:	0652      	lsls	r2, r2, #25
 80060c8:	430a      	orrs	r2, r1
 80060ca:	4916      	ldr	r1, [pc, #88]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060d0:	4b14      	ldr	r3, [pc, #80]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fc f91c 	bl	8002318 <HAL_GetTick>
 80060e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060e2:	e009      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060e4:	f7fc f918 	bl	8002318 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d902      	bls.n	80060f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	73fb      	strb	r3, [r7, #15]
          break;
 80060f6:	e005      	b.n	8006104 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0ef      	beq.n	80060e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800610a:	4b06      	ldr	r3, [pc, #24]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	4904      	ldr	r1, [pc, #16]	; (8006124 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006114:	4313      	orrs	r3, r2
 8006116:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000

08006128 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006136:	4b6a      	ldr	r3, [pc, #424]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d018      	beq.n	8006174 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006142:	4b67      	ldr	r3, [pc, #412]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0203 	and.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d10d      	bne.n	800616e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
       ||
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800615a:	4b61      	ldr	r3, [pc, #388]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
       ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d047      	beq.n	80061fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	e044      	b.n	80061fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d018      	beq.n	80061ae <RCCEx_PLLSAI2_Config+0x86>
 800617c:	2b03      	cmp	r3, #3
 800617e:	d825      	bhi.n	80061cc <RCCEx_PLLSAI2_Config+0xa4>
 8006180:	2b01      	cmp	r3, #1
 8006182:	d002      	beq.n	800618a <RCCEx_PLLSAI2_Config+0x62>
 8006184:	2b02      	cmp	r3, #2
 8006186:	d009      	beq.n	800619c <RCCEx_PLLSAI2_Config+0x74>
 8006188:	e020      	b.n	80061cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800618a:	4b55      	ldr	r3, [pc, #340]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d11d      	bne.n	80061d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619a:	e01a      	b.n	80061d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800619c:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ac:	e013      	b.n	80061d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061ae:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10f      	bne.n	80061da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061ba:	4b49      	ldr	r3, [pc, #292]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061ca:	e006      	b.n	80061da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
      break;
 80061d0:	e004      	b.n	80061dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061d2:	bf00      	nop
 80061d4:	e002      	b.n	80061dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061d6:	bf00      	nop
 80061d8:	e000      	b.n	80061dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061da:	bf00      	nop
    }

    if(status == HAL_OK)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10d      	bne.n	80061fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061e2:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	430b      	orrs	r3, r1
 80061f8:	4939      	ldr	r1, [pc, #228]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d167      	bne.n	80062d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006204:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a35      	ldr	r2, [pc, #212]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800620a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006210:	f7fc f882 	bl	8002318 <HAL_GetTick>
 8006214:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006216:	e009      	b.n	800622c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006218:	f7fc f87e 	bl	8002318 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d902      	bls.n	800622c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	73fb      	strb	r3, [r7, #15]
        break;
 800622a:	e005      	b.n	8006238 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800622c:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1ef      	bne.n	8006218 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d14a      	bne.n	80062d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d111      	bne.n	8006268 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800624c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6892      	ldr	r2, [r2, #8]
 8006254:	0211      	lsls	r1, r2, #8
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68d2      	ldr	r2, [r2, #12]
 800625a:	0912      	lsrs	r2, r2, #4
 800625c:	0452      	lsls	r2, r2, #17
 800625e:	430a      	orrs	r2, r1
 8006260:	491f      	ldr	r1, [pc, #124]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006262:	4313      	orrs	r3, r2
 8006264:	614b      	str	r3, [r1, #20]
 8006266:	e011      	b.n	800628c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006270:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6892      	ldr	r2, [r2, #8]
 8006278:	0211      	lsls	r1, r2, #8
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6912      	ldr	r2, [r2, #16]
 800627e:	0852      	lsrs	r2, r2, #1
 8006280:	3a01      	subs	r2, #1
 8006282:	0652      	lsls	r2, r2, #25
 8006284:	430a      	orrs	r2, r1
 8006286:	4916      	ldr	r1, [pc, #88]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006288:	4313      	orrs	r3, r2
 800628a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006298:	f7fc f83e 	bl	8002318 <HAL_GetTick>
 800629c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800629e:	e009      	b.n	80062b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a0:	f7fc f83a 	bl	8002318 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d902      	bls.n	80062b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	73fb      	strb	r3, [r7, #15]
          break;
 80062b2:	e005      	b.n	80062c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ef      	beq.n	80062a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4904      	ldr	r1, [pc, #16]	; (80062e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e095      	b.n	8006422 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006306:	d009      	beq.n	800631c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	61da      	str	r2, [r3, #28]
 800630e:	e005      	b.n	800631c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb fcec 	bl	8001d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006352:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800635c:	d902      	bls.n	8006364 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e002      	b.n	800636a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006368:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006372:	d007      	beq.n	8006384 <HAL_SPI_Init+0xa0>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800637c:	d002      	beq.n	8006384 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	ea42 0103 	orr.w	r1, r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f003 0204 	and.w	r2, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006400:	ea42 0103 	orr.w	r1, r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e049      	b.n	80064d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fb fca3 	bl	8001d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 f949 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e0ff      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b14      	cmp	r3, #20
 8006502:	f200 80f0 	bhi.w	80066e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006561 	.word	0x08006561
 8006510:	080066e7 	.word	0x080066e7
 8006514:	080066e7 	.word	0x080066e7
 8006518:	080066e7 	.word	0x080066e7
 800651c:	080065a1 	.word	0x080065a1
 8006520:	080066e7 	.word	0x080066e7
 8006524:	080066e7 	.word	0x080066e7
 8006528:	080066e7 	.word	0x080066e7
 800652c:	080065e3 	.word	0x080065e3
 8006530:	080066e7 	.word	0x080066e7
 8006534:	080066e7 	.word	0x080066e7
 8006538:	080066e7 	.word	0x080066e7
 800653c:	08006623 	.word	0x08006623
 8006540:	080066e7 	.word	0x080066e7
 8006544:	080066e7 	.word	0x080066e7
 8006548:	080066e7 	.word	0x080066e7
 800654c:	08006665 	.word	0x08006665
 8006550:	080066e7 	.word	0x080066e7
 8006554:	080066e7 	.word	0x080066e7
 8006558:	080066e7 	.word	0x080066e7
 800655c:	080066a5 	.word	0x080066a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f964 	bl	8006834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0208 	orr.w	r2, r2, #8
 800657a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0204 	bic.w	r2, r2, #4
 800658a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6999      	ldr	r1, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	619a      	str	r2, [r3, #24]
      break;
 800659e:	e0a5      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f9d4 	bl	8006954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	619a      	str	r2, [r3, #24]
      break;
 80065e0:	e084      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fa3d 	bl	8006a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0208 	orr.w	r2, r2, #8
 80065fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0204 	bic.w	r2, r2, #4
 800660c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	61da      	str	r2, [r3, #28]
      break;
 8006620:	e064      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 faa5 	bl	8006b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	021a      	lsls	r2, r3, #8
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	61da      	str	r2, [r3, #28]
      break;
 8006662:	e043      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 faee 	bl	8006c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0208 	orr.w	r2, r2, #8
 800667e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0204 	bic.w	r2, r2, #4
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066a2:	e023      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fb32 	bl	8006d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066e4:	e002      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a40      	ldr	r2, [pc, #256]	; (8006814 <TIM_Base_SetConfig+0x114>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3d      	ldr	r2, [pc, #244]	; (8006818 <TIM_Base_SetConfig+0x118>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3c      	ldr	r2, [pc, #240]	; (800681c <TIM_Base_SetConfig+0x11c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3a      	ldr	r2, [pc, #232]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d108      	bne.n	8006752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <TIM_Base_SetConfig+0x114>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <TIM_Base_SetConfig+0x118>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2b      	ldr	r2, [pc, #172]	; (800681c <TIM_Base_SetConfig+0x11c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <TIM_Base_SetConfig+0x120>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a29      	ldr	r2, [pc, #164]	; (8006824 <TIM_Base_SetConfig+0x124>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a28      	ldr	r2, [pc, #160]	; (8006828 <TIM_Base_SetConfig+0x128>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <TIM_Base_SetConfig+0x12c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a26      	ldr	r2, [pc, #152]	; (8006830 <TIM_Base_SetConfig+0x130>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a10      	ldr	r2, [pc, #64]	; (8006814 <TIM_Base_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a11      	ldr	r2, [pc, #68]	; (8006828 <TIM_Base_SetConfig+0x128>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a10      	ldr	r2, [pc, #64]	; (800682c <TIM_Base_SetConfig+0x12c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <TIM_Base_SetConfig+0x130>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d103      	bne.n	8006800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	615a      	str	r2, [r3, #20]
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800

08006834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f023 0201 	bic.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0302 	bic.w	r3, r3, #2
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a2c      	ldr	r2, [pc, #176]	; (8006940 <TIM_OC1_SetConfig+0x10c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_OC1_SetConfig+0x80>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2b      	ldr	r2, [pc, #172]	; (8006944 <TIM_OC1_SetConfig+0x110>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_OC1_SetConfig+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a2a      	ldr	r2, [pc, #168]	; (8006948 <TIM_OC1_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC1_SetConfig+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a29      	ldr	r2, [pc, #164]	; (800694c <TIM_OC1_SetConfig+0x118>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC1_SetConfig+0x80>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a28      	ldr	r2, [pc, #160]	; (8006950 <TIM_OC1_SetConfig+0x11c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d10c      	bne.n	80068ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0308 	bic.w	r3, r3, #8
 80068ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 0304 	bic.w	r3, r3, #4
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <TIM_OC1_SetConfig+0x10c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_OC1_SetConfig+0xc2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1a      	ldr	r2, [pc, #104]	; (8006944 <TIM_OC1_SetConfig+0x110>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_OC1_SetConfig+0xc2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a19      	ldr	r2, [pc, #100]	; (8006948 <TIM_OC1_SetConfig+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_OC1_SetConfig+0xc2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <TIM_OC1_SetConfig+0x118>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC1_SetConfig+0xc2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <TIM_OC1_SetConfig+0x11c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f023 0210 	bic.w	r2, r3, #16
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0320 	bic.w	r3, r3, #32
 80069a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <TIM_OC2_SetConfig+0x100>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC2_SetConfig+0x6c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <TIM_OC2_SetConfig+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <TIM_OC2_SetConfig+0x100>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC2_SetConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <TIM_OC2_SetConfig+0x104>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC2_SetConfig+0xb0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <TIM_OC2_SetConfig+0x108>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC2_SetConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <TIM_OC2_SetConfig+0x10c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC2_SetConfig+0xb0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <TIM_OC2_SetConfig+0x110>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d113      	bne.n	8006a2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800

08006a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <TIM_OC3_SetConfig+0xfc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x6a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <TIM_OC3_SetConfig+0x100>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10d      	bne.n	8006aee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <TIM_OC3_SetConfig+0xfc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00f      	beq.n	8006b16 <TIM_OC3_SetConfig+0xae>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <TIM_OC3_SetConfig+0x100>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <TIM_OC3_SetConfig+0xae>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <TIM_OC3_SetConfig+0x104>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d007      	beq.n	8006b16 <TIM_OC3_SetConfig+0xae>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <TIM_OC3_SetConfig+0x108>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0xae>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <TIM_OC3_SetConfig+0x10c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800

08006b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	031b      	lsls	r3, r3, #12
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <TIM_OC4_SetConfig+0xc0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00f      	beq.n	8006bfc <TIM_OC4_SetConfig+0x84>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <TIM_OC4_SetConfig+0xc4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_OC4_SetConfig+0x84>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <TIM_OC4_SetConfig+0xc8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_OC4_SetConfig+0x84>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <TIM_OC4_SetConfig+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC4_SetConfig+0x84>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <TIM_OC4_SetConfig+0xd0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d109      	bne.n	8006c10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	019b      	lsls	r3, r3, #6
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <TIM_OC5_SetConfig+0xb4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00f      	beq.n	8006cc6 <TIM_OC5_SetConfig+0x7a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <TIM_OC5_SetConfig+0xb8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <TIM_OC5_SetConfig+0x7a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <TIM_OC5_SetConfig+0xbc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d007      	beq.n	8006cc6 <TIM_OC5_SetConfig+0x7a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <TIM_OC5_SetConfig+0xc0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC5_SetConfig+0x7a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <TIM_OC5_SetConfig+0xc4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d109      	bne.n	8006cda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40013400 	.word	0x40013400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800

08006d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	051b      	lsls	r3, r3, #20
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <TIM_OC6_SetConfig+0xb8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00f      	beq.n	8006d90 <TIM_OC6_SetConfig+0x7c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a17      	ldr	r2, [pc, #92]	; (8006dd0 <TIM_OC6_SetConfig+0xbc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_OC6_SetConfig+0x7c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <TIM_OC6_SetConfig+0xc0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d007      	beq.n	8006d90 <TIM_OC6_SetConfig+0x7c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <TIM_OC6_SetConfig+0xc4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_OC6_SetConfig+0x7c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <TIM_OC6_SetConfig+0xc8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d109      	bne.n	8006da4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e068      	b.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2e      	ldr	r2, [pc, #184]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d108      	bne.n	8006e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6a:	d018      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a13      	ldr	r2, [pc, #76]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40014000 	.word	0x40014000

08006ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e040      	b.n	8006f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa ff94 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fae0 	bl	80074fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f825 	bl	8006f8c <UART_SetConfig>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e01b      	b.n	8006f84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb5f 	bl	8007640 <UART_CheckIdleState>
 8006f82:	4603      	mov	r3, r0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b08a      	sub	sp, #40	; 0x28
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4ba4      	ldr	r3, [pc, #656]	; (800724c <UART_SetConfig+0x2c0>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a99      	ldr	r2, [pc, #612]	; (8007250 <UART_SetConfig+0x2c4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a90      	ldr	r2, [pc, #576]	; (8007254 <UART_SetConfig+0x2c8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d126      	bne.n	8007064 <UART_SetConfig+0xd8>
 8007016:	4b90      	ldr	r3, [pc, #576]	; (8007258 <UART_SetConfig+0x2cc>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d81b      	bhi.n	800705c <UART_SetConfig+0xd0>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0xa0>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007045 	.word	0x08007045
 8007038:	08007055 	.word	0x08007055
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e116      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e112      	b.n	8007272 <UART_SetConfig+0x2e6>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e10e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e10a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e106      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a7c      	ldr	r2, [pc, #496]	; (800725c <UART_SetConfig+0x2d0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d138      	bne.n	80070e0 <UART_SetConfig+0x154>
 800706e:	4b7a      	ldr	r3, [pc, #488]	; (8007258 <UART_SetConfig+0x2cc>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007074:	f003 030c 	and.w	r3, r3, #12
 8007078:	2b0c      	cmp	r3, #12
 800707a:	d82d      	bhi.n	80070d8 <UART_SetConfig+0x14c>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0xf8>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070d9 	.word	0x080070d9
 800708c:	080070d9 	.word	0x080070d9
 8007090:	080070d9 	.word	0x080070d9
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070d9 	.word	0x080070d9
 800709c:	080070d9 	.word	0x080070d9
 80070a0:	080070d9 	.word	0x080070d9
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e0d8      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e0d4      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ce:	e0d0      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d6:	e0cc      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070de:	e0c8      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a5e      	ldr	r2, [pc, #376]	; (8007260 <UART_SetConfig+0x2d4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d125      	bne.n	8007136 <UART_SetConfig+0x1aa>
 80070ea:	4b5b      	ldr	r3, [pc, #364]	; (8007258 <UART_SetConfig+0x2cc>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f4:	2b30      	cmp	r3, #48	; 0x30
 80070f6:	d016      	beq.n	8007126 <UART_SetConfig+0x19a>
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d818      	bhi.n	800712e <UART_SetConfig+0x1a2>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d00a      	beq.n	8007116 <UART_SetConfig+0x18a>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d814      	bhi.n	800712e <UART_SetConfig+0x1a2>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <UART_SetConfig+0x182>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d008      	beq.n	800711e <UART_SetConfig+0x192>
 800710c:	e00f      	b.n	800712e <UART_SetConfig+0x1a2>
 800710e:	2300      	movs	r3, #0
 8007110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007114:	e0ad      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007116:	2302      	movs	r3, #2
 8007118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711c:	e0a9      	b.n	8007272 <UART_SetConfig+0x2e6>
 800711e:	2304      	movs	r3, #4
 8007120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007124:	e0a5      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007126:	2308      	movs	r3, #8
 8007128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712c:	e0a1      	b.n	8007272 <UART_SetConfig+0x2e6>
 800712e:	2310      	movs	r3, #16
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007134:	e09d      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4a      	ldr	r2, [pc, #296]	; (8007264 <UART_SetConfig+0x2d8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d125      	bne.n	800718c <UART_SetConfig+0x200>
 8007140:	4b45      	ldr	r3, [pc, #276]	; (8007258 <UART_SetConfig+0x2cc>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714a:	2bc0      	cmp	r3, #192	; 0xc0
 800714c:	d016      	beq.n	800717c <UART_SetConfig+0x1f0>
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d818      	bhi.n	8007184 <UART_SetConfig+0x1f8>
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d00a      	beq.n	800716c <UART_SetConfig+0x1e0>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d814      	bhi.n	8007184 <UART_SetConfig+0x1f8>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <UART_SetConfig+0x1d8>
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d008      	beq.n	8007174 <UART_SetConfig+0x1e8>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x1f8>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716a:	e082      	b.n	8007272 <UART_SetConfig+0x2e6>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007172:	e07e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717a:	e07a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007182:	e076      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718a:	e072      	b.n	8007272 <UART_SetConfig+0x2e6>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a35      	ldr	r2, [pc, #212]	; (8007268 <UART_SetConfig+0x2dc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d12a      	bne.n	80071ec <UART_SetConfig+0x260>
 8007196:	4b30      	ldr	r3, [pc, #192]	; (8007258 <UART_SetConfig+0x2cc>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a4:	d01a      	beq.n	80071dc <UART_SetConfig+0x250>
 80071a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071aa:	d81b      	bhi.n	80071e4 <UART_SetConfig+0x258>
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b0:	d00c      	beq.n	80071cc <UART_SetConfig+0x240>
 80071b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b6:	d815      	bhi.n	80071e4 <UART_SetConfig+0x258>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x238>
 80071bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x248>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x258>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ca:	e052      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d2:	e04e      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071da:	e04a      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e2:	e046      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ea:	e042      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <UART_SetConfig+0x2c4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d13a      	bne.n	800726c <UART_SetConfig+0x2e0>
 80071f6:	4b18      	ldr	r3, [pc, #96]	; (8007258 <UART_SetConfig+0x2cc>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007204:	d01a      	beq.n	800723c <UART_SetConfig+0x2b0>
 8007206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800720a:	d81b      	bhi.n	8007244 <UART_SetConfig+0x2b8>
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d00c      	beq.n	800722c <UART_SetConfig+0x2a0>
 8007212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007216:	d815      	bhi.n	8007244 <UART_SetConfig+0x2b8>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <UART_SetConfig+0x298>
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007220:	d008      	beq.n	8007234 <UART_SetConfig+0x2a8>
 8007222:	e00f      	b.n	8007244 <UART_SetConfig+0x2b8>
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722a:	e022      	b.n	8007272 <UART_SetConfig+0x2e6>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e01e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e01a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e016      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e012      	b.n	8007272 <UART_SetConfig+0x2e6>
 800724c:	efff69f3 	.word	0xefff69f3
 8007250:	40008000 	.word	0x40008000
 8007254:	40013800 	.word	0x40013800
 8007258:	40021000 	.word	0x40021000
 800725c:	40004400 	.word	0x40004400
 8007260:	40004800 	.word	0x40004800
 8007264:	40004c00 	.word	0x40004c00
 8007268:	40005000 	.word	0x40005000
 800726c:	2310      	movs	r3, #16
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a9f      	ldr	r2, [pc, #636]	; (80074f4 <UART_SetConfig+0x568>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d17a      	bne.n	8007372 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800727c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007280:	2b08      	cmp	r3, #8
 8007282:	d824      	bhi.n	80072ce <UART_SetConfig+0x342>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x300>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072cf 	.word	0x080072cf
 8007294:	080072b9 	.word	0x080072b9
 8007298:	080072cf 	.word	0x080072cf
 800729c:	080072bf 	.word	0x080072bf
 80072a0:	080072cf 	.word	0x080072cf
 80072a4:	080072cf 	.word	0x080072cf
 80072a8:	080072cf 	.word	0x080072cf
 80072ac:	080072c7 	.word	0x080072c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fe fac0 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 80072b4:	61f8      	str	r0, [r7, #28]
        break;
 80072b6:	e010      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b8:	4b8f      	ldr	r3, [pc, #572]	; (80074f8 <UART_SetConfig+0x56c>)
 80072ba:	61fb      	str	r3, [r7, #28]
        break;
 80072bc:	e00d      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072be:	f7fe fa21 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 80072c2:	61f8      	str	r0, [r7, #28]
        break;
 80072c4:	e009      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ca:	61fb      	str	r3, [r7, #28]
        break;
 80072cc:	e005      	b.n	80072da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80fb 	beq.w	80074d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d305      	bcc.n	80072fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d903      	bls.n	8007306 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007304:	e0e8      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2200      	movs	r2, #0
 800730a:	461c      	mov	r4, r3
 800730c:	4615      	mov	r5, r2
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	022b      	lsls	r3, r5, #8
 8007318:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800731c:	0222      	lsls	r2, r4, #8
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	6849      	ldr	r1, [r1, #4]
 8007322:	0849      	lsrs	r1, r1, #1
 8007324:	2000      	movs	r0, #0
 8007326:	4688      	mov	r8, r1
 8007328:	4681      	mov	r9, r0
 800732a:	eb12 0a08 	adds.w	sl, r2, r8
 800732e:	eb43 0b09 	adc.w	fp, r3, r9
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f9 fc30 	bl	8000ba8 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4613      	mov	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007356:	d308      	bcc.n	800736a <UART_SetConfig+0x3de>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735e:	d204      	bcs.n	800736a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	e0b6      	b.n	80074d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007370:	e0b2      	b.n	80074d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	d15e      	bne.n	800743a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800737c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007380:	2b08      	cmp	r3, #8
 8007382:	d828      	bhi.n	80073d6 <UART_SetConfig+0x44a>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x400>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fe fa40 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 80073b4:	61f8      	str	r0, [r7, #28]
        break;
 80073b6:	e014      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fe fa52 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 80073bc:	61f8      	str	r0, [r7, #28]
        break;
 80073be:	e010      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <UART_SetConfig+0x56c>)
 80073c2:	61fb      	str	r3, [r7, #28]
        break;
 80073c4:	e00d      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fe f99d 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 80073ca:	61f8      	str	r0, [r7, #28]
        break;
 80073cc:	e009      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	61fb      	str	r3, [r7, #28]
        break;
 80073d4:	e005      	b.n	80073e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d077      	beq.n	80074d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005a      	lsls	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d916      	bls.n	8007432 <UART_SetConfig+0x4a6>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740a:	d212      	bcs.n	8007432 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f023 030f 	bic.w	r3, r3, #15
 8007414:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	b29a      	uxth	r2, r3
 8007422:	8afb      	ldrh	r3, [r7, #22]
 8007424:	4313      	orrs	r3, r2
 8007426:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	8afa      	ldrh	r2, [r7, #22]
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	e052      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007438:	e04e      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800743e:	2b08      	cmp	r3, #8
 8007440:	d827      	bhi.n	8007492 <UART_SetConfig+0x506>
 8007442:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x4bc>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	08007493 	.word	0x08007493
 8007458:	08007483 	.word	0x08007483
 800745c:	08007493 	.word	0x08007493
 8007460:	08007493 	.word	0x08007493
 8007464:	08007493 	.word	0x08007493
 8007468:	0800748b 	.word	0x0800748b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800746c:	f7fe f9e2 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 8007470:	61f8      	str	r0, [r7, #28]
        break;
 8007472:	e014      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007474:	f7fe f9f4 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 8007478:	61f8      	str	r0, [r7, #28]
        break;
 800747a:	e010      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <UART_SetConfig+0x56c>)
 800747e:	61fb      	str	r3, [r7, #28]
        break;
 8007480:	e00d      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007482:	f7fe f93f 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 8007486:	61f8      	str	r0, [r7, #28]
        break;
 8007488:	e009      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748e:	61fb      	str	r3, [r7, #28]
        break;
 8007490:	e005      	b.n	800749e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800749c:	bf00      	nop
    }

    if (pclk != 0U)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d019      	beq.n	80074d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	085a      	lsrs	r2, r3, #1
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	441a      	add	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	d909      	bls.n	80074d2 <UART_SetConfig+0x546>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c4:	d205      	bcs.n	80074d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60da      	str	r2, [r3, #12]
 80074d0:	e002      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f2:	bf00      	nop
 80074f4:	40008000 	.word	0x40008000
 80074f8:	00f42400 	.word	0x00f42400

080074fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fa:	d10a      	bne.n	8007612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b098      	sub	sp, #96	; 0x60
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007650:	f7fa fe62 	bl	8002318 <HAL_GetTick>
 8007654:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d12e      	bne.n	80076c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f88c 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
 800769e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e062      	b.n	8007788 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d149      	bne.n	8007764 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d8:	2200      	movs	r2, #0
 80076da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f856 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03c      	beq.n	8007764 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	623b      	str	r3, [r7, #32]
   return(result);
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007708:	633b      	str	r3, [r7, #48]	; 0x30
 800770a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800770e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	60fb      	str	r3, [r7, #12]
   return(result);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	64bb      	str	r3, [r7, #72]	; 0x48
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773c:	61fa      	str	r2, [r7, #28]
 800773e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	69b9      	ldr	r1, [r7, #24]
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	617b      	str	r3, [r7, #20]
   return(result);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e5      	bne.n	800771c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e011      	b.n	8007788 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3758      	adds	r7, #88	; 0x58
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	e049      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d045      	beq.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077aa:	f7fa fdb5 	bl	8002318 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d302      	bcc.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e048      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d031      	beq.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d110      	bne.n	8007802 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2208      	movs	r2, #8
 80077e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f838 	bl	800785e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2208      	movs	r2, #8
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e029      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800780c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007810:	d111      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f81e 	bl	800785e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e00f      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4013      	ands	r3, r2
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	429a      	cmp	r2, r3
 8007852:	d0a6      	beq.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800785e:	b480      	push	{r7}
 8007860:	b095      	sub	sp, #84	; 0x54
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007884:	643b      	str	r3, [r7, #64]	; 0x40
 8007886:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800788a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e5      	bne.n	8007898 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d118      	bne.n	8007906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0310 	bic.w	r3, r3, #16
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f2:	61bb      	str	r3, [r7, #24]
 80078f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6979      	ldr	r1, [r7, #20]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e6      	bne.n	80078d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	669a      	str	r2, [r3, #104]	; 0x68
}
 800791a:	bf00      	nop
 800791c:	3754      	adds	r7, #84	; 0x54
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007926:	b084      	sub	sp, #16
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	f107 001c 	add.w	r0, r7, #28
 8007934:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fa1d 	bl	8008d84 <USB_CoreReset>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800794e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
 8007960:	e005      	b.n	800796e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800797a:	b004      	add	sp, #16
 800797c:	4770      	bx	lr
	...

08007980 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d165      	bne.n	8007a60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4a3e      	ldr	r2, [pc, #248]	; (8007a90 <USB_SetTurnaroundTime+0x110>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d906      	bls.n	80079aa <USB_SetTurnaroundTime+0x2a>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <USB_SetTurnaroundTime+0x114>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d202      	bcs.n	80079aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079a4:	230f      	movs	r3, #15
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e05c      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a39      	ldr	r2, [pc, #228]	; (8007a94 <USB_SetTurnaroundTime+0x114>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d306      	bcc.n	80079c0 <USB_SetTurnaroundTime+0x40>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4a38      	ldr	r2, [pc, #224]	; (8007a98 <USB_SetTurnaroundTime+0x118>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d202      	bcs.n	80079c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079ba:	230e      	movs	r3, #14
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e051      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4a35      	ldr	r2, [pc, #212]	; (8007a98 <USB_SetTurnaroundTime+0x118>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d306      	bcc.n	80079d6 <USB_SetTurnaroundTime+0x56>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4a34      	ldr	r2, [pc, #208]	; (8007a9c <USB_SetTurnaroundTime+0x11c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d202      	bcs.n	80079d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079d0:	230d      	movs	r3, #13
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e046      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4a30      	ldr	r2, [pc, #192]	; (8007a9c <USB_SetTurnaroundTime+0x11c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d306      	bcc.n	80079ec <USB_SetTurnaroundTime+0x6c>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4a2f      	ldr	r2, [pc, #188]	; (8007aa0 <USB_SetTurnaroundTime+0x120>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d802      	bhi.n	80079ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079e6:	230c      	movs	r3, #12
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e03b      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <USB_SetTurnaroundTime+0x120>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d906      	bls.n	8007a02 <USB_SetTurnaroundTime+0x82>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <USB_SetTurnaroundTime+0x124>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d802      	bhi.n	8007a02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079fc:	230b      	movs	r3, #11
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e030      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <USB_SetTurnaroundTime+0x124>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d906      	bls.n	8007a18 <USB_SetTurnaroundTime+0x98>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <USB_SetTurnaroundTime+0x128>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d802      	bhi.n	8007a18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a12:	230a      	movs	r3, #10
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	e025      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <USB_SetTurnaroundTime+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d906      	bls.n	8007a2e <USB_SetTurnaroundTime+0xae>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a22      	ldr	r2, [pc, #136]	; (8007aac <USB_SetTurnaroundTime+0x12c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d202      	bcs.n	8007a2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a28:	2309      	movs	r3, #9
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e01a      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <USB_SetTurnaroundTime+0x12c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d306      	bcc.n	8007a44 <USB_SetTurnaroundTime+0xc4>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <USB_SetTurnaroundTime+0x130>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d802      	bhi.n	8007a44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a3e:	2308      	movs	r3, #8
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e00f      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <USB_SetTurnaroundTime+0x130>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d906      	bls.n	8007a5a <USB_SetTurnaroundTime+0xda>
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <USB_SetTurnaroundTime+0x134>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d202      	bcs.n	8007a5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a54:	2307      	movs	r3, #7
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	e004      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a5a:	2306      	movs	r3, #6
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a60:	2309      	movs	r3, #9
 8007a62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	029b      	lsls	r3, r3, #10
 8007a78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	00d8acbf 	.word	0x00d8acbf
 8007a94:	00e4e1c0 	.word	0x00e4e1c0
 8007a98:	00f42400 	.word	0x00f42400
 8007a9c:	01067380 	.word	0x01067380
 8007aa0:	011a499f 	.word	0x011a499f
 8007aa4:	01312cff 	.word	0x01312cff
 8007aa8:	014ca43f 	.word	0x014ca43f
 8007aac:	016e3600 	.word	0x016e3600
 8007ab0:	01a6ab1f 	.word	0x01a6ab1f
 8007ab4:	01e84800 	.word	0x01e84800

08007ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f043 0201 	orr.w	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d115      	bne.n	8007b4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f7fa fc00 	bl	8002330 <HAL_Delay>
      ms++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f8ab 	bl	8008c92 <USB_GetMode>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d01e      	beq.n	8007b80 <USB_SetCurrentMode+0x84>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b31      	cmp	r3, #49	; 0x31
 8007b46:	d9f0      	bls.n	8007b2a <USB_SetCurrentMode+0x2e>
 8007b48:	e01a      	b.n	8007b80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d115      	bne.n	8007b7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f7fa fbe7 	bl	8002330 <HAL_Delay>
      ms++;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f892 	bl	8008c92 <USB_GetMode>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <USB_SetCurrentMode+0x84>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b31      	cmp	r3, #49	; 0x31
 8007b78:	d9f0      	bls.n	8007b5c <USB_SetCurrentMode+0x60>
 8007b7a:	e001      	b.n	8007b80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e005      	b.n	8007b8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b32      	cmp	r3, #50	; 0x32
 8007b84:	d101      	bne.n	8007b8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b94:	b084      	sub	sp, #16
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	e009      	b.n	8007bc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3340      	adds	r3, #64	; 0x40
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b0e      	cmp	r3, #14
 8007bcc:	d9f2      	bls.n	8007bb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11c      	bne.n	8007c0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be2:	f043 0302 	orr.w	r3, r3, #2
 8007be6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	e005      	b.n	8007c1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c20:	461a      	mov	r2, r3
 8007c22:	2300      	movs	r3, #0
 8007c24:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c26:	2103      	movs	r1, #3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f959 	bl	8007ee0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c2e:	2110      	movs	r1, #16
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8f1 	bl	8007e18 <USB_FlushTxFifo>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f91d 	bl	8007e80 <USB_FlushRxFifo>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c56:	461a      	mov	r2, r3
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	461a      	mov	r2, r3
 8007c64:	2300      	movs	r3, #0
 8007c66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2300      	movs	r3, #0
 8007c72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
 8007c78:	e043      	b.n	8007d02 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c90:	d118      	bne.n	8007cc4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e013      	b.n	8007cd6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	e008      	b.n	8007cd6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3b7      	bcc.n	8007c7a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	e043      	b.n	8007d98 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d26:	d118      	bne.n	8007d5a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	e013      	b.n	8007d6c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	461a      	mov	r2, r3
 8007d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	e008      	b.n	8007d6c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d66:	461a      	mov	r2, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d3b7      	bcc.n	8007d10 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007dc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f043 0210 	orr.w	r2, r3, #16
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <USB_DevInit+0x280>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f043 0208 	orr.w	r2, r3, #8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dfa:	f043 0304 	orr.w	r3, r3, #4
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e0e:	b004      	add	sp, #16
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	803c3800 	.word	0x803c3800

08007e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <USB_FlushTxFifo+0x64>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d901      	bls.n	8007e38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e01b      	b.n	8007e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	daf2      	bge.n	8007e26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	019b      	lsls	r3, r3, #6
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <USB_FlushTxFifo+0x64>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d901      	bls.n	8007e62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e006      	b.n	8007e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d0f0      	beq.n	8007e50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	00030d40 	.word	0x00030d40

08007e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4a11      	ldr	r2, [pc, #68]	; (8007edc <USB_FlushRxFifo+0x5c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d901      	bls.n	8007e9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e018      	b.n	8007ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	daf2      	bge.n	8007e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2210      	movs	r2, #16
 8007eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a08      	ldr	r2, [pc, #32]	; (8007edc <USB_FlushRxFifo+0x5c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e006      	b.n	8007ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d0f0      	beq.n	8007eb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	00030d40 	.word	0x00030d40

08007ee0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	68f9      	ldr	r1, [r7, #12]
 8007efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f00:	4313      	orrs	r3, r2
 8007f02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 0306 	and.w	r3, r3, #6
 8007f2a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d002      	beq.n	8007f38 <USB_GetDevSpeed+0x26>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b06      	cmp	r3, #6
 8007f36:	d102      	bne.n	8007f3e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	75fb      	strb	r3, [r7, #23]
 8007f3c:	e001      	b.n	8007f42 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007f3e:	230f      	movs	r3, #15
 8007f40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d13a      	bne.n	8007fe2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d155      	bne.n	8008050 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e036      	b.n	8008050 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008000:	4313      	orrs	r3, r2
 8008002:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d11a      	bne.n	8008050 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	791b      	ldrb	r3, [r3, #4]
 8008034:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008036:	430b      	orrs	r3, r1
 8008038:	4313      	orrs	r3, r2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800804e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d161      	bne.n	8008140 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008092:	d11f      	bne.n	80080d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	2101      	movs	r1, #1
 80080e6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	43db      	mvns	r3, r3
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f4:	4013      	ands	r3, r2
 80080f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	69da      	ldr	r2, [r3, #28]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	2101      	movs	r1, #1
 800810a:	fa01 f303 	lsl.w	r3, r1, r3
 800810e:	b29b      	uxth	r3, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008118:	4013      	ands	r3, r2
 800811a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	0159      	lsls	r1, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	440b      	add	r3, r1
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	4619      	mov	r1, r3
 8008138:	4b35      	ldr	r3, [pc, #212]	; (8008210 <USB_DeactivateEndpoint+0x1b0>)
 800813a:	4013      	ands	r3, r2
 800813c:	600b      	str	r3, [r1, #0]
 800813e:	e060      	b.n	8008202 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008156:	d11f      	bne.n	8008198 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	440a      	add	r2, r1
 800816e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008176:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008196:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	2101      	movs	r1, #1
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	43db      	mvns	r3, r3
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b8:	4013      	ands	r3, r2
 80081ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f303 	lsl.w	r3, r1, r3
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	43db      	mvns	r3, r3
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081dc:	4013      	ands	r3, r2
 80081de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	0159      	lsls	r1, r3, #5
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	440b      	add	r3, r1
 80081f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fa:	4619      	mov	r1, r3
 80081fc:	4b05      	ldr	r3, [pc, #20]	; (8008214 <USB_DeactivateEndpoint+0x1b4>)
 80081fe:	4013      	ands	r3, r2
 8008200:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	ec337800 	.word	0xec337800
 8008214:	eff37800 	.word	0xeff37800

08008218 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b01      	cmp	r3, #1
 8008232:	f040 8128 	bne.w	8008486 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d132      	bne.n	80082a4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	440a      	add	r2, r1
 8008254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800825c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	440a      	add	r2, r1
 8008278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	04db      	lsls	r3, r3, #19
 80082a0:	6113      	str	r3, [r2, #16]
 80082a2:	e092      	b.n	80083ca <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082be:	0cdb      	lsrs	r3, r3, #19
 80082c0:	04db      	lsls	r3, r3, #19
 80082c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d11a      	bne.n	8008324 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008320:	6113      	str	r3, [r2, #16]
 8008322:	e01b      	b.n	800835c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6919      	ldr	r1, [r3, #16]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	440b      	add	r3, r1
 800833c:	1e59      	subs	r1, r3, #1
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	fbb1 f3f3 	udiv	r3, r1, r3
 8008346:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008348:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <USB_EPStartXfer+0x368>)
 800834a:	400b      	ands	r3, r1
 800834c:	6939      	ldr	r1, [r7, #16]
 800834e:	0148      	lsls	r0, r1, #5
 8008350:	6979      	ldr	r1, [r7, #20]
 8008352:	4401      	add	r1, r0
 8008354:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008358:	4313      	orrs	r3, r2
 800835a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008372:	6939      	ldr	r1, [r7, #16]
 8008374:	0148      	lsls	r0, r1, #5
 8008376:	6979      	ldr	r1, [r7, #20]
 8008378:	4401      	add	r1, r0
 800837a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800837e:	4313      	orrs	r3, r2
 8008380:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	791b      	ldrb	r3, [r3, #4]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d11f      	bne.n	80083ca <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083c8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	0151      	lsls	r1, r2, #5
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	440a      	add	r2, r1
 80083e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083e8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d015      	beq.n	800841e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8139 	beq.w	800866e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	2101      	movs	r1, #1
 800840e:	fa01 f303 	lsl.w	r3, r1, r3
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008418:	4313      	orrs	r3, r2
 800841a:	634b      	str	r3, [r1, #52]	; 0x34
 800841c:	e127      	b.n	800866e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d110      	bne.n	8008450 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	0151      	lsls	r1, r2, #5
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	440a      	add	r2, r1
 8008444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e00f      	b.n	8008470 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	68d9      	ldr	r1, [r3, #12]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781a      	ldrb	r2, [r3, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	b29b      	uxth	r3, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9a6 	bl	80087d0 <USB_WritePacket>
 8008484:	e0f3      	b.n	800866e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a0:	0cdb      	lsrs	r3, r3, #19
 80084a2:	04db      	lsls	r3, r3, #19
 80084a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084c8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d12f      	bne.n	8008530 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	0148      	lsls	r0, r1, #5
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	4401      	add	r1, r0
 8008506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800852c:	6113      	str	r3, [r2, #16]
 800852e:	e061      	b.n	80085f4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d125      	bne.n	8008584 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	0148      	lsls	r0, r1, #5
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	4401      	add	r1, r0
 8008556:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800857c:	6113      	str	r3, [r2, #16]
 800857e:	e039      	b.n	80085f4 <USB_EPStartXfer+0x3dc>
 8008580:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	4413      	add	r3, r2
 800858e:	1e5a      	subs	r2, r3, #1
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	89fa      	ldrh	r2, [r7, #14]
 80085a0:	fb03 f202 	mul.w	r2, r3, r2
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	89fb      	ldrh	r3, [r7, #14]
 80085b8:	04d9      	lsls	r1, r3, #19
 80085ba:	4b2f      	ldr	r3, [pc, #188]	; (8008678 <USB_EPStartXfer+0x460>)
 80085bc:	400b      	ands	r3, r1
 80085be:	6939      	ldr	r1, [r7, #16]
 80085c0:	0148      	lsls	r0, r1, #5
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	4401      	add	r1, r0
 80085c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ca:	4313      	orrs	r3, r2
 80085cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e4:	6939      	ldr	r1, [r7, #16]
 80085e6:	0148      	lsls	r0, r1, #5
 80085e8:	6979      	ldr	r1, [r7, #20]
 80085ea:	4401      	add	r1, r0
 80085ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085f0:	4313      	orrs	r3, r2
 80085f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d128      	bne.n	800864e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d110      	bne.n	800862e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e00f      	b.n	800864e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800864c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	440a      	add	r2, r1
 8008664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800866c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	1ff80000 	.word	0x1ff80000

0800867c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d14a      	bne.n	8008730 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b2:	f040 8086 	bne.w	80087c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	7812      	ldrb	r2, [r2, #0]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f242 7210 	movw	r2, #10000	; 0x2710
 800870a:	4293      	cmp	r3, r2
 800870c:	d902      	bls.n	8008714 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
          break;
 8008712:	e056      	b.n	80087c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800872c:	d0e7      	beq.n	80086fe <USB_EPStopXfer+0x82>
 800872e:	e048      	b.n	80087c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008748:	d13b      	bne.n	80087c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800876c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	7812      	ldrb	r2, [r2, #0]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	440a      	add	r2, r1
 8008788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f242 7210 	movw	r2, #10000	; 0x2710
 800879e:	4293      	cmp	r3, r2
 80087a0:	d902      	bls.n	80087a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]
          break;
 80087a6:	e00c      	b.n	80087c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c0:	d0e7      	beq.n	8008792 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4611      	mov	r1, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	460b      	mov	r3, r1
 80087e0:	71fb      	strb	r3, [r7, #7]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80087ee:	88bb      	ldrh	r3, [r7, #4]
 80087f0:	3303      	adds	r3, #3
 80087f2:	089b      	lsrs	r3, r3, #2
 80087f4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	e018      	b.n	800882e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	031a      	lsls	r2, r3, #12
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	4413      	add	r3, r2
 8008804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008808:	461a      	mov	r2, r3
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3301      	adds	r3, #1
 800881a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3301      	adds	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	3301      	adds	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	61bb      	str	r3, [r7, #24]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	429a      	cmp	r2, r3
 8008834:	d3e2      	bcc.n	80087fc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3724      	adds	r7, #36	; 0x24
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008844:	b480      	push	{r7}
 8008846:	b08b      	sub	sp, #44	; 0x2c
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	089b      	lsrs	r3, r3, #2
 800885e:	b29b      	uxth	r3, r3
 8008860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800886a:	2300      	movs	r3, #0
 800886c:	623b      	str	r3, [r7, #32]
 800886e:	e014      	b.n	800889a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	601a      	str	r2, [r3, #0]
    pDest++;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	3301      	adds	r3, #1
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	3301      	adds	r3, #1
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	3301      	adds	r3, #1
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	3301      	adds	r3, #1
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	3301      	adds	r3, #1
 8008898:	623b      	str	r3, [r7, #32]
 800889a:	6a3a      	ldr	r2, [r7, #32]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d3e6      	bcc.n	8008870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80088a2:	8bfb      	ldrh	r3, [r7, #30]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01e      	beq.n	80088e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	461a      	mov	r2, r3
 80088b4:	f107 0310 	add.w	r3, r7, #16
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	701a      	strb	r2, [r3, #0]
      i++;
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	3301      	adds	r3, #1
 80088d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	3301      	adds	r3, #1
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80088da:	8bfb      	ldrh	r3, [r7, #30]
 80088dc:	3b01      	subs	r3, #1
 80088de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088e0:	8bfb      	ldrh	r3, [r7, #30]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1ea      	bne.n	80088bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	372c      	adds	r7, #44	; 0x2c
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d12c      	bne.n	800896a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	db12      	blt.n	8008948 <USB_EPSetStall+0x54>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00f      	beq.n	8008948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	440a      	add	r2, r1
 800893e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	0151      	lsls	r1, r2, #5
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	440a      	add	r2, r1
 800895e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	e02b      	b.n	80089c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	db12      	blt.n	80089a2 <USB_EPSetStall+0xae>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00f      	beq.n	80089a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	0151      	lsls	r1, r2, #5
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	440a      	add	r2, r1
 8008998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800899c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	0151      	lsls	r1, r2, #5
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	440a      	add	r2, r1
 80089b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d128      	bne.n	8008a3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	791b      	ldrb	r3, [r3, #4]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d003      	beq.n	8008a1c <USB_EPClearStall+0x4c>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	791b      	ldrb	r3, [r3, #4]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d138      	bne.n	8008a8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	e027      	b.n	8008a8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	791b      	ldrb	r3, [r3, #4]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d003      	beq.n	8008a6e <USB_EPClearStall+0x9e>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	791b      	ldrb	r3, [r3, #4]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d10f      	bne.n	8008a8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	0151      	lsls	r1, r2, #5
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	440a      	add	r2, r1
 8008a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008abe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ad0:	68f9      	ldr	r1, [r7, #12]
 8008ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b16:	f023 0302 	bic.w	r3, r3, #2
 8008b1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4013      	ands	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	0c1b      	lsrs	r3, r3, #16
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4013      	ands	r3, r2
 8008be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	b29b      	uxth	r3, r3
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4013      	ands	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c28:	68bb      	ldr	r3, [r7, #8]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	fa22 f303 	lsr.w	r3, r2, r3
 8008c66:	01db      	lsls	r3, r3, #7
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4013      	ands	r3, r2
 8008c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c84:	68bb      	ldr	r3, [r7, #8]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ccc:	f023 0307 	bic.w	r3, r3, #7
 8008cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	333c      	adds	r3, #60	; 0x3c
 8008d06:	3304      	adds	r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4a1c      	ldr	r2, [pc, #112]	; (8008d80 <USB_EP0_OutStart+0x8c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d90a      	bls.n	8008d2a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d24:	d101      	bne.n	8008d2a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e024      	b.n	8008d74 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d30:	461a      	mov	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d58:	f043 0318 	orr.w	r3, r3, #24
 8008d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008d70:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	4f54300a 	.word	0x4f54300a

08008d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <USB_CoreReset+0x64>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d901      	bls.n	8008da2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e01b      	b.n	8008dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	daf2      	bge.n	8008d90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f043 0201 	orr.w	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <USB_CoreReset+0x64>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d901      	bls.n	8008dcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e006      	b.n	8008dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d0f0      	beq.n	8008dba <USB_CoreReset+0x36>

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	00030d40 	.word	0x00030d40

08008dec <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008df8:	201c      	movs	r0, #28
 8008dfa:	f002 fc67 	bl	800b6cc <USBD_static_malloc>
 8008dfe:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	32b0      	adds	r2, #176	; 0xb0
 8008e10:	2100      	movs	r1, #0
 8008e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008e16:	2302      	movs	r3, #2
 8008e18:	e08a      	b.n	8008f30 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	32b0      	adds	r2, #176	; 0xb0
 8008e24:	68f9      	ldr	r1, [r7, #12]
 8008e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32b0      	adds	r2, #176	; 0xb0
 8008e34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7c1b      	ldrb	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d11b      	bne.n	8008e7e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008e46:	4b3c      	ldr	r3, [pc, #240]	; (8008f38 <USBD_CUSTOM_HID_Init+0x14c>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f003 020f 	and.w	r2, r3, #15
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	3326      	adds	r3, #38	; 0x26
 8008e5c:	2205      	movs	r2, #5
 8008e5e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008e60:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <USBD_CUSTOM_HID_Init+0x150>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008e78:	2205      	movs	r2, #5
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	e01a      	b.n	8008eb4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008e7e:	4b2e      	ldr	r3, [pc, #184]	; (8008f38 <USBD_CUSTOM_HID_Init+0x14c>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 020f 	and.w	r2, r3, #15
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3326      	adds	r3, #38	; 0x26
 8008e94:	2205      	movs	r2, #5
 8008e96:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008e98:	4b28      	ldr	r3, [pc, #160]	; (8008f3c <USBD_CUSTOM_HID_Init+0x150>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	f003 020f 	and.w	r2, r3, #15
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008eb4:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <USBD_CUSTOM_HID_Init+0x14c>)
 8008eb6:	7819      	ldrb	r1, [r3, #0]
 8008eb8:	2302      	movs	r3, #2
 8008eba:	2203      	movs	r2, #3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f002 fa05 	bl	800b2cc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <USBD_CUSTOM_HID_Init+0x14c>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 020f 	and.w	r2, r3, #15
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	440b      	add	r3, r1
 8008ed6:	3324      	adds	r3, #36	; 0x24
 8008ed8:	2201      	movs	r2, #1
 8008eda:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008edc:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <USBD_CUSTOM_HID_Init+0x150>)
 8008ede:	7819      	ldrb	r1, [r3, #0]
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f002 f9f1 	bl	800b2cc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <USBD_CUSTOM_HID_Init+0x150>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	f003 020f 	and.w	r2, r3, #15
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f02:	2201      	movs	r2, #1
 8008f04:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	33b0      	adds	r3, #176	; 0xb0
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <USBD_CUSTOM_HID_Init+0x150>)
 8008f22:	7819      	ldrb	r1, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	2307      	movs	r3, #7
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 fb49 	bl	800b5c0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000086 	.word	0x20000086
 8008f3c:	20000087 	.word	0x20000087

08008f40 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008f4c:	4b37      	ldr	r3, [pc, #220]	; (800902c <USBD_CUSTOM_HID_DeInit+0xec>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f002 f9f8 	bl	800b348 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <USBD_CUSTOM_HID_DeInit+0xec>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3324      	adds	r3, #36	; 0x24
 8008f6e:	2200      	movs	r2, #0
 8008f70:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8008f72:	4b2e      	ldr	r3, [pc, #184]	; (800902c <USBD_CUSTOM_HID_DeInit+0xec>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3326      	adds	r3, #38	; 0x26
 8008f88:	2200      	movs	r2, #0
 8008f8a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008f8c:	4b28      	ldr	r3, [pc, #160]	; (8009030 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f002 f9d8 	bl	800b348 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008f98:	4b25      	ldr	r3, [pc, #148]	; (8009030 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 020f 	and.w	r2, r3, #15
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008fb4:	4b1e      	ldr	r3, [pc, #120]	; (8009030 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 020f 	and.w	r2, r3, #15
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008fcc:	2200      	movs	r2, #0
 8008fce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	32b0      	adds	r2, #176	; 0xb0
 8008fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01f      	beq.n	8009022 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	33b0      	adds	r3, #176	; 0xb0
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32b0      	adds	r2, #176	; 0xb0
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	4618      	mov	r0, r3
 8009006:	f002 fb6f 	bl	800b6e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	32b0      	adds	r2, #176	; 0xb0
 8009014:	2100      	movs	r1, #0
 8009016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20000086 	.word	0x20000086
 8009030:	20000087 	.word	0x20000087

08009034 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	; 0xb0
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e0f8      	b.n	800925a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009070:	2b00      	cmp	r3, #0
 8009072:	d056      	beq.n	8009122 <USBD_CUSTOM_HID_Setup+0xee>
 8009074:	2b20      	cmp	r3, #32
 8009076:	f040 80e8 	bne.w	800924a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	785b      	ldrb	r3, [r3, #1]
 800907e:	3b02      	subs	r3, #2
 8009080:	2b09      	cmp	r3, #9
 8009082:	d846      	bhi.n	8009112 <USBD_CUSTOM_HID_Setup+0xde>
 8009084:	a201      	add	r2, pc, #4	; (adr r2, 800908c <USBD_CUSTOM_HID_Setup+0x58>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090e5 	.word	0x080090e5
 8009090:	080090c3 	.word	0x080090c3
 8009094:	08009113 	.word	0x08009113
 8009098:	08009113 	.word	0x08009113
 800909c:	08009113 	.word	0x08009113
 80090a0:	08009113 	.word	0x08009113
 80090a4:	08009113 	.word	0x08009113
 80090a8:	080090f5 	.word	0x080090f5
 80090ac:	080090d3 	.word	0x080090d3
 80090b0:	080090b5 	.word	0x080090b5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	885b      	ldrh	r3, [r3, #2]
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	461a      	mov	r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	609a      	str	r2, [r3, #8]
          break;
 80090c0:	e02e      	b.n	8009120 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	3308      	adds	r3, #8
 80090c6:	2201      	movs	r2, #1
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 fcd0 	bl	800aa70 <USBD_CtlSendData>
          break;
 80090d0:	e026      	b.n	8009120 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	885b      	ldrh	r3, [r3, #2]
 80090d6:	0a1b      	lsrs	r3, r3, #8
 80090d8:	b29b      	uxth	r3, r3
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	60da      	str	r2, [r3, #12]
          break;
 80090e2:	e01d      	b.n	8009120 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	330c      	adds	r3, #12
 80090e8:	2201      	movs	r2, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fcbf 	bl	800aa70 <USBD_CtlSendData>
          break;
 80090f2:	e015      	b.n	8009120 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2201      	movs	r2, #1
 80090f8:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80090fa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	88db      	ldrh	r3, [r3, #6]
 8009100:	2b07      	cmp	r3, #7
 8009102:	bf28      	it	cs
 8009104:	2307      	movcs	r3, #7
 8009106:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009108:	461a      	mov	r2, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fcdc 	bl	800aac8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009110:	e006      	b.n	8009120 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 fc3a 	bl	800a98e <USBD_CtlError>
          ret = USBD_FAIL;
 800911a:	2303      	movs	r3, #3
 800911c:	75fb      	strb	r3, [r7, #23]
          break;
 800911e:	bf00      	nop
      }
      break;
 8009120:	e09a      	b.n	8009258 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b0b      	cmp	r3, #11
 8009128:	f200 8086 	bhi.w	8009238 <USBD_CUSTOM_HID_Setup+0x204>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <USBD_CUSTOM_HID_Setup+0x100>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	08009165 	.word	0x08009165
 8009138:	08009247 	.word	0x08009247
 800913c:	08009239 	.word	0x08009239
 8009140:	08009239 	.word	0x08009239
 8009144:	08009239 	.word	0x08009239
 8009148:	08009239 	.word	0x08009239
 800914c:	0800918f 	.word	0x0800918f
 8009150:	08009239 	.word	0x08009239
 8009154:	08009239 	.word	0x08009239
 8009158:	08009239 	.word	0x08009239
 800915c:	080091e7 	.word	0x080091e7
 8009160:	08009211 	.word	0x08009211
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b03      	cmp	r3, #3
 800916e:	d107      	bne.n	8009180 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009170:	f107 030e 	add.w	r3, r7, #14
 8009174:	2202      	movs	r2, #2
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fc79 	bl	800aa70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800917e:	e063      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fc03 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	75fb      	strb	r3, [r7, #23]
          break;
 800918c:	e05c      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b22      	cmp	r3, #34	; 0x22
 8009198:	d110      	bne.n	80091bc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	2b1d      	cmp	r3, #29
 80091a0:	bf28      	it	cs
 80091a2:	231d      	movcs	r3, #29
 80091a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	33b0      	adds	r3, #176	; 0xb0
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	e00d      	b.n	80091d8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b21      	cmp	r3, #33	; 0x21
 80091c6:	d107      	bne.n	80091d8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80091c8:	4b26      	ldr	r3, [pc, #152]	; (8009264 <USBD_CUSTOM_HID_Setup+0x230>)
 80091ca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	2b09      	cmp	r3, #9
 80091d2:	bf28      	it	cs
 80091d4:	2309      	movcs	r3, #9
 80091d6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80091d8:	8bfb      	ldrh	r3, [r7, #30]
 80091da:	461a      	mov	r2, r3
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fc46 	bl	800aa70 <USBD_CtlSendData>
          break;
 80091e4:	e030      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d107      	bne.n	8009202 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3310      	adds	r3, #16
 80091f6:	2201      	movs	r2, #1
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fc38 	bl	800aa70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009200:	e022      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 fbc2 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 800920a:	2303      	movs	r3, #3
 800920c:	75fb      	strb	r3, [r7, #23]
          break;
 800920e:	e01b      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b03      	cmp	r3, #3
 800921a:	d106      	bne.n	800922a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	885b      	ldrh	r3, [r3, #2]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009228:	e00e      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fbae 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 8009232:	2303      	movs	r3, #3
 8009234:	75fb      	strb	r3, [r7, #23]
          break;
 8009236:	e007      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fba7 	bl	800a98e <USBD_CtlError>
          ret = USBD_FAIL;
 8009240:	2303      	movs	r3, #3
 8009242:	75fb      	strb	r3, [r7, #23]
          break;
 8009244:	e000      	b.n	8009248 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009246:	bf00      	nop
      }
      break;
 8009248:	e006      	b.n	8009258 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 fb9e 	bl	800a98e <USBD_CtlError>
      ret = USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	75fb      	strb	r3, [r7, #23]
      break;
 8009256:	bf00      	nop
  }
  return (uint8_t)ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000070 	.word	0x20000070

08009268 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	32b0      	adds	r2, #176	; 0xb0
 8009280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009284:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e017      	b.n	80092c0 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b03      	cmp	r3, #3
 800929a:	d110      	bne.n	80092be <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	7e1b      	ldrb	r3, [r3, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2201      	movs	r2, #1
 80092a8:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <USBD_CUSTOM_HID_SendReport+0x60>)
 80092ac:	7819      	ldrb	r1, [r3, #0]
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f002 f94c 	bl	800b550 <USBD_LL_Transmit>
 80092b8:	e001      	b.n	80092be <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000086 	.word	0x20000086

080092cc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80092d4:	2181      	movs	r1, #129	; 0x81
 80092d6:	4815      	ldr	r0, [pc, #84]	; (800932c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80092d8:	f000 fcf7 	bl	8009cca <USBD_GetEpDesc>
 80092dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80092de:	2101      	movs	r1, #1
 80092e0:	4812      	ldr	r0, [pc, #72]	; (800932c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80092e2:	f000 fcf2 	bl	8009cca <USBD_GetEpDesc>
 80092e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f042 0202 	orr.w	r2, r2, #2
 80092f6:	711a      	strb	r2, [r3, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2205      	movs	r2, #5
 8009300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	f042 0202 	orr.w	r2, r2, #2
 8009310:	711a      	strb	r2, [r3, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2205      	movs	r2, #5
 800931a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2229      	movs	r2, #41	; 0x29
 8009320:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009322:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20000044 	.word	0x20000044

08009330 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009338:	2181      	movs	r1, #129	; 0x81
 800933a:	4815      	ldr	r0, [pc, #84]	; (8009390 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800933c:	f000 fcc5 	bl	8009cca <USBD_GetEpDesc>
 8009340:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009342:	2101      	movs	r1, #1
 8009344:	4812      	ldr	r0, [pc, #72]	; (8009390 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009346:	f000 fcc0 	bl	8009cca <USBD_GetEpDesc>
 800934a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f042 0202 	orr.w	r2, r2, #2
 800935a:	711a      	strb	r2, [r3, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2205      	movs	r2, #5
 8009364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d009      	beq.n	8009380 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	f042 0202 	orr.w	r2, r2, #2
 8009374:	711a      	strb	r2, [r3, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2205      	movs	r2, #5
 800937e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2229      	movs	r2, #41	; 0x29
 8009384:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009386:	4b02      	ldr	r3, [pc, #8]	; (8009390 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000044 	.word	0x20000044

08009394 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800939c:	2181      	movs	r1, #129	; 0x81
 800939e:	4815      	ldr	r0, [pc, #84]	; (80093f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80093a0:	f000 fc93 	bl	8009cca <USBD_GetEpDesc>
 80093a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80093a6:	2101      	movs	r1, #1
 80093a8:	4812      	ldr	r0, [pc, #72]	; (80093f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80093aa:	f000 fc8e 	bl	8009cca <USBD_GetEpDesc>
 80093ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d009      	beq.n	80093ca <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f042 0202 	orr.w	r2, r2, #2
 80093be:	711a      	strb	r2, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2205      	movs	r2, #5
 80093c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f042 0202 	orr.w	r2, r2, #2
 80093d8:	711a      	strb	r2, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2205      	movs	r2, #5
 80093e2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2229      	movs	r2, #41	; 0x29
 80093e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80093ea:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000044 	.word	0x20000044

080093f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	32b0      	adds	r2, #176	; 0xb0
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	2200      	movs	r2, #0
 8009414:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	32b0      	adds	r2, #176	; 0xb0
 800943a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009442:	2303      	movs	r3, #3
 8009444:	e017      	b.n	8009476 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	32b0      	adds	r2, #176	; 0xb0
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	33b0      	adds	r3, #176	; 0xb0
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	7810      	ldrb	r0, [r2, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	7852      	ldrb	r2, [r2, #1]
 8009470:	4611      	mov	r1, r2
 8009472:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	32b0      	adds	r2, #176	; 0xb0
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	e016      	b.n	80094ce <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d111      	bne.n	80094cc <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	33b0      	adds	r3, #176	; 0xb0
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	7810      	ldrb	r0, [r2, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	7852      	ldrb	r2, [r2, #1]
 80094c2:	4611      	mov	r1, r2
 80094c4:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	220a      	movs	r2, #10
 80094e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80094e6:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	2000007c 	.word	0x2000007c

080094f8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009508:	2303      	movs	r3, #3
 800950a:	e009      	b.n	8009520 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	33b0      	adds	r3, #176	; 0xb0
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	e01f      	b.n	8009584 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	79fa      	ldrb	r2, [r7, #7]
 8009576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f001 fe29 	bl	800b1d0 <USBD_LL_Init>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e025      	b.n	80095f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	32ae      	adds	r2, #174	; 0xae
 80095b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00f      	beq.n	80095e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	32ae      	adds	r2, #174	; 0xae
 80095ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	f107 020e 	add.w	r2, r7, #14
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	4602      	mov	r2, r0
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fe31 	bl	800b268 <USBD_LL_Start>
 8009606:	4603      	mov	r3, r0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	78fa      	ldrb	r2, [r7, #3]
 800964a:	4611      	mov	r1, r2
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	4611      	mov	r1, r2
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 f938 	bl	800a91a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096c6:	f003 031f 	and.w	r3, r3, #31
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d01a      	beq.n	8009704 <USBD_LL_SetupStage+0x72>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d822      	bhi.n	8009718 <USBD_LL_SetupStage+0x86>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <USBD_LL_SetupStage+0x4a>
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d00a      	beq.n	80096f0 <USBD_LL_SetupStage+0x5e>
 80096da:	e01d      	b.n	8009718 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fb65 	bl	8009db4 <USBD_StdDevReq>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73fb      	strb	r3, [r7, #15]
      break;
 80096ee:	e020      	b.n	8009732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fbcd 	bl	8009e98 <USBD_StdItfReq>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]
      break;
 8009702:	e016      	b.n	8009732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc2f 	bl	8009f70 <USBD_StdEPReq>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
      break;
 8009716:	e00c      	b.n	8009732 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800971e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009722:	b2db      	uxtb	r3, r3
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fe44 	bl	800b3b4 <USBD_LL_StallEP>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
      break;
 8009730:	bf00      	nop
  }

  return ret;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	460b      	mov	r3, r1
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d16e      	bne.n	8009832 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800975a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009762:	2b03      	cmp	r3, #3
 8009764:	f040 8098 	bne.w	8009898 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	429a      	cmp	r2, r3
 8009772:	d913      	bls.n	800979c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	1ad2      	subs	r2, r2, r3
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4293      	cmp	r3, r2
 800978c:	bf28      	it	cs
 800978e:	4613      	movcs	r3, r2
 8009790:	461a      	mov	r2, r3
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f001 f9b4 	bl	800ab02 <USBD_CtlContinueRx>
 800979a:	e07d      	b.n	8009898 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d014      	beq.n	80097d4 <USBD_LL_DataOutStage+0x98>
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d81d      	bhi.n	80097ea <USBD_LL_DataOutStage+0xae>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <USBD_LL_DataOutStage+0x7c>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <USBD_LL_DataOutStage+0x82>
 80097b6:	e018      	b.n	80097ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75bb      	strb	r3, [r7, #22]
            break;
 80097bc:	e018      	b.n	80097f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	4619      	mov	r1, r3
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fa64 	bl	8009c96 <USBD_CoreFindIF>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75bb      	strb	r3, [r7, #22]
            break;
 80097d2:	e00d      	b.n	80097f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	4619      	mov	r1, r3
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 fa66 	bl	8009cb0 <USBD_CoreFindEP>
 80097e4:	4603      	mov	r3, r0
 80097e6:	75bb      	strb	r3, [r7, #22]
            break;
 80097e8:	e002      	b.n	80097f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75bb      	strb	r3, [r7, #22]
            break;
 80097ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097f0:	7dbb      	ldrb	r3, [r7, #22]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d119      	bne.n	800982a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d113      	bne.n	800982a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009802:	7dba      	ldrb	r2, [r7, #22]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	32ae      	adds	r2, #174	; 0xae
 8009808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00b      	beq.n	800982a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009812:	7dba      	ldrb	r2, [r7, #22]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800981a:	7dba      	ldrb	r2, [r7, #22]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	32ae      	adds	r2, #174	; 0xae
 8009820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f001 f97a 	bl	800ab24 <USBD_CtlSendStatus>
 8009830:	e032      	b.n	8009898 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009838:	b2db      	uxtb	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 fa37 	bl	8009cb0 <USBD_CoreFindEP>
 8009842:	4603      	mov	r3, r0
 8009844:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009846:	7dbb      	ldrb	r3, [r7, #22]
 8009848:	2bff      	cmp	r3, #255	; 0xff
 800984a:	d025      	beq.n	8009898 <USBD_LL_DataOutStage+0x15c>
 800984c:	7dbb      	ldrb	r3, [r7, #22]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d122      	bne.n	8009898 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b03      	cmp	r3, #3
 800985c:	d117      	bne.n	800988e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800985e:	7dba      	ldrb	r2, [r7, #22]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	32ae      	adds	r2, #174	; 0xae
 8009864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00f      	beq.n	800988e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800986e:	7dba      	ldrb	r2, [r7, #22]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009876:	7dba      	ldrb	r2, [r7, #22]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	32ae      	adds	r2, #174	; 0xae
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	7afa      	ldrb	r2, [r7, #11]
 8009884:	4611      	mov	r1, r2
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	e000      	b.n	800989a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	460b      	mov	r3, r1
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098b0:	7afb      	ldrb	r3, [r7, #11]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d16f      	bne.n	8009996 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3314      	adds	r3, #20
 80098ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d15a      	bne.n	800997c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d914      	bls.n	80098fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	689a      	ldr	r2, [r3, #8]
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f001 f8dc 	bl	800aaa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ee:	2300      	movs	r3, #0
 80098f0:	2200      	movs	r2, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f001 fe63 	bl	800b5c0 <USBD_LL_PrepareReceive>
 80098fa:	e03f      	b.n	800997c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	d11c      	bne.n	8009942 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009910:	429a      	cmp	r2, r3
 8009912:	d316      	bcc.n	8009942 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800991e:	429a      	cmp	r2, r3
 8009920:	d20f      	bcs.n	8009942 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009922:	2200      	movs	r2, #0
 8009924:	2100      	movs	r1, #0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 f8bd 	bl	800aaa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009934:	2300      	movs	r3, #0
 8009936:	2200      	movs	r2, #0
 8009938:	2100      	movs	r1, #0
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f001 fe40 	bl	800b5c0 <USBD_LL_PrepareReceive>
 8009940:	e01c      	b.n	800997c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b03      	cmp	r3, #3
 800994c:	d10f      	bne.n	800996e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800996e:	2180      	movs	r1, #128	; 0x80
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f001 fd1f 	bl	800b3b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f001 f8e7 	bl	800ab4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d03a      	beq.n	80099fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff fe42 	bl	8009610 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009994:	e032      	b.n	80099fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800999c:	b2db      	uxtb	r3, r3
 800999e:	4619      	mov	r1, r3
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f985 	bl	8009cb0 <USBD_CoreFindEP>
 80099a6:	4603      	mov	r3, r0
 80099a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	2bff      	cmp	r3, #255	; 0xff
 80099ae:	d025      	beq.n	80099fc <USBD_LL_DataInStage+0x15a>
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d122      	bne.n	80099fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d11c      	bne.n	80099fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099c2:	7dfa      	ldrb	r2, [r7, #23]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	32ae      	adds	r2, #174	; 0xae
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d014      	beq.n	80099fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099d2:	7dfa      	ldrb	r2, [r7, #23]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099da:	7dfa      	ldrb	r2, [r7, #23]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	32ae      	adds	r2, #174	; 0xae
 80099e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	7afa      	ldrb	r2, [r7, #11]
 80099e8:	4611      	mov	r1, r2
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	4798      	blx	r3
 80099ee:	4603      	mov	r3, r0
 80099f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099f2:	7dbb      	ldrb	r3, [r7, #22]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099f8:	7dbb      	ldrb	r3, [r7, #22]
 80099fa:	e000      	b.n	80099fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d014      	beq.n	8009a6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00e      	beq.n	8009a6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6852      	ldr	r2, [r2, #4]
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fc2a 	bl	800b2cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2240      	movs	r2, #64	; 0x40
 8009a84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2180      	movs	r1, #128	; 0x80
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fc1c 	bl	800b2cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2240      	movs	r2, #64	; 0x40
 8009a9e:	621a      	str	r2, [r3, #32]

  return ret;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d006      	beq.n	8009aec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2204      	movs	r2, #4
 8009af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d106      	bne.n	8009b24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d110      	bne.n	8009b68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	32ae      	adds	r2, #174	; 0xae
 8009b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e01c      	b.n	8009bce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d115      	bne.n	8009bcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	32ae      	adds	r2, #174	; 0xae
 8009baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	; 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	32ae      	adds	r2, #174	; 0xae
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e01c      	b.n	8009c32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d115      	bne.n	8009c30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32ae      	adds	r2, #174	; 0xae
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	32ae      	adds	r2, #174	; 0xae
 8009c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00e      	beq.n	8009c8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	6852      	ldr	r2, [r2, #4]
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ca2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b086      	sub	sp, #24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	885b      	ldrh	r3, [r3, #2]
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d920      	bls.n	8009d34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009cfa:	e013      	b.n	8009d24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009cfc:	f107 030a 	add.w	r3, r7, #10
 8009d00:	4619      	mov	r1, r3
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f000 f81b 	bl	8009d3e <USBD_GetNextDesc>
 8009d08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d108      	bne.n	8009d24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	789b      	ldrb	r3, [r3, #2]
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d008      	beq.n	8009d32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	897b      	ldrh	r3, [r7, #10]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d8e5      	bhi.n	8009cfc <USBD_GetEpDesc+0x32>
 8009d30:	e000      	b.n	8009d34 <USBD_GetEpDesc+0x6a>
          break;
 8009d32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d34:	693b      	ldr	r3, [r7, #16]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	881a      	ldrh	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4413      	add	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4413      	add	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d96:	8a3b      	ldrh	r3, [r7, #16]
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	b21a      	sxth	r2, r3
 8009d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b21b      	sxth	r3, r3
 8009da4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009da6:	89fb      	ldrh	r3, [r7, #14]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dca:	2b40      	cmp	r3, #64	; 0x40
 8009dcc:	d005      	beq.n	8009dda <USBD_StdDevReq+0x26>
 8009dce:	2b40      	cmp	r3, #64	; 0x40
 8009dd0:	d857      	bhi.n	8009e82 <USBD_StdDevReq+0xce>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00f      	beq.n	8009df6 <USBD_StdDevReq+0x42>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d153      	bne.n	8009e82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	32ae      	adds	r2, #174	; 0xae
 8009de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	4798      	blx	r3
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
      break;
 8009df4:	e04a      	b.n	8009e8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	d83b      	bhi.n	8009e76 <USBD_StdDevReq+0xc2>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USBD_StdDevReq+0x50>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009e6d 	.word	0x08009e6d
 8009e0c:	08009e77 	.word	0x08009e77
 8009e10:	08009e63 	.word	0x08009e63
 8009e14:	08009e77 	.word	0x08009e77
 8009e18:	08009e37 	.word	0x08009e37
 8009e1c:	08009e2d 	.word	0x08009e2d
 8009e20:	08009e77 	.word	0x08009e77
 8009e24:	08009e4f 	.word	0x08009e4f
 8009e28:	08009e41 	.word	0x08009e41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa3c 	bl	800a2ac <USBD_GetDescriptor>
          break;
 8009e34:	e024      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbcb 	bl	800a5d4 <USBD_SetAddress>
          break;
 8009e3e:	e01f      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fc0a 	bl	800a65c <USBD_SetConfig>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e4c:	e018      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fcad 	bl	800a7b0 <USBD_GetConfig>
          break;
 8009e56:	e013      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fcde 	bl	800a81c <USBD_GetStatus>
          break;
 8009e60:	e00e      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fd0d 	bl	800a884 <USBD_SetFeature>
          break;
 8009e6a:	e009      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fd31 	bl	800a8d6 <USBD_ClrFeature>
          break;
 8009e74:	e004      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fd88 	bl	800a98e <USBD_CtlError>
          break;
 8009e7e:	bf00      	nop
      }
      break;
 8009e80:	e004      	b.n	8009e8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fd82 	bl	800a98e <USBD_CtlError>
      break;
 8009e8a:	bf00      	nop
  }

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop

08009e98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eae:	2b40      	cmp	r3, #64	; 0x40
 8009eb0:	d005      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d852      	bhi.n	8009f5c <USBD_StdItfReq+0xc4>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d14e      	bne.n	8009f5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d840      	bhi.n	8009f4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	889b      	ldrh	r3, [r3, #4]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d836      	bhi.n	8009f44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	889b      	ldrh	r3, [r3, #4]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fed9 	bl	8009c96 <USBD_CoreFindIF>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2bff      	cmp	r3, #255	; 0xff
 8009eec:	d01d      	beq.n	8009f2a <USBD_StdItfReq+0x92>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11a      	bne.n	8009f2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef4:	7bba      	ldrb	r2, [r7, #14]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32ae      	adds	r2, #174	; 0xae
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00f      	beq.n	8009f24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f04:	7bba      	ldrb	r2, [r7, #14]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f0c:	7bba      	ldrb	r2, [r7, #14]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32ae      	adds	r2, #174	; 0xae
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f22:	e004      	b.n	8009f2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f28:	e001      	b.n	8009f2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d110      	bne.n	8009f58 <USBD_StdItfReq+0xc0>
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10d      	bne.n	8009f58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fdf1 	bl	800ab24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f42:	e009      	b.n	8009f58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fd21 	bl	800a98e <USBD_CtlError>
          break;
 8009f4c:	e004      	b.n	8009f58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fd1c 	bl	800a98e <USBD_CtlError>
          break;
 8009f56:	e000      	b.n	8009f5a <USBD_StdItfReq+0xc2>
          break;
 8009f58:	bf00      	nop
      }
      break;
 8009f5a:	e004      	b.n	8009f66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fd15 	bl	800a98e <USBD_CtlError>
      break;
 8009f64:	bf00      	nop
  }

  return ret;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	889b      	ldrh	r3, [r3, #4]
 8009f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f8c:	2b40      	cmp	r3, #64	; 0x40
 8009f8e:	d007      	beq.n	8009fa0 <USBD_StdEPReq+0x30>
 8009f90:	2b40      	cmp	r3, #64	; 0x40
 8009f92:	f200 817f 	bhi.w	800a294 <USBD_StdEPReq+0x324>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d02a      	beq.n	8009ff0 <USBD_StdEPReq+0x80>
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	f040 817a 	bne.w	800a294 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fe83 	bl	8009cb0 <USBD_CoreFindEP>
 8009faa:	4603      	mov	r3, r0
 8009fac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fae:	7b7b      	ldrb	r3, [r7, #13]
 8009fb0:	2bff      	cmp	r3, #255	; 0xff
 8009fb2:	f000 8174 	beq.w	800a29e <USBD_StdEPReq+0x32e>
 8009fb6:	7b7b      	ldrb	r3, [r7, #13]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 8170 	bne.w	800a29e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009fbe:	7b7a      	ldrb	r2, [r7, #13]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009fc6:	7b7a      	ldrb	r2, [r7, #13]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	32ae      	adds	r2, #174	; 0xae
 8009fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8163 	beq.w	800a29e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009fd8:	7b7a      	ldrb	r2, [r7, #13]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32ae      	adds	r2, #174	; 0xae
 8009fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fee:	e156      	b.n	800a29e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d008      	beq.n	800a00a <USBD_StdEPReq+0x9a>
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	f300 8145 	bgt.w	800a288 <USBD_StdEPReq+0x318>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 809b 	beq.w	800a13a <USBD_StdEPReq+0x1ca>
 800a004:	2b01      	cmp	r3, #1
 800a006:	d03c      	beq.n	800a082 <USBD_StdEPReq+0x112>
 800a008:	e13e      	b.n	800a288 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d002      	beq.n	800a01c <USBD_StdEPReq+0xac>
 800a016:	2b03      	cmp	r3, #3
 800a018:	d016      	beq.n	800a048 <USBD_StdEPReq+0xd8>
 800a01a:	e02c      	b.n	800a076 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <USBD_StdEPReq+0xce>
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b80      	cmp	r3, #128	; 0x80
 800a026:	d00a      	beq.n	800a03e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 f9c1 	bl	800b3b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a032:	2180      	movs	r1, #128	; 0x80
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f9bd 	bl	800b3b4 <USBD_LL_StallEP>
 800a03a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a03c:	e020      	b.n	800a080 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fca4 	bl	800a98e <USBD_CtlError>
              break;
 800a046:	e01b      	b.n	800a080 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	885b      	ldrh	r3, [r3, #2]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10e      	bne.n	800a06e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00b      	beq.n	800a06e <USBD_StdEPReq+0xfe>
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d008      	beq.n	800a06e <USBD_StdEPReq+0xfe>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	88db      	ldrh	r3, [r3, #6]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f9a3 	bl	800b3b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd58 	bl	800ab24 <USBD_CtlSendStatus>

              break;
 800a074:	e004      	b.n	800a080 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fc88 	bl	800a98e <USBD_CtlError>
              break;
 800a07e:	bf00      	nop
          }
          break;
 800a080:	e107      	b.n	800a292 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d002      	beq.n	800a094 <USBD_StdEPReq+0x124>
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d016      	beq.n	800a0c0 <USBD_StdEPReq+0x150>
 800a092:	e04b      	b.n	800a12c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00d      	beq.n	800a0b6 <USBD_StdEPReq+0x146>
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	2b80      	cmp	r3, #128	; 0x80
 800a09e:	d00a      	beq.n	800a0b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 f985 	bl	800b3b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0aa:	2180      	movs	r1, #128	; 0x80
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f981 	bl	800b3b4 <USBD_LL_StallEP>
 800a0b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0b4:	e040      	b.n	800a138 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fc68 	bl	800a98e <USBD_CtlError>
              break;
 800a0be:	e03b      	b.n	800a138 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	885b      	ldrh	r3, [r3, #2]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d136      	bne.n	800a136 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f001 f9a2 	bl	800b420 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fd21 	bl	800ab24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fde2 	bl	8009cb0 <USBD_CoreFindEP>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0f0:	7b7b      	ldrb	r3, [r7, #13]
 800a0f2:	2bff      	cmp	r3, #255	; 0xff
 800a0f4:	d01f      	beq.n	800a136 <USBD_StdEPReq+0x1c6>
 800a0f6:	7b7b      	ldrb	r3, [r7, #13]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d11c      	bne.n	800a136 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0fc:	7b7a      	ldrb	r2, [r7, #13]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a104:	7b7a      	ldrb	r2, [r7, #13]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	32ae      	adds	r2, #174	; 0xae
 800a10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d010      	beq.n	800a136 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a114:	7b7a      	ldrb	r2, [r7, #13]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	32ae      	adds	r2, #174	; 0xae
 800a11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a12a:	e004      	b.n	800a136 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fc2d 	bl	800a98e <USBD_CtlError>
              break;
 800a134:	e000      	b.n	800a138 <USBD_StdEPReq+0x1c8>
              break;
 800a136:	bf00      	nop
          }
          break;
 800a138:	e0ab      	b.n	800a292 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b02      	cmp	r3, #2
 800a144:	d002      	beq.n	800a14c <USBD_StdEPReq+0x1dc>
 800a146:	2b03      	cmp	r3, #3
 800a148:	d032      	beq.n	800a1b0 <USBD_StdEPReq+0x240>
 800a14a:	e097      	b.n	800a27c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <USBD_StdEPReq+0x1f2>
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	2b80      	cmp	r3, #128	; 0x80
 800a156:	d004      	beq.n	800a162 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fc17 	bl	800a98e <USBD_CtlError>
                break;
 800a160:	e091      	b.n	800a286 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	da0b      	bge.n	800a182 <USBD_StdEPReq+0x212>
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	3310      	adds	r3, #16
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	3304      	adds	r3, #4
 800a180:	e00b      	b.n	800a19a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4413      	add	r3, r2
 800a198:	3304      	adds	r3, #4
 800a19a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fc61 	bl	800aa70 <USBD_CtlSendData>
              break;
 800a1ae:	e06a      	b.n	800a286 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da11      	bge.n	800a1dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	f003 020f 	and.w	r2, r3, #15
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	3324      	adds	r3, #36	; 0x24
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d117      	bne.n	800a202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fbda 	bl	800a98e <USBD_CtlError>
                  break;
 800a1da:	e054      	b.n	800a286 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	f003 020f 	and.w	r2, r3, #15
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fbc7 	bl	800a98e <USBD_CtlError>
                  break;
 800a200:	e041      	b.n	800a286 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a206:	2b00      	cmp	r3, #0
 800a208:	da0b      	bge.n	800a222 <USBD_StdEPReq+0x2b2>
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	3310      	adds	r3, #16
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	3304      	adds	r3, #4
 800a220:	e00b      	b.n	800a23a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4413      	add	r3, r2
 800a238:	3304      	adds	r3, #4
 800a23a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <USBD_StdEPReq+0x2d8>
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	2b80      	cmp	r3, #128	; 0x80
 800a246:	d103      	bne.n	800a250 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e00e      	b.n	800a26e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f919 	bl	800b48c <USBD_LL_IsStallEP>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e002      	b.n	800a26e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2202      	movs	r2, #2
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fbfb 	bl	800aa70 <USBD_CtlSendData>
              break;
 800a27a:	e004      	b.n	800a286 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fb85 	bl	800a98e <USBD_CtlError>
              break;
 800a284:	bf00      	nop
          }
          break;
 800a286:	e004      	b.n	800a292 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fb7f 	bl	800a98e <USBD_CtlError>
          break;
 800a290:	bf00      	nop
      }
      break;
 800a292:	e005      	b.n	800a2a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fb79 	bl	800a98e <USBD_CtlError>
      break;
 800a29c:	e000      	b.n	800a2a0 <USBD_StdEPReq+0x330>
      break;
 800a29e:	bf00      	nop
  }

  return ret;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	2b0e      	cmp	r3, #14
 800a2ce:	f200 8152 	bhi.w	800a576 <USBD_GetDescriptor+0x2ca>
 800a2d2:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <USBD_GetDescriptor+0x2c>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a349 	.word	0x0800a349
 800a2dc:	0800a361 	.word	0x0800a361
 800a2e0:	0800a3a1 	.word	0x0800a3a1
 800a2e4:	0800a577 	.word	0x0800a577
 800a2e8:	0800a577 	.word	0x0800a577
 800a2ec:	0800a517 	.word	0x0800a517
 800a2f0:	0800a543 	.word	0x0800a543
 800a2f4:	0800a577 	.word	0x0800a577
 800a2f8:	0800a577 	.word	0x0800a577
 800a2fc:	0800a577 	.word	0x0800a577
 800a300:	0800a577 	.word	0x0800a577
 800a304:	0800a577 	.word	0x0800a577
 800a308:	0800a577 	.word	0x0800a577
 800a30c:	0800a577 	.word	0x0800a577
 800a310:	0800a315 	.word	0x0800a315
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	7c12      	ldrb	r2, [r2, #16]
 800a32c:	f107 0108 	add.w	r1, r7, #8
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a336:	e126      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fb27 	bl	800a98e <USBD_CtlError>
        err++;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	3301      	adds	r3, #1
 800a344:	72fb      	strb	r3, [r7, #11]
      break;
 800a346:	e11e      	b.n	800a586 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	7c12      	ldrb	r2, [r2, #16]
 800a354:	f107 0108 	add.w	r1, r7, #8
 800a358:	4610      	mov	r0, r2
 800a35a:	4798      	blx	r3
 800a35c:	60f8      	str	r0, [r7, #12]
      break;
 800a35e:	e112      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	7c1b      	ldrb	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	f107 0208 	add.w	r2, r7, #8
 800a374:	4610      	mov	r0, r2
 800a376:	4798      	blx	r3
 800a378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	2202      	movs	r2, #2
 800a380:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a382:	e100      	b.n	800a586 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	f107 0208 	add.w	r2, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3301      	adds	r3, #1
 800a39a:	2202      	movs	r2, #2
 800a39c:	701a      	strb	r2, [r3, #0]
      break;
 800a39e:	e0f2      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	885b      	ldrh	r3, [r3, #2]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	f200 80ac 	bhi.w	800a504 <USBD_GetDescriptor+0x258>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <USBD_GetDescriptor+0x108>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a401 	.word	0x0800a401
 800a3bc:	0800a435 	.word	0x0800a435
 800a3c0:	0800a469 	.word	0x0800a469
 800a3c4:	0800a49d 	.word	0x0800a49d
 800a3c8:	0800a4d1 	.word	0x0800a4d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7c12      	ldrb	r2, [r2, #16]
 800a3e4:	f107 0108 	add.w	r1, r7, #8
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
 800a3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ee:	e091      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 facb 	bl	800a98e <USBD_CtlError>
            err++;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fe:	e089      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	7c12      	ldrb	r2, [r2, #16]
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a422:	e077      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fab1 	bl	800a98e <USBD_CtlError>
            err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
          break;
 800a432:	e06f      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7c12      	ldrb	r2, [r2, #16]
 800a44c:	f107 0108 	add.w	r1, r7, #8
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
 800a454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a456:	e05d      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa97 	bl	800a98e <USBD_CtlError>
            err++;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	3301      	adds	r3, #1
 800a464:	72fb      	strb	r3, [r7, #11]
          break;
 800a466:	e055      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	7c12      	ldrb	r2, [r2, #16]
 800a480:	f107 0108 	add.w	r1, r7, #8
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a48a:	e043      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa7d 	bl	800a98e <USBD_CtlError>
            err++;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	3301      	adds	r3, #1
 800a498:	72fb      	strb	r3, [r7, #11]
          break;
 800a49a:	e03b      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7c12      	ldrb	r2, [r2, #16]
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4be:	e029      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa63 	bl	800a98e <USBD_CtlError>
            err++;
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ce:	e021      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	7c12      	ldrb	r2, [r2, #16]
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	4798      	blx	r3
 800a4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f2:	e00f      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fa49 	bl	800a98e <USBD_CtlError>
            err++;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3301      	adds	r3, #1
 800a500:	72fb      	strb	r3, [r7, #11]
          break;
 800a502:	e007      	b.n	800a514 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa41 	bl	800a98e <USBD_CtlError>
          err++;
 800a50c:	7afb      	ldrb	r3, [r7, #11]
 800a50e:	3301      	adds	r3, #1
 800a510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a512:	bf00      	nop
      }
      break;
 800a514:	e037      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7c1b      	ldrb	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a526:	f107 0208 	add.w	r2, r7, #8
 800a52a:	4610      	mov	r0, r2
 800a52c:	4798      	blx	r3
 800a52e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a530:	e029      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fa2a 	bl	800a98e <USBD_CtlError>
        err++;
 800a53a:	7afb      	ldrb	r3, [r7, #11]
 800a53c:	3301      	adds	r3, #1
 800a53e:	72fb      	strb	r3, [r7, #11]
      break;
 800a540:	e021      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	7c1b      	ldrb	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	f107 0208 	add.w	r2, r7, #8
 800a556:	4610      	mov	r0, r2
 800a558:	4798      	blx	r3
 800a55a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	2207      	movs	r2, #7
 800a562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a564:	e00f      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa10 	bl	800a98e <USBD_CtlError>
        err++;
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	3301      	adds	r3, #1
 800a572:	72fb      	strb	r3, [r7, #11]
      break;
 800a574:	e007      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fa08 	bl	800a98e <USBD_CtlError>
      err++;
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	3301      	adds	r3, #1
 800a582:	72fb      	strb	r3, [r7, #11]
      break;
 800a584:	bf00      	nop
  }

  if (err != 0U)
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d11e      	bne.n	800a5ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	88db      	ldrh	r3, [r3, #6]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d016      	beq.n	800a5c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a594:	893b      	ldrh	r3, [r7, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00e      	beq.n	800a5b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	88da      	ldrh	r2, [r3, #6]
 800a59e:	893b      	ldrh	r3, [r7, #8]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	bf28      	it	cs
 800a5a4:	4613      	movcs	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5aa:	893b      	ldrh	r3, [r7, #8]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fa5d 	bl	800aa70 <USBD_CtlSendData>
 800a5b6:	e009      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f9e7 	bl	800a98e <USBD_CtlError>
 800a5c0:	e004      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 faae 	bl	800ab24 <USBD_CtlSendStatus>
 800a5c8:	e000      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    return;
 800a5ca:	bf00      	nop
  }
}
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop

0800a5d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	889b      	ldrh	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d131      	bne.n	800a64a <USBD_SetAddress+0x76>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	88db      	ldrh	r3, [r3, #6]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d12d      	bne.n	800a64a <USBD_SetAddress+0x76>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	885b      	ldrh	r3, [r3, #2]
 800a5f2:	2b7f      	cmp	r3, #127	; 0x7f
 800a5f4:	d829      	bhi.n	800a64a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d104      	bne.n	800a618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f9bc 	bl	800a98e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a616:	e01d      	b.n	800a654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7bfa      	ldrb	r2, [r7, #15]
 800a61c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 ff5d 	bl	800b4e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa7a 	bl	800ab24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2202      	movs	r2, #2
 800a63a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63e:	e009      	b.n	800a654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a648:	e004      	b.n	800a654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f99e 	bl	800a98e <USBD_CtlError>
  }
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	4b4e      	ldr	r3, [pc, #312]	; (800a7ac <USBD_SetConfig+0x150>)
 800a672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a674:	4b4d      	ldr	r3, [pc, #308]	; (800a7ac <USBD_SetConfig+0x150>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d905      	bls.n	800a688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f985 	bl	800a98e <USBD_CtlError>
    return USBD_FAIL;
 800a684:	2303      	movs	r3, #3
 800a686:	e08c      	b.n	800a7a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d002      	beq.n	800a69a <USBD_SetConfig+0x3e>
 800a694:	2b03      	cmp	r3, #3
 800a696:	d029      	beq.n	800a6ec <USBD_SetConfig+0x90>
 800a698:	e075      	b.n	800a786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a69a:	4b44      	ldr	r3, [pc, #272]	; (800a7ac <USBD_SetConfig+0x150>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d020      	beq.n	800a6e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a6a2:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <USBD_SetConfig+0x150>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6ac:	4b3f      	ldr	r3, [pc, #252]	; (800a7ac <USBD_SetConfig+0x150>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fe ffb7 	bl	8009626 <USBD_SetClassConfig>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d008      	beq.n	800a6d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f962 	bl	800a98e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6d2:	e065      	b.n	800a7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fa25 	bl	800ab24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a6e2:	e05d      	b.n	800a7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fa1d 	bl	800ab24 <USBD_CtlSendStatus>
      break;
 800a6ea:	e059      	b.n	800a7a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6ec:	4b2f      	ldr	r3, [pc, #188]	; (800a7ac <USBD_SetConfig+0x150>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d112      	bne.n	800a71a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a6fc:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <USBD_SetConfig+0x150>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a706:	4b29      	ldr	r3, [pc, #164]	; (800a7ac <USBD_SetConfig+0x150>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7fe ffa6 	bl	800965e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa06 	bl	800ab24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a718:	e042      	b.n	800a7a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <USBD_SetConfig+0x150>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d02a      	beq.n	800a77e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7fe ff94 	bl	800965e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <USBD_SetConfig+0x150>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <USBD_SetConfig+0x150>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fe ff6d 	bl	8009626 <USBD_SetClassConfig>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f918 	bl	800a98e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7fe ff79 	bl	800965e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a774:	e014      	b.n	800a7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f9d4 	bl	800ab24 <USBD_CtlSendStatus>
      break;
 800a77c:	e010      	b.n	800a7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f9d0 	bl	800ab24 <USBD_CtlSendStatus>
      break;
 800a784:	e00c      	b.n	800a7a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f900 	bl	800a98e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <USBD_SetConfig+0x150>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7fe ff62 	bl	800965e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a79a:	2303      	movs	r3, #3
 800a79c:	73fb      	strb	r3, [r7, #15]
      break;
 800a79e:	bf00      	nop
  }

  return ret;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200005c8 	.word	0x200005c8

0800a7b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	88db      	ldrh	r3, [r3, #6]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d004      	beq.n	800a7cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f8e2 	bl	800a98e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7ca:	e023      	b.n	800a814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	dc02      	bgt.n	800a7de <USBD_GetConfig+0x2e>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc03      	bgt.n	800a7e4 <USBD_GetConfig+0x34>
 800a7dc:	e015      	b.n	800a80a <USBD_GetConfig+0x5a>
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d00b      	beq.n	800a7fa <USBD_GetConfig+0x4a>
 800a7e2:	e012      	b.n	800a80a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f93c 	bl	800aa70 <USBD_CtlSendData>
        break;
 800a7f8:	e00c      	b.n	800a814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	2201      	movs	r2, #1
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f934 	bl	800aa70 <USBD_CtlSendData>
        break;
 800a808:	e004      	b.n	800a814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8be 	bl	800a98e <USBD_CtlError>
        break;
 800a812:	bf00      	nop
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b02      	cmp	r3, #2
 800a832:	d81e      	bhi.n	800a872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	88db      	ldrh	r3, [r3, #6]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d004      	beq.n	800a846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8a5 	bl	800a98e <USBD_CtlError>
        break;
 800a844:	e01a      	b.n	800a87c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f043 0202 	orr.w	r2, r3, #2
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	330c      	adds	r3, #12
 800a866:	2202      	movs	r2, #2
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f900 	bl	800aa70 <USBD_CtlSendData>
      break;
 800a870:	e004      	b.n	800a87c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f88a 	bl	800a98e <USBD_CtlError>
      break;
 800a87a:	bf00      	nop
  }
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d107      	bne.n	800a8a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f940 	bl	800ab24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a8a4:	e013      	b.n	800a8ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d10b      	bne.n	800a8c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	889b      	ldrh	r3, [r3, #4]
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f930 	bl	800ab24 <USBD_CtlSendStatus>
}
 800a8c4:	e003      	b.n	800a8ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f860 	bl	800a98e <USBD_CtlError>
}
 800a8ce:	bf00      	nop
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d80b      	bhi.n	800a906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10c      	bne.n	800a910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f910 	bl	800ab24 <USBD_CtlSendStatus>
      }
      break;
 800a904:	e004      	b.n	800a910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f840 	bl	800a98e <USBD_CtlError>
      break;
 800a90e:	e000      	b.n	800a912 <USBD_ClrFeature+0x3c>
      break;
 800a910:	bf00      	nop
  }
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff fa17 	bl	8009d78 <SWAPBYTE>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3301      	adds	r3, #1
 800a95c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fa0a 	bl	8009d78 <SWAPBYTE>
 800a964:	4603      	mov	r3, r0
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff f9fd 	bl	8009d78 <SWAPBYTE>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	80da      	strh	r2, [r3, #6]
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a998:	2180      	movs	r1, #128	; 0x80
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fd0a 	bl	800b3b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fd06 	bl	800b3b4 <USBD_LL_StallEP>
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d036      	beq.n	800aa34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f000 f836 	bl	800aa3c <USBD_GetLen>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	7812      	ldrb	r2, [r2, #0]
 800a9e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa00:	e013      	b.n	800aa2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	4413      	add	r3, r2
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	7812      	ldrb	r2, [r2, #0]
 800aa0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	3301      	adds	r3, #1
 800aa12:	613b      	str	r3, [r7, #16]
    idx++;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	3301      	adds	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	4413      	add	r3, r2
 800aa20:	2200      	movs	r2, #0
 800aa22:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	3301      	adds	r3, #1
 800aa28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e7      	bne.n	800aa02 <USBD_GetString+0x52>
 800aa32:	e000      	b.n	800aa36 <USBD_GetString+0x86>
    return;
 800aa34:	bf00      	nop
  }
}
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa4c:	e005      	b.n	800aa5a <USBD_GetLen+0x1e>
  {
    len++;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	3301      	adds	r3, #1
 800aa52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	3301      	adds	r3, #1
 800aa58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f5      	bne.n	800aa4e <USBD_GetLen+0x12>
  }

  return len;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	2100      	movs	r1, #0
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 fd5a 	bl	800b550 <USBD_LL_Transmit>

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	2100      	movs	r1, #0
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 fd49 	bl	800b550 <USBD_LL_Transmit>

  return USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2203      	movs	r2, #3
 800aad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 fd64 	bl	800b5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	2100      	movs	r1, #0
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 fd53 	bl	800b5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab34:	2300      	movs	r3, #0
 800ab36:	2200      	movs	r2, #0
 800ab38:	2100      	movs	r1, #0
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fd08 	bl	800b550 <USBD_LL_Transmit>

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2205      	movs	r2, #5
 800ab56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2100      	movs	r1, #0
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fd2d 	bl	800b5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab74:	2200      	movs	r2, #0
 800ab76:	4912      	ldr	r1, [pc, #72]	; (800abc0 <MX_USB_DEVICE_Init+0x50>)
 800ab78:	4812      	ldr	r0, [pc, #72]	; (800abc4 <MX_USB_DEVICE_Init+0x54>)
 800ab7a:	f7fe fcd7 	bl	800952c <USBD_Init>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab84:	f7f6 ff96 	bl	8001ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ab88:	490f      	ldr	r1, [pc, #60]	; (800abc8 <MX_USB_DEVICE_Init+0x58>)
 800ab8a:	480e      	ldr	r0, [pc, #56]	; (800abc4 <MX_USB_DEVICE_Init+0x54>)
 800ab8c:	f7fe fcfe 	bl	800958c <USBD_RegisterClass>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab96:	f7f6 ff8d 	bl	8001ab4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ab9a:	490c      	ldr	r1, [pc, #48]	; (800abcc <MX_USB_DEVICE_Init+0x5c>)
 800ab9c:	4809      	ldr	r0, [pc, #36]	; (800abc4 <MX_USB_DEVICE_Init+0x54>)
 800ab9e:	f7fe fcab 	bl	80094f8 <USBD_CUSTOM_HID_RegisterInterface>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aba8:	f7f6 ff84 	bl	8001ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800abac:	4805      	ldr	r0, [pc, #20]	; (800abc4 <MX_USB_DEVICE_Init+0x54>)
 800abae:	f7fe fd23 	bl	80095f8 <USBD_Start>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abb8:	f7f6 ff7c 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abbc:	bf00      	nop
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	200000b8 	.word	0x200000b8
 800abc4:	200005cc 	.word	0x200005cc
 800abc8:	2000000c 	.word	0x2000000c
 800abcc:	200000a8 	.word	0x200000a8

0800abd0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800abe4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	4603      	mov	r3, r0
 800abf8:	460a      	mov	r2, r1
 800abfa:	71fb      	strb	r3, [r7, #7]
 800abfc:	4613      	mov	r3, r2
 800abfe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
miflag=1;
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <CUSTOM_HID_OutEvent_FS+0x24>)
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
//  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 800ac06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	200008a8 	.word	0x200008a8

0800ac18 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 800ac24:	887b      	ldrh	r3, [r7, #2]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4804      	ldr	r0, [pc, #16]	; (800ac3c <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 800ac2c:	f7fe fb1c 	bl	8009268 <USBD_CUSTOM_HID_SendReport>
 800ac30:	4603      	mov	r3, r0
 800ac32:	b25b      	sxtb	r3, r3
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	200005cc 	.word	0x200005cc

0800ac40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2212      	movs	r2, #18
 800ac50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac52:	4b03      	ldr	r3, [pc, #12]	; (800ac60 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	200000d8 	.word	0x200000d8

0800ac64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2204      	movs	r2, #4
 800ac74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac76:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	200000f8 	.word	0x200000f8

0800ac88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d105      	bne.n	800aca6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4907      	ldr	r1, [pc, #28]	; (800acbc <USBD_FS_ProductStrDescriptor+0x34>)
 800ac9e:	4808      	ldr	r0, [pc, #32]	; (800acc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aca0:	f7ff fe86 	bl	800a9b0 <USBD_GetString>
 800aca4:	e004      	b.n	800acb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	4904      	ldr	r1, [pc, #16]	; (800acbc <USBD_FS_ProductStrDescriptor+0x34>)
 800acaa:	4805      	ldr	r0, [pc, #20]	; (800acc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800acac:	f7ff fe80 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb0:	4b02      	ldr	r3, [pc, #8]	; (800acbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	200008ac 	.word	0x200008ac
 800acc0:	0800e080 	.word	0x0800e080

0800acc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	4603      	mov	r3, r0
 800accc:	6039      	str	r1, [r7, #0]
 800acce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	4904      	ldr	r1, [pc, #16]	; (800ace4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acd4:	4804      	ldr	r0, [pc, #16]	; (800ace8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acd6:	f7ff fe6b 	bl	800a9b0 <USBD_GetString>
  return USBD_StrDesc;
 800acda:	4b02      	ldr	r3, [pc, #8]	; (800ace4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	200008ac 	.word	0x200008ac
 800ace8:	0800e0a0 	.word	0x0800e0a0

0800acec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	221a      	movs	r2, #26
 800acfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acfe:	f000 f855 	bl	800adac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad02:	4b02      	ldr	r3, [pc, #8]	; (800ad0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200000fc 	.word	0x200000fc

0800ad10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4907      	ldr	r1, [pc, #28]	; (800ad44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad26:	4808      	ldr	r0, [pc, #32]	; (800ad48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad28:	f7ff fe42 	bl	800a9b0 <USBD_GetString>
 800ad2c:	e004      	b.n	800ad38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	4904      	ldr	r1, [pc, #16]	; (800ad44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad32:	4805      	ldr	r0, [pc, #20]	; (800ad48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad34:	f7ff fe3c 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad38:	4b02      	ldr	r3, [pc, #8]	; (800ad44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	200008ac 	.word	0x200008ac
 800ad48:	0800e0b4 	.word	0x0800e0b4

0800ad4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d105      	bne.n	800ad6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	4907      	ldr	r1, [pc, #28]	; (800ad80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad62:	4808      	ldr	r0, [pc, #32]	; (800ad84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad64:	f7ff fe24 	bl	800a9b0 <USBD_GetString>
 800ad68:	e004      	b.n	800ad74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	4904      	ldr	r1, [pc, #16]	; (800ad80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad6e:	4805      	ldr	r0, [pc, #20]	; (800ad84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad70:	f7ff fe1e 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad74:	4b02      	ldr	r3, [pc, #8]	; (800ad80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200008ac 	.word	0x200008ac
 800ad84:	0800e0c8 	.word	0x0800e0c8

0800ad88 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6039      	str	r1, [r7, #0]
 800ad92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	220c      	movs	r2, #12
 800ad98:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ad9a:	4b03      	ldr	r3, [pc, #12]	; (800ada8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	200000ec 	.word	0x200000ec

0800adac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <Get_SerialNum+0x44>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800adb8:	4b0e      	ldr	r3, [pc, #56]	; (800adf4 <Get_SerialNum+0x48>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adbe:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <Get_SerialNum+0x4c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800add2:	2208      	movs	r2, #8
 800add4:	4909      	ldr	r1, [pc, #36]	; (800adfc <Get_SerialNum+0x50>)
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f814 	bl	800ae04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800addc:	2204      	movs	r2, #4
 800adde:	4908      	ldr	r1, [pc, #32]	; (800ae00 <Get_SerialNum+0x54>)
 800ade0:	68b8      	ldr	r0, [r7, #8]
 800ade2:	f000 f80f 	bl	800ae04 <IntToUnicode>
  }
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	1fff7590 	.word	0x1fff7590
 800adf4:	1fff7594 	.word	0x1fff7594
 800adf8:	1fff7598 	.word	0x1fff7598
 800adfc:	200000fe 	.word	0x200000fe
 800ae00:	2000010e 	.word	0x2000010e

0800ae04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
 800ae1a:	e027      	b.n	800ae6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	0f1b      	lsrs	r3, r3, #28
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	d80b      	bhi.n	800ae3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	0f1b      	lsrs	r3, r3, #28
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	4619      	mov	r1, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	440b      	add	r3, r1
 800ae34:	3230      	adds	r2, #48	; 0x30
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e00a      	b.n	800ae52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	0f1b      	lsrs	r3, r3, #28
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	4619      	mov	r1, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3237      	adds	r2, #55	; 0x37
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
 800ae6c:	7dfa      	ldrb	r2, [r7, #23]
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3d3      	bcc.n	800ae1c <IntToUnicode+0x18>
  }
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
	...

0800ae84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b0ac      	sub	sp, #176	; 0xb0
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	605a      	str	r2, [r3, #4]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	2288      	movs	r2, #136	; 0x88
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 f988 	bl	800c1ba <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeb2:	f040 8085 	bne.w	800afc0 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800aeb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aeba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800aebc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800aec4:	2301      	movs	r3, #1
 800aec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800aec8:	2301      	movs	r3, #1
 800aeca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800aecc:	2318      	movs	r3, #24
 800aece:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800aed0:	2307      	movs	r3, #7
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800aed4:	2302      	movs	r3, #2
 800aed6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800aed8:	2302      	movs	r3, #2
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800aedc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aee0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aee2:	f107 0314 	add.w	r3, r7, #20
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fa fd30 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800aef2:	f7f6 fddf 	bl	8001ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aef6:	4b34      	ldr	r3, [pc, #208]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800aef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefa:	4a33      	ldr	r2, [pc, #204]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af02:	4b31      	ldr	r3, [pc, #196]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800af0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af16:	2300      	movs	r3, #0
 800af18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800af22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800af26:	4619      	mov	r1, r3
 800af28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af2c:	f7f7 fc42 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800af30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800af34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af38:	2302      	movs	r3, #2
 800af3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af44:	2303      	movs	r3, #3
 800af46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af4a:	230a      	movs	r3, #10
 800af4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800af54:	4619      	mov	r1, r3
 800af56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af5a:	f7f7 fc2b 	bl	80027b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af5e:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af62:	4a19      	ldr	r2, [pc, #100]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af6a:	4b17      	ldr	r3, [pc, #92]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af76:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d114      	bne.n	800afac <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af82:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af86:	4a10      	ldr	r2, [pc, #64]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af8c:	6593      	str	r3, [r2, #88]	; 0x58
 800af8e:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af96:	60bb      	str	r3, [r7, #8]
 800af98:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800af9a:	f7f9 fe0b 	bl	8004bb4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af9e:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800afa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa2:	4a09      	ldr	r2, [pc, #36]	; (800afc8 <HAL_PCD_MspInit+0x144>)
 800afa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afa8:	6593      	str	r3, [r2, #88]	; 0x58
 800afaa:	e001      	b.n	800afb0 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800afac:	f7f9 fe02 	bl	8004bb4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2100      	movs	r1, #0
 800afb4:	2043      	movs	r0, #67	; 0x43
 800afb6:	f7f7 faba 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afba:	2043      	movs	r0, #67	; 0x43
 800afbc:	f7f7 fad3 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afc0:	bf00      	nop
 800afc2:	37b0      	adds	r7, #176	; 0xb0
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	40021000 	.word	0x40021000

0800afcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f7fe fb55 	bl	8009692 <USBD_LL_SetupStage>
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b002:	78fa      	ldrb	r2, [r7, #3]
 800b004:	6879      	ldr	r1, [r7, #4]
 800b006:	4613      	mov	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	440b      	add	r3, r1
 800b010:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	78fb      	ldrb	r3, [r7, #3]
 800b018:	4619      	mov	r1, r3
 800b01a:	f7fe fb8f 	bl	800973c <USBD_LL_DataOutStage>
}
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	460b      	mov	r3, r1
 800b030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b038:	78fa      	ldrb	r2, [r7, #3]
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	4613      	mov	r3, r2
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	440b      	add	r3, r1
 800b046:	3348      	adds	r3, #72	; 0x48
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	4619      	mov	r1, r3
 800b04e:	f7fe fc28 	bl	80098a2 <USBD_LL_DataInStage>
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fd62 	bl	8009b32 <USBD_LL_SOF>
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b07e:	2301      	movs	r3, #1
 800b080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d001      	beq.n	800b08e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b08a:	f7f6 fd13 	bl	8001ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b094:	7bfa      	ldrb	r2, [r7, #15]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fd06 	bl	8009aaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fcae 	bl	8009a06 <USBD_LL_Reset>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fcf5 	bl	8009aca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <HAL_PCD_SuspendCallback+0x48>)
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	4a03      	ldr	r2, [pc, #12]	; (800b0fc <HAL_PCD_SuspendCallback+0x48>)
 800b0ee:	f043 0306 	orr.w	r3, r3, #6
 800b0f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	e000ed00 	.word	0xe000ed00

0800b100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	6812      	ldr	r2, [r2, #0]
 800b116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b128:	4b08      	ldr	r3, [pc, #32]	; (800b14c <HAL_PCD_ResumeCallback+0x4c>)
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	4a07      	ldr	r2, [pc, #28]	; (800b14c <HAL_PCD_ResumeCallback+0x4c>)
 800b12e:	f023 0306 	bic.w	r3, r3, #6
 800b132:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b134:	f000 fae2 	bl	800b6fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fcdf 	bl	8009b02 <USBD_LL_Resume>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	e000ed00 	.word	0xe000ed00

0800b150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fd35 	bl	8009bd6 <USBD_LL_IsoOUTIncomplete>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fcf1 	bl	8009b72 <USBD_LL_IsoINIncomplete>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fd47 	bl	8009c3a <USBD_LL_DevConnected>
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe fd44 	bl	8009c50 <USBD_LL_DevDisconnected>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d13c      	bne.n	800b25a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1e0:	4a20      	ldr	r2, [pc, #128]	; (800b264 <USBD_LL_Init+0x94>)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a1e      	ldr	r2, [pc, #120]	; (800b264 <USBD_LL_Init+0x94>)
 800b1ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1f0:	4b1c      	ldr	r3, [pc, #112]	; (800b264 <USBD_LL_Init+0x94>)
 800b1f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b1f8:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <USBD_LL_Init+0x94>)
 800b1fa:	2206      	movs	r2, #6
 800b1fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1fe:	4b19      	ldr	r3, [pc, #100]	; (800b264 <USBD_LL_Init+0x94>)
 800b200:	2202      	movs	r2, #2
 800b202:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b204:	4b17      	ldr	r3, [pc, #92]	; (800b264 <USBD_LL_Init+0x94>)
 800b206:	2202      	movs	r2, #2
 800b208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b20a:	4b16      	ldr	r3, [pc, #88]	; (800b264 <USBD_LL_Init+0x94>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b210:	4b14      	ldr	r3, [pc, #80]	; (800b264 <USBD_LL_Init+0x94>)
 800b212:	2200      	movs	r2, #0
 800b214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b216:	4b13      	ldr	r3, [pc, #76]	; (800b264 <USBD_LL_Init+0x94>)
 800b218:	2200      	movs	r2, #0
 800b21a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b21c:	4b11      	ldr	r3, [pc, #68]	; (800b264 <USBD_LL_Init+0x94>)
 800b21e:	2200      	movs	r2, #0
 800b220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b222:	4b10      	ldr	r3, [pc, #64]	; (800b264 <USBD_LL_Init+0x94>)
 800b224:	2200      	movs	r2, #0
 800b226:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b228:	4b0e      	ldr	r3, [pc, #56]	; (800b264 <USBD_LL_Init+0x94>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b22e:	480d      	ldr	r0, [pc, #52]	; (800b264 <USBD_LL_Init+0x94>)
 800b230:	f7f8 fabd 	bl	80037ae <HAL_PCD_Init>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b23a:	f7f6 fc3b 	bl	8001ab4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b23e:	2180      	movs	r1, #128	; 0x80
 800b240:	4808      	ldr	r0, [pc, #32]	; (800b264 <USBD_LL_Init+0x94>)
 800b242:	f7f9 fc0e 	bl	8004a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b246:	2240      	movs	r2, #64	; 0x40
 800b248:	2100      	movs	r1, #0
 800b24a:	4806      	ldr	r0, [pc, #24]	; (800b264 <USBD_LL_Init+0x94>)
 800b24c:	f7f9 fbc2 	bl	80049d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b250:	2280      	movs	r2, #128	; 0x80
 800b252:	2101      	movs	r1, #1
 800b254:	4803      	ldr	r0, [pc, #12]	; (800b264 <USBD_LL_Init+0x94>)
 800b256:	f7f9 fbbd 	bl	80049d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20000aac 	.word	0x20000aac

0800b268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f8 fbb9 	bl	80039f6 <HAL_PCD_Start>
 800b284:	4603      	mov	r3, r0
 800b286:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d816      	bhi.n	800b2bc <USBD_LL_Start+0x54>
 800b28e:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <USBD_LL_Start+0x2c>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b2a5 	.word	0x0800b2a5
 800b298:	0800b2ab 	.word	0x0800b2ab
 800b29c:	0800b2b1 	.word	0x0800b2b1
 800b2a0:	0800b2b7 	.word	0x0800b2b7
    case HAL_OK :
      usb_status = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	e00b      	b.n	800b2c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ae:	e008      	b.n	800b2c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b4:	e005      	b.n	800b2c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ba:	e002      	b.n	800b2c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	bf00      	nop
  }
  return usb_status;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4603      	mov	r3, r0
 800b2dc:	70fb      	strb	r3, [r7, #3]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70bb      	strb	r3, [r7, #2]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2f4:	78bb      	ldrb	r3, [r7, #2]
 800b2f6:	883a      	ldrh	r2, [r7, #0]
 800b2f8:	78f9      	ldrb	r1, [r7, #3]
 800b2fa:	f7f9 f863 	bl	80043c4 <HAL_PCD_EP_Open>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b03      	cmp	r3, #3
 800b306:	d817      	bhi.n	800b338 <USBD_LL_OpenEP+0x6c>
 800b308:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <USBD_LL_OpenEP+0x44>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b327 	.word	0x0800b327
 800b318:	0800b32d 	.word	0x0800b32d
 800b31c:	0800b333 	.word	0x0800b333
    case HAL_OK :
      usb_status = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
    break;
 800b324:	e00b      	b.n	800b33e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	73fb      	strb	r3, [r7, #15]
    break;
 800b32a:	e008      	b.n	800b33e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]
    break;
 800b330:	e005      	b.n	800b33e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	73fb      	strb	r3, [r7, #15]
    break;
 800b336:	e002      	b.n	800b33e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b338:	2303      	movs	r3, #3
 800b33a:	73fb      	strb	r3, [r7, #15]
    break;
 800b33c:	bf00      	nop
  }
  return usb_status;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b362:	78fa      	ldrb	r2, [r7, #3]
 800b364:	4611      	mov	r1, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f7f9 f894 	bl	8004494 <HAL_PCD_EP_Close>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	2b03      	cmp	r3, #3
 800b374:	d816      	bhi.n	800b3a4 <USBD_LL_CloseEP+0x5c>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <USBD_LL_CloseEP+0x34>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b393 	.word	0x0800b393
 800b384:	0800b399 	.word	0x0800b399
 800b388:	0800b39f 	.word	0x0800b39f
    case HAL_OK :
      usb_status = USBD_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	e00b      	b.n	800b3aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	73fb      	strb	r3, [r7, #15]
    break;
 800b396:	e008      	b.n	800b3aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	e005      	b.n	800b3aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a2:	e002      	b.n	800b3aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a8:	bf00      	nop
  }
  return usb_status;
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f9 f90b 	bl	80045ee <HAL_PCD_EP_SetStall>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d816      	bhi.n	800b410 <USBD_LL_StallEP+0x5c>
 800b3e2:	a201      	add	r2, pc, #4	; (adr r2, 800b3e8 <USBD_LL_StallEP+0x34>)
 800b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e8:	0800b3f9 	.word	0x0800b3f9
 800b3ec:	0800b3ff 	.word	0x0800b3ff
 800b3f0:	0800b405 	.word	0x0800b405
 800b3f4:	0800b40b 	.word	0x0800b40b
    case HAL_OK :
      usb_status = USBD_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fc:	e00b      	b.n	800b416 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3fe:	2303      	movs	r3, #3
 800b400:	73fb      	strb	r3, [r7, #15]
    break;
 800b402:	e008      	b.n	800b416 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b404:	2301      	movs	r3, #1
 800b406:	73fb      	strb	r3, [r7, #15]
    break;
 800b408:	e005      	b.n	800b416 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b40a:	2303      	movs	r3, #3
 800b40c:	73fb      	strb	r3, [r7, #15]
    break;
 800b40e:	e002      	b.n	800b416 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b410:	2303      	movs	r3, #3
 800b412:	73fb      	strb	r3, [r7, #15]
    break;
 800b414:	bf00      	nop
  }
  return usb_status;
 800b416:	7bfb      	ldrb	r3, [r7, #15]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b43a:	78fa      	ldrb	r2, [r7, #3]
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f9 f937 	bl	80046b2 <HAL_PCD_EP_ClrStall>
 800b444:	4603      	mov	r3, r0
 800b446:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b448:	7bbb      	ldrb	r3, [r7, #14]
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d816      	bhi.n	800b47c <USBD_LL_ClearStallEP+0x5c>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <USBD_LL_ClearStallEP+0x34>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b465 	.word	0x0800b465
 800b458:	0800b46b 	.word	0x0800b46b
 800b45c:	0800b471 	.word	0x0800b471
 800b460:	0800b477 	.word	0x0800b477
    case HAL_OK :
      usb_status = USBD_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]
    break;
 800b468:	e00b      	b.n	800b482 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	73fb      	strb	r3, [r7, #15]
    break;
 800b46e:	e008      	b.n	800b482 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b470:	2301      	movs	r3, #1
 800b472:	73fb      	strb	r3, [r7, #15]
    break;
 800b474:	e005      	b.n	800b482 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	73fb      	strb	r3, [r7, #15]
    break;
 800b47a:	e002      	b.n	800b482 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b47c:	2303      	movs	r3, #3
 800b47e:	73fb      	strb	r3, [r7, #15]
    break;
 800b480:	bf00      	nop
  }
  return usb_status;
 800b482:	7bfb      	ldrb	r3, [r7, #15]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b49e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da0b      	bge.n	800b4c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ae:	68f9      	ldr	r1, [r7, #12]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	333e      	adds	r3, #62	; 0x3e
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	e00b      	b.n	800b4d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	4611      	mov	r1, r2
 800b502:	4618      	mov	r0, r3
 800b504:	f7f8 ff39 	bl	800437a <HAL_PCD_SetAddress>
 800b508:	4603      	mov	r3, r0
 800b50a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d816      	bhi.n	800b540 <USBD_LL_SetUSBAddress+0x5c>
 800b512:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <USBD_LL_SetUSBAddress+0x34>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b52f 	.word	0x0800b52f
 800b520:	0800b535 	.word	0x0800b535
 800b524:	0800b53b 	.word	0x0800b53b
    case HAL_OK :
      usb_status = USBD_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	73fb      	strb	r3, [r7, #15]
    break;
 800b52c:	e00b      	b.n	800b546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b52e:	2303      	movs	r3, #3
 800b530:	73fb      	strb	r3, [r7, #15]
    break;
 800b532:	e008      	b.n	800b546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b534:	2301      	movs	r3, #1
 800b536:	73fb      	strb	r3, [r7, #15]
    break;
 800b538:	e005      	b.n	800b546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b53a:	2303      	movs	r3, #3
 800b53c:	73fb      	strb	r3, [r7, #15]
    break;
 800b53e:	e002      	b.n	800b546 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	73fb      	strb	r3, [r7, #15]
    break;
 800b544:	bf00      	nop
  }
  return usb_status;
 800b546:	7bfb      	ldrb	r3, [r7, #15]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	460b      	mov	r3, r1
 800b55e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b56e:	7af9      	ldrb	r1, [r7, #11]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	f7f9 f80a 	bl	800458c <HAL_PCD_EP_Transmit>
 800b578:	4603      	mov	r3, r0
 800b57a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b57c:	7dbb      	ldrb	r3, [r7, #22]
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d816      	bhi.n	800b5b0 <USBD_LL_Transmit+0x60>
 800b582:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <USBD_LL_Transmit+0x38>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b599 	.word	0x0800b599
 800b58c:	0800b59f 	.word	0x0800b59f
 800b590:	0800b5a5 	.word	0x0800b5a5
 800b594:	0800b5ab 	.word	0x0800b5ab
    case HAL_OK :
      usb_status = USBD_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	75fb      	strb	r3, [r7, #23]
    break;
 800b59c:	e00b      	b.n	800b5b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	75fb      	strb	r3, [r7, #23]
    break;
 800b5a2:	e008      	b.n	800b5b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
    break;
 800b5a8:	e005      	b.n	800b5b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	75fb      	strb	r3, [r7, #23]
    break;
 800b5ae:	e002      	b.n	800b5b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	75fb      	strb	r3, [r7, #23]
    break;
 800b5b4:	bf00      	nop
  }
  return usb_status;
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	607a      	str	r2, [r7, #4]
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5de:	7af9      	ldrb	r1, [r7, #11]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	f7f8 ffa0 	bl	8004528 <HAL_PCD_EP_Receive>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b5ec:	7dbb      	ldrb	r3, [r7, #22]
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d816      	bhi.n	800b620 <USBD_LL_PrepareReceive+0x60>
 800b5f2:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <USBD_LL_PrepareReceive+0x38>)
 800b5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f8:	0800b609 	.word	0x0800b609
 800b5fc:	0800b60f 	.word	0x0800b60f
 800b600:	0800b615 	.word	0x0800b615
 800b604:	0800b61b 	.word	0x0800b61b
    case HAL_OK :
      usb_status = USBD_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	75fb      	strb	r3, [r7, #23]
    break;
 800b60c:	e00b      	b.n	800b626 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b60e:	2303      	movs	r3, #3
 800b610:	75fb      	strb	r3, [r7, #23]
    break;
 800b612:	e008      	b.n	800b626 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b614:	2301      	movs	r3, #1
 800b616:	75fb      	strb	r3, [r7, #23]
    break;
 800b618:	e005      	b.n	800b626 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b61a:	2303      	movs	r3, #3
 800b61c:	75fb      	strb	r3, [r7, #23]
    break;
 800b61e:	e002      	b.n	800b626 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b620:	2303      	movs	r3, #3
 800b622:	75fb      	strb	r3, [r7, #23]
    break;
 800b624:	bf00      	nop
  }
  return usb_status;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <HAL_PCDEx_LPM_Callback+0x18>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d01f      	beq.n	800b686 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b646:	e03b      	b.n	800b6c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b650:	f000 f854 	bl	800b6fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b654:	4b1c      	ldr	r3, [pc, #112]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	4a1b      	ldr	r2, [pc, #108]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b65a:	f023 0306 	bic.w	r3, r3, #6
 800b65e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6812      	ldr	r2, [r2, #0]
 800b66e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b672:	f023 0301 	bic.w	r3, r3, #1
 800b676:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fa3f 	bl	8009b02 <USBD_LL_Resume>
    break;
 800b684:	e01c      	b.n	800b6c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b698:	f043 0301 	orr.w	r3, r3, #1
 800b69c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fa10 	bl	8009aca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	4a04      	ldr	r2, [pc, #16]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6b8:	f043 0306 	orr.w	r3, r3, #6
 800b6bc:	6113      	str	r3, [r2, #16]
    break;
 800b6be:	bf00      	nop
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed00 	.word	0xe000ed00

0800b6cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800b6d4:	4b03      	ldr	r3, [pc, #12]	; (800b6e4 <USBD_static_malloc+0x18>)
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20000fb8 	.word	0x20000fb8

0800b6e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b700:	f7f5 fe5c 	bl	80013bc <SystemClock_Config>
}
 800b704:	bf00      	nop
 800b706:	bd80      	pop	{r7, pc}

0800b708 <__cvt>:
 800b708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	ec55 4b10 	vmov	r4, r5, d0
 800b710:	2d00      	cmp	r5, #0
 800b712:	460e      	mov	r6, r1
 800b714:	4619      	mov	r1, r3
 800b716:	462b      	mov	r3, r5
 800b718:	bfbb      	ittet	lt
 800b71a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b71e:	461d      	movlt	r5, r3
 800b720:	2300      	movge	r3, #0
 800b722:	232d      	movlt	r3, #45	; 0x2d
 800b724:	700b      	strb	r3, [r1, #0]
 800b726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b72c:	4691      	mov	r9, r2
 800b72e:	f023 0820 	bic.w	r8, r3, #32
 800b732:	bfbc      	itt	lt
 800b734:	4622      	movlt	r2, r4
 800b736:	4614      	movlt	r4, r2
 800b738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b73c:	d005      	beq.n	800b74a <__cvt+0x42>
 800b73e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b742:	d100      	bne.n	800b746 <__cvt+0x3e>
 800b744:	3601      	adds	r6, #1
 800b746:	2102      	movs	r1, #2
 800b748:	e000      	b.n	800b74c <__cvt+0x44>
 800b74a:	2103      	movs	r1, #3
 800b74c:	ab03      	add	r3, sp, #12
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	ab02      	add	r3, sp, #8
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	ec45 4b10 	vmov	d0, r4, r5
 800b758:	4653      	mov	r3, sl
 800b75a:	4632      	mov	r2, r6
 800b75c:	f000 fe34 	bl	800c3c8 <_dtoa_r>
 800b760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b764:	4607      	mov	r7, r0
 800b766:	d102      	bne.n	800b76e <__cvt+0x66>
 800b768:	f019 0f01 	tst.w	r9, #1
 800b76c:	d022      	beq.n	800b7b4 <__cvt+0xac>
 800b76e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b772:	eb07 0906 	add.w	r9, r7, r6
 800b776:	d110      	bne.n	800b79a <__cvt+0x92>
 800b778:	783b      	ldrb	r3, [r7, #0]
 800b77a:	2b30      	cmp	r3, #48	; 0x30
 800b77c:	d10a      	bne.n	800b794 <__cvt+0x8c>
 800b77e:	2200      	movs	r2, #0
 800b780:	2300      	movs	r3, #0
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f5 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b78a:	b918      	cbnz	r0, 800b794 <__cvt+0x8c>
 800b78c:	f1c6 0601 	rsb	r6, r6, #1
 800b790:	f8ca 6000 	str.w	r6, [sl]
 800b794:	f8da 3000 	ldr.w	r3, [sl]
 800b798:	4499      	add	r9, r3
 800b79a:	2200      	movs	r2, #0
 800b79c:	2300      	movs	r3, #0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f5 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a6:	b108      	cbz	r0, 800b7ac <__cvt+0xa4>
 800b7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7ac:	2230      	movs	r2, #48	; 0x30
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	454b      	cmp	r3, r9
 800b7b2:	d307      	bcc.n	800b7c4 <__cvt+0xbc>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7b8:	1bdb      	subs	r3, r3, r7
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	b004      	add	sp, #16
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	1c59      	adds	r1, r3, #1
 800b7c6:	9103      	str	r1, [sp, #12]
 800b7c8:	701a      	strb	r2, [r3, #0]
 800b7ca:	e7f0      	b.n	800b7ae <__cvt+0xa6>

0800b7cc <__exponent>:
 800b7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	bfb8      	it	lt
 800b7d4:	4249      	neglt	r1, r1
 800b7d6:	f803 2b02 	strb.w	r2, [r3], #2
 800b7da:	bfb4      	ite	lt
 800b7dc:	222d      	movlt	r2, #45	; 0x2d
 800b7de:	222b      	movge	r2, #43	; 0x2b
 800b7e0:	2909      	cmp	r1, #9
 800b7e2:	7042      	strb	r2, [r0, #1]
 800b7e4:	dd2a      	ble.n	800b83c <__exponent+0x70>
 800b7e6:	f10d 0207 	add.w	r2, sp, #7
 800b7ea:	4617      	mov	r7, r2
 800b7ec:	260a      	movs	r6, #10
 800b7ee:	4694      	mov	ip, r2
 800b7f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b7f4:	fb06 1415 	mls	r4, r6, r5, r1
 800b7f8:	3430      	adds	r4, #48	; 0x30
 800b7fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b7fe:	460c      	mov	r4, r1
 800b800:	2c63      	cmp	r4, #99	; 0x63
 800b802:	f102 32ff 	add.w	r2, r2, #4294967295
 800b806:	4629      	mov	r1, r5
 800b808:	dcf1      	bgt.n	800b7ee <__exponent+0x22>
 800b80a:	3130      	adds	r1, #48	; 0x30
 800b80c:	f1ac 0402 	sub.w	r4, ip, #2
 800b810:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b814:	1c41      	adds	r1, r0, #1
 800b816:	4622      	mov	r2, r4
 800b818:	42ba      	cmp	r2, r7
 800b81a:	d30a      	bcc.n	800b832 <__exponent+0x66>
 800b81c:	f10d 0209 	add.w	r2, sp, #9
 800b820:	eba2 020c 	sub.w	r2, r2, ip
 800b824:	42bc      	cmp	r4, r7
 800b826:	bf88      	it	hi
 800b828:	2200      	movhi	r2, #0
 800b82a:	4413      	add	r3, r2
 800b82c:	1a18      	subs	r0, r3, r0
 800b82e:	b003      	add	sp, #12
 800b830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b832:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b836:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b83a:	e7ed      	b.n	800b818 <__exponent+0x4c>
 800b83c:	2330      	movs	r3, #48	; 0x30
 800b83e:	3130      	adds	r1, #48	; 0x30
 800b840:	7083      	strb	r3, [r0, #2]
 800b842:	70c1      	strb	r1, [r0, #3]
 800b844:	1d03      	adds	r3, r0, #4
 800b846:	e7f1      	b.n	800b82c <__exponent+0x60>

0800b848 <_printf_float>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ed2d 8b02 	vpush	{d8}
 800b850:	b08d      	sub	sp, #52	; 0x34
 800b852:	460c      	mov	r4, r1
 800b854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b858:	4616      	mov	r6, r2
 800b85a:	461f      	mov	r7, r3
 800b85c:	4605      	mov	r5, r0
 800b85e:	f000 fcb5 	bl	800c1cc <_localeconv_r>
 800b862:	f8d0 a000 	ldr.w	sl, [r0]
 800b866:	4650      	mov	r0, sl
 800b868:	f7f4 fd02 	bl	8000270 <strlen>
 800b86c:	2300      	movs	r3, #0
 800b86e:	930a      	str	r3, [sp, #40]	; 0x28
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	f8d8 3000 	ldr.w	r3, [r8]
 800b878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b87c:	3307      	adds	r3, #7
 800b87e:	f023 0307 	bic.w	r3, r3, #7
 800b882:	f103 0208 	add.w	r2, r3, #8
 800b886:	f8c8 2000 	str.w	r2, [r8]
 800b88a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f8cd 8018 	str.w	r8, [sp, #24]
 800b898:	ee08 0a10 	vmov	s16, r0
 800b89c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b8a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8a4:	4b9e      	ldr	r3, [pc, #632]	; (800bb20 <_printf_float+0x2d8>)
 800b8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8aa:	f7f5 f93f 	bl	8000b2c <__aeabi_dcmpun>
 800b8ae:	bb88      	cbnz	r0, 800b914 <_printf_float+0xcc>
 800b8b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b4:	4b9a      	ldr	r3, [pc, #616]	; (800bb20 <_printf_float+0x2d8>)
 800b8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ba:	f7f5 f919 	bl	8000af0 <__aeabi_dcmple>
 800b8be:	bb48      	cbnz	r0, 800b914 <_printf_float+0xcc>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	f7f5 f908 	bl	8000adc <__aeabi_dcmplt>
 800b8cc:	b110      	cbz	r0, 800b8d4 <_printf_float+0x8c>
 800b8ce:	232d      	movs	r3, #45	; 0x2d
 800b8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d4:	4a93      	ldr	r2, [pc, #588]	; (800bb24 <_printf_float+0x2dc>)
 800b8d6:	4b94      	ldr	r3, [pc, #592]	; (800bb28 <_printf_float+0x2e0>)
 800b8d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8dc:	bf94      	ite	ls
 800b8de:	4690      	movls	r8, r2
 800b8e0:	4698      	movhi	r8, r3
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	9b05      	ldr	r3, [sp, #20]
 800b8e8:	f023 0304 	bic.w	r3, r3, #4
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	f04f 0900 	mov.w	r9, #0
 800b8f2:	9700      	str	r7, [sp, #0]
 800b8f4:	4633      	mov	r3, r6
 800b8f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f000 f9da 	bl	800bcb4 <_printf_common>
 800b900:	3001      	adds	r0, #1
 800b902:	f040 8090 	bne.w	800ba26 <_printf_float+0x1de>
 800b906:	f04f 30ff 	mov.w	r0, #4294967295
 800b90a:	b00d      	add	sp, #52	; 0x34
 800b90c:	ecbd 8b02 	vpop	{d8}
 800b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b914:	4642      	mov	r2, r8
 800b916:	464b      	mov	r3, r9
 800b918:	4640      	mov	r0, r8
 800b91a:	4649      	mov	r1, r9
 800b91c:	f7f5 f906 	bl	8000b2c <__aeabi_dcmpun>
 800b920:	b140      	cbz	r0, 800b934 <_printf_float+0xec>
 800b922:	464b      	mov	r3, r9
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfbc      	itt	lt
 800b928:	232d      	movlt	r3, #45	; 0x2d
 800b92a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b92e:	4a7f      	ldr	r2, [pc, #508]	; (800bb2c <_printf_float+0x2e4>)
 800b930:	4b7f      	ldr	r3, [pc, #508]	; (800bb30 <_printf_float+0x2e8>)
 800b932:	e7d1      	b.n	800b8d8 <_printf_float+0x90>
 800b934:	6863      	ldr	r3, [r4, #4]
 800b936:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b93a:	9206      	str	r2, [sp, #24]
 800b93c:	1c5a      	adds	r2, r3, #1
 800b93e:	d13f      	bne.n	800b9c0 <_printf_float+0x178>
 800b940:	2306      	movs	r3, #6
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	9b05      	ldr	r3, [sp, #20]
 800b946:	6861      	ldr	r1, [r4, #4]
 800b948:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b94c:	2300      	movs	r3, #0
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	ab0a      	add	r3, sp, #40	; 0x28
 800b952:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b956:	ab09      	add	r3, sp, #36	; 0x24
 800b958:	ec49 8b10 	vmov	d0, r8, r9
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b964:	4628      	mov	r0, r5
 800b966:	f7ff fecf 	bl	800b708 <__cvt>
 800b96a:	9b06      	ldr	r3, [sp, #24]
 800b96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b96e:	2b47      	cmp	r3, #71	; 0x47
 800b970:	4680      	mov	r8, r0
 800b972:	d108      	bne.n	800b986 <_printf_float+0x13e>
 800b974:	1cc8      	adds	r0, r1, #3
 800b976:	db02      	blt.n	800b97e <_printf_float+0x136>
 800b978:	6863      	ldr	r3, [r4, #4]
 800b97a:	4299      	cmp	r1, r3
 800b97c:	dd41      	ble.n	800ba02 <_printf_float+0x1ba>
 800b97e:	f1ab 0302 	sub.w	r3, fp, #2
 800b982:	fa5f fb83 	uxtb.w	fp, r3
 800b986:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b98a:	d820      	bhi.n	800b9ce <_printf_float+0x186>
 800b98c:	3901      	subs	r1, #1
 800b98e:	465a      	mov	r2, fp
 800b990:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b994:	9109      	str	r1, [sp, #36]	; 0x24
 800b996:	f7ff ff19 	bl	800b7cc <__exponent>
 800b99a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b99c:	1813      	adds	r3, r2, r0
 800b99e:	2a01      	cmp	r2, #1
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	dc02      	bgt.n	800b9ac <_printf_float+0x164>
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	07d2      	lsls	r2, r2, #31
 800b9aa:	d501      	bpl.n	800b9b0 <_printf_float+0x168>
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d09c      	beq.n	800b8f2 <_printf_float+0xaa>
 800b9b8:	232d      	movs	r3, #45	; 0x2d
 800b9ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9be:	e798      	b.n	800b8f2 <_printf_float+0xaa>
 800b9c0:	9a06      	ldr	r2, [sp, #24]
 800b9c2:	2a47      	cmp	r2, #71	; 0x47
 800b9c4:	d1be      	bne.n	800b944 <_printf_float+0xfc>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1bc      	bne.n	800b944 <_printf_float+0xfc>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e7b9      	b.n	800b942 <_printf_float+0xfa>
 800b9ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9d2:	d118      	bne.n	800ba06 <_printf_float+0x1be>
 800b9d4:	2900      	cmp	r1, #0
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	dd0b      	ble.n	800b9f2 <_printf_float+0x1aa>
 800b9da:	6121      	str	r1, [r4, #16]
 800b9dc:	b913      	cbnz	r3, 800b9e4 <_printf_float+0x19c>
 800b9de:	6822      	ldr	r2, [r4, #0]
 800b9e0:	07d0      	lsls	r0, r2, #31
 800b9e2:	d502      	bpl.n	800b9ea <_printf_float+0x1a2>
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	440b      	add	r3, r1
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9ec:	f04f 0900 	mov.w	r9, #0
 800b9f0:	e7de      	b.n	800b9b0 <_printf_float+0x168>
 800b9f2:	b913      	cbnz	r3, 800b9fa <_printf_float+0x1b2>
 800b9f4:	6822      	ldr	r2, [r4, #0]
 800b9f6:	07d2      	lsls	r2, r2, #31
 800b9f8:	d501      	bpl.n	800b9fe <_printf_float+0x1b6>
 800b9fa:	3302      	adds	r3, #2
 800b9fc:	e7f4      	b.n	800b9e8 <_printf_float+0x1a0>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7f2      	b.n	800b9e8 <_printf_float+0x1a0>
 800ba02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	db05      	blt.n	800ba18 <_printf_float+0x1d0>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	6121      	str	r1, [r4, #16]
 800ba10:	07d8      	lsls	r0, r3, #31
 800ba12:	d5ea      	bpl.n	800b9ea <_printf_float+0x1a2>
 800ba14:	1c4b      	adds	r3, r1, #1
 800ba16:	e7e7      	b.n	800b9e8 <_printf_float+0x1a0>
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	bfd4      	ite	le
 800ba1c:	f1c1 0202 	rsble	r2, r1, #2
 800ba20:	2201      	movgt	r2, #1
 800ba22:	4413      	add	r3, r2
 800ba24:	e7e0      	b.n	800b9e8 <_printf_float+0x1a0>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	055a      	lsls	r2, r3, #21
 800ba2a:	d407      	bmi.n	800ba3c <_printf_float+0x1f4>
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	4642      	mov	r2, r8
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b8      	blx	r7
 800ba36:	3001      	adds	r0, #1
 800ba38:	d12c      	bne.n	800ba94 <_printf_float+0x24c>
 800ba3a:	e764      	b.n	800b906 <_printf_float+0xbe>
 800ba3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba40:	f240 80e0 	bls.w	800bc04 <_printf_float+0x3bc>
 800ba44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f7f5 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d034      	beq.n	800babe <_printf_float+0x276>
 800ba54:	4a37      	ldr	r2, [pc, #220]	; (800bb34 <_printf_float+0x2ec>)
 800ba56:	2301      	movs	r3, #1
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f43f af51 	beq.w	800b906 <_printf_float+0xbe>
 800ba64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	db02      	blt.n	800ba72 <_printf_float+0x22a>
 800ba6c:	6823      	ldr	r3, [r4, #0]
 800ba6e:	07d8      	lsls	r0, r3, #31
 800ba70:	d510      	bpl.n	800ba94 <_printf_float+0x24c>
 800ba72:	ee18 3a10 	vmov	r3, s16
 800ba76:	4652      	mov	r2, sl
 800ba78:	4631      	mov	r1, r6
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	47b8      	blx	r7
 800ba7e:	3001      	adds	r0, #1
 800ba80:	f43f af41 	beq.w	800b906 <_printf_float+0xbe>
 800ba84:	f04f 0800 	mov.w	r8, #0
 800ba88:	f104 091a 	add.w	r9, r4, #26
 800ba8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	4543      	cmp	r3, r8
 800ba92:	dc09      	bgt.n	800baa8 <_printf_float+0x260>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	079b      	lsls	r3, r3, #30
 800ba98:	f100 8107 	bmi.w	800bcaa <_printf_float+0x462>
 800ba9c:	68e0      	ldr	r0, [r4, #12]
 800ba9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa0:	4298      	cmp	r0, r3
 800baa2:	bfb8      	it	lt
 800baa4:	4618      	movlt	r0, r3
 800baa6:	e730      	b.n	800b90a <_printf_float+0xc2>
 800baa8:	2301      	movs	r3, #1
 800baaa:	464a      	mov	r2, r9
 800baac:	4631      	mov	r1, r6
 800baae:	4628      	mov	r0, r5
 800bab0:	47b8      	blx	r7
 800bab2:	3001      	adds	r0, #1
 800bab4:	f43f af27 	beq.w	800b906 <_printf_float+0xbe>
 800bab8:	f108 0801 	add.w	r8, r8, #1
 800babc:	e7e6      	b.n	800ba8c <_printf_float+0x244>
 800babe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dc39      	bgt.n	800bb38 <_printf_float+0x2f0>
 800bac4:	4a1b      	ldr	r2, [pc, #108]	; (800bb34 <_printf_float+0x2ec>)
 800bac6:	2301      	movs	r3, #1
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f af19 	beq.w	800b906 <_printf_float+0xbe>
 800bad4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bad8:	4313      	orrs	r3, r2
 800bada:	d102      	bne.n	800bae2 <_printf_float+0x29a>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	07d9      	lsls	r1, r3, #31
 800bae0:	d5d8      	bpl.n	800ba94 <_printf_float+0x24c>
 800bae2:	ee18 3a10 	vmov	r3, s16
 800bae6:	4652      	mov	r2, sl
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	47b8      	blx	r7
 800baee:	3001      	adds	r0, #1
 800baf0:	f43f af09 	beq.w	800b906 <_printf_float+0xbe>
 800baf4:	f04f 0900 	mov.w	r9, #0
 800baf8:	f104 0a1a 	add.w	sl, r4, #26
 800bafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafe:	425b      	negs	r3, r3
 800bb00:	454b      	cmp	r3, r9
 800bb02:	dc01      	bgt.n	800bb08 <_printf_float+0x2c0>
 800bb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb06:	e792      	b.n	800ba2e <_printf_float+0x1e6>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	4652      	mov	r2, sl
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4628      	mov	r0, r5
 800bb10:	47b8      	blx	r7
 800bb12:	3001      	adds	r0, #1
 800bb14:	f43f aef7 	beq.w	800b906 <_printf_float+0xbe>
 800bb18:	f109 0901 	add.w	r9, r9, #1
 800bb1c:	e7ee      	b.n	800bafc <_printf_float+0x2b4>
 800bb1e:	bf00      	nop
 800bb20:	7fefffff 	.word	0x7fefffff
 800bb24:	0800e128 	.word	0x0800e128
 800bb28:	0800e12c 	.word	0x0800e12c
 800bb2c:	0800e130 	.word	0x0800e130
 800bb30:	0800e134 	.word	0x0800e134
 800bb34:	0800e138 	.word	0x0800e138
 800bb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	bfa8      	it	ge
 800bb40:	461a      	movge	r2, r3
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	4691      	mov	r9, r2
 800bb46:	dc37      	bgt.n	800bbb8 <_printf_float+0x370>
 800bb48:	f04f 0b00 	mov.w	fp, #0
 800bb4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb50:	f104 021a 	add.w	r2, r4, #26
 800bb54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	eba3 0309 	sub.w	r3, r3, r9
 800bb5c:	455b      	cmp	r3, fp
 800bb5e:	dc33      	bgt.n	800bbc8 <_printf_float+0x380>
 800bb60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb64:	429a      	cmp	r2, r3
 800bb66:	db3b      	blt.n	800bbe0 <_printf_float+0x398>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	07da      	lsls	r2, r3, #31
 800bb6c:	d438      	bmi.n	800bbe0 <_printf_float+0x398>
 800bb6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb72:	eba2 0903 	sub.w	r9, r2, r3
 800bb76:	9b05      	ldr	r3, [sp, #20]
 800bb78:	1ad2      	subs	r2, r2, r3
 800bb7a:	4591      	cmp	r9, r2
 800bb7c:	bfa8      	it	ge
 800bb7e:	4691      	movge	r9, r2
 800bb80:	f1b9 0f00 	cmp.w	r9, #0
 800bb84:	dc35      	bgt.n	800bbf2 <_printf_float+0x3aa>
 800bb86:	f04f 0800 	mov.w	r8, #0
 800bb8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb8e:	f104 0a1a 	add.w	sl, r4, #26
 800bb92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb96:	1a9b      	subs	r3, r3, r2
 800bb98:	eba3 0309 	sub.w	r3, r3, r9
 800bb9c:	4543      	cmp	r3, r8
 800bb9e:	f77f af79 	ble.w	800ba94 <_printf_float+0x24c>
 800bba2:	2301      	movs	r3, #1
 800bba4:	4652      	mov	r2, sl
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f aeaa 	beq.w	800b906 <_printf_float+0xbe>
 800bbb2:	f108 0801 	add.w	r8, r8, #1
 800bbb6:	e7ec      	b.n	800bb92 <_printf_float+0x34a>
 800bbb8:	4613      	mov	r3, r2
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4642      	mov	r2, r8
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	d1c0      	bne.n	800bb48 <_printf_float+0x300>
 800bbc6:	e69e      	b.n	800b906 <_printf_float+0xbe>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4628      	mov	r0, r5
 800bbce:	9205      	str	r2, [sp, #20]
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f ae97 	beq.w	800b906 <_printf_float+0xbe>
 800bbd8:	9a05      	ldr	r2, [sp, #20]
 800bbda:	f10b 0b01 	add.w	fp, fp, #1
 800bbde:	e7b9      	b.n	800bb54 <_printf_float+0x30c>
 800bbe0:	ee18 3a10 	vmov	r3, s16
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b8      	blx	r7
 800bbec:	3001      	adds	r0, #1
 800bbee:	d1be      	bne.n	800bb6e <_printf_float+0x326>
 800bbf0:	e689      	b.n	800b906 <_printf_float+0xbe>
 800bbf2:	9a05      	ldr	r2, [sp, #20]
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	4442      	add	r2, r8
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	47b8      	blx	r7
 800bbfe:	3001      	adds	r0, #1
 800bc00:	d1c1      	bne.n	800bb86 <_printf_float+0x33e>
 800bc02:	e680      	b.n	800b906 <_printf_float+0xbe>
 800bc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc06:	2a01      	cmp	r2, #1
 800bc08:	dc01      	bgt.n	800bc0e <_printf_float+0x3c6>
 800bc0a:	07db      	lsls	r3, r3, #31
 800bc0c:	d53a      	bpl.n	800bc84 <_printf_float+0x43c>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	4642      	mov	r2, r8
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b8      	blx	r7
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f43f ae74 	beq.w	800b906 <_printf_float+0xbe>
 800bc1e:	ee18 3a10 	vmov	r3, s16
 800bc22:	4652      	mov	r2, sl
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f ae6b 	beq.w	800b906 <_printf_float+0xbe>
 800bc30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc34:	2200      	movs	r2, #0
 800bc36:	2300      	movs	r3, #0
 800bc38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bc3c:	f7f4 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc40:	b9d8      	cbnz	r0, 800bc7a <_printf_float+0x432>
 800bc42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bc46:	f108 0201 	add.w	r2, r8, #1
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	d10e      	bne.n	800bc72 <_printf_float+0x42a>
 800bc54:	e657      	b.n	800b906 <_printf_float+0xbe>
 800bc56:	2301      	movs	r3, #1
 800bc58:	4652      	mov	r2, sl
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	f43f ae50 	beq.w	800b906 <_printf_float+0xbe>
 800bc66:	f108 0801 	add.w	r8, r8, #1
 800bc6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4543      	cmp	r3, r8
 800bc70:	dcf1      	bgt.n	800bc56 <_printf_float+0x40e>
 800bc72:	464b      	mov	r3, r9
 800bc74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc78:	e6da      	b.n	800ba30 <_printf_float+0x1e8>
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	f104 0a1a 	add.w	sl, r4, #26
 800bc82:	e7f2      	b.n	800bc6a <_printf_float+0x422>
 800bc84:	2301      	movs	r3, #1
 800bc86:	4642      	mov	r2, r8
 800bc88:	e7df      	b.n	800bc4a <_printf_float+0x402>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	464a      	mov	r2, r9
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	f43f ae36 	beq.w	800b906 <_printf_float+0xbe>
 800bc9a:	f108 0801 	add.w	r8, r8, #1
 800bc9e:	68e3      	ldr	r3, [r4, #12]
 800bca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bca2:	1a5b      	subs	r3, r3, r1
 800bca4:	4543      	cmp	r3, r8
 800bca6:	dcf0      	bgt.n	800bc8a <_printf_float+0x442>
 800bca8:	e6f8      	b.n	800ba9c <_printf_float+0x254>
 800bcaa:	f04f 0800 	mov.w	r8, #0
 800bcae:	f104 0919 	add.w	r9, r4, #25
 800bcb2:	e7f4      	b.n	800bc9e <_printf_float+0x456>

0800bcb4 <_printf_common>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	4616      	mov	r6, r2
 800bcba:	4699      	mov	r9, r3
 800bcbc:	688a      	ldr	r2, [r1, #8]
 800bcbe:	690b      	ldr	r3, [r1, #16]
 800bcc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	bfb8      	it	lt
 800bcc8:	4613      	movlt	r3, r2
 800bcca:	6033      	str	r3, [r6, #0]
 800bccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b10a      	cbz	r2, 800bcda <_printf_common+0x26>
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	6033      	str	r3, [r6, #0]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	0699      	lsls	r1, r3, #26
 800bcde:	bf42      	ittt	mi
 800bce0:	6833      	ldrmi	r3, [r6, #0]
 800bce2:	3302      	addmi	r3, #2
 800bce4:	6033      	strmi	r3, [r6, #0]
 800bce6:	6825      	ldr	r5, [r4, #0]
 800bce8:	f015 0506 	ands.w	r5, r5, #6
 800bcec:	d106      	bne.n	800bcfc <_printf_common+0x48>
 800bcee:	f104 0a19 	add.w	sl, r4, #25
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	6832      	ldr	r2, [r6, #0]
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	dc26      	bgt.n	800bd4a <_printf_common+0x96>
 800bcfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd00:	1e13      	subs	r3, r2, #0
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	bf18      	it	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	0692      	lsls	r2, r2, #26
 800bd0a:	d42b      	bmi.n	800bd64 <_printf_common+0xb0>
 800bd0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd10:	4649      	mov	r1, r9
 800bd12:	4638      	mov	r0, r7
 800bd14:	47c0      	blx	r8
 800bd16:	3001      	adds	r0, #1
 800bd18:	d01e      	beq.n	800bd58 <_printf_common+0xa4>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	6922      	ldr	r2, [r4, #16]
 800bd1e:	f003 0306 	and.w	r3, r3, #6
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	bf02      	ittt	eq
 800bd26:	68e5      	ldreq	r5, [r4, #12]
 800bd28:	6833      	ldreq	r3, [r6, #0]
 800bd2a:	1aed      	subeq	r5, r5, r3
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	bf0c      	ite	eq
 800bd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd34:	2500      	movne	r5, #0
 800bd36:	4293      	cmp	r3, r2
 800bd38:	bfc4      	itt	gt
 800bd3a:	1a9b      	subgt	r3, r3, r2
 800bd3c:	18ed      	addgt	r5, r5, r3
 800bd3e:	2600      	movs	r6, #0
 800bd40:	341a      	adds	r4, #26
 800bd42:	42b5      	cmp	r5, r6
 800bd44:	d11a      	bne.n	800bd7c <_printf_common+0xc8>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e008      	b.n	800bd5c <_printf_common+0xa8>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	4649      	mov	r1, r9
 800bd50:	4638      	mov	r0, r7
 800bd52:	47c0      	blx	r8
 800bd54:	3001      	adds	r0, #1
 800bd56:	d103      	bne.n	800bd60 <_printf_common+0xac>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd60:	3501      	adds	r5, #1
 800bd62:	e7c6      	b.n	800bcf2 <_printf_common+0x3e>
 800bd64:	18e1      	adds	r1, r4, r3
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	2030      	movs	r0, #48	; 0x30
 800bd6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd6e:	4422      	add	r2, r4
 800bd70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd78:	3302      	adds	r3, #2
 800bd7a:	e7c7      	b.n	800bd0c <_printf_common+0x58>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4649      	mov	r1, r9
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d0e6      	beq.n	800bd58 <_printf_common+0xa4>
 800bd8a:	3601      	adds	r6, #1
 800bd8c:	e7d9      	b.n	800bd42 <_printf_common+0x8e>
	...

0800bd90 <_printf_i>:
 800bd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	7e0f      	ldrb	r7, [r1, #24]
 800bd96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd98:	2f78      	cmp	r7, #120	; 0x78
 800bd9a:	4691      	mov	r9, r2
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	469a      	mov	sl, r3
 800bda2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bda6:	d807      	bhi.n	800bdb8 <_printf_i+0x28>
 800bda8:	2f62      	cmp	r7, #98	; 0x62
 800bdaa:	d80a      	bhi.n	800bdc2 <_printf_i+0x32>
 800bdac:	2f00      	cmp	r7, #0
 800bdae:	f000 80d4 	beq.w	800bf5a <_printf_i+0x1ca>
 800bdb2:	2f58      	cmp	r7, #88	; 0x58
 800bdb4:	f000 80c0 	beq.w	800bf38 <_printf_i+0x1a8>
 800bdb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdc0:	e03a      	b.n	800be38 <_printf_i+0xa8>
 800bdc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdc6:	2b15      	cmp	r3, #21
 800bdc8:	d8f6      	bhi.n	800bdb8 <_printf_i+0x28>
 800bdca:	a101      	add	r1, pc, #4	; (adr r1, 800bdd0 <_printf_i+0x40>)
 800bdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdd0:	0800be29 	.word	0x0800be29
 800bdd4:	0800be3d 	.word	0x0800be3d
 800bdd8:	0800bdb9 	.word	0x0800bdb9
 800bddc:	0800bdb9 	.word	0x0800bdb9
 800bde0:	0800bdb9 	.word	0x0800bdb9
 800bde4:	0800bdb9 	.word	0x0800bdb9
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800bdb9 	.word	0x0800bdb9
 800bdf0:	0800bdb9 	.word	0x0800bdb9
 800bdf4:	0800bdb9 	.word	0x0800bdb9
 800bdf8:	0800bdb9 	.word	0x0800bdb9
 800bdfc:	0800bf41 	.word	0x0800bf41
 800be00:	0800be69 	.word	0x0800be69
 800be04:	0800befb 	.word	0x0800befb
 800be08:	0800bdb9 	.word	0x0800bdb9
 800be0c:	0800bdb9 	.word	0x0800bdb9
 800be10:	0800bf63 	.word	0x0800bf63
 800be14:	0800bdb9 	.word	0x0800bdb9
 800be18:	0800be69 	.word	0x0800be69
 800be1c:	0800bdb9 	.word	0x0800bdb9
 800be20:	0800bdb9 	.word	0x0800bdb9
 800be24:	0800bf03 	.word	0x0800bf03
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	1d1a      	adds	r2, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	602a      	str	r2, [r5, #0]
 800be30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be38:	2301      	movs	r3, #1
 800be3a:	e09f      	b.n	800bf7c <_printf_i+0x1ec>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	0607      	lsls	r7, r0, #24
 800be42:	f103 0104 	add.w	r1, r3, #4
 800be46:	6029      	str	r1, [r5, #0]
 800be48:	d501      	bpl.n	800be4e <_printf_i+0xbe>
 800be4a:	681e      	ldr	r6, [r3, #0]
 800be4c:	e003      	b.n	800be56 <_printf_i+0xc6>
 800be4e:	0646      	lsls	r6, r0, #25
 800be50:	d5fb      	bpl.n	800be4a <_printf_i+0xba>
 800be52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be56:	2e00      	cmp	r6, #0
 800be58:	da03      	bge.n	800be62 <_printf_i+0xd2>
 800be5a:	232d      	movs	r3, #45	; 0x2d
 800be5c:	4276      	negs	r6, r6
 800be5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be62:	485a      	ldr	r0, [pc, #360]	; (800bfcc <_printf_i+0x23c>)
 800be64:	230a      	movs	r3, #10
 800be66:	e012      	b.n	800be8e <_printf_i+0xfe>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	1d19      	adds	r1, r3, #4
 800be6e:	6029      	str	r1, [r5, #0]
 800be70:	0605      	lsls	r5, r0, #24
 800be72:	d501      	bpl.n	800be78 <_printf_i+0xe8>
 800be74:	681e      	ldr	r6, [r3, #0]
 800be76:	e002      	b.n	800be7e <_printf_i+0xee>
 800be78:	0641      	lsls	r1, r0, #25
 800be7a:	d5fb      	bpl.n	800be74 <_printf_i+0xe4>
 800be7c:	881e      	ldrh	r6, [r3, #0]
 800be7e:	4853      	ldr	r0, [pc, #332]	; (800bfcc <_printf_i+0x23c>)
 800be80:	2f6f      	cmp	r7, #111	; 0x6f
 800be82:	bf0c      	ite	eq
 800be84:	2308      	moveq	r3, #8
 800be86:	230a      	movne	r3, #10
 800be88:	2100      	movs	r1, #0
 800be8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be8e:	6865      	ldr	r5, [r4, #4]
 800be90:	60a5      	str	r5, [r4, #8]
 800be92:	2d00      	cmp	r5, #0
 800be94:	bfa2      	ittt	ge
 800be96:	6821      	ldrge	r1, [r4, #0]
 800be98:	f021 0104 	bicge.w	r1, r1, #4
 800be9c:	6021      	strge	r1, [r4, #0]
 800be9e:	b90e      	cbnz	r6, 800bea4 <_printf_i+0x114>
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	d04b      	beq.n	800bf3c <_printf_i+0x1ac>
 800bea4:	4615      	mov	r5, r2
 800bea6:	fbb6 f1f3 	udiv	r1, r6, r3
 800beaa:	fb03 6711 	mls	r7, r3, r1, r6
 800beae:	5dc7      	ldrb	r7, [r0, r7]
 800beb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800beb4:	4637      	mov	r7, r6
 800beb6:	42bb      	cmp	r3, r7
 800beb8:	460e      	mov	r6, r1
 800beba:	d9f4      	bls.n	800bea6 <_printf_i+0x116>
 800bebc:	2b08      	cmp	r3, #8
 800bebe:	d10b      	bne.n	800bed8 <_printf_i+0x148>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	07de      	lsls	r6, r3, #31
 800bec4:	d508      	bpl.n	800bed8 <_printf_i+0x148>
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	6861      	ldr	r1, [r4, #4]
 800beca:	4299      	cmp	r1, r3
 800becc:	bfde      	ittt	le
 800bece:	2330      	movle	r3, #48	; 0x30
 800bed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bed8:	1b52      	subs	r2, r2, r5
 800beda:	6122      	str	r2, [r4, #16]
 800bedc:	f8cd a000 	str.w	sl, [sp]
 800bee0:	464b      	mov	r3, r9
 800bee2:	aa03      	add	r2, sp, #12
 800bee4:	4621      	mov	r1, r4
 800bee6:	4640      	mov	r0, r8
 800bee8:	f7ff fee4 	bl	800bcb4 <_printf_common>
 800beec:	3001      	adds	r0, #1
 800beee:	d14a      	bne.n	800bf86 <_printf_i+0x1f6>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	b004      	add	sp, #16
 800bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	f043 0320 	orr.w	r3, r3, #32
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	4833      	ldr	r0, [pc, #204]	; (800bfd0 <_printf_i+0x240>)
 800bf04:	2778      	movs	r7, #120	; 0x78
 800bf06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	6829      	ldr	r1, [r5, #0]
 800bf0e:	061f      	lsls	r7, r3, #24
 800bf10:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf14:	d402      	bmi.n	800bf1c <_printf_i+0x18c>
 800bf16:	065f      	lsls	r7, r3, #25
 800bf18:	bf48      	it	mi
 800bf1a:	b2b6      	uxthmi	r6, r6
 800bf1c:	07df      	lsls	r7, r3, #31
 800bf1e:	bf48      	it	mi
 800bf20:	f043 0320 	orrmi.w	r3, r3, #32
 800bf24:	6029      	str	r1, [r5, #0]
 800bf26:	bf48      	it	mi
 800bf28:	6023      	strmi	r3, [r4, #0]
 800bf2a:	b91e      	cbnz	r6, 800bf34 <_printf_i+0x1a4>
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	f023 0320 	bic.w	r3, r3, #32
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	2310      	movs	r3, #16
 800bf36:	e7a7      	b.n	800be88 <_printf_i+0xf8>
 800bf38:	4824      	ldr	r0, [pc, #144]	; (800bfcc <_printf_i+0x23c>)
 800bf3a:	e7e4      	b.n	800bf06 <_printf_i+0x176>
 800bf3c:	4615      	mov	r5, r2
 800bf3e:	e7bd      	b.n	800bebc <_printf_i+0x12c>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	6826      	ldr	r6, [r4, #0]
 800bf44:	6961      	ldr	r1, [r4, #20]
 800bf46:	1d18      	adds	r0, r3, #4
 800bf48:	6028      	str	r0, [r5, #0]
 800bf4a:	0635      	lsls	r5, r6, #24
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	d501      	bpl.n	800bf54 <_printf_i+0x1c4>
 800bf50:	6019      	str	r1, [r3, #0]
 800bf52:	e002      	b.n	800bf5a <_printf_i+0x1ca>
 800bf54:	0670      	lsls	r0, r6, #25
 800bf56:	d5fb      	bpl.n	800bf50 <_printf_i+0x1c0>
 800bf58:	8019      	strh	r1, [r3, #0]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	4615      	mov	r5, r2
 800bf60:	e7bc      	b.n	800bedc <_printf_i+0x14c>
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	1d1a      	adds	r2, r3, #4
 800bf66:	602a      	str	r2, [r5, #0]
 800bf68:	681d      	ldr	r5, [r3, #0]
 800bf6a:	6862      	ldr	r2, [r4, #4]
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f7f4 f92e 	bl	80001d0 <memchr>
 800bf74:	b108      	cbz	r0, 800bf7a <_printf_i+0x1ea>
 800bf76:	1b40      	subs	r0, r0, r5
 800bf78:	6060      	str	r0, [r4, #4]
 800bf7a:	6863      	ldr	r3, [r4, #4]
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf84:	e7aa      	b.n	800bedc <_printf_i+0x14c>
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	462a      	mov	r2, r5
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	47d0      	blx	sl
 800bf90:	3001      	adds	r0, #1
 800bf92:	d0ad      	beq.n	800bef0 <_printf_i+0x160>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	079b      	lsls	r3, r3, #30
 800bf98:	d413      	bmi.n	800bfc2 <_printf_i+0x232>
 800bf9a:	68e0      	ldr	r0, [r4, #12]
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	4298      	cmp	r0, r3
 800bfa0:	bfb8      	it	lt
 800bfa2:	4618      	movlt	r0, r3
 800bfa4:	e7a6      	b.n	800bef4 <_printf_i+0x164>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	4649      	mov	r1, r9
 800bfac:	4640      	mov	r0, r8
 800bfae:	47d0      	blx	sl
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d09d      	beq.n	800bef0 <_printf_i+0x160>
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	68e3      	ldr	r3, [r4, #12]
 800bfb8:	9903      	ldr	r1, [sp, #12]
 800bfba:	1a5b      	subs	r3, r3, r1
 800bfbc:	42ab      	cmp	r3, r5
 800bfbe:	dcf2      	bgt.n	800bfa6 <_printf_i+0x216>
 800bfc0:	e7eb      	b.n	800bf9a <_printf_i+0x20a>
 800bfc2:	2500      	movs	r5, #0
 800bfc4:	f104 0619 	add.w	r6, r4, #25
 800bfc8:	e7f5      	b.n	800bfb6 <_printf_i+0x226>
 800bfca:	bf00      	nop
 800bfcc:	0800e13a 	.word	0x0800e13a
 800bfd0:	0800e14b 	.word	0x0800e14b

0800bfd4 <std>:
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	4604      	mov	r4, r0
 800bfda:	e9c0 3300 	strd	r3, r3, [r0]
 800bfde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfe2:	6083      	str	r3, [r0, #8]
 800bfe4:	8181      	strh	r1, [r0, #12]
 800bfe6:	6643      	str	r3, [r0, #100]	; 0x64
 800bfe8:	81c2      	strh	r2, [r0, #14]
 800bfea:	6183      	str	r3, [r0, #24]
 800bfec:	4619      	mov	r1, r3
 800bfee:	2208      	movs	r2, #8
 800bff0:	305c      	adds	r0, #92	; 0x5c
 800bff2:	f000 f8e2 	bl	800c1ba <memset>
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <std+0x38>)
 800bff8:	6263      	str	r3, [r4, #36]	; 0x24
 800bffa:	4b05      	ldr	r3, [pc, #20]	; (800c010 <std+0x3c>)
 800bffc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <std+0x40>)
 800c000:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c002:	4b05      	ldr	r3, [pc, #20]	; (800c018 <std+0x44>)
 800c004:	6224      	str	r4, [r4, #32]
 800c006:	6323      	str	r3, [r4, #48]	; 0x30
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	0800c135 	.word	0x0800c135
 800c010:	0800c157 	.word	0x0800c157
 800c014:	0800c18f 	.word	0x0800c18f
 800c018:	0800c1b3 	.word	0x0800c1b3

0800c01c <stdio_exit_handler>:
 800c01c:	4a02      	ldr	r2, [pc, #8]	; (800c028 <stdio_exit_handler+0xc>)
 800c01e:	4903      	ldr	r1, [pc, #12]	; (800c02c <stdio_exit_handler+0x10>)
 800c020:	4803      	ldr	r0, [pc, #12]	; (800c030 <stdio_exit_handler+0x14>)
 800c022:	f000 b869 	b.w	800c0f8 <_fwalk_sglue>
 800c026:	bf00      	nop
 800c028:	20000118 	.word	0x20000118
 800c02c:	0800d9b1 	.word	0x0800d9b1
 800c030:	20000124 	.word	0x20000124

0800c034 <cleanup_stdio>:
 800c034:	6841      	ldr	r1, [r0, #4]
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <cleanup_stdio+0x34>)
 800c038:	4299      	cmp	r1, r3
 800c03a:	b510      	push	{r4, lr}
 800c03c:	4604      	mov	r4, r0
 800c03e:	d001      	beq.n	800c044 <cleanup_stdio+0x10>
 800c040:	f001 fcb6 	bl	800d9b0 <_fflush_r>
 800c044:	68a1      	ldr	r1, [r4, #8]
 800c046:	4b09      	ldr	r3, [pc, #36]	; (800c06c <cleanup_stdio+0x38>)
 800c048:	4299      	cmp	r1, r3
 800c04a:	d002      	beq.n	800c052 <cleanup_stdio+0x1e>
 800c04c:	4620      	mov	r0, r4
 800c04e:	f001 fcaf 	bl	800d9b0 <_fflush_r>
 800c052:	68e1      	ldr	r1, [r4, #12]
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <cleanup_stdio+0x3c>)
 800c056:	4299      	cmp	r1, r3
 800c058:	d004      	beq.n	800c064 <cleanup_stdio+0x30>
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c060:	f001 bca6 	b.w	800d9b0 <_fflush_r>
 800c064:	bd10      	pop	{r4, pc}
 800c066:	bf00      	nop
 800c068:	20000fd8 	.word	0x20000fd8
 800c06c:	20001040 	.word	0x20001040
 800c070:	200010a8 	.word	0x200010a8

0800c074 <global_stdio_init.part.0>:
 800c074:	b510      	push	{r4, lr}
 800c076:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <global_stdio_init.part.0+0x30>)
 800c078:	4c0b      	ldr	r4, [pc, #44]	; (800c0a8 <global_stdio_init.part.0+0x34>)
 800c07a:	4a0c      	ldr	r2, [pc, #48]	; (800c0ac <global_stdio_init.part.0+0x38>)
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	4620      	mov	r0, r4
 800c080:	2200      	movs	r2, #0
 800c082:	2104      	movs	r1, #4
 800c084:	f7ff ffa6 	bl	800bfd4 <std>
 800c088:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c08c:	2201      	movs	r2, #1
 800c08e:	2109      	movs	r1, #9
 800c090:	f7ff ffa0 	bl	800bfd4 <std>
 800c094:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c098:	2202      	movs	r2, #2
 800c09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c09e:	2112      	movs	r1, #18
 800c0a0:	f7ff bf98 	b.w	800bfd4 <std>
 800c0a4:	20001110 	.word	0x20001110
 800c0a8:	20000fd8 	.word	0x20000fd8
 800c0ac:	0800c01d 	.word	0x0800c01d

0800c0b0 <__sfp_lock_acquire>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	; (800c0b8 <__sfp_lock_acquire+0x8>)
 800c0b2:	f000 b8ff 	b.w	800c2b4 <__retarget_lock_acquire_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	20001119 	.word	0x20001119

0800c0bc <__sfp_lock_release>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__sfp_lock_release+0x8>)
 800c0be:	f000 b8fa 	b.w	800c2b6 <__retarget_lock_release_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	20001119 	.word	0x20001119

0800c0c8 <__sinit>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	f7ff fff0 	bl	800c0b0 <__sfp_lock_acquire>
 800c0d0:	6a23      	ldr	r3, [r4, #32]
 800c0d2:	b11b      	cbz	r3, 800c0dc <__sinit+0x14>
 800c0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d8:	f7ff bff0 	b.w	800c0bc <__sfp_lock_release>
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <__sinit+0x28>)
 800c0de:	6223      	str	r3, [r4, #32]
 800c0e0:	4b04      	ldr	r3, [pc, #16]	; (800c0f4 <__sinit+0x2c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f5      	bne.n	800c0d4 <__sinit+0xc>
 800c0e8:	f7ff ffc4 	bl	800c074 <global_stdio_init.part.0>
 800c0ec:	e7f2      	b.n	800c0d4 <__sinit+0xc>
 800c0ee:	bf00      	nop
 800c0f0:	0800c035 	.word	0x0800c035
 800c0f4:	20001110 	.word	0x20001110

0800c0f8 <_fwalk_sglue>:
 800c0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	4688      	mov	r8, r1
 800c100:	4614      	mov	r4, r2
 800c102:	2600      	movs	r6, #0
 800c104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c108:	f1b9 0901 	subs.w	r9, r9, #1
 800c10c:	d505      	bpl.n	800c11a <_fwalk_sglue+0x22>
 800c10e:	6824      	ldr	r4, [r4, #0]
 800c110:	2c00      	cmp	r4, #0
 800c112:	d1f7      	bne.n	800c104 <_fwalk_sglue+0xc>
 800c114:	4630      	mov	r0, r6
 800c116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c11a:	89ab      	ldrh	r3, [r5, #12]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d907      	bls.n	800c130 <_fwalk_sglue+0x38>
 800c120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c124:	3301      	adds	r3, #1
 800c126:	d003      	beq.n	800c130 <_fwalk_sglue+0x38>
 800c128:	4629      	mov	r1, r5
 800c12a:	4638      	mov	r0, r7
 800c12c:	47c0      	blx	r8
 800c12e:	4306      	orrs	r6, r0
 800c130:	3568      	adds	r5, #104	; 0x68
 800c132:	e7e9      	b.n	800c108 <_fwalk_sglue+0x10>

0800c134 <__sread>:
 800c134:	b510      	push	{r4, lr}
 800c136:	460c      	mov	r4, r1
 800c138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13c:	f000 f86c 	bl	800c218 <_read_r>
 800c140:	2800      	cmp	r0, #0
 800c142:	bfab      	itete	ge
 800c144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c146:	89a3      	ldrhlt	r3, [r4, #12]
 800c148:	181b      	addge	r3, r3, r0
 800c14a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c14e:	bfac      	ite	ge
 800c150:	6563      	strge	r3, [r4, #84]	; 0x54
 800c152:	81a3      	strhlt	r3, [r4, #12]
 800c154:	bd10      	pop	{r4, pc}

0800c156 <__swrite>:
 800c156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15a:	461f      	mov	r7, r3
 800c15c:	898b      	ldrh	r3, [r1, #12]
 800c15e:	05db      	lsls	r3, r3, #23
 800c160:	4605      	mov	r5, r0
 800c162:	460c      	mov	r4, r1
 800c164:	4616      	mov	r6, r2
 800c166:	d505      	bpl.n	800c174 <__swrite+0x1e>
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	2302      	movs	r3, #2
 800c16e:	2200      	movs	r2, #0
 800c170:	f000 f840 	bl	800c1f4 <_lseek_r>
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	4628      	mov	r0, r5
 800c186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	f000 b857 	b.w	800c23c <_write_r>

0800c18e <__sseek>:
 800c18e:	b510      	push	{r4, lr}
 800c190:	460c      	mov	r4, r1
 800c192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c196:	f000 f82d 	bl	800c1f4 <_lseek_r>
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	bf15      	itete	ne
 800c1a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1aa:	81a3      	strheq	r3, [r4, #12]
 800c1ac:	bf18      	it	ne
 800c1ae:	81a3      	strhne	r3, [r4, #12]
 800c1b0:	bd10      	pop	{r4, pc}

0800c1b2 <__sclose>:
 800c1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b6:	f000 b80d 	b.w	800c1d4 <_close_r>

0800c1ba <memset>:
 800c1ba:	4402      	add	r2, r0
 800c1bc:	4603      	mov	r3, r0
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <memset+0xa>
 800c1c2:	4770      	bx	lr
 800c1c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c8:	e7f9      	b.n	800c1be <memset+0x4>
	...

0800c1cc <_localeconv_r>:
 800c1cc:	4800      	ldr	r0, [pc, #0]	; (800c1d0 <_localeconv_r+0x4>)
 800c1ce:	4770      	bx	lr
 800c1d0:	20000264 	.word	0x20000264

0800c1d4 <_close_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d06      	ldr	r5, [pc, #24]	; (800c1f0 <_close_r+0x1c>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	f7f5 ff8b 	bl	80020fa <_close>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_close_r+0x1a>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_close_r+0x1a>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	20001114 	.word	0x20001114

0800c1f4 <_lseek_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	; (800c214 <_lseek_r+0x20>)
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	602a      	str	r2, [r5, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	f7f5 ffa0 	bl	8002148 <_lseek>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_lseek_r+0x1e>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_lseek_r+0x1e>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	20001114 	.word	0x20001114

0800c218 <_read_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	; (800c238 <_read_r+0x20>)
 800c21c:	4604      	mov	r4, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	4611      	mov	r1, r2
 800c222:	2200      	movs	r2, #0
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7f5 ff2e 	bl	8002088 <_read>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_read_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_read_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20001114 	.word	0x20001114

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 ff39 	bl	80020c2 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20001114 	.word	0x20001114

0800c260 <__errno>:
 800c260:	4b01      	ldr	r3, [pc, #4]	; (800c268 <__errno+0x8>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000170 	.word	0x20000170

0800c26c <__libc_init_array>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4d0d      	ldr	r5, [pc, #52]	; (800c2a4 <__libc_init_array+0x38>)
 800c270:	4c0d      	ldr	r4, [pc, #52]	; (800c2a8 <__libc_init_array+0x3c>)
 800c272:	1b64      	subs	r4, r4, r5
 800c274:	10a4      	asrs	r4, r4, #2
 800c276:	2600      	movs	r6, #0
 800c278:	42a6      	cmp	r6, r4
 800c27a:	d109      	bne.n	800c290 <__libc_init_array+0x24>
 800c27c:	4d0b      	ldr	r5, [pc, #44]	; (800c2ac <__libc_init_array+0x40>)
 800c27e:	4c0c      	ldr	r4, [pc, #48]	; (800c2b0 <__libc_init_array+0x44>)
 800c280:	f001 feea 	bl	800e058 <_init>
 800c284:	1b64      	subs	r4, r4, r5
 800c286:	10a4      	asrs	r4, r4, #2
 800c288:	2600      	movs	r6, #0
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	d105      	bne.n	800c29a <__libc_init_array+0x2e>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	f855 3b04 	ldr.w	r3, [r5], #4
 800c294:	4798      	blx	r3
 800c296:	3601      	adds	r6, #1
 800c298:	e7ee      	b.n	800c278 <__libc_init_array+0xc>
 800c29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29e:	4798      	blx	r3
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e7f2      	b.n	800c28a <__libc_init_array+0x1e>
 800c2a4:	0800e4a4 	.word	0x0800e4a4
 800c2a8:	0800e4a4 	.word	0x0800e4a4
 800c2ac:	0800e4a4 	.word	0x0800e4a4
 800c2b0:	0800e4a8 	.word	0x0800e4a8

0800c2b4 <__retarget_lock_acquire_recursive>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__retarget_lock_release_recursive>:
 800c2b6:	4770      	bx	lr

0800c2b8 <quorem>:
 800c2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	6903      	ldr	r3, [r0, #16]
 800c2be:	690c      	ldr	r4, [r1, #16]
 800c2c0:	42a3      	cmp	r3, r4
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	db7e      	blt.n	800c3c4 <quorem+0x10c>
 800c2c6:	3c01      	subs	r4, #1
 800c2c8:	f101 0814 	add.w	r8, r1, #20
 800c2cc:	f100 0514 	add.w	r5, r0, #20
 800c2d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2ee:	d331      	bcc.n	800c354 <quorem+0x9c>
 800c2f0:	f04f 0e00 	mov.w	lr, #0
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	46ac      	mov	ip, r5
 800c2f8:	46f2      	mov	sl, lr
 800c2fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2fe:	b293      	uxth	r3, r2
 800c300:	fb06 e303 	mla	r3, r6, r3, lr
 800c304:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c308:	0c1a      	lsrs	r2, r3, #16
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	ebaa 0303 	sub.w	r3, sl, r3
 800c310:	f8dc a000 	ldr.w	sl, [ip]
 800c314:	fa13 f38a 	uxtah	r3, r3, sl
 800c318:	fb06 220e 	mla	r2, r6, lr, r2
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	9b00      	ldr	r3, [sp, #0]
 800c320:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c324:	b292      	uxth	r2, r2
 800c326:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c32a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c32e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c332:	4581      	cmp	r9, r0
 800c334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c338:	f84c 3b04 	str.w	r3, [ip], #4
 800c33c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c340:	d2db      	bcs.n	800c2fa <quorem+0x42>
 800c342:	f855 300b 	ldr.w	r3, [r5, fp]
 800c346:	b92b      	cbnz	r3, 800c354 <quorem+0x9c>
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	3b04      	subs	r3, #4
 800c34c:	429d      	cmp	r5, r3
 800c34e:	461a      	mov	r2, r3
 800c350:	d32c      	bcc.n	800c3ac <quorem+0xf4>
 800c352:	613c      	str	r4, [r7, #16]
 800c354:	4638      	mov	r0, r7
 800c356:	f001 f9a5 	bl	800d6a4 <__mcmp>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	db22      	blt.n	800c3a4 <quorem+0xec>
 800c35e:	3601      	adds	r6, #1
 800c360:	4629      	mov	r1, r5
 800c362:	2000      	movs	r0, #0
 800c364:	f858 2b04 	ldr.w	r2, [r8], #4
 800c368:	f8d1 c000 	ldr.w	ip, [r1]
 800c36c:	b293      	uxth	r3, r2
 800c36e:	1ac3      	subs	r3, r0, r3
 800c370:	0c12      	lsrs	r2, r2, #16
 800c372:	fa13 f38c 	uxtah	r3, r3, ip
 800c376:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c37a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c37e:	b29b      	uxth	r3, r3
 800c380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c384:	45c1      	cmp	r9, r8
 800c386:	f841 3b04 	str.w	r3, [r1], #4
 800c38a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c38e:	d2e9      	bcs.n	800c364 <quorem+0xac>
 800c390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c398:	b922      	cbnz	r2, 800c3a4 <quorem+0xec>
 800c39a:	3b04      	subs	r3, #4
 800c39c:	429d      	cmp	r5, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	d30a      	bcc.n	800c3b8 <quorem+0x100>
 800c3a2:	613c      	str	r4, [r7, #16]
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	b003      	add	sp, #12
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	3b04      	subs	r3, #4
 800c3b0:	2a00      	cmp	r2, #0
 800c3b2:	d1ce      	bne.n	800c352 <quorem+0x9a>
 800c3b4:	3c01      	subs	r4, #1
 800c3b6:	e7c9      	b.n	800c34c <quorem+0x94>
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	3b04      	subs	r3, #4
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	d1f0      	bne.n	800c3a2 <quorem+0xea>
 800c3c0:	3c01      	subs	r4, #1
 800c3c2:	e7eb      	b.n	800c39c <quorem+0xe4>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7ee      	b.n	800c3a6 <quorem+0xee>

0800c3c8 <_dtoa_r>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	ed2d 8b04 	vpush	{d8-d9}
 800c3d0:	69c5      	ldr	r5, [r0, #28]
 800c3d2:	b093      	sub	sp, #76	; 0x4c
 800c3d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3d8:	ec57 6b10 	vmov	r6, r7, d0
 800c3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3e0:	9107      	str	r1, [sp, #28]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3e8:	b975      	cbnz	r5, 800c408 <_dtoa_r+0x40>
 800c3ea:	2010      	movs	r0, #16
 800c3ec:	f000 fe2a 	bl	800d044 <malloc>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	61e0      	str	r0, [r4, #28]
 800c3f4:	b920      	cbnz	r0, 800c400 <_dtoa_r+0x38>
 800c3f6:	4bae      	ldr	r3, [pc, #696]	; (800c6b0 <_dtoa_r+0x2e8>)
 800c3f8:	21ef      	movs	r1, #239	; 0xef
 800c3fa:	48ae      	ldr	r0, [pc, #696]	; (800c6b4 <_dtoa_r+0x2ec>)
 800c3fc:	f001 fb1e 	bl	800da3c <__assert_func>
 800c400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c404:	6005      	str	r5, [r0, #0]
 800c406:	60c5      	str	r5, [r0, #12]
 800c408:	69e3      	ldr	r3, [r4, #28]
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	b151      	cbz	r1, 800c424 <_dtoa_r+0x5c>
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	604a      	str	r2, [r1, #4]
 800c412:	2301      	movs	r3, #1
 800c414:	4093      	lsls	r3, r2
 800c416:	608b      	str	r3, [r1, #8]
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 ff07 	bl	800d22c <_Bfree>
 800c41e:	69e3      	ldr	r3, [r4, #28]
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	1e3b      	subs	r3, r7, #0
 800c426:	bfbb      	ittet	lt
 800c428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c42c:	9303      	strlt	r3, [sp, #12]
 800c42e:	2300      	movge	r3, #0
 800c430:	2201      	movlt	r2, #1
 800c432:	bfac      	ite	ge
 800c434:	f8c8 3000 	strge.w	r3, [r8]
 800c438:	f8c8 2000 	strlt.w	r2, [r8]
 800c43c:	4b9e      	ldr	r3, [pc, #632]	; (800c6b8 <_dtoa_r+0x2f0>)
 800c43e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c442:	ea33 0308 	bics.w	r3, r3, r8
 800c446:	d11b      	bne.n	800c480 <_dtoa_r+0xb8>
 800c448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c44a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c454:	4333      	orrs	r3, r6
 800c456:	f000 8593 	beq.w	800cf80 <_dtoa_r+0xbb8>
 800c45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c45c:	b963      	cbnz	r3, 800c478 <_dtoa_r+0xb0>
 800c45e:	4b97      	ldr	r3, [pc, #604]	; (800c6bc <_dtoa_r+0x2f4>)
 800c460:	e027      	b.n	800c4b2 <_dtoa_r+0xea>
 800c462:	4b97      	ldr	r3, [pc, #604]	; (800c6c0 <_dtoa_r+0x2f8>)
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	3308      	adds	r3, #8
 800c468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	9800      	ldr	r0, [sp, #0]
 800c46e:	b013      	add	sp, #76	; 0x4c
 800c470:	ecbd 8b04 	vpop	{d8-d9}
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	4b90      	ldr	r3, [pc, #576]	; (800c6bc <_dtoa_r+0x2f4>)
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	3303      	adds	r3, #3
 800c47e:	e7f3      	b.n	800c468 <_dtoa_r+0xa0>
 800c480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c484:	2200      	movs	r2, #0
 800c486:	ec51 0b17 	vmov	r0, r1, d7
 800c48a:	eeb0 8a47 	vmov.f32	s16, s14
 800c48e:	eef0 8a67 	vmov.f32	s17, s15
 800c492:	2300      	movs	r3, #0
 800c494:	f7f4 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 800c498:	4681      	mov	r9, r0
 800c49a:	b160      	cbz	r0, 800c4b6 <_dtoa_r+0xee>
 800c49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c49e:	2301      	movs	r3, #1
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 8568 	beq.w	800cf7a <_dtoa_r+0xbb2>
 800c4aa:	4b86      	ldr	r3, [pc, #536]	; (800c6c4 <_dtoa_r+0x2fc>)
 800c4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	e7da      	b.n	800c46c <_dtoa_r+0xa4>
 800c4b6:	aa10      	add	r2, sp, #64	; 0x40
 800c4b8:	a911      	add	r1, sp, #68	; 0x44
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c0:	eef0 0a68 	vmov.f32	s1, s17
 800c4c4:	f001 f994 	bl	800d7f0 <__d2b>
 800c4c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4cc:	4682      	mov	sl, r0
 800c4ce:	2d00      	cmp	r5, #0
 800c4d0:	d07f      	beq.n	800c5d2 <_dtoa_r+0x20a>
 800c4d2:	ee18 3a90 	vmov	r3, s17
 800c4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4de:	ec51 0b18 	vmov	r0, r1, d8
 800c4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4b75      	ldr	r3, [pc, #468]	; (800c6c8 <_dtoa_r+0x300>)
 800c4f4:	f7f3 fec8 	bl	8000288 <__aeabi_dsub>
 800c4f8:	a367      	add	r3, pc, #412	; (adr r3, 800c698 <_dtoa_r+0x2d0>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f4 f87b 	bl	80005f8 <__aeabi_dmul>
 800c502:	a367      	add	r3, pc, #412	; (adr r3, 800c6a0 <_dtoa_r+0x2d8>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fec0 	bl	800028c <__adddf3>
 800c50c:	4606      	mov	r6, r0
 800c50e:	4628      	mov	r0, r5
 800c510:	460f      	mov	r7, r1
 800c512:	f7f4 f807 	bl	8000524 <__aeabi_i2d>
 800c516:	a364      	add	r3, pc, #400	; (adr r3, 800c6a8 <_dtoa_r+0x2e0>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f4 f86c 	bl	80005f8 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4630      	mov	r0, r6
 800c526:	4639      	mov	r1, r7
 800c528:	f7f3 feb0 	bl	800028c <__adddf3>
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	f7f4 fb12 	bl	8000b58 <__aeabi_d2iz>
 800c534:	2200      	movs	r2, #0
 800c536:	4683      	mov	fp, r0
 800c538:	2300      	movs	r3, #0
 800c53a:	4630      	mov	r0, r6
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f4 facd 	bl	8000adc <__aeabi_dcmplt>
 800c542:	b148      	cbz	r0, 800c558 <_dtoa_r+0x190>
 800c544:	4658      	mov	r0, fp
 800c546:	f7f3 ffed 	bl	8000524 <__aeabi_i2d>
 800c54a:	4632      	mov	r2, r6
 800c54c:	463b      	mov	r3, r7
 800c54e:	f7f4 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c552:	b908      	cbnz	r0, 800c558 <_dtoa_r+0x190>
 800c554:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c558:	f1bb 0f16 	cmp.w	fp, #22
 800c55c:	d857      	bhi.n	800c60e <_dtoa_r+0x246>
 800c55e:	4b5b      	ldr	r3, [pc, #364]	; (800c6cc <_dtoa_r+0x304>)
 800c560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	ec51 0b18 	vmov	r0, r1, d8
 800c56c:	f7f4 fab6 	bl	8000adc <__aeabi_dcmplt>
 800c570:	2800      	cmp	r0, #0
 800c572:	d04e      	beq.n	800c612 <_dtoa_r+0x24a>
 800c574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c578:	2300      	movs	r3, #0
 800c57a:	930c      	str	r3, [sp, #48]	; 0x30
 800c57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c57e:	1b5b      	subs	r3, r3, r5
 800c580:	1e5a      	subs	r2, r3, #1
 800c582:	bf45      	ittet	mi
 800c584:	f1c3 0301 	rsbmi	r3, r3, #1
 800c588:	9305      	strmi	r3, [sp, #20]
 800c58a:	2300      	movpl	r3, #0
 800c58c:	2300      	movmi	r3, #0
 800c58e:	9206      	str	r2, [sp, #24]
 800c590:	bf54      	ite	pl
 800c592:	9305      	strpl	r3, [sp, #20]
 800c594:	9306      	strmi	r3, [sp, #24]
 800c596:	f1bb 0f00 	cmp.w	fp, #0
 800c59a:	db3c      	blt.n	800c616 <_dtoa_r+0x24e>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5a2:	445b      	add	r3, fp
 800c5a4:	9306      	str	r3, [sp, #24]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9308      	str	r3, [sp, #32]
 800c5aa:	9b07      	ldr	r3, [sp, #28]
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d868      	bhi.n	800c682 <_dtoa_r+0x2ba>
 800c5b0:	2b05      	cmp	r3, #5
 800c5b2:	bfc4      	itt	gt
 800c5b4:	3b04      	subgt	r3, #4
 800c5b6:	9307      	strgt	r3, [sp, #28]
 800c5b8:	9b07      	ldr	r3, [sp, #28]
 800c5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800c5be:	bfcc      	ite	gt
 800c5c0:	2500      	movgt	r5, #0
 800c5c2:	2501      	movle	r5, #1
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	f200 8085 	bhi.w	800c6d4 <_dtoa_r+0x30c>
 800c5ca:	e8df f003 	tbb	[pc, r3]
 800c5ce:	3b2e      	.short	0x3b2e
 800c5d0:	5839      	.short	0x5839
 800c5d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5d6:	441d      	add	r5, r3
 800c5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5dc:	2b20      	cmp	r3, #32
 800c5de:	bfc1      	itttt	gt
 800c5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5f0:	bfd6      	itet	le
 800c5f2:	f1c3 0320 	rsble	r3, r3, #32
 800c5f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c5fa:	fa06 f003 	lslle.w	r0, r6, r3
 800c5fe:	f7f3 ff81 	bl	8000504 <__aeabi_ui2d>
 800c602:	2201      	movs	r2, #1
 800c604:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c608:	3d01      	subs	r5, #1
 800c60a:	920e      	str	r2, [sp, #56]	; 0x38
 800c60c:	e76f      	b.n	800c4ee <_dtoa_r+0x126>
 800c60e:	2301      	movs	r3, #1
 800c610:	e7b3      	b.n	800c57a <_dtoa_r+0x1b2>
 800c612:	900c      	str	r0, [sp, #48]	; 0x30
 800c614:	e7b2      	b.n	800c57c <_dtoa_r+0x1b4>
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	eba3 030b 	sub.w	r3, r3, fp
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f1cb 0300 	rsb	r3, fp, #0
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	2300      	movs	r3, #0
 800c626:	930b      	str	r3, [sp, #44]	; 0x2c
 800c628:	e7bf      	b.n	800c5aa <_dtoa_r+0x1e2>
 800c62a:	2300      	movs	r3, #0
 800c62c:	9309      	str	r3, [sp, #36]	; 0x24
 800c62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c630:	2b00      	cmp	r3, #0
 800c632:	dc52      	bgt.n	800c6da <_dtoa_r+0x312>
 800c634:	2301      	movs	r3, #1
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	461a      	mov	r2, r3
 800c63c:	920a      	str	r2, [sp, #40]	; 0x28
 800c63e:	e00b      	b.n	800c658 <_dtoa_r+0x290>
 800c640:	2301      	movs	r3, #1
 800c642:	e7f3      	b.n	800c62c <_dtoa_r+0x264>
 800c644:	2300      	movs	r3, #0
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c64a:	445b      	add	r3, fp
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	3301      	adds	r3, #1
 800c650:	2b01      	cmp	r3, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	bfb8      	it	lt
 800c656:	2301      	movlt	r3, #1
 800c658:	69e0      	ldr	r0, [r4, #28]
 800c65a:	2100      	movs	r1, #0
 800c65c:	2204      	movs	r2, #4
 800c65e:	f102 0614 	add.w	r6, r2, #20
 800c662:	429e      	cmp	r6, r3
 800c664:	d93d      	bls.n	800c6e2 <_dtoa_r+0x31a>
 800c666:	6041      	str	r1, [r0, #4]
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fd9f 	bl	800d1ac <_Balloc>
 800c66e:	9000      	str	r0, [sp, #0]
 800c670:	2800      	cmp	r0, #0
 800c672:	d139      	bne.n	800c6e8 <_dtoa_r+0x320>
 800c674:	4b16      	ldr	r3, [pc, #88]	; (800c6d0 <_dtoa_r+0x308>)
 800c676:	4602      	mov	r2, r0
 800c678:	f240 11af 	movw	r1, #431	; 0x1af
 800c67c:	e6bd      	b.n	800c3fa <_dtoa_r+0x32>
 800c67e:	2301      	movs	r3, #1
 800c680:	e7e1      	b.n	800c646 <_dtoa_r+0x27e>
 800c682:	2501      	movs	r5, #1
 800c684:	2300      	movs	r3, #0
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	9509      	str	r5, [sp, #36]	; 0x24
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	2200      	movs	r2, #0
 800c694:	2312      	movs	r3, #18
 800c696:	e7d1      	b.n	800c63c <_dtoa_r+0x274>
 800c698:	636f4361 	.word	0x636f4361
 800c69c:	3fd287a7 	.word	0x3fd287a7
 800c6a0:	8b60c8b3 	.word	0x8b60c8b3
 800c6a4:	3fc68a28 	.word	0x3fc68a28
 800c6a8:	509f79fb 	.word	0x509f79fb
 800c6ac:	3fd34413 	.word	0x3fd34413
 800c6b0:	0800e169 	.word	0x0800e169
 800c6b4:	0800e180 	.word	0x0800e180
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	0800e165 	.word	0x0800e165
 800c6c0:	0800e15c 	.word	0x0800e15c
 800c6c4:	0800e139 	.word	0x0800e139
 800c6c8:	3ff80000 	.word	0x3ff80000
 800c6cc:	0800e270 	.word	0x0800e270
 800c6d0:	0800e1d8 	.word	0x0800e1d8
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d8:	e7d7      	b.n	800c68a <_dtoa_r+0x2c2>
 800c6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	e7ba      	b.n	800c658 <_dtoa_r+0x290>
 800c6e2:	3101      	adds	r1, #1
 800c6e4:	0052      	lsls	r2, r2, #1
 800c6e6:	e7ba      	b.n	800c65e <_dtoa_r+0x296>
 800c6e8:	69e3      	ldr	r3, [r4, #28]
 800c6ea:	9a00      	ldr	r2, [sp, #0]
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	2b0e      	cmp	r3, #14
 800c6f2:	f200 80a8 	bhi.w	800c846 <_dtoa_r+0x47e>
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	f000 80a5 	beq.w	800c846 <_dtoa_r+0x47e>
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	dd38      	ble.n	800c774 <_dtoa_r+0x3ac>
 800c702:	4bc0      	ldr	r3, [pc, #768]	; (800ca04 <_dtoa_r+0x63c>)
 800c704:	f00b 020f 	and.w	r2, fp, #15
 800c708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c710:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c714:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c718:	d019      	beq.n	800c74e <_dtoa_r+0x386>
 800c71a:	4bbb      	ldr	r3, [pc, #748]	; (800ca08 <_dtoa_r+0x640>)
 800c71c:	ec51 0b18 	vmov	r0, r1, d8
 800c720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c724:	f7f4 f892 	bl	800084c <__aeabi_ddiv>
 800c728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c72c:	f008 080f 	and.w	r8, r8, #15
 800c730:	2503      	movs	r5, #3
 800c732:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca08 <_dtoa_r+0x640>
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	d10a      	bne.n	800c752 <_dtoa_r+0x38a>
 800c73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c740:	4632      	mov	r2, r6
 800c742:	463b      	mov	r3, r7
 800c744:	f7f4 f882 	bl	800084c <__aeabi_ddiv>
 800c748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c74c:	e02b      	b.n	800c7a6 <_dtoa_r+0x3de>
 800c74e:	2502      	movs	r5, #2
 800c750:	e7ef      	b.n	800c732 <_dtoa_r+0x36a>
 800c752:	f018 0f01 	tst.w	r8, #1
 800c756:	d008      	beq.n	800c76a <_dtoa_r+0x3a2>
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c760:	f7f3 ff4a 	bl	80005f8 <__aeabi_dmul>
 800c764:	3501      	adds	r5, #1
 800c766:	4606      	mov	r6, r0
 800c768:	460f      	mov	r7, r1
 800c76a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c76e:	f109 0908 	add.w	r9, r9, #8
 800c772:	e7e0      	b.n	800c736 <_dtoa_r+0x36e>
 800c774:	f000 809f 	beq.w	800c8b6 <_dtoa_r+0x4ee>
 800c778:	f1cb 0600 	rsb	r6, fp, #0
 800c77c:	4ba1      	ldr	r3, [pc, #644]	; (800ca04 <_dtoa_r+0x63c>)
 800c77e:	4fa2      	ldr	r7, [pc, #648]	; (800ca08 <_dtoa_r+0x640>)
 800c780:	f006 020f 	and.w	r2, r6, #15
 800c784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	ec51 0b18 	vmov	r0, r1, d8
 800c790:	f7f3 ff32 	bl	80005f8 <__aeabi_dmul>
 800c794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c798:	1136      	asrs	r6, r6, #4
 800c79a:	2300      	movs	r3, #0
 800c79c:	2502      	movs	r5, #2
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	d17e      	bne.n	800c8a0 <_dtoa_r+0x4d8>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1d0      	bne.n	800c748 <_dtoa_r+0x380>
 800c7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8084 	beq.w	800c8ba <_dtoa_r+0x4f2>
 800c7b2:	4b96      	ldr	r3, [pc, #600]	; (800ca0c <_dtoa_r+0x644>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f4 f98f 	bl	8000adc <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d07b      	beq.n	800c8ba <_dtoa_r+0x4f2>
 800c7c2:	9b04      	ldr	r3, [sp, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d078      	beq.n	800c8ba <_dtoa_r+0x4f2>
 800c7c8:	9b01      	ldr	r3, [sp, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd39      	ble.n	800c842 <_dtoa_r+0x47a>
 800c7ce:	4b90      	ldr	r3, [pc, #576]	; (800ca10 <_dtoa_r+0x648>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7de:	9e01      	ldr	r6, [sp, #4]
 800c7e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7e4:	3501      	adds	r5, #1
 800c7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f7f3 fe9a 	bl	8000524 <__aeabi_i2d>
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	f7f3 ff00 	bl	80005f8 <__aeabi_dmul>
 800c7f8:	4b86      	ldr	r3, [pc, #536]	; (800ca14 <_dtoa_r+0x64c>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f7f3 fd46 	bl	800028c <__adddf3>
 800c800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c808:	9303      	str	r3, [sp, #12]
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	d158      	bne.n	800c8c0 <_dtoa_r+0x4f8>
 800c80e:	4b82      	ldr	r3, [pc, #520]	; (800ca18 <_dtoa_r+0x650>)
 800c810:	2200      	movs	r2, #0
 800c812:	4640      	mov	r0, r8
 800c814:	4649      	mov	r1, r9
 800c816:	f7f3 fd37 	bl	8000288 <__aeabi_dsub>
 800c81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c81e:	4680      	mov	r8, r0
 800c820:	4689      	mov	r9, r1
 800c822:	f7f4 f979 	bl	8000b18 <__aeabi_dcmpgt>
 800c826:	2800      	cmp	r0, #0
 800c828:	f040 8296 	bne.w	800cd58 <_dtoa_r+0x990>
 800c82c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c830:	4640      	mov	r0, r8
 800c832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c836:	4649      	mov	r1, r9
 800c838:	f7f4 f950 	bl	8000adc <__aeabi_dcmplt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 8289 	bne.w	800cd54 <_dtoa_r+0x98c>
 800c842:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f2c0 814e 	blt.w	800caea <_dtoa_r+0x722>
 800c84e:	f1bb 0f0e 	cmp.w	fp, #14
 800c852:	f300 814a 	bgt.w	800caea <_dtoa_r+0x722>
 800c856:	4b6b      	ldr	r3, [pc, #428]	; (800ca04 <_dtoa_r+0x63c>)
 800c858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c85c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	f280 80dc 	bge.w	800ca20 <_dtoa_r+0x658>
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f300 80d8 	bgt.w	800ca20 <_dtoa_r+0x658>
 800c870:	f040 826f 	bne.w	800cd52 <_dtoa_r+0x98a>
 800c874:	4b68      	ldr	r3, [pc, #416]	; (800ca18 <_dtoa_r+0x650>)
 800c876:	2200      	movs	r2, #0
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f3 febc 	bl	80005f8 <__aeabi_dmul>
 800c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c884:	f7f4 f93e 	bl	8000b04 <__aeabi_dcmpge>
 800c888:	9e04      	ldr	r6, [sp, #16]
 800c88a:	4637      	mov	r7, r6
 800c88c:	2800      	cmp	r0, #0
 800c88e:	f040 8245 	bne.w	800cd1c <_dtoa_r+0x954>
 800c892:	9d00      	ldr	r5, [sp, #0]
 800c894:	2331      	movs	r3, #49	; 0x31
 800c896:	f805 3b01 	strb.w	r3, [r5], #1
 800c89a:	f10b 0b01 	add.w	fp, fp, #1
 800c89e:	e241      	b.n	800cd24 <_dtoa_r+0x95c>
 800c8a0:	07f2      	lsls	r2, r6, #31
 800c8a2:	d505      	bpl.n	800c8b0 <_dtoa_r+0x4e8>
 800c8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a8:	f7f3 fea6 	bl	80005f8 <__aeabi_dmul>
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	1076      	asrs	r6, r6, #1
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	e773      	b.n	800c79e <_dtoa_r+0x3d6>
 800c8b6:	2502      	movs	r5, #2
 800c8b8:	e775      	b.n	800c7a6 <_dtoa_r+0x3de>
 800c8ba:	9e04      	ldr	r6, [sp, #16]
 800c8bc:	465f      	mov	r7, fp
 800c8be:	e792      	b.n	800c7e6 <_dtoa_r+0x41e>
 800c8c0:	9900      	ldr	r1, [sp, #0]
 800c8c2:	4b50      	ldr	r3, [pc, #320]	; (800ca04 <_dtoa_r+0x63c>)
 800c8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8c8:	4431      	add	r1, r6
 800c8ca:	9102      	str	r1, [sp, #8]
 800c8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8ce:	eeb0 9a47 	vmov.f32	s18, s14
 800c8d2:	eef0 9a67 	vmov.f32	s19, s15
 800c8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d044      	beq.n	800c96c <_dtoa_r+0x5a4>
 800c8e2:	494e      	ldr	r1, [pc, #312]	; (800ca1c <_dtoa_r+0x654>)
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f7f3 ffb1 	bl	800084c <__aeabi_ddiv>
 800c8ea:	ec53 2b19 	vmov	r2, r3, d9
 800c8ee:	f7f3 fccb 	bl	8000288 <__aeabi_dsub>
 800c8f2:	9d00      	ldr	r5, [sp, #0]
 800c8f4:	ec41 0b19 	vmov	d9, r0, r1
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	f7f4 f92c 	bl	8000b58 <__aeabi_d2iz>
 800c900:	4606      	mov	r6, r0
 800c902:	f7f3 fe0f 	bl	8000524 <__aeabi_i2d>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	4640      	mov	r0, r8
 800c90c:	4649      	mov	r1, r9
 800c90e:	f7f3 fcbb 	bl	8000288 <__aeabi_dsub>
 800c912:	3630      	adds	r6, #48	; 0x30
 800c914:	f805 6b01 	strb.w	r6, [r5], #1
 800c918:	ec53 2b19 	vmov	r2, r3, d9
 800c91c:	4680      	mov	r8, r0
 800c91e:	4689      	mov	r9, r1
 800c920:	f7f4 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800c924:	2800      	cmp	r0, #0
 800c926:	d164      	bne.n	800c9f2 <_dtoa_r+0x62a>
 800c928:	4642      	mov	r2, r8
 800c92a:	464b      	mov	r3, r9
 800c92c:	4937      	ldr	r1, [pc, #220]	; (800ca0c <_dtoa_r+0x644>)
 800c92e:	2000      	movs	r0, #0
 800c930:	f7f3 fcaa 	bl	8000288 <__aeabi_dsub>
 800c934:	ec53 2b19 	vmov	r2, r3, d9
 800c938:	f7f4 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f040 80b6 	bne.w	800caae <_dtoa_r+0x6e6>
 800c942:	9b02      	ldr	r3, [sp, #8]
 800c944:	429d      	cmp	r5, r3
 800c946:	f43f af7c 	beq.w	800c842 <_dtoa_r+0x47a>
 800c94a:	4b31      	ldr	r3, [pc, #196]	; (800ca10 <_dtoa_r+0x648>)
 800c94c:	ec51 0b19 	vmov	r0, r1, d9
 800c950:	2200      	movs	r2, #0
 800c952:	f7f3 fe51 	bl	80005f8 <__aeabi_dmul>
 800c956:	4b2e      	ldr	r3, [pc, #184]	; (800ca10 <_dtoa_r+0x648>)
 800c958:	ec41 0b19 	vmov	d9, r0, r1
 800c95c:	2200      	movs	r2, #0
 800c95e:	4640      	mov	r0, r8
 800c960:	4649      	mov	r1, r9
 800c962:	f7f3 fe49 	bl	80005f8 <__aeabi_dmul>
 800c966:	4680      	mov	r8, r0
 800c968:	4689      	mov	r9, r1
 800c96a:	e7c5      	b.n	800c8f8 <_dtoa_r+0x530>
 800c96c:	ec51 0b17 	vmov	r0, r1, d7
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	9d00      	ldr	r5, [sp, #0]
 800c978:	930f      	str	r3, [sp, #60]	; 0x3c
 800c97a:	ec41 0b19 	vmov	d9, r0, r1
 800c97e:	4649      	mov	r1, r9
 800c980:	4640      	mov	r0, r8
 800c982:	f7f4 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800c986:	4606      	mov	r6, r0
 800c988:	f7f3 fdcc 	bl	8000524 <__aeabi_i2d>
 800c98c:	3630      	adds	r6, #48	; 0x30
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4640      	mov	r0, r8
 800c994:	4649      	mov	r1, r9
 800c996:	f7f3 fc77 	bl	8000288 <__aeabi_dsub>
 800c99a:	f805 6b01 	strb.w	r6, [r5], #1
 800c99e:	9b02      	ldr	r3, [sp, #8]
 800c9a0:	429d      	cmp	r5, r3
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	4689      	mov	r9, r1
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	d124      	bne.n	800c9f6 <_dtoa_r+0x62e>
 800c9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <_dtoa_r+0x654>)
 800c9ae:	ec51 0b19 	vmov	r0, r1, d9
 800c9b2:	f7f3 fc6b 	bl	800028c <__adddf3>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4649      	mov	r1, r9
 800c9be:	f7f4 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d173      	bne.n	800caae <_dtoa_r+0x6e6>
 800c9c6:	ec53 2b19 	vmov	r2, r3, d9
 800c9ca:	4914      	ldr	r1, [pc, #80]	; (800ca1c <_dtoa_r+0x654>)
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f7f3 fc5b 	bl	8000288 <__aeabi_dsub>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f4 f87f 	bl	8000adc <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f43f af2f 	beq.w	800c842 <_dtoa_r+0x47a>
 800c9e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9e6:	1e6b      	subs	r3, r5, #1
 800c9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9ee:	2b30      	cmp	r3, #48	; 0x30
 800c9f0:	d0f8      	beq.n	800c9e4 <_dtoa_r+0x61c>
 800c9f2:	46bb      	mov	fp, r7
 800c9f4:	e04a      	b.n	800ca8c <_dtoa_r+0x6c4>
 800c9f6:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <_dtoa_r+0x648>)
 800c9f8:	f7f3 fdfe 	bl	80005f8 <__aeabi_dmul>
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	4689      	mov	r9, r1
 800ca00:	e7bd      	b.n	800c97e <_dtoa_r+0x5b6>
 800ca02:	bf00      	nop
 800ca04:	0800e270 	.word	0x0800e270
 800ca08:	0800e248 	.word	0x0800e248
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	40240000 	.word	0x40240000
 800ca14:	401c0000 	.word	0x401c0000
 800ca18:	40140000 	.word	0x40140000
 800ca1c:	3fe00000 	.word	0x3fe00000
 800ca20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca24:	9d00      	ldr	r5, [sp, #0]
 800ca26:	4642      	mov	r2, r8
 800ca28:	464b      	mov	r3, r9
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f3 ff0d 	bl	800084c <__aeabi_ddiv>
 800ca32:	f7f4 f891 	bl	8000b58 <__aeabi_d2iz>
 800ca36:	9001      	str	r0, [sp, #4]
 800ca38:	f7f3 fd74 	bl	8000524 <__aeabi_i2d>
 800ca3c:	4642      	mov	r2, r8
 800ca3e:	464b      	mov	r3, r9
 800ca40:	f7f3 fdda 	bl	80005f8 <__aeabi_dmul>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f3 fc1c 	bl	8000288 <__aeabi_dsub>
 800ca50:	9e01      	ldr	r6, [sp, #4]
 800ca52:	9f04      	ldr	r7, [sp, #16]
 800ca54:	3630      	adds	r6, #48	; 0x30
 800ca56:	f805 6b01 	strb.w	r6, [r5], #1
 800ca5a:	9e00      	ldr	r6, [sp, #0]
 800ca5c:	1bae      	subs	r6, r5, r6
 800ca5e:	42b7      	cmp	r7, r6
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	d134      	bne.n	800cad0 <_dtoa_r+0x708>
 800ca66:	f7f3 fc11 	bl	800028c <__adddf3>
 800ca6a:	4642      	mov	r2, r8
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	4606      	mov	r6, r0
 800ca70:	460f      	mov	r7, r1
 800ca72:	f7f4 f851 	bl	8000b18 <__aeabi_dcmpgt>
 800ca76:	b9c8      	cbnz	r0, 800caac <_dtoa_r+0x6e4>
 800ca78:	4642      	mov	r2, r8
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f4 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca84:	b110      	cbz	r0, 800ca8c <_dtoa_r+0x6c4>
 800ca86:	9b01      	ldr	r3, [sp, #4]
 800ca88:	07db      	lsls	r3, r3, #31
 800ca8a:	d40f      	bmi.n	800caac <_dtoa_r+0x6e4>
 800ca8c:	4651      	mov	r1, sl
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fbcc 	bl	800d22c <_Bfree>
 800ca94:	2300      	movs	r3, #0
 800ca96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca98:	702b      	strb	r3, [r5, #0]
 800ca9a:	f10b 0301 	add.w	r3, fp, #1
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f43f ace2 	beq.w	800c46c <_dtoa_r+0xa4>
 800caa8:	601d      	str	r5, [r3, #0]
 800caaa:	e4df      	b.n	800c46c <_dtoa_r+0xa4>
 800caac:	465f      	mov	r7, fp
 800caae:	462b      	mov	r3, r5
 800cab0:	461d      	mov	r5, r3
 800cab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cab6:	2a39      	cmp	r2, #57	; 0x39
 800cab8:	d106      	bne.n	800cac8 <_dtoa_r+0x700>
 800caba:	9a00      	ldr	r2, [sp, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d1f7      	bne.n	800cab0 <_dtoa_r+0x6e8>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	2230      	movs	r2, #48	; 0x30
 800cac4:	3701      	adds	r7, #1
 800cac6:	700a      	strb	r2, [r1, #0]
 800cac8:	781a      	ldrb	r2, [r3, #0]
 800caca:	3201      	adds	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
 800cace:	e790      	b.n	800c9f2 <_dtoa_r+0x62a>
 800cad0:	4ba3      	ldr	r3, [pc, #652]	; (800cd60 <_dtoa_r+0x998>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	f7f3 fd90 	bl	80005f8 <__aeabi_dmul>
 800cad8:	2200      	movs	r2, #0
 800cada:	2300      	movs	r3, #0
 800cadc:	4606      	mov	r6, r0
 800cade:	460f      	mov	r7, r1
 800cae0:	f7f3 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d09e      	beq.n	800ca26 <_dtoa_r+0x65e>
 800cae8:	e7d0      	b.n	800ca8c <_dtoa_r+0x6c4>
 800caea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caec:	2a00      	cmp	r2, #0
 800caee:	f000 80ca 	beq.w	800cc86 <_dtoa_r+0x8be>
 800caf2:	9a07      	ldr	r2, [sp, #28]
 800caf4:	2a01      	cmp	r2, #1
 800caf6:	f300 80ad 	bgt.w	800cc54 <_dtoa_r+0x88c>
 800cafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	f000 80a5 	beq.w	800cc4c <_dtoa_r+0x884>
 800cb02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb06:	9e08      	ldr	r6, [sp, #32]
 800cb08:	9d05      	ldr	r5, [sp, #20]
 800cb0a:	9a05      	ldr	r2, [sp, #20]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	9205      	str	r2, [sp, #20]
 800cb10:	9a06      	ldr	r2, [sp, #24]
 800cb12:	2101      	movs	r1, #1
 800cb14:	441a      	add	r2, r3
 800cb16:	4620      	mov	r0, r4
 800cb18:	9206      	str	r2, [sp, #24]
 800cb1a:	f000 fc3d 	bl	800d398 <__i2b>
 800cb1e:	4607      	mov	r7, r0
 800cb20:	b165      	cbz	r5, 800cb3c <_dtoa_r+0x774>
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dd09      	ble.n	800cb3c <_dtoa_r+0x774>
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	9a05      	ldr	r2, [sp, #20]
 800cb2c:	bfa8      	it	ge
 800cb2e:	462b      	movge	r3, r5
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	9205      	str	r2, [sp, #20]
 800cb34:	9a06      	ldr	r2, [sp, #24]
 800cb36:	1aed      	subs	r5, r5, r3
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	9306      	str	r3, [sp, #24]
 800cb3c:	9b08      	ldr	r3, [sp, #32]
 800cb3e:	b1f3      	cbz	r3, 800cb7e <_dtoa_r+0x7b6>
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 80a3 	beq.w	800cc8e <_dtoa_r+0x8c6>
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	dd10      	ble.n	800cb6e <_dtoa_r+0x7a6>
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	4632      	mov	r2, r6
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fce1 	bl	800d518 <__pow5mult>
 800cb56:	4652      	mov	r2, sl
 800cb58:	4601      	mov	r1, r0
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 fc31 	bl	800d3c4 <__multiply>
 800cb62:	4651      	mov	r1, sl
 800cb64:	4680      	mov	r8, r0
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 fb60 	bl	800d22c <_Bfree>
 800cb6c:	46c2      	mov	sl, r8
 800cb6e:	9b08      	ldr	r3, [sp, #32]
 800cb70:	1b9a      	subs	r2, r3, r6
 800cb72:	d004      	beq.n	800cb7e <_dtoa_r+0x7b6>
 800cb74:	4651      	mov	r1, sl
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fcce 	bl	800d518 <__pow5mult>
 800cb7c:	4682      	mov	sl, r0
 800cb7e:	2101      	movs	r1, #1
 800cb80:	4620      	mov	r0, r4
 800cb82:	f000 fc09 	bl	800d398 <__i2b>
 800cb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	f340 8081 	ble.w	800cc92 <_dtoa_r+0x8ca>
 800cb90:	461a      	mov	r2, r3
 800cb92:	4601      	mov	r1, r0
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 fcbf 	bl	800d518 <__pow5mult>
 800cb9a:	9b07      	ldr	r3, [sp, #28]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	4606      	mov	r6, r0
 800cba0:	dd7a      	ble.n	800cc98 <_dtoa_r+0x8d0>
 800cba2:	f04f 0800 	mov.w	r8, #0
 800cba6:	6933      	ldr	r3, [r6, #16]
 800cba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbac:	6918      	ldr	r0, [r3, #16]
 800cbae:	f000 fba5 	bl	800d2fc <__hi0bits>
 800cbb2:	f1c0 0020 	rsb	r0, r0, #32
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	4418      	add	r0, r3
 800cbba:	f010 001f 	ands.w	r0, r0, #31
 800cbbe:	f000 8094 	beq.w	800ccea <_dtoa_r+0x922>
 800cbc2:	f1c0 0320 	rsb	r3, r0, #32
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	f340 8085 	ble.w	800ccd6 <_dtoa_r+0x90e>
 800cbcc:	9b05      	ldr	r3, [sp, #20]
 800cbce:	f1c0 001c 	rsb	r0, r0, #28
 800cbd2:	4403      	add	r3, r0
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	9b06      	ldr	r3, [sp, #24]
 800cbd8:	4403      	add	r3, r0
 800cbda:	4405      	add	r5, r0
 800cbdc:	9306      	str	r3, [sp, #24]
 800cbde:	9b05      	ldr	r3, [sp, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dd05      	ble.n	800cbf0 <_dtoa_r+0x828>
 800cbe4:	4651      	mov	r1, sl
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fcef 	bl	800d5cc <__lshift>
 800cbee:	4682      	mov	sl, r0
 800cbf0:	9b06      	ldr	r3, [sp, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dd05      	ble.n	800cc02 <_dtoa_r+0x83a>
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fce6 	bl	800d5cc <__lshift>
 800cc00:	4606      	mov	r6, r0
 800cc02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d072      	beq.n	800ccee <_dtoa_r+0x926>
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	f000 fd4a 	bl	800d6a4 <__mcmp>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	da6c      	bge.n	800ccee <_dtoa_r+0x926>
 800cc14:	2300      	movs	r3, #0
 800cc16:	4651      	mov	r1, sl
 800cc18:	220a      	movs	r2, #10
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 fb28 	bl	800d270 <__multadd>
 800cc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc26:	4682      	mov	sl, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 81b0 	beq.w	800cf8e <_dtoa_r+0xbc6>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4639      	mov	r1, r7
 800cc32:	220a      	movs	r2, #10
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fb1b 	bl	800d270 <__multadd>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	4607      	mov	r7, r0
 800cc40:	f300 8096 	bgt.w	800cd70 <_dtoa_r+0x9a8>
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	dc59      	bgt.n	800ccfe <_dtoa_r+0x936>
 800cc4a:	e091      	b.n	800cd70 <_dtoa_r+0x9a8>
 800cc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc52:	e758      	b.n	800cb06 <_dtoa_r+0x73e>
 800cc54:	9b04      	ldr	r3, [sp, #16]
 800cc56:	1e5e      	subs	r6, r3, #1
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	42b3      	cmp	r3, r6
 800cc5c:	bfbf      	itttt	lt
 800cc5e:	9b08      	ldrlt	r3, [sp, #32]
 800cc60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc62:	9608      	strlt	r6, [sp, #32]
 800cc64:	1af3      	sublt	r3, r6, r3
 800cc66:	bfb4      	ite	lt
 800cc68:	18d2      	addlt	r2, r2, r3
 800cc6a:	1b9e      	subge	r6, r3, r6
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	bfbc      	itt	lt
 800cc70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc72:	2600      	movlt	r6, #0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bfb7      	itett	lt
 800cc78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc80:	1a9d      	sublt	r5, r3, r2
 800cc82:	2300      	movlt	r3, #0
 800cc84:	e741      	b.n	800cb0a <_dtoa_r+0x742>
 800cc86:	9e08      	ldr	r6, [sp, #32]
 800cc88:	9d05      	ldr	r5, [sp, #20]
 800cc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc8c:	e748      	b.n	800cb20 <_dtoa_r+0x758>
 800cc8e:	9a08      	ldr	r2, [sp, #32]
 800cc90:	e770      	b.n	800cb74 <_dtoa_r+0x7ac>
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	dc19      	bgt.n	800cccc <_dtoa_r+0x904>
 800cc98:	9b02      	ldr	r3, [sp, #8]
 800cc9a:	b9bb      	cbnz	r3, 800cccc <_dtoa_r+0x904>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cca2:	b99b      	cbnz	r3, 800cccc <_dtoa_r+0x904>
 800cca4:	9b03      	ldr	r3, [sp, #12]
 800cca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccaa:	0d1b      	lsrs	r3, r3, #20
 800ccac:	051b      	lsls	r3, r3, #20
 800ccae:	b183      	cbz	r3, 800ccd2 <_dtoa_r+0x90a>
 800ccb0:	9b05      	ldr	r3, [sp, #20]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	9305      	str	r3, [sp, #20]
 800ccb6:	9b06      	ldr	r3, [sp, #24]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	9306      	str	r3, [sp, #24]
 800ccbc:	f04f 0801 	mov.w	r8, #1
 800ccc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f47f af6f 	bne.w	800cba6 <_dtoa_r+0x7de>
 800ccc8:	2001      	movs	r0, #1
 800ccca:	e774      	b.n	800cbb6 <_dtoa_r+0x7ee>
 800cccc:	f04f 0800 	mov.w	r8, #0
 800ccd0:	e7f6      	b.n	800ccc0 <_dtoa_r+0x8f8>
 800ccd2:	4698      	mov	r8, r3
 800ccd4:	e7f4      	b.n	800ccc0 <_dtoa_r+0x8f8>
 800ccd6:	d082      	beq.n	800cbde <_dtoa_r+0x816>
 800ccd8:	9a05      	ldr	r2, [sp, #20]
 800ccda:	331c      	adds	r3, #28
 800ccdc:	441a      	add	r2, r3
 800ccde:	9205      	str	r2, [sp, #20]
 800cce0:	9a06      	ldr	r2, [sp, #24]
 800cce2:	441a      	add	r2, r3
 800cce4:	441d      	add	r5, r3
 800cce6:	9206      	str	r2, [sp, #24]
 800cce8:	e779      	b.n	800cbde <_dtoa_r+0x816>
 800ccea:	4603      	mov	r3, r0
 800ccec:	e7f4      	b.n	800ccd8 <_dtoa_r+0x910>
 800ccee:	9b04      	ldr	r3, [sp, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	dc37      	bgt.n	800cd64 <_dtoa_r+0x99c>
 800ccf4:	9b07      	ldr	r3, [sp, #28]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	dd34      	ble.n	800cd64 <_dtoa_r+0x99c>
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	b963      	cbnz	r3, 800cd1c <_dtoa_r+0x954>
 800cd02:	4631      	mov	r1, r6
 800cd04:	2205      	movs	r2, #5
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fab2 	bl	800d270 <__multadd>
 800cd0c:	4601      	mov	r1, r0
 800cd0e:	4606      	mov	r6, r0
 800cd10:	4650      	mov	r0, sl
 800cd12:	f000 fcc7 	bl	800d6a4 <__mcmp>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f73f adbb 	bgt.w	800c892 <_dtoa_r+0x4ca>
 800cd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1e:	9d00      	ldr	r5, [sp, #0]
 800cd20:	ea6f 0b03 	mvn.w	fp, r3
 800cd24:	f04f 0800 	mov.w	r8, #0
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 fa7e 	bl	800d22c <_Bfree>
 800cd30:	2f00      	cmp	r7, #0
 800cd32:	f43f aeab 	beq.w	800ca8c <_dtoa_r+0x6c4>
 800cd36:	f1b8 0f00 	cmp.w	r8, #0
 800cd3a:	d005      	beq.n	800cd48 <_dtoa_r+0x980>
 800cd3c:	45b8      	cmp	r8, r7
 800cd3e:	d003      	beq.n	800cd48 <_dtoa_r+0x980>
 800cd40:	4641      	mov	r1, r8
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 fa72 	bl	800d22c <_Bfree>
 800cd48:	4639      	mov	r1, r7
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fa6e 	bl	800d22c <_Bfree>
 800cd50:	e69c      	b.n	800ca8c <_dtoa_r+0x6c4>
 800cd52:	2600      	movs	r6, #0
 800cd54:	4637      	mov	r7, r6
 800cd56:	e7e1      	b.n	800cd1c <_dtoa_r+0x954>
 800cd58:	46bb      	mov	fp, r7
 800cd5a:	4637      	mov	r7, r6
 800cd5c:	e599      	b.n	800c892 <_dtoa_r+0x4ca>
 800cd5e:	bf00      	nop
 800cd60:	40240000 	.word	0x40240000
 800cd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 80c8 	beq.w	800cefc <_dtoa_r+0xb34>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	9301      	str	r3, [sp, #4]
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	dd05      	ble.n	800cd80 <_dtoa_r+0x9b8>
 800cd74:	4639      	mov	r1, r7
 800cd76:	462a      	mov	r2, r5
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f000 fc27 	bl	800d5cc <__lshift>
 800cd7e:	4607      	mov	r7, r0
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	d05b      	beq.n	800ce3e <_dtoa_r+0xa76>
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 fa0f 	bl	800d1ac <_Balloc>
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b928      	cbnz	r0, 800cd9e <_dtoa_r+0x9d6>
 800cd92:	4b83      	ldr	r3, [pc, #524]	; (800cfa0 <_dtoa_r+0xbd8>)
 800cd94:	4602      	mov	r2, r0
 800cd96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cd9a:	f7ff bb2e 	b.w	800c3fa <_dtoa_r+0x32>
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	3202      	adds	r2, #2
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	f107 010c 	add.w	r1, r7, #12
 800cda8:	300c      	adds	r0, #12
 800cdaa:	f000 fe39 	bl	800da20 <memcpy>
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fc0a 	bl	800d5cc <__lshift>
 800cdb8:	9b00      	ldr	r3, [sp, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	9308      	str	r3, [sp, #32]
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	46b8      	mov	r8, r7
 800cdce:	9306      	str	r3, [sp, #24]
 800cdd0:	4607      	mov	r7, r0
 800cdd2:	9b04      	ldr	r3, [sp, #16]
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	4650      	mov	r0, sl
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f7ff fa6c 	bl	800c2b8 <quorem>
 800cde0:	4641      	mov	r1, r8
 800cde2:	9002      	str	r0, [sp, #8]
 800cde4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cde8:	4650      	mov	r0, sl
 800cdea:	f000 fc5b 	bl	800d6a4 <__mcmp>
 800cdee:	463a      	mov	r2, r7
 800cdf0:	9005      	str	r0, [sp, #20]
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fc71 	bl	800d6dc <__mdiff>
 800cdfa:	68c2      	ldr	r2, [r0, #12]
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	bb02      	cbnz	r2, 800ce42 <_dtoa_r+0xa7a>
 800ce00:	4601      	mov	r1, r0
 800ce02:	4650      	mov	r0, sl
 800ce04:	f000 fc4e 	bl	800d6a4 <__mcmp>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce10:	f000 fa0c 	bl	800d22c <_Bfree>
 800ce14:	9b07      	ldr	r3, [sp, #28]
 800ce16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce18:	9d04      	ldr	r5, [sp, #16]
 800ce1a:	ea43 0102 	orr.w	r1, r3, r2
 800ce1e:	9b06      	ldr	r3, [sp, #24]
 800ce20:	4319      	orrs	r1, r3
 800ce22:	d110      	bne.n	800ce46 <_dtoa_r+0xa7e>
 800ce24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce28:	d029      	beq.n	800ce7e <_dtoa_r+0xab6>
 800ce2a:	9b05      	ldr	r3, [sp, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	dd02      	ble.n	800ce36 <_dtoa_r+0xa6e>
 800ce30:	9b02      	ldr	r3, [sp, #8]
 800ce32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce36:	9b01      	ldr	r3, [sp, #4]
 800ce38:	f883 9000 	strb.w	r9, [r3]
 800ce3c:	e774      	b.n	800cd28 <_dtoa_r+0x960>
 800ce3e:	4638      	mov	r0, r7
 800ce40:	e7ba      	b.n	800cdb8 <_dtoa_r+0x9f0>
 800ce42:	2201      	movs	r2, #1
 800ce44:	e7e1      	b.n	800ce0a <_dtoa_r+0xa42>
 800ce46:	9b05      	ldr	r3, [sp, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	db04      	blt.n	800ce56 <_dtoa_r+0xa8e>
 800ce4c:	9907      	ldr	r1, [sp, #28]
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	9906      	ldr	r1, [sp, #24]
 800ce52:	430b      	orrs	r3, r1
 800ce54:	d120      	bne.n	800ce98 <_dtoa_r+0xad0>
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	dded      	ble.n	800ce36 <_dtoa_r+0xa6e>
 800ce5a:	4651      	mov	r1, sl
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fbb4 	bl	800d5cc <__lshift>
 800ce64:	4631      	mov	r1, r6
 800ce66:	4682      	mov	sl, r0
 800ce68:	f000 fc1c 	bl	800d6a4 <__mcmp>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	dc03      	bgt.n	800ce78 <_dtoa_r+0xab0>
 800ce70:	d1e1      	bne.n	800ce36 <_dtoa_r+0xa6e>
 800ce72:	f019 0f01 	tst.w	r9, #1
 800ce76:	d0de      	beq.n	800ce36 <_dtoa_r+0xa6e>
 800ce78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce7c:	d1d8      	bne.n	800ce30 <_dtoa_r+0xa68>
 800ce7e:	9a01      	ldr	r2, [sp, #4]
 800ce80:	2339      	movs	r3, #57	; 0x39
 800ce82:	7013      	strb	r3, [r2, #0]
 800ce84:	462b      	mov	r3, r5
 800ce86:	461d      	mov	r5, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce8e:	2a39      	cmp	r2, #57	; 0x39
 800ce90:	d06c      	beq.n	800cf6c <_dtoa_r+0xba4>
 800ce92:	3201      	adds	r2, #1
 800ce94:	701a      	strb	r2, [r3, #0]
 800ce96:	e747      	b.n	800cd28 <_dtoa_r+0x960>
 800ce98:	2a00      	cmp	r2, #0
 800ce9a:	dd07      	ble.n	800ceac <_dtoa_r+0xae4>
 800ce9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cea0:	d0ed      	beq.n	800ce7e <_dtoa_r+0xab6>
 800cea2:	9a01      	ldr	r2, [sp, #4]
 800cea4:	f109 0301 	add.w	r3, r9, #1
 800cea8:	7013      	strb	r3, [r2, #0]
 800ceaa:	e73d      	b.n	800cd28 <_dtoa_r+0x960>
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	9a08      	ldr	r2, [sp, #32]
 800ceb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d043      	beq.n	800cf40 <_dtoa_r+0xb78>
 800ceb8:	4651      	mov	r1, sl
 800ceba:	2300      	movs	r3, #0
 800cebc:	220a      	movs	r2, #10
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 f9d6 	bl	800d270 <__multadd>
 800cec4:	45b8      	cmp	r8, r7
 800cec6:	4682      	mov	sl, r0
 800cec8:	f04f 0300 	mov.w	r3, #0
 800cecc:	f04f 020a 	mov.w	r2, #10
 800ced0:	4641      	mov	r1, r8
 800ced2:	4620      	mov	r0, r4
 800ced4:	d107      	bne.n	800cee6 <_dtoa_r+0xb1e>
 800ced6:	f000 f9cb 	bl	800d270 <__multadd>
 800ceda:	4680      	mov	r8, r0
 800cedc:	4607      	mov	r7, r0
 800cede:	9b04      	ldr	r3, [sp, #16]
 800cee0:	3301      	adds	r3, #1
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	e775      	b.n	800cdd2 <_dtoa_r+0xa0a>
 800cee6:	f000 f9c3 	bl	800d270 <__multadd>
 800ceea:	4639      	mov	r1, r7
 800ceec:	4680      	mov	r8, r0
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f9bc 	bl	800d270 <__multadd>
 800cef8:	4607      	mov	r7, r0
 800cefa:	e7f0      	b.n	800cede <_dtoa_r+0xb16>
 800cefc:	9b04      	ldr	r3, [sp, #16]
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	9d00      	ldr	r5, [sp, #0]
 800cf02:	4631      	mov	r1, r6
 800cf04:	4650      	mov	r0, sl
 800cf06:	f7ff f9d7 	bl	800c2b8 <quorem>
 800cf0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf0e:	9b00      	ldr	r3, [sp, #0]
 800cf10:	f805 9b01 	strb.w	r9, [r5], #1
 800cf14:	1aea      	subs	r2, r5, r3
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	dd07      	ble.n	800cf2c <_dtoa_r+0xb64>
 800cf1c:	4651      	mov	r1, sl
 800cf1e:	2300      	movs	r3, #0
 800cf20:	220a      	movs	r2, #10
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f9a4 	bl	800d270 <__multadd>
 800cf28:	4682      	mov	sl, r0
 800cf2a:	e7ea      	b.n	800cf02 <_dtoa_r+0xb3a>
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfc8      	it	gt
 800cf32:	461d      	movgt	r5, r3
 800cf34:	9b00      	ldr	r3, [sp, #0]
 800cf36:	bfd8      	it	le
 800cf38:	2501      	movle	r5, #1
 800cf3a:	441d      	add	r5, r3
 800cf3c:	f04f 0800 	mov.w	r8, #0
 800cf40:	4651      	mov	r1, sl
 800cf42:	2201      	movs	r2, #1
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fb41 	bl	800d5cc <__lshift>
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	f000 fba9 	bl	800d6a4 <__mcmp>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	dc96      	bgt.n	800ce84 <_dtoa_r+0xabc>
 800cf56:	d102      	bne.n	800cf5e <_dtoa_r+0xb96>
 800cf58:	f019 0f01 	tst.w	r9, #1
 800cf5c:	d192      	bne.n	800ce84 <_dtoa_r+0xabc>
 800cf5e:	462b      	mov	r3, r5
 800cf60:	461d      	mov	r5, r3
 800cf62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf66:	2a30      	cmp	r2, #48	; 0x30
 800cf68:	d0fa      	beq.n	800cf60 <_dtoa_r+0xb98>
 800cf6a:	e6dd      	b.n	800cd28 <_dtoa_r+0x960>
 800cf6c:	9a00      	ldr	r2, [sp, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d189      	bne.n	800ce86 <_dtoa_r+0xabe>
 800cf72:	f10b 0b01 	add.w	fp, fp, #1
 800cf76:	2331      	movs	r3, #49	; 0x31
 800cf78:	e796      	b.n	800cea8 <_dtoa_r+0xae0>
 800cf7a:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <_dtoa_r+0xbdc>)
 800cf7c:	f7ff ba99 	b.w	800c4b2 <_dtoa_r+0xea>
 800cf80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f47f aa6d 	bne.w	800c462 <_dtoa_r+0x9a>
 800cf88:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <_dtoa_r+0xbe0>)
 800cf8a:	f7ff ba92 	b.w	800c4b2 <_dtoa_r+0xea>
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	dcb5      	bgt.n	800cf00 <_dtoa_r+0xb38>
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	f73f aeb1 	bgt.w	800ccfe <_dtoa_r+0x936>
 800cf9c:	e7b0      	b.n	800cf00 <_dtoa_r+0xb38>
 800cf9e:	bf00      	nop
 800cfa0:	0800e1d8 	.word	0x0800e1d8
 800cfa4:	0800e138 	.word	0x0800e138
 800cfa8:	0800e15c 	.word	0x0800e15c

0800cfac <_free_r>:
 800cfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	d044      	beq.n	800d03c <_free_r+0x90>
 800cfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb6:	9001      	str	r0, [sp, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f1a1 0404 	sub.w	r4, r1, #4
 800cfbe:	bfb8      	it	lt
 800cfc0:	18e4      	addlt	r4, r4, r3
 800cfc2:	f000 f8e7 	bl	800d194 <__malloc_lock>
 800cfc6:	4a1e      	ldr	r2, [pc, #120]	; (800d040 <_free_r+0x94>)
 800cfc8:	9801      	ldr	r0, [sp, #4]
 800cfca:	6813      	ldr	r3, [r2, #0]
 800cfcc:	b933      	cbnz	r3, 800cfdc <_free_r+0x30>
 800cfce:	6063      	str	r3, [r4, #4]
 800cfd0:	6014      	str	r4, [r2, #0]
 800cfd2:	b003      	add	sp, #12
 800cfd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd8:	f000 b8e2 	b.w	800d1a0 <__malloc_unlock>
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d908      	bls.n	800cff2 <_free_r+0x46>
 800cfe0:	6825      	ldr	r5, [r4, #0]
 800cfe2:	1961      	adds	r1, r4, r5
 800cfe4:	428b      	cmp	r3, r1
 800cfe6:	bf01      	itttt	eq
 800cfe8:	6819      	ldreq	r1, [r3, #0]
 800cfea:	685b      	ldreq	r3, [r3, #4]
 800cfec:	1949      	addeq	r1, r1, r5
 800cfee:	6021      	streq	r1, [r4, #0]
 800cff0:	e7ed      	b.n	800cfce <_free_r+0x22>
 800cff2:	461a      	mov	r2, r3
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	b10b      	cbz	r3, 800cffc <_free_r+0x50>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d9fa      	bls.n	800cff2 <_free_r+0x46>
 800cffc:	6811      	ldr	r1, [r2, #0]
 800cffe:	1855      	adds	r5, r2, r1
 800d000:	42a5      	cmp	r5, r4
 800d002:	d10b      	bne.n	800d01c <_free_r+0x70>
 800d004:	6824      	ldr	r4, [r4, #0]
 800d006:	4421      	add	r1, r4
 800d008:	1854      	adds	r4, r2, r1
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	d1e0      	bne.n	800cfd2 <_free_r+0x26>
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	6053      	str	r3, [r2, #4]
 800d016:	440c      	add	r4, r1
 800d018:	6014      	str	r4, [r2, #0]
 800d01a:	e7da      	b.n	800cfd2 <_free_r+0x26>
 800d01c:	d902      	bls.n	800d024 <_free_r+0x78>
 800d01e:	230c      	movs	r3, #12
 800d020:	6003      	str	r3, [r0, #0]
 800d022:	e7d6      	b.n	800cfd2 <_free_r+0x26>
 800d024:	6825      	ldr	r5, [r4, #0]
 800d026:	1961      	adds	r1, r4, r5
 800d028:	428b      	cmp	r3, r1
 800d02a:	bf04      	itt	eq
 800d02c:	6819      	ldreq	r1, [r3, #0]
 800d02e:	685b      	ldreq	r3, [r3, #4]
 800d030:	6063      	str	r3, [r4, #4]
 800d032:	bf04      	itt	eq
 800d034:	1949      	addeq	r1, r1, r5
 800d036:	6021      	streq	r1, [r4, #0]
 800d038:	6054      	str	r4, [r2, #4]
 800d03a:	e7ca      	b.n	800cfd2 <_free_r+0x26>
 800d03c:	b003      	add	sp, #12
 800d03e:	bd30      	pop	{r4, r5, pc}
 800d040:	2000111c 	.word	0x2000111c

0800d044 <malloc>:
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <malloc+0xc>)
 800d046:	4601      	mov	r1, r0
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f000 b823 	b.w	800d094 <_malloc_r>
 800d04e:	bf00      	nop
 800d050:	20000170 	.word	0x20000170

0800d054 <sbrk_aligned>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	4e0e      	ldr	r6, [pc, #56]	; (800d090 <sbrk_aligned+0x3c>)
 800d058:	460c      	mov	r4, r1
 800d05a:	6831      	ldr	r1, [r6, #0]
 800d05c:	4605      	mov	r5, r0
 800d05e:	b911      	cbnz	r1, 800d066 <sbrk_aligned+0x12>
 800d060:	f000 fcce 	bl	800da00 <_sbrk_r>
 800d064:	6030      	str	r0, [r6, #0]
 800d066:	4621      	mov	r1, r4
 800d068:	4628      	mov	r0, r5
 800d06a:	f000 fcc9 	bl	800da00 <_sbrk_r>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d00a      	beq.n	800d088 <sbrk_aligned+0x34>
 800d072:	1cc4      	adds	r4, r0, #3
 800d074:	f024 0403 	bic.w	r4, r4, #3
 800d078:	42a0      	cmp	r0, r4
 800d07a:	d007      	beq.n	800d08c <sbrk_aligned+0x38>
 800d07c:	1a21      	subs	r1, r4, r0
 800d07e:	4628      	mov	r0, r5
 800d080:	f000 fcbe 	bl	800da00 <_sbrk_r>
 800d084:	3001      	adds	r0, #1
 800d086:	d101      	bne.n	800d08c <sbrk_aligned+0x38>
 800d088:	f04f 34ff 	mov.w	r4, #4294967295
 800d08c:	4620      	mov	r0, r4
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	20001120 	.word	0x20001120

0800d094 <_malloc_r>:
 800d094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d098:	1ccd      	adds	r5, r1, #3
 800d09a:	f025 0503 	bic.w	r5, r5, #3
 800d09e:	3508      	adds	r5, #8
 800d0a0:	2d0c      	cmp	r5, #12
 800d0a2:	bf38      	it	cc
 800d0a4:	250c      	movcc	r5, #12
 800d0a6:	2d00      	cmp	r5, #0
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	db01      	blt.n	800d0b0 <_malloc_r+0x1c>
 800d0ac:	42a9      	cmp	r1, r5
 800d0ae:	d905      	bls.n	800d0bc <_malloc_r+0x28>
 800d0b0:	230c      	movs	r3, #12
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	2600      	movs	r6, #0
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d190 <_malloc_r+0xfc>
 800d0c0:	f000 f868 	bl	800d194 <__malloc_lock>
 800d0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0c8:	461c      	mov	r4, r3
 800d0ca:	bb5c      	cbnz	r4, 800d124 <_malloc_r+0x90>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	f7ff ffc0 	bl	800d054 <sbrk_aligned>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	d155      	bne.n	800d186 <_malloc_r+0xf2>
 800d0da:	f8d8 4000 	ldr.w	r4, [r8]
 800d0de:	4626      	mov	r6, r4
 800d0e0:	2e00      	cmp	r6, #0
 800d0e2:	d145      	bne.n	800d170 <_malloc_r+0xdc>
 800d0e4:	2c00      	cmp	r4, #0
 800d0e6:	d048      	beq.n	800d17a <_malloc_r+0xe6>
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	eb04 0903 	add.w	r9, r4, r3
 800d0f2:	f000 fc85 	bl	800da00 <_sbrk_r>
 800d0f6:	4581      	cmp	r9, r0
 800d0f8:	d13f      	bne.n	800d17a <_malloc_r+0xe6>
 800d0fa:	6821      	ldr	r1, [r4, #0]
 800d0fc:	1a6d      	subs	r5, r5, r1
 800d0fe:	4629      	mov	r1, r5
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff ffa7 	bl	800d054 <sbrk_aligned>
 800d106:	3001      	adds	r0, #1
 800d108:	d037      	beq.n	800d17a <_malloc_r+0xe6>
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	442b      	add	r3, r5
 800d10e:	6023      	str	r3, [r4, #0]
 800d110:	f8d8 3000 	ldr.w	r3, [r8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d038      	beq.n	800d18a <_malloc_r+0xf6>
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	42a2      	cmp	r2, r4
 800d11c:	d12b      	bne.n	800d176 <_malloc_r+0xe2>
 800d11e:	2200      	movs	r2, #0
 800d120:	605a      	str	r2, [r3, #4]
 800d122:	e00f      	b.n	800d144 <_malloc_r+0xb0>
 800d124:	6822      	ldr	r2, [r4, #0]
 800d126:	1b52      	subs	r2, r2, r5
 800d128:	d41f      	bmi.n	800d16a <_malloc_r+0xd6>
 800d12a:	2a0b      	cmp	r2, #11
 800d12c:	d917      	bls.n	800d15e <_malloc_r+0xca>
 800d12e:	1961      	adds	r1, r4, r5
 800d130:	42a3      	cmp	r3, r4
 800d132:	6025      	str	r5, [r4, #0]
 800d134:	bf18      	it	ne
 800d136:	6059      	strne	r1, [r3, #4]
 800d138:	6863      	ldr	r3, [r4, #4]
 800d13a:	bf08      	it	eq
 800d13c:	f8c8 1000 	streq.w	r1, [r8]
 800d140:	5162      	str	r2, [r4, r5]
 800d142:	604b      	str	r3, [r1, #4]
 800d144:	4638      	mov	r0, r7
 800d146:	f104 060b 	add.w	r6, r4, #11
 800d14a:	f000 f829 	bl	800d1a0 <__malloc_unlock>
 800d14e:	f026 0607 	bic.w	r6, r6, #7
 800d152:	1d23      	adds	r3, r4, #4
 800d154:	1af2      	subs	r2, r6, r3
 800d156:	d0ae      	beq.n	800d0b6 <_malloc_r+0x22>
 800d158:	1b9b      	subs	r3, r3, r6
 800d15a:	50a3      	str	r3, [r4, r2]
 800d15c:	e7ab      	b.n	800d0b6 <_malloc_r+0x22>
 800d15e:	42a3      	cmp	r3, r4
 800d160:	6862      	ldr	r2, [r4, #4]
 800d162:	d1dd      	bne.n	800d120 <_malloc_r+0x8c>
 800d164:	f8c8 2000 	str.w	r2, [r8]
 800d168:	e7ec      	b.n	800d144 <_malloc_r+0xb0>
 800d16a:	4623      	mov	r3, r4
 800d16c:	6864      	ldr	r4, [r4, #4]
 800d16e:	e7ac      	b.n	800d0ca <_malloc_r+0x36>
 800d170:	4634      	mov	r4, r6
 800d172:	6876      	ldr	r6, [r6, #4]
 800d174:	e7b4      	b.n	800d0e0 <_malloc_r+0x4c>
 800d176:	4613      	mov	r3, r2
 800d178:	e7cc      	b.n	800d114 <_malloc_r+0x80>
 800d17a:	230c      	movs	r3, #12
 800d17c:	603b      	str	r3, [r7, #0]
 800d17e:	4638      	mov	r0, r7
 800d180:	f000 f80e 	bl	800d1a0 <__malloc_unlock>
 800d184:	e797      	b.n	800d0b6 <_malloc_r+0x22>
 800d186:	6025      	str	r5, [r4, #0]
 800d188:	e7dc      	b.n	800d144 <_malloc_r+0xb0>
 800d18a:	605b      	str	r3, [r3, #4]
 800d18c:	deff      	udf	#255	; 0xff
 800d18e:	bf00      	nop
 800d190:	2000111c 	.word	0x2000111c

0800d194 <__malloc_lock>:
 800d194:	4801      	ldr	r0, [pc, #4]	; (800d19c <__malloc_lock+0x8>)
 800d196:	f7ff b88d 	b.w	800c2b4 <__retarget_lock_acquire_recursive>
 800d19a:	bf00      	nop
 800d19c:	20001118 	.word	0x20001118

0800d1a0 <__malloc_unlock>:
 800d1a0:	4801      	ldr	r0, [pc, #4]	; (800d1a8 <__malloc_unlock+0x8>)
 800d1a2:	f7ff b888 	b.w	800c2b6 <__retarget_lock_release_recursive>
 800d1a6:	bf00      	nop
 800d1a8:	20001118 	.word	0x20001118

0800d1ac <_Balloc>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	69c6      	ldr	r6, [r0, #28]
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	b976      	cbnz	r6, 800d1d4 <_Balloc+0x28>
 800d1b6:	2010      	movs	r0, #16
 800d1b8:	f7ff ff44 	bl	800d044 <malloc>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	61e0      	str	r0, [r4, #28]
 800d1c0:	b920      	cbnz	r0, 800d1cc <_Balloc+0x20>
 800d1c2:	4b18      	ldr	r3, [pc, #96]	; (800d224 <_Balloc+0x78>)
 800d1c4:	4818      	ldr	r0, [pc, #96]	; (800d228 <_Balloc+0x7c>)
 800d1c6:	216b      	movs	r1, #107	; 0x6b
 800d1c8:	f000 fc38 	bl	800da3c <__assert_func>
 800d1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1d0:	6006      	str	r6, [r0, #0]
 800d1d2:	60c6      	str	r6, [r0, #12]
 800d1d4:	69e6      	ldr	r6, [r4, #28]
 800d1d6:	68f3      	ldr	r3, [r6, #12]
 800d1d8:	b183      	cbz	r3, 800d1fc <_Balloc+0x50>
 800d1da:	69e3      	ldr	r3, [r4, #28]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1e2:	b9b8      	cbnz	r0, 800d214 <_Balloc+0x68>
 800d1e4:	2101      	movs	r1, #1
 800d1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d1ea:	1d72      	adds	r2, r6, #5
 800d1ec:	0092      	lsls	r2, r2, #2
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f000 fc42 	bl	800da78 <_calloc_r>
 800d1f4:	b160      	cbz	r0, 800d210 <_Balloc+0x64>
 800d1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1fa:	e00e      	b.n	800d21a <_Balloc+0x6e>
 800d1fc:	2221      	movs	r2, #33	; 0x21
 800d1fe:	2104      	movs	r1, #4
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fc39 	bl	800da78 <_calloc_r>
 800d206:	69e3      	ldr	r3, [r4, #28]
 800d208:	60f0      	str	r0, [r6, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e4      	bne.n	800d1da <_Balloc+0x2e>
 800d210:	2000      	movs	r0, #0
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	6802      	ldr	r2, [r0, #0]
 800d216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d21a:	2300      	movs	r3, #0
 800d21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d220:	e7f7      	b.n	800d212 <_Balloc+0x66>
 800d222:	bf00      	nop
 800d224:	0800e169 	.word	0x0800e169
 800d228:	0800e1e9 	.word	0x0800e1e9

0800d22c <_Bfree>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	69c6      	ldr	r6, [r0, #28]
 800d230:	4605      	mov	r5, r0
 800d232:	460c      	mov	r4, r1
 800d234:	b976      	cbnz	r6, 800d254 <_Bfree+0x28>
 800d236:	2010      	movs	r0, #16
 800d238:	f7ff ff04 	bl	800d044 <malloc>
 800d23c:	4602      	mov	r2, r0
 800d23e:	61e8      	str	r0, [r5, #28]
 800d240:	b920      	cbnz	r0, 800d24c <_Bfree+0x20>
 800d242:	4b09      	ldr	r3, [pc, #36]	; (800d268 <_Bfree+0x3c>)
 800d244:	4809      	ldr	r0, [pc, #36]	; (800d26c <_Bfree+0x40>)
 800d246:	218f      	movs	r1, #143	; 0x8f
 800d248:	f000 fbf8 	bl	800da3c <__assert_func>
 800d24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d250:	6006      	str	r6, [r0, #0]
 800d252:	60c6      	str	r6, [r0, #12]
 800d254:	b13c      	cbz	r4, 800d266 <_Bfree+0x3a>
 800d256:	69eb      	ldr	r3, [r5, #28]
 800d258:	6862      	ldr	r2, [r4, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d260:	6021      	str	r1, [r4, #0]
 800d262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d266:	bd70      	pop	{r4, r5, r6, pc}
 800d268:	0800e169 	.word	0x0800e169
 800d26c:	0800e1e9 	.word	0x0800e1e9

0800d270 <__multadd>:
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	690d      	ldr	r5, [r1, #16]
 800d276:	4607      	mov	r7, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	461e      	mov	r6, r3
 800d27c:	f101 0c14 	add.w	ip, r1, #20
 800d280:	2000      	movs	r0, #0
 800d282:	f8dc 3000 	ldr.w	r3, [ip]
 800d286:	b299      	uxth	r1, r3
 800d288:	fb02 6101 	mla	r1, r2, r1, r6
 800d28c:	0c1e      	lsrs	r6, r3, #16
 800d28e:	0c0b      	lsrs	r3, r1, #16
 800d290:	fb02 3306 	mla	r3, r2, r6, r3
 800d294:	b289      	uxth	r1, r1
 800d296:	3001      	adds	r0, #1
 800d298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d29c:	4285      	cmp	r5, r0
 800d29e:	f84c 1b04 	str.w	r1, [ip], #4
 800d2a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2a6:	dcec      	bgt.n	800d282 <__multadd+0x12>
 800d2a8:	b30e      	cbz	r6, 800d2ee <__multadd+0x7e>
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	42ab      	cmp	r3, r5
 800d2ae:	dc19      	bgt.n	800d2e4 <__multadd+0x74>
 800d2b0:	6861      	ldr	r1, [r4, #4]
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	f7ff ff79 	bl	800d1ac <_Balloc>
 800d2ba:	4680      	mov	r8, r0
 800d2bc:	b928      	cbnz	r0, 800d2ca <__multadd+0x5a>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	4b0c      	ldr	r3, [pc, #48]	; (800d2f4 <__multadd+0x84>)
 800d2c2:	480d      	ldr	r0, [pc, #52]	; (800d2f8 <__multadd+0x88>)
 800d2c4:	21ba      	movs	r1, #186	; 0xba
 800d2c6:	f000 fbb9 	bl	800da3c <__assert_func>
 800d2ca:	6922      	ldr	r2, [r4, #16]
 800d2cc:	3202      	adds	r2, #2
 800d2ce:	f104 010c 	add.w	r1, r4, #12
 800d2d2:	0092      	lsls	r2, r2, #2
 800d2d4:	300c      	adds	r0, #12
 800d2d6:	f000 fba3 	bl	800da20 <memcpy>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f7ff ffa5 	bl	800d22c <_Bfree>
 800d2e2:	4644      	mov	r4, r8
 800d2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	615e      	str	r6, [r3, #20]
 800d2ec:	6125      	str	r5, [r4, #16]
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f4:	0800e1d8 	.word	0x0800e1d8
 800d2f8:	0800e1e9 	.word	0x0800e1e9

0800d2fc <__hi0bits>:
 800d2fc:	0c03      	lsrs	r3, r0, #16
 800d2fe:	041b      	lsls	r3, r3, #16
 800d300:	b9d3      	cbnz	r3, 800d338 <__hi0bits+0x3c>
 800d302:	0400      	lsls	r0, r0, #16
 800d304:	2310      	movs	r3, #16
 800d306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d30a:	bf04      	itt	eq
 800d30c:	0200      	lsleq	r0, r0, #8
 800d30e:	3308      	addeq	r3, #8
 800d310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d314:	bf04      	itt	eq
 800d316:	0100      	lsleq	r0, r0, #4
 800d318:	3304      	addeq	r3, #4
 800d31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d31e:	bf04      	itt	eq
 800d320:	0080      	lsleq	r0, r0, #2
 800d322:	3302      	addeq	r3, #2
 800d324:	2800      	cmp	r0, #0
 800d326:	db05      	blt.n	800d334 <__hi0bits+0x38>
 800d328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d32c:	f103 0301 	add.w	r3, r3, #1
 800d330:	bf08      	it	eq
 800d332:	2320      	moveq	r3, #32
 800d334:	4618      	mov	r0, r3
 800d336:	4770      	bx	lr
 800d338:	2300      	movs	r3, #0
 800d33a:	e7e4      	b.n	800d306 <__hi0bits+0xa>

0800d33c <__lo0bits>:
 800d33c:	6803      	ldr	r3, [r0, #0]
 800d33e:	f013 0207 	ands.w	r2, r3, #7
 800d342:	d00c      	beq.n	800d35e <__lo0bits+0x22>
 800d344:	07d9      	lsls	r1, r3, #31
 800d346:	d422      	bmi.n	800d38e <__lo0bits+0x52>
 800d348:	079a      	lsls	r2, r3, #30
 800d34a:	bf49      	itett	mi
 800d34c:	085b      	lsrmi	r3, r3, #1
 800d34e:	089b      	lsrpl	r3, r3, #2
 800d350:	6003      	strmi	r3, [r0, #0]
 800d352:	2201      	movmi	r2, #1
 800d354:	bf5c      	itt	pl
 800d356:	6003      	strpl	r3, [r0, #0]
 800d358:	2202      	movpl	r2, #2
 800d35a:	4610      	mov	r0, r2
 800d35c:	4770      	bx	lr
 800d35e:	b299      	uxth	r1, r3
 800d360:	b909      	cbnz	r1, 800d366 <__lo0bits+0x2a>
 800d362:	0c1b      	lsrs	r3, r3, #16
 800d364:	2210      	movs	r2, #16
 800d366:	b2d9      	uxtb	r1, r3
 800d368:	b909      	cbnz	r1, 800d36e <__lo0bits+0x32>
 800d36a:	3208      	adds	r2, #8
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	0719      	lsls	r1, r3, #28
 800d370:	bf04      	itt	eq
 800d372:	091b      	lsreq	r3, r3, #4
 800d374:	3204      	addeq	r2, #4
 800d376:	0799      	lsls	r1, r3, #30
 800d378:	bf04      	itt	eq
 800d37a:	089b      	lsreq	r3, r3, #2
 800d37c:	3202      	addeq	r2, #2
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	d403      	bmi.n	800d38a <__lo0bits+0x4e>
 800d382:	085b      	lsrs	r3, r3, #1
 800d384:	f102 0201 	add.w	r2, r2, #1
 800d388:	d003      	beq.n	800d392 <__lo0bits+0x56>
 800d38a:	6003      	str	r3, [r0, #0]
 800d38c:	e7e5      	b.n	800d35a <__lo0bits+0x1e>
 800d38e:	2200      	movs	r2, #0
 800d390:	e7e3      	b.n	800d35a <__lo0bits+0x1e>
 800d392:	2220      	movs	r2, #32
 800d394:	e7e1      	b.n	800d35a <__lo0bits+0x1e>
	...

0800d398 <__i2b>:
 800d398:	b510      	push	{r4, lr}
 800d39a:	460c      	mov	r4, r1
 800d39c:	2101      	movs	r1, #1
 800d39e:	f7ff ff05 	bl	800d1ac <_Balloc>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	b928      	cbnz	r0, 800d3b2 <__i2b+0x1a>
 800d3a6:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <__i2b+0x24>)
 800d3a8:	4805      	ldr	r0, [pc, #20]	; (800d3c0 <__i2b+0x28>)
 800d3aa:	f240 1145 	movw	r1, #325	; 0x145
 800d3ae:	f000 fb45 	bl	800da3c <__assert_func>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	6144      	str	r4, [r0, #20]
 800d3b6:	6103      	str	r3, [r0, #16]
 800d3b8:	bd10      	pop	{r4, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800e1d8 	.word	0x0800e1d8
 800d3c0:	0800e1e9 	.word	0x0800e1e9

0800d3c4 <__multiply>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4691      	mov	r9, r2
 800d3ca:	690a      	ldr	r2, [r1, #16]
 800d3cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	bfb8      	it	lt
 800d3d4:	460b      	movlt	r3, r1
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	bfbc      	itt	lt
 800d3da:	464c      	movlt	r4, r9
 800d3dc:	4699      	movlt	r9, r3
 800d3de:	6927      	ldr	r7, [r4, #16]
 800d3e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3e4:	68a3      	ldr	r3, [r4, #8]
 800d3e6:	6861      	ldr	r1, [r4, #4]
 800d3e8:	eb07 060a 	add.w	r6, r7, sl
 800d3ec:	42b3      	cmp	r3, r6
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	bfb8      	it	lt
 800d3f2:	3101      	addlt	r1, #1
 800d3f4:	f7ff feda 	bl	800d1ac <_Balloc>
 800d3f8:	b930      	cbnz	r0, 800d408 <__multiply+0x44>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4b44      	ldr	r3, [pc, #272]	; (800d510 <__multiply+0x14c>)
 800d3fe:	4845      	ldr	r0, [pc, #276]	; (800d514 <__multiply+0x150>)
 800d400:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d404:	f000 fb1a 	bl	800da3c <__assert_func>
 800d408:	f100 0514 	add.w	r5, r0, #20
 800d40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d410:	462b      	mov	r3, r5
 800d412:	2200      	movs	r2, #0
 800d414:	4543      	cmp	r3, r8
 800d416:	d321      	bcc.n	800d45c <__multiply+0x98>
 800d418:	f104 0314 	add.w	r3, r4, #20
 800d41c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d420:	f109 0314 	add.w	r3, r9, #20
 800d424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d428:	9202      	str	r2, [sp, #8]
 800d42a:	1b3a      	subs	r2, r7, r4
 800d42c:	3a15      	subs	r2, #21
 800d42e:	f022 0203 	bic.w	r2, r2, #3
 800d432:	3204      	adds	r2, #4
 800d434:	f104 0115 	add.w	r1, r4, #21
 800d438:	428f      	cmp	r7, r1
 800d43a:	bf38      	it	cc
 800d43c:	2204      	movcc	r2, #4
 800d43e:	9201      	str	r2, [sp, #4]
 800d440:	9a02      	ldr	r2, [sp, #8]
 800d442:	9303      	str	r3, [sp, #12]
 800d444:	429a      	cmp	r2, r3
 800d446:	d80c      	bhi.n	800d462 <__multiply+0x9e>
 800d448:	2e00      	cmp	r6, #0
 800d44a:	dd03      	ble.n	800d454 <__multiply+0x90>
 800d44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d450:	2b00      	cmp	r3, #0
 800d452:	d05b      	beq.n	800d50c <__multiply+0x148>
 800d454:	6106      	str	r6, [r0, #16]
 800d456:	b005      	add	sp, #20
 800d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45c:	f843 2b04 	str.w	r2, [r3], #4
 800d460:	e7d8      	b.n	800d414 <__multiply+0x50>
 800d462:	f8b3 a000 	ldrh.w	sl, [r3]
 800d466:	f1ba 0f00 	cmp.w	sl, #0
 800d46a:	d024      	beq.n	800d4b6 <__multiply+0xf2>
 800d46c:	f104 0e14 	add.w	lr, r4, #20
 800d470:	46a9      	mov	r9, r5
 800d472:	f04f 0c00 	mov.w	ip, #0
 800d476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d47a:	f8d9 1000 	ldr.w	r1, [r9]
 800d47e:	fa1f fb82 	uxth.w	fp, r2
 800d482:	b289      	uxth	r1, r1
 800d484:	fb0a 110b 	mla	r1, sl, fp, r1
 800d488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d48c:	f8d9 2000 	ldr.w	r2, [r9]
 800d490:	4461      	add	r1, ip
 800d492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d496:	fb0a c20b 	mla	r2, sl, fp, ip
 800d49a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d49e:	b289      	uxth	r1, r1
 800d4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4a4:	4577      	cmp	r7, lr
 800d4a6:	f849 1b04 	str.w	r1, [r9], #4
 800d4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4ae:	d8e2      	bhi.n	800d476 <__multiply+0xb2>
 800d4b0:	9a01      	ldr	r2, [sp, #4]
 800d4b2:	f845 c002 	str.w	ip, [r5, r2]
 800d4b6:	9a03      	ldr	r2, [sp, #12]
 800d4b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	f1b9 0f00 	cmp.w	r9, #0
 800d4c2:	d021      	beq.n	800d508 <__multiply+0x144>
 800d4c4:	6829      	ldr	r1, [r5, #0]
 800d4c6:	f104 0c14 	add.w	ip, r4, #20
 800d4ca:	46ae      	mov	lr, r5
 800d4cc:	f04f 0a00 	mov.w	sl, #0
 800d4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d4d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800d4dc:	4452      	add	r2, sl
 800d4de:	b289      	uxth	r1, r1
 800d4e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4e4:	f84e 1b04 	str.w	r1, [lr], #4
 800d4e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800d4f4:	fb09 110a 	mla	r1, r9, sl, r1
 800d4f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d4fc:	4567      	cmp	r7, ip
 800d4fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d502:	d8e5      	bhi.n	800d4d0 <__multiply+0x10c>
 800d504:	9a01      	ldr	r2, [sp, #4]
 800d506:	50a9      	str	r1, [r5, r2]
 800d508:	3504      	adds	r5, #4
 800d50a:	e799      	b.n	800d440 <__multiply+0x7c>
 800d50c:	3e01      	subs	r6, #1
 800d50e:	e79b      	b.n	800d448 <__multiply+0x84>
 800d510:	0800e1d8 	.word	0x0800e1d8
 800d514:	0800e1e9 	.word	0x0800e1e9

0800d518 <__pow5mult>:
 800d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51c:	4615      	mov	r5, r2
 800d51e:	f012 0203 	ands.w	r2, r2, #3
 800d522:	4606      	mov	r6, r0
 800d524:	460f      	mov	r7, r1
 800d526:	d007      	beq.n	800d538 <__pow5mult+0x20>
 800d528:	4c25      	ldr	r4, [pc, #148]	; (800d5c0 <__pow5mult+0xa8>)
 800d52a:	3a01      	subs	r2, #1
 800d52c:	2300      	movs	r3, #0
 800d52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d532:	f7ff fe9d 	bl	800d270 <__multadd>
 800d536:	4607      	mov	r7, r0
 800d538:	10ad      	asrs	r5, r5, #2
 800d53a:	d03d      	beq.n	800d5b8 <__pow5mult+0xa0>
 800d53c:	69f4      	ldr	r4, [r6, #28]
 800d53e:	b97c      	cbnz	r4, 800d560 <__pow5mult+0x48>
 800d540:	2010      	movs	r0, #16
 800d542:	f7ff fd7f 	bl	800d044 <malloc>
 800d546:	4602      	mov	r2, r0
 800d548:	61f0      	str	r0, [r6, #28]
 800d54a:	b928      	cbnz	r0, 800d558 <__pow5mult+0x40>
 800d54c:	4b1d      	ldr	r3, [pc, #116]	; (800d5c4 <__pow5mult+0xac>)
 800d54e:	481e      	ldr	r0, [pc, #120]	; (800d5c8 <__pow5mult+0xb0>)
 800d550:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d554:	f000 fa72 	bl	800da3c <__assert_func>
 800d558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d55c:	6004      	str	r4, [r0, #0]
 800d55e:	60c4      	str	r4, [r0, #12]
 800d560:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d568:	b94c      	cbnz	r4, 800d57e <__pow5mult+0x66>
 800d56a:	f240 2171 	movw	r1, #625	; 0x271
 800d56e:	4630      	mov	r0, r6
 800d570:	f7ff ff12 	bl	800d398 <__i2b>
 800d574:	2300      	movs	r3, #0
 800d576:	f8c8 0008 	str.w	r0, [r8, #8]
 800d57a:	4604      	mov	r4, r0
 800d57c:	6003      	str	r3, [r0, #0]
 800d57e:	f04f 0900 	mov.w	r9, #0
 800d582:	07eb      	lsls	r3, r5, #31
 800d584:	d50a      	bpl.n	800d59c <__pow5mult+0x84>
 800d586:	4639      	mov	r1, r7
 800d588:	4622      	mov	r2, r4
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7ff ff1a 	bl	800d3c4 <__multiply>
 800d590:	4639      	mov	r1, r7
 800d592:	4680      	mov	r8, r0
 800d594:	4630      	mov	r0, r6
 800d596:	f7ff fe49 	bl	800d22c <_Bfree>
 800d59a:	4647      	mov	r7, r8
 800d59c:	106d      	asrs	r5, r5, #1
 800d59e:	d00b      	beq.n	800d5b8 <__pow5mult+0xa0>
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	b938      	cbnz	r0, 800d5b4 <__pow5mult+0x9c>
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f7ff ff0b 	bl	800d3c4 <__multiply>
 800d5ae:	6020      	str	r0, [r4, #0]
 800d5b0:	f8c0 9000 	str.w	r9, [r0]
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	e7e4      	b.n	800d582 <__pow5mult+0x6a>
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5be:	bf00      	nop
 800d5c0:	0800e338 	.word	0x0800e338
 800d5c4:	0800e169 	.word	0x0800e169
 800d5c8:	0800e1e9 	.word	0x0800e1e9

0800d5cc <__lshift>:
 800d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	6849      	ldr	r1, [r1, #4]
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5da:	68a3      	ldr	r3, [r4, #8]
 800d5dc:	4607      	mov	r7, r0
 800d5de:	4691      	mov	r9, r2
 800d5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5e4:	f108 0601 	add.w	r6, r8, #1
 800d5e8:	42b3      	cmp	r3, r6
 800d5ea:	db0b      	blt.n	800d604 <__lshift+0x38>
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff fddd 	bl	800d1ac <_Balloc>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	b948      	cbnz	r0, 800d60a <__lshift+0x3e>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	4b28      	ldr	r3, [pc, #160]	; (800d69c <__lshift+0xd0>)
 800d5fa:	4829      	ldr	r0, [pc, #164]	; (800d6a0 <__lshift+0xd4>)
 800d5fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d600:	f000 fa1c 	bl	800da3c <__assert_func>
 800d604:	3101      	adds	r1, #1
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	e7ee      	b.n	800d5e8 <__lshift+0x1c>
 800d60a:	2300      	movs	r3, #0
 800d60c:	f100 0114 	add.w	r1, r0, #20
 800d610:	f100 0210 	add.w	r2, r0, #16
 800d614:	4618      	mov	r0, r3
 800d616:	4553      	cmp	r3, sl
 800d618:	db33      	blt.n	800d682 <__lshift+0xb6>
 800d61a:	6920      	ldr	r0, [r4, #16]
 800d61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d620:	f104 0314 	add.w	r3, r4, #20
 800d624:	f019 091f 	ands.w	r9, r9, #31
 800d628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d630:	d02b      	beq.n	800d68a <__lshift+0xbe>
 800d632:	f1c9 0e20 	rsb	lr, r9, #32
 800d636:	468a      	mov	sl, r1
 800d638:	2200      	movs	r2, #0
 800d63a:	6818      	ldr	r0, [r3, #0]
 800d63c:	fa00 f009 	lsl.w	r0, r0, r9
 800d640:	4310      	orrs	r0, r2
 800d642:	f84a 0b04 	str.w	r0, [sl], #4
 800d646:	f853 2b04 	ldr.w	r2, [r3], #4
 800d64a:	459c      	cmp	ip, r3
 800d64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d650:	d8f3      	bhi.n	800d63a <__lshift+0x6e>
 800d652:	ebac 0304 	sub.w	r3, ip, r4
 800d656:	3b15      	subs	r3, #21
 800d658:	f023 0303 	bic.w	r3, r3, #3
 800d65c:	3304      	adds	r3, #4
 800d65e:	f104 0015 	add.w	r0, r4, #21
 800d662:	4584      	cmp	ip, r0
 800d664:	bf38      	it	cc
 800d666:	2304      	movcc	r3, #4
 800d668:	50ca      	str	r2, [r1, r3]
 800d66a:	b10a      	cbz	r2, 800d670 <__lshift+0xa4>
 800d66c:	f108 0602 	add.w	r6, r8, #2
 800d670:	3e01      	subs	r6, #1
 800d672:	4638      	mov	r0, r7
 800d674:	612e      	str	r6, [r5, #16]
 800d676:	4621      	mov	r1, r4
 800d678:	f7ff fdd8 	bl	800d22c <_Bfree>
 800d67c:	4628      	mov	r0, r5
 800d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d682:	f842 0f04 	str.w	r0, [r2, #4]!
 800d686:	3301      	adds	r3, #1
 800d688:	e7c5      	b.n	800d616 <__lshift+0x4a>
 800d68a:	3904      	subs	r1, #4
 800d68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d690:	f841 2f04 	str.w	r2, [r1, #4]!
 800d694:	459c      	cmp	ip, r3
 800d696:	d8f9      	bhi.n	800d68c <__lshift+0xc0>
 800d698:	e7ea      	b.n	800d670 <__lshift+0xa4>
 800d69a:	bf00      	nop
 800d69c:	0800e1d8 	.word	0x0800e1d8
 800d6a0:	0800e1e9 	.word	0x0800e1e9

0800d6a4 <__mcmp>:
 800d6a4:	b530      	push	{r4, r5, lr}
 800d6a6:	6902      	ldr	r2, [r0, #16]
 800d6a8:	690c      	ldr	r4, [r1, #16]
 800d6aa:	1b12      	subs	r2, r2, r4
 800d6ac:	d10e      	bne.n	800d6cc <__mcmp+0x28>
 800d6ae:	f100 0314 	add.w	r3, r0, #20
 800d6b2:	3114      	adds	r1, #20
 800d6b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d6b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d6bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d6c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6c4:	42a5      	cmp	r5, r4
 800d6c6:	d003      	beq.n	800d6d0 <__mcmp+0x2c>
 800d6c8:	d305      	bcc.n	800d6d6 <__mcmp+0x32>
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	bd30      	pop	{r4, r5, pc}
 800d6d0:	4283      	cmp	r3, r0
 800d6d2:	d3f3      	bcc.n	800d6bc <__mcmp+0x18>
 800d6d4:	e7fa      	b.n	800d6cc <__mcmp+0x28>
 800d6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6da:	e7f7      	b.n	800d6cc <__mcmp+0x28>

0800d6dc <__mdiff>:
 800d6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4690      	mov	r8, r2
 800d6ea:	f7ff ffdb 	bl	800d6a4 <__mcmp>
 800d6ee:	1e05      	subs	r5, r0, #0
 800d6f0:	d110      	bne.n	800d714 <__mdiff+0x38>
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f7ff fd59 	bl	800d1ac <_Balloc>
 800d6fa:	b930      	cbnz	r0, 800d70a <__mdiff+0x2e>
 800d6fc:	4b3a      	ldr	r3, [pc, #232]	; (800d7e8 <__mdiff+0x10c>)
 800d6fe:	4602      	mov	r2, r0
 800d700:	f240 2137 	movw	r1, #567	; 0x237
 800d704:	4839      	ldr	r0, [pc, #228]	; (800d7ec <__mdiff+0x110>)
 800d706:	f000 f999 	bl	800da3c <__assert_func>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d714:	bfa4      	itt	ge
 800d716:	4643      	movge	r3, r8
 800d718:	46a0      	movge	r8, r4
 800d71a:	4630      	mov	r0, r6
 800d71c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d720:	bfa6      	itte	ge
 800d722:	461c      	movge	r4, r3
 800d724:	2500      	movge	r5, #0
 800d726:	2501      	movlt	r5, #1
 800d728:	f7ff fd40 	bl	800d1ac <_Balloc>
 800d72c:	b920      	cbnz	r0, 800d738 <__mdiff+0x5c>
 800d72e:	4b2e      	ldr	r3, [pc, #184]	; (800d7e8 <__mdiff+0x10c>)
 800d730:	4602      	mov	r2, r0
 800d732:	f240 2145 	movw	r1, #581	; 0x245
 800d736:	e7e5      	b.n	800d704 <__mdiff+0x28>
 800d738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d73c:	6926      	ldr	r6, [r4, #16]
 800d73e:	60c5      	str	r5, [r0, #12]
 800d740:	f104 0914 	add.w	r9, r4, #20
 800d744:	f108 0514 	add.w	r5, r8, #20
 800d748:	f100 0e14 	add.w	lr, r0, #20
 800d74c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d754:	f108 0210 	add.w	r2, r8, #16
 800d758:	46f2      	mov	sl, lr
 800d75a:	2100      	movs	r1, #0
 800d75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d764:	fa11 f88b 	uxtah	r8, r1, fp
 800d768:	b299      	uxth	r1, r3
 800d76a:	0c1b      	lsrs	r3, r3, #16
 800d76c:	eba8 0801 	sub.w	r8, r8, r1
 800d770:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d774:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d778:	fa1f f888 	uxth.w	r8, r8
 800d77c:	1419      	asrs	r1, r3, #16
 800d77e:	454e      	cmp	r6, r9
 800d780:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d784:	f84a 3b04 	str.w	r3, [sl], #4
 800d788:	d8e8      	bhi.n	800d75c <__mdiff+0x80>
 800d78a:	1b33      	subs	r3, r6, r4
 800d78c:	3b15      	subs	r3, #21
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	3304      	adds	r3, #4
 800d794:	3415      	adds	r4, #21
 800d796:	42a6      	cmp	r6, r4
 800d798:	bf38      	it	cc
 800d79a:	2304      	movcc	r3, #4
 800d79c:	441d      	add	r5, r3
 800d79e:	4473      	add	r3, lr
 800d7a0:	469e      	mov	lr, r3
 800d7a2:	462e      	mov	r6, r5
 800d7a4:	4566      	cmp	r6, ip
 800d7a6:	d30e      	bcc.n	800d7c6 <__mdiff+0xea>
 800d7a8:	f10c 0203 	add.w	r2, ip, #3
 800d7ac:	1b52      	subs	r2, r2, r5
 800d7ae:	f022 0203 	bic.w	r2, r2, #3
 800d7b2:	3d03      	subs	r5, #3
 800d7b4:	45ac      	cmp	ip, r5
 800d7b6:	bf38      	it	cc
 800d7b8:	2200      	movcc	r2, #0
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d7c0:	b17a      	cbz	r2, 800d7e2 <__mdiff+0x106>
 800d7c2:	6107      	str	r7, [r0, #16]
 800d7c4:	e7a4      	b.n	800d710 <__mdiff+0x34>
 800d7c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7ca:	fa11 f288 	uxtah	r2, r1, r8
 800d7ce:	1414      	asrs	r4, r2, #16
 800d7d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7d4:	b292      	uxth	r2, r2
 800d7d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7da:	f84e 2b04 	str.w	r2, [lr], #4
 800d7de:	1421      	asrs	r1, r4, #16
 800d7e0:	e7e0      	b.n	800d7a4 <__mdiff+0xc8>
 800d7e2:	3f01      	subs	r7, #1
 800d7e4:	e7ea      	b.n	800d7bc <__mdiff+0xe0>
 800d7e6:	bf00      	nop
 800d7e8:	0800e1d8 	.word	0x0800e1d8
 800d7ec:	0800e1e9 	.word	0x0800e1e9

0800d7f0 <__d2b>:
 800d7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	ec59 8b10 	vmov	r8, r9, d0
 800d7fc:	4616      	mov	r6, r2
 800d7fe:	f7ff fcd5 	bl	800d1ac <_Balloc>
 800d802:	4604      	mov	r4, r0
 800d804:	b930      	cbnz	r0, 800d814 <__d2b+0x24>
 800d806:	4602      	mov	r2, r0
 800d808:	4b24      	ldr	r3, [pc, #144]	; (800d89c <__d2b+0xac>)
 800d80a:	4825      	ldr	r0, [pc, #148]	; (800d8a0 <__d2b+0xb0>)
 800d80c:	f240 310f 	movw	r1, #783	; 0x30f
 800d810:	f000 f914 	bl	800da3c <__assert_func>
 800d814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d81c:	bb2d      	cbnz	r5, 800d86a <__d2b+0x7a>
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	f1b8 0300 	subs.w	r3, r8, #0
 800d824:	d026      	beq.n	800d874 <__d2b+0x84>
 800d826:	4668      	mov	r0, sp
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	f7ff fd87 	bl	800d33c <__lo0bits>
 800d82e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d832:	b1e8      	cbz	r0, 800d870 <__d2b+0x80>
 800d834:	f1c0 0320 	rsb	r3, r0, #32
 800d838:	fa02 f303 	lsl.w	r3, r2, r3
 800d83c:	430b      	orrs	r3, r1
 800d83e:	40c2      	lsrs	r2, r0
 800d840:	6163      	str	r3, [r4, #20]
 800d842:	9201      	str	r2, [sp, #4]
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	61a3      	str	r3, [r4, #24]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bf14      	ite	ne
 800d84c:	2202      	movne	r2, #2
 800d84e:	2201      	moveq	r2, #1
 800d850:	6122      	str	r2, [r4, #16]
 800d852:	b1bd      	cbz	r5, 800d884 <__d2b+0x94>
 800d854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d858:	4405      	add	r5, r0
 800d85a:	603d      	str	r5, [r7, #0]
 800d85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d860:	6030      	str	r0, [r6, #0]
 800d862:	4620      	mov	r0, r4
 800d864:	b003      	add	sp, #12
 800d866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d86e:	e7d6      	b.n	800d81e <__d2b+0x2e>
 800d870:	6161      	str	r1, [r4, #20]
 800d872:	e7e7      	b.n	800d844 <__d2b+0x54>
 800d874:	a801      	add	r0, sp, #4
 800d876:	f7ff fd61 	bl	800d33c <__lo0bits>
 800d87a:	9b01      	ldr	r3, [sp, #4]
 800d87c:	6163      	str	r3, [r4, #20]
 800d87e:	3020      	adds	r0, #32
 800d880:	2201      	movs	r2, #1
 800d882:	e7e5      	b.n	800d850 <__d2b+0x60>
 800d884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d88c:	6038      	str	r0, [r7, #0]
 800d88e:	6918      	ldr	r0, [r3, #16]
 800d890:	f7ff fd34 	bl	800d2fc <__hi0bits>
 800d894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d898:	e7e2      	b.n	800d860 <__d2b+0x70>
 800d89a:	bf00      	nop
 800d89c:	0800e1d8 	.word	0x0800e1d8
 800d8a0:	0800e1e9 	.word	0x0800e1e9

0800d8a4 <__sflush_r>:
 800d8a4:	898a      	ldrh	r2, [r1, #12]
 800d8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	0710      	lsls	r0, r2, #28
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	d458      	bmi.n	800d964 <__sflush_r+0xc0>
 800d8b2:	684b      	ldr	r3, [r1, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dc05      	bgt.n	800d8c4 <__sflush_r+0x20>
 800d8b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	dc02      	bgt.n	800d8c4 <__sflush_r+0x20>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8c6:	2e00      	cmp	r6, #0
 800d8c8:	d0f9      	beq.n	800d8be <__sflush_r+0x1a>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8d0:	682f      	ldr	r7, [r5, #0]
 800d8d2:	6a21      	ldr	r1, [r4, #32]
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	d032      	beq.n	800d93e <__sflush_r+0x9a>
 800d8d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	075a      	lsls	r2, r3, #29
 800d8de:	d505      	bpl.n	800d8ec <__sflush_r+0x48>
 800d8e0:	6863      	ldr	r3, [r4, #4]
 800d8e2:	1ac0      	subs	r0, r0, r3
 800d8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8e6:	b10b      	cbz	r3, 800d8ec <__sflush_r+0x48>
 800d8e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8ea:	1ac0      	subs	r0, r0, r3
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8f2:	6a21      	ldr	r1, [r4, #32]
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b0      	blx	r6
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	d106      	bne.n	800d90c <__sflush_r+0x68>
 800d8fe:	6829      	ldr	r1, [r5, #0]
 800d900:	291d      	cmp	r1, #29
 800d902:	d82b      	bhi.n	800d95c <__sflush_r+0xb8>
 800d904:	4a29      	ldr	r2, [pc, #164]	; (800d9ac <__sflush_r+0x108>)
 800d906:	410a      	asrs	r2, r1
 800d908:	07d6      	lsls	r6, r2, #31
 800d90a:	d427      	bmi.n	800d95c <__sflush_r+0xb8>
 800d90c:	2200      	movs	r2, #0
 800d90e:	6062      	str	r2, [r4, #4]
 800d910:	04d9      	lsls	r1, r3, #19
 800d912:	6922      	ldr	r2, [r4, #16]
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	d504      	bpl.n	800d922 <__sflush_r+0x7e>
 800d918:	1c42      	adds	r2, r0, #1
 800d91a:	d101      	bne.n	800d920 <__sflush_r+0x7c>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b903      	cbnz	r3, 800d922 <__sflush_r+0x7e>
 800d920:	6560      	str	r0, [r4, #84]	; 0x54
 800d922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d924:	602f      	str	r7, [r5, #0]
 800d926:	2900      	cmp	r1, #0
 800d928:	d0c9      	beq.n	800d8be <__sflush_r+0x1a>
 800d92a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d92e:	4299      	cmp	r1, r3
 800d930:	d002      	beq.n	800d938 <__sflush_r+0x94>
 800d932:	4628      	mov	r0, r5
 800d934:	f7ff fb3a 	bl	800cfac <_free_r>
 800d938:	2000      	movs	r0, #0
 800d93a:	6360      	str	r0, [r4, #52]	; 0x34
 800d93c:	e7c0      	b.n	800d8c0 <__sflush_r+0x1c>
 800d93e:	2301      	movs	r3, #1
 800d940:	4628      	mov	r0, r5
 800d942:	47b0      	blx	r6
 800d944:	1c41      	adds	r1, r0, #1
 800d946:	d1c8      	bne.n	800d8da <__sflush_r+0x36>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d0c5      	beq.n	800d8da <__sflush_r+0x36>
 800d94e:	2b1d      	cmp	r3, #29
 800d950:	d001      	beq.n	800d956 <__sflush_r+0xb2>
 800d952:	2b16      	cmp	r3, #22
 800d954:	d101      	bne.n	800d95a <__sflush_r+0xb6>
 800d956:	602f      	str	r7, [r5, #0]
 800d958:	e7b1      	b.n	800d8be <__sflush_r+0x1a>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d960:	81a3      	strh	r3, [r4, #12]
 800d962:	e7ad      	b.n	800d8c0 <__sflush_r+0x1c>
 800d964:	690f      	ldr	r7, [r1, #16]
 800d966:	2f00      	cmp	r7, #0
 800d968:	d0a9      	beq.n	800d8be <__sflush_r+0x1a>
 800d96a:	0793      	lsls	r3, r2, #30
 800d96c:	680e      	ldr	r6, [r1, #0]
 800d96e:	bf08      	it	eq
 800d970:	694b      	ldreq	r3, [r1, #20]
 800d972:	600f      	str	r7, [r1, #0]
 800d974:	bf18      	it	ne
 800d976:	2300      	movne	r3, #0
 800d978:	eba6 0807 	sub.w	r8, r6, r7
 800d97c:	608b      	str	r3, [r1, #8]
 800d97e:	f1b8 0f00 	cmp.w	r8, #0
 800d982:	dd9c      	ble.n	800d8be <__sflush_r+0x1a>
 800d984:	6a21      	ldr	r1, [r4, #32]
 800d986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d988:	4643      	mov	r3, r8
 800d98a:	463a      	mov	r2, r7
 800d98c:	4628      	mov	r0, r5
 800d98e:	47b0      	blx	r6
 800d990:	2800      	cmp	r0, #0
 800d992:	dc06      	bgt.n	800d9a2 <__sflush_r+0xfe>
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	e78e      	b.n	800d8c0 <__sflush_r+0x1c>
 800d9a2:	4407      	add	r7, r0
 800d9a4:	eba8 0800 	sub.w	r8, r8, r0
 800d9a8:	e7e9      	b.n	800d97e <__sflush_r+0xda>
 800d9aa:	bf00      	nop
 800d9ac:	dfbffffe 	.word	0xdfbffffe

0800d9b0 <_fflush_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	690b      	ldr	r3, [r1, #16]
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	b913      	cbnz	r3, 800d9c0 <_fflush_r+0x10>
 800d9ba:	2500      	movs	r5, #0
 800d9bc:	4628      	mov	r0, r5
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	b118      	cbz	r0, 800d9ca <_fflush_r+0x1a>
 800d9c2:	6a03      	ldr	r3, [r0, #32]
 800d9c4:	b90b      	cbnz	r3, 800d9ca <_fflush_r+0x1a>
 800d9c6:	f7fe fb7f 	bl	800c0c8 <__sinit>
 800d9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0f3      	beq.n	800d9ba <_fflush_r+0xa>
 800d9d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9d4:	07d0      	lsls	r0, r2, #31
 800d9d6:	d404      	bmi.n	800d9e2 <_fflush_r+0x32>
 800d9d8:	0599      	lsls	r1, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_fflush_r+0x32>
 800d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9de:	f7fe fc69 	bl	800c2b4 <__retarget_lock_acquire_recursive>
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	f7ff ff5d 	bl	800d8a4 <__sflush_r>
 800d9ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ec:	07da      	lsls	r2, r3, #31
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	d4e4      	bmi.n	800d9bc <_fflush_r+0xc>
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	059b      	lsls	r3, r3, #22
 800d9f6:	d4e1      	bmi.n	800d9bc <_fflush_r+0xc>
 800d9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9fa:	f7fe fc5c 	bl	800c2b6 <__retarget_lock_release_recursive>
 800d9fe:	e7dd      	b.n	800d9bc <_fflush_r+0xc>

0800da00 <_sbrk_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4d06      	ldr	r5, [pc, #24]	; (800da1c <_sbrk_r+0x1c>)
 800da04:	2300      	movs	r3, #0
 800da06:	4604      	mov	r4, r0
 800da08:	4608      	mov	r0, r1
 800da0a:	602b      	str	r3, [r5, #0]
 800da0c:	f7f4 fbaa 	bl	8002164 <_sbrk>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_sbrk_r+0x1a>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_sbrk_r+0x1a>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	20001114 	.word	0x20001114

0800da20 <memcpy>:
 800da20:	440a      	add	r2, r1
 800da22:	4291      	cmp	r1, r2
 800da24:	f100 33ff 	add.w	r3, r0, #4294967295
 800da28:	d100      	bne.n	800da2c <memcpy+0xc>
 800da2a:	4770      	bx	lr
 800da2c:	b510      	push	{r4, lr}
 800da2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da36:	4291      	cmp	r1, r2
 800da38:	d1f9      	bne.n	800da2e <memcpy+0xe>
 800da3a:	bd10      	pop	{r4, pc}

0800da3c <__assert_func>:
 800da3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da3e:	4614      	mov	r4, r2
 800da40:	461a      	mov	r2, r3
 800da42:	4b09      	ldr	r3, [pc, #36]	; (800da68 <__assert_func+0x2c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4605      	mov	r5, r0
 800da48:	68d8      	ldr	r0, [r3, #12]
 800da4a:	b14c      	cbz	r4, 800da60 <__assert_func+0x24>
 800da4c:	4b07      	ldr	r3, [pc, #28]	; (800da6c <__assert_func+0x30>)
 800da4e:	9100      	str	r1, [sp, #0]
 800da50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da54:	4906      	ldr	r1, [pc, #24]	; (800da70 <__assert_func+0x34>)
 800da56:	462b      	mov	r3, r5
 800da58:	f000 f844 	bl	800dae4 <fiprintf>
 800da5c:	f000 f854 	bl	800db08 <abort>
 800da60:	4b04      	ldr	r3, [pc, #16]	; (800da74 <__assert_func+0x38>)
 800da62:	461c      	mov	r4, r3
 800da64:	e7f3      	b.n	800da4e <__assert_func+0x12>
 800da66:	bf00      	nop
 800da68:	20000170 	.word	0x20000170
 800da6c:	0800e34e 	.word	0x0800e34e
 800da70:	0800e35b 	.word	0x0800e35b
 800da74:	0800e389 	.word	0x0800e389

0800da78 <_calloc_r>:
 800da78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da7a:	fba1 2402 	umull	r2, r4, r1, r2
 800da7e:	b94c      	cbnz	r4, 800da94 <_calloc_r+0x1c>
 800da80:	4611      	mov	r1, r2
 800da82:	9201      	str	r2, [sp, #4]
 800da84:	f7ff fb06 	bl	800d094 <_malloc_r>
 800da88:	9a01      	ldr	r2, [sp, #4]
 800da8a:	4605      	mov	r5, r0
 800da8c:	b930      	cbnz	r0, 800da9c <_calloc_r+0x24>
 800da8e:	4628      	mov	r0, r5
 800da90:	b003      	add	sp, #12
 800da92:	bd30      	pop	{r4, r5, pc}
 800da94:	220c      	movs	r2, #12
 800da96:	6002      	str	r2, [r0, #0]
 800da98:	2500      	movs	r5, #0
 800da9a:	e7f8      	b.n	800da8e <_calloc_r+0x16>
 800da9c:	4621      	mov	r1, r4
 800da9e:	f7fe fb8c 	bl	800c1ba <memset>
 800daa2:	e7f4      	b.n	800da8e <_calloc_r+0x16>

0800daa4 <__ascii_mbtowc>:
 800daa4:	b082      	sub	sp, #8
 800daa6:	b901      	cbnz	r1, 800daaa <__ascii_mbtowc+0x6>
 800daa8:	a901      	add	r1, sp, #4
 800daaa:	b142      	cbz	r2, 800dabe <__ascii_mbtowc+0x1a>
 800daac:	b14b      	cbz	r3, 800dac2 <__ascii_mbtowc+0x1e>
 800daae:	7813      	ldrb	r3, [r2, #0]
 800dab0:	600b      	str	r3, [r1, #0]
 800dab2:	7812      	ldrb	r2, [r2, #0]
 800dab4:	1e10      	subs	r0, r2, #0
 800dab6:	bf18      	it	ne
 800dab8:	2001      	movne	r0, #1
 800daba:	b002      	add	sp, #8
 800dabc:	4770      	bx	lr
 800dabe:	4610      	mov	r0, r2
 800dac0:	e7fb      	b.n	800daba <__ascii_mbtowc+0x16>
 800dac2:	f06f 0001 	mvn.w	r0, #1
 800dac6:	e7f8      	b.n	800daba <__ascii_mbtowc+0x16>

0800dac8 <__ascii_wctomb>:
 800dac8:	b149      	cbz	r1, 800dade <__ascii_wctomb+0x16>
 800daca:	2aff      	cmp	r2, #255	; 0xff
 800dacc:	bf85      	ittet	hi
 800dace:	238a      	movhi	r3, #138	; 0x8a
 800dad0:	6003      	strhi	r3, [r0, #0]
 800dad2:	700a      	strbls	r2, [r1, #0]
 800dad4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dad8:	bf98      	it	ls
 800dada:	2001      	movls	r0, #1
 800dadc:	4770      	bx	lr
 800dade:	4608      	mov	r0, r1
 800dae0:	4770      	bx	lr
	...

0800dae4 <fiprintf>:
 800dae4:	b40e      	push	{r1, r2, r3}
 800dae6:	b503      	push	{r0, r1, lr}
 800dae8:	4601      	mov	r1, r0
 800daea:	ab03      	add	r3, sp, #12
 800daec:	4805      	ldr	r0, [pc, #20]	; (800db04 <fiprintf+0x20>)
 800daee:	f853 2b04 	ldr.w	r2, [r3], #4
 800daf2:	6800      	ldr	r0, [r0, #0]
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	f000 f837 	bl	800db68 <_vfiprintf_r>
 800dafa:	b002      	add	sp, #8
 800dafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800db00:	b003      	add	sp, #12
 800db02:	4770      	bx	lr
 800db04:	20000170 	.word	0x20000170

0800db08 <abort>:
 800db08:	b508      	push	{r3, lr}
 800db0a:	2006      	movs	r0, #6
 800db0c:	f000 fa04 	bl	800df18 <raise>
 800db10:	2001      	movs	r0, #1
 800db12:	f7f4 faaf 	bl	8002074 <_exit>

0800db16 <__sfputc_r>:
 800db16:	6893      	ldr	r3, [r2, #8]
 800db18:	3b01      	subs	r3, #1
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	b410      	push	{r4}
 800db1e:	6093      	str	r3, [r2, #8]
 800db20:	da08      	bge.n	800db34 <__sfputc_r+0x1e>
 800db22:	6994      	ldr	r4, [r2, #24]
 800db24:	42a3      	cmp	r3, r4
 800db26:	db01      	blt.n	800db2c <__sfputc_r+0x16>
 800db28:	290a      	cmp	r1, #10
 800db2a:	d103      	bne.n	800db34 <__sfputc_r+0x1e>
 800db2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db30:	f000 b934 	b.w	800dd9c <__swbuf_r>
 800db34:	6813      	ldr	r3, [r2, #0]
 800db36:	1c58      	adds	r0, r3, #1
 800db38:	6010      	str	r0, [r2, #0]
 800db3a:	7019      	strb	r1, [r3, #0]
 800db3c:	4608      	mov	r0, r1
 800db3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <__sfputs_r>:
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db46:	4606      	mov	r6, r0
 800db48:	460f      	mov	r7, r1
 800db4a:	4614      	mov	r4, r2
 800db4c:	18d5      	adds	r5, r2, r3
 800db4e:	42ac      	cmp	r4, r5
 800db50:	d101      	bne.n	800db56 <__sfputs_r+0x12>
 800db52:	2000      	movs	r0, #0
 800db54:	e007      	b.n	800db66 <__sfputs_r+0x22>
 800db56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5a:	463a      	mov	r2, r7
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7ff ffda 	bl	800db16 <__sfputc_r>
 800db62:	1c43      	adds	r3, r0, #1
 800db64:	d1f3      	bne.n	800db4e <__sfputs_r+0xa>
 800db66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db68 <_vfiprintf_r>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	460d      	mov	r5, r1
 800db6e:	b09d      	sub	sp, #116	; 0x74
 800db70:	4614      	mov	r4, r2
 800db72:	4698      	mov	r8, r3
 800db74:	4606      	mov	r6, r0
 800db76:	b118      	cbz	r0, 800db80 <_vfiprintf_r+0x18>
 800db78:	6a03      	ldr	r3, [r0, #32]
 800db7a:	b90b      	cbnz	r3, 800db80 <_vfiprintf_r+0x18>
 800db7c:	f7fe faa4 	bl	800c0c8 <__sinit>
 800db80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db82:	07d9      	lsls	r1, r3, #31
 800db84:	d405      	bmi.n	800db92 <_vfiprintf_r+0x2a>
 800db86:	89ab      	ldrh	r3, [r5, #12]
 800db88:	059a      	lsls	r2, r3, #22
 800db8a:	d402      	bmi.n	800db92 <_vfiprintf_r+0x2a>
 800db8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db8e:	f7fe fb91 	bl	800c2b4 <__retarget_lock_acquire_recursive>
 800db92:	89ab      	ldrh	r3, [r5, #12]
 800db94:	071b      	lsls	r3, r3, #28
 800db96:	d501      	bpl.n	800db9c <_vfiprintf_r+0x34>
 800db98:	692b      	ldr	r3, [r5, #16]
 800db9a:	b99b      	cbnz	r3, 800dbc4 <_vfiprintf_r+0x5c>
 800db9c:	4629      	mov	r1, r5
 800db9e:	4630      	mov	r0, r6
 800dba0:	f000 f93a 	bl	800de18 <__swsetup_r>
 800dba4:	b170      	cbz	r0, 800dbc4 <_vfiprintf_r+0x5c>
 800dba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dba8:	07dc      	lsls	r4, r3, #31
 800dbaa:	d504      	bpl.n	800dbb6 <_vfiprintf_r+0x4e>
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	b01d      	add	sp, #116	; 0x74
 800dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb6:	89ab      	ldrh	r3, [r5, #12]
 800dbb8:	0598      	lsls	r0, r3, #22
 800dbba:	d4f7      	bmi.n	800dbac <_vfiprintf_r+0x44>
 800dbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbbe:	f7fe fb7a 	bl	800c2b6 <__retarget_lock_release_recursive>
 800dbc2:	e7f3      	b.n	800dbac <_vfiprintf_r+0x44>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc8:	2320      	movs	r3, #32
 800dbca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbce:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd2:	2330      	movs	r3, #48	; 0x30
 800dbd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dd88 <_vfiprintf_r+0x220>
 800dbd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbdc:	f04f 0901 	mov.w	r9, #1
 800dbe0:	4623      	mov	r3, r4
 800dbe2:	469a      	mov	sl, r3
 800dbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbe8:	b10a      	cbz	r2, 800dbee <_vfiprintf_r+0x86>
 800dbea:	2a25      	cmp	r2, #37	; 0x25
 800dbec:	d1f9      	bne.n	800dbe2 <_vfiprintf_r+0x7a>
 800dbee:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf2:	d00b      	beq.n	800dc0c <_vfiprintf_r+0xa4>
 800dbf4:	465b      	mov	r3, fp
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7ff ffa2 	bl	800db44 <__sfputs_r>
 800dc00:	3001      	adds	r0, #1
 800dc02:	f000 80a9 	beq.w	800dd58 <_vfiprintf_r+0x1f0>
 800dc06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc08:	445a      	add	r2, fp
 800dc0a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 80a1 	beq.w	800dd58 <_vfiprintf_r+0x1f0>
 800dc16:	2300      	movs	r3, #0
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc20:	f10a 0a01 	add.w	sl, sl, #1
 800dc24:	9304      	str	r3, [sp, #16]
 800dc26:	9307      	str	r3, [sp, #28]
 800dc28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc2c:	931a      	str	r3, [sp, #104]	; 0x68
 800dc2e:	4654      	mov	r4, sl
 800dc30:	2205      	movs	r2, #5
 800dc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc36:	4854      	ldr	r0, [pc, #336]	; (800dd88 <_vfiprintf_r+0x220>)
 800dc38:	f7f2 faca 	bl	80001d0 <memchr>
 800dc3c:	9a04      	ldr	r2, [sp, #16]
 800dc3e:	b9d8      	cbnz	r0, 800dc78 <_vfiprintf_r+0x110>
 800dc40:	06d1      	lsls	r1, r2, #27
 800dc42:	bf44      	itt	mi
 800dc44:	2320      	movmi	r3, #32
 800dc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc4a:	0713      	lsls	r3, r2, #28
 800dc4c:	bf44      	itt	mi
 800dc4e:	232b      	movmi	r3, #43	; 0x2b
 800dc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc54:	f89a 3000 	ldrb.w	r3, [sl]
 800dc58:	2b2a      	cmp	r3, #42	; 0x2a
 800dc5a:	d015      	beq.n	800dc88 <_vfiprintf_r+0x120>
 800dc5c:	9a07      	ldr	r2, [sp, #28]
 800dc5e:	4654      	mov	r4, sl
 800dc60:	2000      	movs	r0, #0
 800dc62:	f04f 0c0a 	mov.w	ip, #10
 800dc66:	4621      	mov	r1, r4
 800dc68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc6c:	3b30      	subs	r3, #48	; 0x30
 800dc6e:	2b09      	cmp	r3, #9
 800dc70:	d94d      	bls.n	800dd0e <_vfiprintf_r+0x1a6>
 800dc72:	b1b0      	cbz	r0, 800dca2 <_vfiprintf_r+0x13a>
 800dc74:	9207      	str	r2, [sp, #28]
 800dc76:	e014      	b.n	800dca2 <_vfiprintf_r+0x13a>
 800dc78:	eba0 0308 	sub.w	r3, r0, r8
 800dc7c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc80:	4313      	orrs	r3, r2
 800dc82:	9304      	str	r3, [sp, #16]
 800dc84:	46a2      	mov	sl, r4
 800dc86:	e7d2      	b.n	800dc2e <_vfiprintf_r+0xc6>
 800dc88:	9b03      	ldr	r3, [sp, #12]
 800dc8a:	1d19      	adds	r1, r3, #4
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	9103      	str	r1, [sp, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	bfbb      	ittet	lt
 800dc94:	425b      	neglt	r3, r3
 800dc96:	f042 0202 	orrlt.w	r2, r2, #2
 800dc9a:	9307      	strge	r3, [sp, #28]
 800dc9c:	9307      	strlt	r3, [sp, #28]
 800dc9e:	bfb8      	it	lt
 800dca0:	9204      	strlt	r2, [sp, #16]
 800dca2:	7823      	ldrb	r3, [r4, #0]
 800dca4:	2b2e      	cmp	r3, #46	; 0x2e
 800dca6:	d10c      	bne.n	800dcc2 <_vfiprintf_r+0x15a>
 800dca8:	7863      	ldrb	r3, [r4, #1]
 800dcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800dcac:	d134      	bne.n	800dd18 <_vfiprintf_r+0x1b0>
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	1d1a      	adds	r2, r3, #4
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	9203      	str	r2, [sp, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	bfb8      	it	lt
 800dcba:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcbe:	3402      	adds	r4, #2
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dd98 <_vfiprintf_r+0x230>
 800dcc6:	7821      	ldrb	r1, [r4, #0]
 800dcc8:	2203      	movs	r2, #3
 800dcca:	4650      	mov	r0, sl
 800dccc:	f7f2 fa80 	bl	80001d0 <memchr>
 800dcd0:	b138      	cbz	r0, 800dce2 <_vfiprintf_r+0x17a>
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	eba0 000a 	sub.w	r0, r0, sl
 800dcd8:	2240      	movs	r2, #64	; 0x40
 800dcda:	4082      	lsls	r2, r0
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	3401      	adds	r4, #1
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce6:	4829      	ldr	r0, [pc, #164]	; (800dd8c <_vfiprintf_r+0x224>)
 800dce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcec:	2206      	movs	r2, #6
 800dcee:	f7f2 fa6f 	bl	80001d0 <memchr>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d03f      	beq.n	800dd76 <_vfiprintf_r+0x20e>
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <_vfiprintf_r+0x228>)
 800dcf8:	bb1b      	cbnz	r3, 800dd42 <_vfiprintf_r+0x1da>
 800dcfa:	9b03      	ldr	r3, [sp, #12]
 800dcfc:	3307      	adds	r3, #7
 800dcfe:	f023 0307 	bic.w	r3, r3, #7
 800dd02:	3308      	adds	r3, #8
 800dd04:	9303      	str	r3, [sp, #12]
 800dd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd08:	443b      	add	r3, r7
 800dd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd0c:	e768      	b.n	800dbe0 <_vfiprintf_r+0x78>
 800dd0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd12:	460c      	mov	r4, r1
 800dd14:	2001      	movs	r0, #1
 800dd16:	e7a6      	b.n	800dc66 <_vfiprintf_r+0xfe>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	3401      	adds	r4, #1
 800dd1c:	9305      	str	r3, [sp, #20]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	f04f 0c0a 	mov.w	ip, #10
 800dd24:	4620      	mov	r0, r4
 800dd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd2a:	3a30      	subs	r2, #48	; 0x30
 800dd2c:	2a09      	cmp	r2, #9
 800dd2e:	d903      	bls.n	800dd38 <_vfiprintf_r+0x1d0>
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0c6      	beq.n	800dcc2 <_vfiprintf_r+0x15a>
 800dd34:	9105      	str	r1, [sp, #20]
 800dd36:	e7c4      	b.n	800dcc2 <_vfiprintf_r+0x15a>
 800dd38:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e7f0      	b.n	800dd24 <_vfiprintf_r+0x1bc>
 800dd42:	ab03      	add	r3, sp, #12
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	462a      	mov	r2, r5
 800dd48:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <_vfiprintf_r+0x22c>)
 800dd4a:	a904      	add	r1, sp, #16
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f7fd fd7b 	bl	800b848 <_printf_float>
 800dd52:	4607      	mov	r7, r0
 800dd54:	1c78      	adds	r0, r7, #1
 800dd56:	d1d6      	bne.n	800dd06 <_vfiprintf_r+0x19e>
 800dd58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd5a:	07d9      	lsls	r1, r3, #31
 800dd5c:	d405      	bmi.n	800dd6a <_vfiprintf_r+0x202>
 800dd5e:	89ab      	ldrh	r3, [r5, #12]
 800dd60:	059a      	lsls	r2, r3, #22
 800dd62:	d402      	bmi.n	800dd6a <_vfiprintf_r+0x202>
 800dd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd66:	f7fe faa6 	bl	800c2b6 <__retarget_lock_release_recursive>
 800dd6a:	89ab      	ldrh	r3, [r5, #12]
 800dd6c:	065b      	lsls	r3, r3, #25
 800dd6e:	f53f af1d 	bmi.w	800dbac <_vfiprintf_r+0x44>
 800dd72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd74:	e71c      	b.n	800dbb0 <_vfiprintf_r+0x48>
 800dd76:	ab03      	add	r3, sp, #12
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	4b05      	ldr	r3, [pc, #20]	; (800dd94 <_vfiprintf_r+0x22c>)
 800dd7e:	a904      	add	r1, sp, #16
 800dd80:	4630      	mov	r0, r6
 800dd82:	f7fe f805 	bl	800bd90 <_printf_i>
 800dd86:	e7e4      	b.n	800dd52 <_vfiprintf_r+0x1ea>
 800dd88:	0800e48b 	.word	0x0800e48b
 800dd8c:	0800e495 	.word	0x0800e495
 800dd90:	0800b849 	.word	0x0800b849
 800dd94:	0800db45 	.word	0x0800db45
 800dd98:	0800e491 	.word	0x0800e491

0800dd9c <__swbuf_r>:
 800dd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9e:	460e      	mov	r6, r1
 800dda0:	4614      	mov	r4, r2
 800dda2:	4605      	mov	r5, r0
 800dda4:	b118      	cbz	r0, 800ddae <__swbuf_r+0x12>
 800dda6:	6a03      	ldr	r3, [r0, #32]
 800dda8:	b90b      	cbnz	r3, 800ddae <__swbuf_r+0x12>
 800ddaa:	f7fe f98d 	bl	800c0c8 <__sinit>
 800ddae:	69a3      	ldr	r3, [r4, #24]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	d525      	bpl.n	800de04 <__swbuf_r+0x68>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	b31b      	cbz	r3, 800de04 <__swbuf_r+0x68>
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	6922      	ldr	r2, [r4, #16]
 800ddc0:	1a98      	subs	r0, r3, r2
 800ddc2:	6963      	ldr	r3, [r4, #20]
 800ddc4:	b2f6      	uxtb	r6, r6
 800ddc6:	4283      	cmp	r3, r0
 800ddc8:	4637      	mov	r7, r6
 800ddca:	dc04      	bgt.n	800ddd6 <__swbuf_r+0x3a>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f7ff fdee 	bl	800d9b0 <_fflush_r>
 800ddd4:	b9e0      	cbnz	r0, 800de10 <__swbuf_r+0x74>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	60a3      	str	r3, [r4, #8]
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	6022      	str	r2, [r4, #0]
 800dde2:	701e      	strb	r6, [r3, #0]
 800dde4:	6962      	ldr	r2, [r4, #20]
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d004      	beq.n	800ddf6 <__swbuf_r+0x5a>
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d506      	bpl.n	800de00 <__swbuf_r+0x64>
 800ddf2:	2e0a      	cmp	r6, #10
 800ddf4:	d104      	bne.n	800de00 <__swbuf_r+0x64>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7ff fdd9 	bl	800d9b0 <_fflush_r>
 800ddfe:	b938      	cbnz	r0, 800de10 <__swbuf_r+0x74>
 800de00:	4638      	mov	r0, r7
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de04:	4621      	mov	r1, r4
 800de06:	4628      	mov	r0, r5
 800de08:	f000 f806 	bl	800de18 <__swsetup_r>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d0d5      	beq.n	800ddbc <__swbuf_r+0x20>
 800de10:	f04f 37ff 	mov.w	r7, #4294967295
 800de14:	e7f4      	b.n	800de00 <__swbuf_r+0x64>
	...

0800de18 <__swsetup_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4b2a      	ldr	r3, [pc, #168]	; (800dec4 <__swsetup_r+0xac>)
 800de1c:	4605      	mov	r5, r0
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	460c      	mov	r4, r1
 800de22:	b118      	cbz	r0, 800de2c <__swsetup_r+0x14>
 800de24:	6a03      	ldr	r3, [r0, #32]
 800de26:	b90b      	cbnz	r3, 800de2c <__swsetup_r+0x14>
 800de28:	f7fe f94e 	bl	800c0c8 <__sinit>
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de32:	0718      	lsls	r0, r3, #28
 800de34:	d422      	bmi.n	800de7c <__swsetup_r+0x64>
 800de36:	06d9      	lsls	r1, r3, #27
 800de38:	d407      	bmi.n	800de4a <__swsetup_r+0x32>
 800de3a:	2309      	movs	r3, #9
 800de3c:	602b      	str	r3, [r5, #0]
 800de3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de42:	81a3      	strh	r3, [r4, #12]
 800de44:	f04f 30ff 	mov.w	r0, #4294967295
 800de48:	e034      	b.n	800deb4 <__swsetup_r+0x9c>
 800de4a:	0758      	lsls	r0, r3, #29
 800de4c:	d512      	bpl.n	800de74 <__swsetup_r+0x5c>
 800de4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de50:	b141      	cbz	r1, 800de64 <__swsetup_r+0x4c>
 800de52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de56:	4299      	cmp	r1, r3
 800de58:	d002      	beq.n	800de60 <__swsetup_r+0x48>
 800de5a:	4628      	mov	r0, r5
 800de5c:	f7ff f8a6 	bl	800cfac <_free_r>
 800de60:	2300      	movs	r3, #0
 800de62:	6363      	str	r3, [r4, #52]	; 0x34
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de6a:	81a3      	strh	r3, [r4, #12]
 800de6c:	2300      	movs	r3, #0
 800de6e:	6063      	str	r3, [r4, #4]
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	f043 0308 	orr.w	r3, r3, #8
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	b94b      	cbnz	r3, 800de94 <__swsetup_r+0x7c>
 800de80:	89a3      	ldrh	r3, [r4, #12]
 800de82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de8a:	d003      	beq.n	800de94 <__swsetup_r+0x7c>
 800de8c:	4621      	mov	r1, r4
 800de8e:	4628      	mov	r0, r5
 800de90:	f000 f884 	bl	800df9c <__smakebuf_r>
 800de94:	89a0      	ldrh	r0, [r4, #12]
 800de96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de9a:	f010 0301 	ands.w	r3, r0, #1
 800de9e:	d00a      	beq.n	800deb6 <__swsetup_r+0x9e>
 800dea0:	2300      	movs	r3, #0
 800dea2:	60a3      	str	r3, [r4, #8]
 800dea4:	6963      	ldr	r3, [r4, #20]
 800dea6:	425b      	negs	r3, r3
 800dea8:	61a3      	str	r3, [r4, #24]
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	b943      	cbnz	r3, 800dec0 <__swsetup_r+0xa8>
 800deae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800deb2:	d1c4      	bne.n	800de3e <__swsetup_r+0x26>
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
 800deb6:	0781      	lsls	r1, r0, #30
 800deb8:	bf58      	it	pl
 800deba:	6963      	ldrpl	r3, [r4, #20]
 800debc:	60a3      	str	r3, [r4, #8]
 800debe:	e7f4      	b.n	800deaa <__swsetup_r+0x92>
 800dec0:	2000      	movs	r0, #0
 800dec2:	e7f7      	b.n	800deb4 <__swsetup_r+0x9c>
 800dec4:	20000170 	.word	0x20000170

0800dec8 <_raise_r>:
 800dec8:	291f      	cmp	r1, #31
 800deca:	b538      	push	{r3, r4, r5, lr}
 800decc:	4604      	mov	r4, r0
 800dece:	460d      	mov	r5, r1
 800ded0:	d904      	bls.n	800dedc <_raise_r+0x14>
 800ded2:	2316      	movs	r3, #22
 800ded4:	6003      	str	r3, [r0, #0]
 800ded6:	f04f 30ff 	mov.w	r0, #4294967295
 800deda:	bd38      	pop	{r3, r4, r5, pc}
 800dedc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dede:	b112      	cbz	r2, 800dee6 <_raise_r+0x1e>
 800dee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dee4:	b94b      	cbnz	r3, 800defa <_raise_r+0x32>
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 f830 	bl	800df4c <_getpid_r>
 800deec:	462a      	mov	r2, r5
 800deee:	4601      	mov	r1, r0
 800def0:	4620      	mov	r0, r4
 800def2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def6:	f000 b817 	b.w	800df28 <_kill_r>
 800defa:	2b01      	cmp	r3, #1
 800defc:	d00a      	beq.n	800df14 <_raise_r+0x4c>
 800defe:	1c59      	adds	r1, r3, #1
 800df00:	d103      	bne.n	800df0a <_raise_r+0x42>
 800df02:	2316      	movs	r3, #22
 800df04:	6003      	str	r3, [r0, #0]
 800df06:	2001      	movs	r0, #1
 800df08:	e7e7      	b.n	800deda <_raise_r+0x12>
 800df0a:	2400      	movs	r4, #0
 800df0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df10:	4628      	mov	r0, r5
 800df12:	4798      	blx	r3
 800df14:	2000      	movs	r0, #0
 800df16:	e7e0      	b.n	800deda <_raise_r+0x12>

0800df18 <raise>:
 800df18:	4b02      	ldr	r3, [pc, #8]	; (800df24 <raise+0xc>)
 800df1a:	4601      	mov	r1, r0
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	f7ff bfd3 	b.w	800dec8 <_raise_r>
 800df22:	bf00      	nop
 800df24:	20000170 	.word	0x20000170

0800df28 <_kill_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4d07      	ldr	r5, [pc, #28]	; (800df48 <_kill_r+0x20>)
 800df2c:	2300      	movs	r3, #0
 800df2e:	4604      	mov	r4, r0
 800df30:	4608      	mov	r0, r1
 800df32:	4611      	mov	r1, r2
 800df34:	602b      	str	r3, [r5, #0]
 800df36:	f7f4 f88d 	bl	8002054 <_kill>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	d102      	bne.n	800df44 <_kill_r+0x1c>
 800df3e:	682b      	ldr	r3, [r5, #0]
 800df40:	b103      	cbz	r3, 800df44 <_kill_r+0x1c>
 800df42:	6023      	str	r3, [r4, #0]
 800df44:	bd38      	pop	{r3, r4, r5, pc}
 800df46:	bf00      	nop
 800df48:	20001114 	.word	0x20001114

0800df4c <_getpid_r>:
 800df4c:	f7f4 b87a 	b.w	8002044 <_getpid>

0800df50 <__swhatbuf_r>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	460c      	mov	r4, r1
 800df54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df58:	2900      	cmp	r1, #0
 800df5a:	b096      	sub	sp, #88	; 0x58
 800df5c:	4615      	mov	r5, r2
 800df5e:	461e      	mov	r6, r3
 800df60:	da0d      	bge.n	800df7e <__swhatbuf_r+0x2e>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800df68:	f04f 0100 	mov.w	r1, #0
 800df6c:	bf0c      	ite	eq
 800df6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800df72:	2340      	movne	r3, #64	; 0x40
 800df74:	2000      	movs	r0, #0
 800df76:	6031      	str	r1, [r6, #0]
 800df78:	602b      	str	r3, [r5, #0]
 800df7a:	b016      	add	sp, #88	; 0x58
 800df7c:	bd70      	pop	{r4, r5, r6, pc}
 800df7e:	466a      	mov	r2, sp
 800df80:	f000 f848 	bl	800e014 <_fstat_r>
 800df84:	2800      	cmp	r0, #0
 800df86:	dbec      	blt.n	800df62 <__swhatbuf_r+0x12>
 800df88:	9901      	ldr	r1, [sp, #4]
 800df8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800df8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800df92:	4259      	negs	r1, r3
 800df94:	4159      	adcs	r1, r3
 800df96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df9a:	e7eb      	b.n	800df74 <__swhatbuf_r+0x24>

0800df9c <__smakebuf_r>:
 800df9c:	898b      	ldrh	r3, [r1, #12]
 800df9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfa0:	079d      	lsls	r5, r3, #30
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	d507      	bpl.n	800dfb8 <__smakebuf_r+0x1c>
 800dfa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	6123      	str	r3, [r4, #16]
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	6163      	str	r3, [r4, #20]
 800dfb4:	b002      	add	sp, #8
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	ab01      	add	r3, sp, #4
 800dfba:	466a      	mov	r2, sp
 800dfbc:	f7ff ffc8 	bl	800df50 <__swhatbuf_r>
 800dfc0:	9900      	ldr	r1, [sp, #0]
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f7ff f865 	bl	800d094 <_malloc_r>
 800dfca:	b948      	cbnz	r0, 800dfe0 <__smakebuf_r+0x44>
 800dfcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd0:	059a      	lsls	r2, r3, #22
 800dfd2:	d4ef      	bmi.n	800dfb4 <__smakebuf_r+0x18>
 800dfd4:	f023 0303 	bic.w	r3, r3, #3
 800dfd8:	f043 0302 	orr.w	r3, r3, #2
 800dfdc:	81a3      	strh	r3, [r4, #12]
 800dfde:	e7e3      	b.n	800dfa8 <__smakebuf_r+0xc>
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	6020      	str	r0, [r4, #0]
 800dfe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	9b00      	ldr	r3, [sp, #0]
 800dfec:	6163      	str	r3, [r4, #20]
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	6120      	str	r0, [r4, #16]
 800dff2:	b15b      	cbz	r3, 800e00c <__smakebuf_r+0x70>
 800dff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dff8:	4630      	mov	r0, r6
 800dffa:	f000 f81d 	bl	800e038 <_isatty_r>
 800dffe:	b128      	cbz	r0, 800e00c <__smakebuf_r+0x70>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f023 0303 	bic.w	r3, r3, #3
 800e006:	f043 0301 	orr.w	r3, r3, #1
 800e00a:	81a3      	strh	r3, [r4, #12]
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	431d      	orrs	r5, r3
 800e010:	81a5      	strh	r5, [r4, #12]
 800e012:	e7cf      	b.n	800dfb4 <__smakebuf_r+0x18>

0800e014 <_fstat_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	4d07      	ldr	r5, [pc, #28]	; (800e034 <_fstat_r+0x20>)
 800e018:	2300      	movs	r3, #0
 800e01a:	4604      	mov	r4, r0
 800e01c:	4608      	mov	r0, r1
 800e01e:	4611      	mov	r1, r2
 800e020:	602b      	str	r3, [r5, #0]
 800e022:	f7f4 f876 	bl	8002112 <_fstat>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d102      	bne.n	800e030 <_fstat_r+0x1c>
 800e02a:	682b      	ldr	r3, [r5, #0]
 800e02c:	b103      	cbz	r3, 800e030 <_fstat_r+0x1c>
 800e02e:	6023      	str	r3, [r4, #0]
 800e030:	bd38      	pop	{r3, r4, r5, pc}
 800e032:	bf00      	nop
 800e034:	20001114 	.word	0x20001114

0800e038 <_isatty_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	; (800e054 <_isatty_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f7f4 f875 	bl	8002132 <_isatty>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_isatty_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_isatty_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	20001114 	.word	0x20001114

0800e058 <_init>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	bf00      	nop
 800e05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05e:	bc08      	pop	{r3}
 800e060:	469e      	mov	lr, r3
 800e062:	4770      	bx	lr

0800e064 <_fini>:
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e066:	bf00      	nop
 800e068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e06a:	bc08      	pop	{r3}
 800e06c:	469e      	mov	lr, r3
 800e06e:	4770      	bx	lr
