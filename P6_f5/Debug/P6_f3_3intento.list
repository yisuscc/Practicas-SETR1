
P6_f3_3intento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009518  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009768  08009768  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800976c  0800976c  0001976c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  20000118  08009888  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08009888  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d553  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000427e  00000000  00000000  0003d6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00041960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c7  00000000  00000000  00043318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a920  00000000  00000000  000446df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020740  00000000  00000000  0006efff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f51f7  00000000  00000000  0008f73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c58  00000000  00000000  00184938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009688 	.word	0x08009688

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08009688 	.word	0x08009688

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f001 fcf5 	bl	8001ec0 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f001 f906 	bl	80016e8 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f001 fceb 	bl	8001ec0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 f8fc 	bl	80016e8 <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <lcd_reset>:

void lcd_reset(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4820      	ldr	r0, [pc, #128]	; (8000580 <lcd_reset+0x8c>)
 80004fe:	f001 fcdf 	bl	8001ec0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fcd9 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fcd3 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4818      	ldr	r0, [pc, #96]	; (8000580 <lcd_reset+0x8c>)
 8000520:	f001 fcce 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <lcd_reset+0x8c>)
 800052a:	f001 fcc9 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f001 fcc2 	bl	8001ec0 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f001 fcbc 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <lcd_reset+0x8c>)
 800054e:	f001 fcb7 	bl	8001ec0 <HAL_GPIO_WritePin>
    lcd_clock();
 8000552:	f7ff ffb7 	bl	80004c4 <lcd_clock>
    lcd_clock();
 8000556:	f7ff ffb5 	bl	80004c4 <lcd_clock>
    lcd_clock();
 800055a:	f7ff ffb3 	bl	80004c4 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 fcab 	bl	8001ec0 <HAL_GPIO_WritePin>
    lcd_clock();
 800056a:	f7ff ffab 	bl	80004c4 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	2104      	movs	r1, #4
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f001 fca3 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	48000400 	.word	0x48000400

08000584 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	091b      	lsrs	r3, r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 fc89 	bl	8001ec0 <HAL_GPIO_WritePin>
 80005ae:	e005      	b.n	80005bc <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2108      	movs	r1, #8
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f001 fc82 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4847      	ldr	r0, [pc, #284]	; (80006ec <lcd_write+0x168>)
 80005d0:	f001 fc76 	bl	8001ec0 <HAL_GPIO_WritePin>
 80005d4:	e004      	b.n	80005e0 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	4844      	ldr	r0, [pc, #272]	; (80006ec <lcd_write+0x168>)
 80005dc:	f001 fc70 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d005      	beq.n	80005fa <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2102      	movs	r1, #2
 80005f2:	483e      	ldr	r0, [pc, #248]	; (80006ec <lcd_write+0x168>)
 80005f4:	f001 fc64 	bl	8001ec0 <HAL_GPIO_WritePin>
 80005f8:	e004      	b.n	8000604 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2102      	movs	r1, #2
 80005fe:	483b      	ldr	r0, [pc, #236]	; (80006ec <lcd_write+0x168>)
 8000600:	f001 fc5e 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	09db      	lsrs	r3, r3, #7
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f001 fc51 	bl	8001ec0 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 fc4a 	bl	8001ec0 <HAL_GPIO_WritePin>

    if(rs)
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d005      	beq.n	800063e <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	482d      	ldr	r0, [pc, #180]	; (80006ec <lcd_write+0x168>)
 8000638:	f001 fc42 	bl	8001ec0 <HAL_GPIO_WritePin>
 800063c:	e004      	b.n	8000648 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2104      	movs	r1, #4
 8000642:	482a      	ldr	r0, [pc, #168]	; (80006ec <lcd_write+0x168>)
 8000644:	f001 fc3c 	bl	8001ec0 <HAL_GPIO_WritePin>

    lcd_clock();
 8000648:	f7ff ff3c 	bl	80004c4 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2108      	movs	r1, #8
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fc2f 	bl	8001ec0 <HAL_GPIO_WritePin>
 8000662:	e005      	b.n	8000670 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f001 fc28 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	085b      	lsrs	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	2110      	movs	r1, #16
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <lcd_write+0x168>)
 8000684:	f001 fc1c 	bl	8001ec0 <HAL_GPIO_WritePin>
 8000688:	e004      	b.n	8000694 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2110      	movs	r1, #16
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <lcd_write+0x168>)
 8000690:	f001 fc16 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2102      	movs	r1, #2
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <lcd_write+0x168>)
 80006a8:	f001 fc0a 	bl	8001ec0 <HAL_GPIO_WritePin>
 80006ac:	e004      	b.n	80006b8 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <lcd_write+0x168>)
 80006b4:	f001 fc04 	bl	8001ec0 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fbf7 	bl	8001ec0 <HAL_GPIO_WritePin>
 80006d2:	e005      	b.n	80006e0 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 fbf0 	bl	8001ec0 <HAL_GPIO_WritePin>

    lcd_clock();
 80006e0:	f7ff fef0 	bl	80004c4 <lcd_clock>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	48000400 	.word	0x48000400

080006f0 <lcd_clear>:

void lcd_clear(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ff44 	bl	8000584 <lcd_write>
    _lcd_char = 0;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <lcd_clear+0x1c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <lcd_clear+0x20>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000013c 	.word	0x2000013c
 8000710:	2000013d 	.word	0x2000013d

08000714 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	460b      	mov	r3, r1
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	4613      	mov	r3, r2
 8000724:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	b25a      	sxtb	r2, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b25a      	sxtb	r2, r3
 800073c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000740:	4313      	orrs	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff1b 	bl	8000584 <lcd_write>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff0a 	bl	8000584 <lcd_write>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e055      	b.n	8000832 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <lcd_print+0xd0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d01c      	beq.n	80007c8 <lcd_print+0x50>
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b0a      	cmp	r3, #10
 8000798:	d116      	bne.n	80007c8 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <lcd_print+0xd4>)
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <lcd_print+0xd0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d242      	bcs.n	800082c <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <lcd_print+0xd8>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <lcd_print+0xd4>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	1c59      	adds	r1, r3, #1
 80007b0:	b2c8      	uxtb	r0, r1
 80007b2:	4926      	ldr	r1, [pc, #152]	; (800084c <lcd_print+0xd4>)
 80007b4:	7008      	strb	r0, [r1, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffcb 	bl	8000756 <lcd_display_address>
                _lcd_char = 0;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <lcd_print+0xdc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007c6:	e031      	b.n	800082c <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <lcd_print+0xe0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01b      	beq.n	8000808 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <lcd_print+0xdc>)
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <lcd_print+0xe0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d115      	bne.n	8000808 <lcd_print+0x90>
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <lcd_print+0xd4>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <lcd_print+0xd0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d20f      	bcs.n	8000808 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <lcd_print+0xd8>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <lcd_print+0xd4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	4915      	ldr	r1, [pc, #84]	; (800084c <lcd_print+0xd4>)
 80007f6:	7008      	strb	r0, [r1, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffaa 	bl	8000756 <lcd_display_address>
                    _lcd_char = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <lcd_print+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb6 	bl	8000584 <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <lcd_print+0xe0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d005      	beq.n	800082c <lcd_print+0xb4>
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <lcd_print+0xdc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <lcd_print+0xdc>)
 800082a:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	3301      	adds	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1a3      	bne.n	8000786 <lcd_print+0xe>
        }
    }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000135 	.word	0x20000135
 800084c:	2000013d 	.word	0x2000013d
 8000850:	20000138 	.word	0x20000138
 8000854:	2000013c 	.word	0x2000013c
 8000858:	20000134 	.word	0x20000134

0800085c <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	011a      	lsls	r2, r3, #4
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	dc0a      	bgt.n	8000892 <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000884:	b25b      	sxtb	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe7a 	bl	8000584 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8000890:	e059      	b.n	8000946 <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	dd17      	ble.n	80008c8 <moveToXY+0x6c>
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b1f      	cmp	r3, #31
 800089c:	dc14      	bgt.n	80008c8 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	425a      	negs	r2, r3
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	f002 020f 	and.w	r2, r2, #15
 80008aa:	bf58      	it	pl
 80008ac:	4253      	negpl	r3, r2
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	3340      	adds	r3, #64	; 0x40
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe5f 	bl	8000584 <lcd_write>
 80008c6:	e03e      	b.n	8000946 <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b28      	cmp	r3, #40	; 0x28
 80008cc:	dd1b      	ble.n	8000906 <moveToXY+0xaa>
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b3b      	cmp	r3, #59	; 0x3b
 80008d2:	dc18      	bgt.n	8000906 <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <moveToXY+0xf4>)
 80008d8:	fb83 1302 	smull	r1, r3, r3, r2
 80008dc:	1119      	asrs	r1, r3, #4
 80008de:	17d3      	asrs	r3, r2, #31
 80008e0:	1ac9      	subs	r1, r1, r3
 80008e2:	460b      	mov	r3, r1
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	1ad1      	subs	r1, r2, r3
 80008ec:	b2cb      	uxtb	r3, r1
 80008ee:	3314      	adds	r3, #20
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe40 	bl	8000584 <lcd_write>
 8000904:	e01f      	b.n	8000946 <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b13      	cmp	r3, #19
 800090a:	dd1c      	ble.n	8000946 <moveToXY+0xea>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b27      	cmp	r3, #39	; 0x27
 8000910:	dc19      	bgt.n	8000946 <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <moveToXY+0xf8>)
 8000916:	fb83 1302 	smull	r1, r3, r3, r2
 800091a:	4413      	add	r3, r2
 800091c:	1159      	asrs	r1, r3, #5
 800091e:	17d3      	asrs	r3, r2, #31
 8000920:	1ac9      	subs	r1, r1, r3
 8000922:	460b      	mov	r3, r1
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	1a5b      	subs	r3, r3, r1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	1ad1      	subs	r1, r2, r3
 800092c:	b2cb      	uxtb	r3, r1
 800092e:	3354      	adds	r3, #84	; 0x54
 8000930:	b2db      	uxtb	r3, r3
 8000932:	b25b      	sxtb	r3, r3
 8000934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000938:	b25b      	sxtb	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe20 	bl	8000584 <lcd_write>
}
 8000944:	e7ff      	b.n	8000946 <moveToXY+0xea>
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	66666667 	.word	0x66666667
 8000954:	88888889 	.word	0x88888889

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fe4e 	bl	80015fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f879 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fa15 	bl	8000d94 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800096a:	f000 f8d7 	bl	8000b1c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800096e:	f000 f90d 	bl	8000b8c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000972:	f000 f94b 	bl	8000c0c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000976:	f000 f96f 	bl	8000c58 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800097a:	f000 f9ab 	bl	8000cd4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800097e:	f000 f9d9 	bl	8000d34 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000982:	f008 f889 	bl	8008a98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

lcd_reset();
 8000986:	f7ff fdb5 	bl	80004f4 <lcd_reset>
lcd_display_settings(1,0,0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fec0 	bl	8000714 <lcd_display_settings>
lcd_clear();
 8000994:	f7ff feac 	bl	80006f0 <lcd_clear>
HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	2104      	movs	r1, #4
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 fa8e 	bl	8001ec0 <HAL_GPIO_WritePin>
lcd_print("Tecla: ");
 80009a4:	4826      	ldr	r0, [pc, #152]	; (8000a40 <main+0xe8>)
 80009a6:	f7ff fee7 	bl	8000778 <lcd_print>
HAL_Delay(5000);
 80009aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80009ae:	f000 fe9b 	bl	80016e8 <HAL_Delay>

uint8_t dato[6];
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 80009b2:	f107 0210 	add.w	r2, r7, #16
 80009b6:	2306      	movs	r3, #6
 80009b8:	2101      	movs	r1, #1
 80009ba:	4822      	ldr	r0, [pc, #136]	; (8000a44 <main+0xec>)
 80009bc:	f008 fd94 	bl	80094e8 <USBD_LL_PrepareReceive>
uint8_t datoCiclo[6] = {115,101,116,114,0,0}; //setr ascii
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <main+0xf0>)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ca:	6018      	str	r0, [r3, #0]
 80009cc:	3304      	adds	r3, #4
 80009ce:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(miflag==1){
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <main+0xf4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d12b      	bne.n	8000a30 <main+0xd8>
	USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 80009d8:	f107 0210 	add.w	r2, r7, #16
 80009dc:	2306      	movs	r3, #6
 80009de:	2101      	movs	r1, #1
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <main+0xec>)
 80009e2:	f008 fd81 	bl	80094e8 <USBD_LL_PrepareReceive>
	miflag=0; //bajamos la bandera
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <main+0xf4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	if(dato[0]== 115){
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	2b73      	cmp	r3, #115	; 0x73
 80009f0:	d106      	bne.n	8000a00 <main+0xa8>
		//letra s minucula
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	4815      	ldr	r0, [pc, #84]	; (8000a50 <main+0xf8>)
 80009fa:	f001 fa61 	bl	8001ec0 <HAL_GPIO_WritePin>
 80009fe:	e008      	b.n	8000a12 <main+0xba>
	}else if(dato[0]==114){
 8000a00:	7c3b      	ldrb	r3, [r7, #16]
 8000a02:	2b72      	cmp	r3, #114	; 0x72
 8000a04:	d105      	bne.n	8000a12 <main+0xba>
		//letra r
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <main+0xf8>)
 8000a0e:	f001 fa57 	bl	8001ec0 <HAL_GPIO_WritePin>
	}
	//siempre imprimimos el caracter en la pantalla
	lcd_clear();
 8000a12:	f7ff fe6d 	bl	80006f0 <lcd_clear>
	lcd_print("letra");
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <main+0xfc>)
 8000a18:	f7ff feae 	bl	8000778 <lcd_print>
	str[0]= (char) dato[0];
 8000a1c:	7c3b      	ldrb	r3, [r7, #16]
 8000a1e:	713b      	strb	r3, [r7, #4]
	moveToXY(1, 1);
 8000a20:	2101      	movs	r1, #1
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff ff1a 	bl	800085c <moveToXY>
	lcd_print(str);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fea4 	bl	8000778 <lcd_print>

}
//enviamos esta cadena  para saber que se ha terminado el ciclo
USBD_CUSTOM_HID_SendReport_FS(datoCiclo,6);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2106      	movs	r1, #6
 8000a36:	4618      	mov	r0, r3
 8000a38:	f008 f882 	bl	8008b40 <USBD_CUSTOM_HID_SendReport_FS>
  {
 8000a3c:	e7c8      	b.n	80009d0 <main+0x78>
 8000a3e:	bf00      	nop
 8000a40:	080096a0 	.word	0x080096a0
 8000a44:	200003b4 	.word	0x200003b4
 8000a48:	080096b0 	.word	0x080096b0
 8000a4c:	20000690 	.word	0x20000690
 8000a50:	48000400 	.word	0x48000400
 8000a54:	080096a8 	.word	0x080096a8

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b096      	sub	sp, #88	; 0x58
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2244      	movs	r2, #68	; 0x44
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f008 fde2 	bl	8009630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a7e:	f002 fd39 	bl	80034f4 <HAL_PWREx_ControlVoltageScaling>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a88:	f000 fb08 	bl	800109c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a8c:	f002 fd14 	bl	80034b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <SystemClock_Config+0xc0>)
 8000a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <SystemClock_Config+0xc0>)
 8000a98:	f023 0318 	bic.w	r3, r3, #24
 8000a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000aa0:	2314      	movs	r3, #20
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab0:	2360      	movs	r3, #96	; 0x60
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ac0:	2328      	movs	r3, #40	; 0x28
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fe2f 	bl	8003738 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 fadc 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	2104      	movs	r1, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f9f7 	bl	8003ef0 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b08:	f000 fac8 	bl	800109c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b0c:	f003 fefe 	bl	800490c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b10:	bf00      	nop
 8000b12:	3758      	adds	r7, #88	; 0x58
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000

08000b1c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <MX_DFSDM1_Init+0x6c>)
 8000b24:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_DFSDM1_Init+0x68>)
 8000b72:	f000 feef 	bl	8001954 <HAL_DFSDM_ChannelInit>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b7c:	f000 fa8e 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000140 	.word	0x20000140
 8000b88:	40016020 	.word	0x40016020

08000b8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <MX_I2C2_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <MX_I2C2_Init+0x7c>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bc8:	f001 f9b5 	bl	8001f36 <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bd2:	f000 fa63 	bl	800109c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bda:	f001 fa47 	bl	800206c <HAL_I2CEx_ConfigAnalogFilter>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 fa5a 	bl	800109c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_I2C2_Init+0x74>)
 8000bec:	f001 fa89 	bl	8002102 <HAL_I2CEx_ConfigDigitalFilter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 fa51 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000178 	.word	0x20000178
 8000c04:	40005800 	.word	0x40005800
 8000c08:	10909cec 	.word	0x10909cec

08000c0c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <MX_QUADSPI_Init+0x48>)
 8000c14:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c24:	2210      	movs	r2, #16
 8000c26:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c2a:	2217      	movs	r2, #23
 8000c2c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_QUADSPI_Init+0x44>)
 8000c3c:	f002 fcc0 	bl	80035c0 <HAL_QSPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000c46:	f000 fa29 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	a0001000 	.word	0xa0001000

08000c58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <MX_SPI3_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_SPI3_Init+0x74>)
 8000cb8:	f004 f80a 	bl	8004cd0 <HAL_SPI_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 f9eb 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000210 	.word	0x20000210
 8000cd0:	40003c00 	.word	0x40003c00

08000cd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART1_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART1_UART_Init+0x58>)
 8000d18:	f004 f87d 	bl	8004e16 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f9bb 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	40013800 	.word	0x40013800

08000d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_USART3_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d78:	f004 f84d 	bl	8004e16 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f98b 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200002fc 	.word	0x200002fc
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	4bb7      	ldr	r3, [pc, #732]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4ab6      	ldr	r2, [pc, #728]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4bb4      	ldr	r3, [pc, #720]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4bb1      	ldr	r3, [pc, #708]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4ab0      	ldr	r2, [pc, #704]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4bae      	ldr	r3, [pc, #696]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4bab      	ldr	r3, [pc, #684]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4aaa      	ldr	r2, [pc, #680]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4ba8      	ldr	r3, [pc, #672]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4ba5      	ldr	r3, [pc, #660]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4aa4      	ldr	r2, [pc, #656]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4ba2      	ldr	r3, [pc, #648]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b9f      	ldr	r3, [pc, #636]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a9e      	ldr	r2, [pc, #632]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b9c      	ldr	r3, [pc, #624]	; (8001088 <MX_GPIO_Init+0x2f4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e28:	4898      	ldr	r0, [pc, #608]	; (800108c <MX_GPIO_Init+0x2f8>)
 8000e2a:	f001 f849 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f001 f842 	bl	8001ec0 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f24f 0116 	movw	r1, #61462	; 0xf016
 8000e42:	4893      	ldr	r0, [pc, #588]	; (8001090 <MX_GPIO_Init+0x2fc>)
 8000e44:	f001 f83c 	bl	8001ec0 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e4e:	4891      	ldr	r0, [pc, #580]	; (8001094 <MX_GPIO_Init+0x300>)
 8000e50:	f001 f836 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	488e      	ldr	r0, [pc, #568]	; (8001094 <MX_GPIO_Init+0x300>)
 8000e5c:	f001 f830 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e66:	488c      	ldr	r0, [pc, #560]	; (8001098 <MX_GPIO_Init+0x304>)
 8000e68:	f001 f82a 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4887      	ldr	r0, [pc, #540]	; (8001090 <MX_GPIO_Init+0x2fc>)
 8000e72:	f001 f825 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4884      	ldr	r0, [pc, #528]	; (800108c <MX_GPIO_Init+0x2f8>)
 8000e7c:	f001 f820 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e80:	f240 1315 	movw	r3, #277	; 0x115
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	487c      	ldr	r0, [pc, #496]	; (800108c <MX_GPIO_Init+0x2f8>)
 8000e9a:	f000 fe67 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e9e:	236a      	movs	r3, #106	; 0x6a
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4876      	ldr	r0, [pc, #472]	; (800108c <MX_GPIO_Init+0x2f8>)
 8000eb4:	f000 fe5a 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ebe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4872      	ldr	r0, [pc, #456]	; (8001098 <MX_GPIO_Init+0x304>)
 8000ed0:	f000 fe4c 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ed4:	233f      	movs	r3, #63	; 0x3f
 8000ed6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ed8:	230b      	movs	r3, #11
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	486c      	ldr	r0, [pc, #432]	; (8001098 <MX_GPIO_Init+0x304>)
 8000ee8:	f000 fe40 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000eec:	2303      	movs	r3, #3
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000efc:	2308      	movs	r3, #8
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f000 fe2f 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000f0e:	f248 131c 	movw	r3, #33052	; 0x811c
 8000f12:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f000 fe1f 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f2e:	23e0      	movs	r3, #224	; 0xe0
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f000 fe0e 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f50:	2301      	movs	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	484a      	ldr	r0, [pc, #296]	; (8001090 <MX_GPIO_Init+0x2fc>)
 8000f66:	f000 fe01 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000f6a:	f24f 0336 	movw	r3, #61494	; 0xf036
 8000f6e:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4843      	ldr	r0, [pc, #268]	; (8001090 <MX_GPIO_Init+0x2fc>)
 8000f84:	f000 fdf2 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f88:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f8c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	483d      	ldr	r0, [pc, #244]	; (8001094 <MX_GPIO_Init+0x300>)
 8000fa0:	f000 fde4 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fa4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4835      	ldr	r0, [pc, #212]	; (8001094 <MX_GPIO_Init+0x300>)
 8000fbe:	f000 fdd5 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fc2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482f      	ldr	r0, [pc, #188]	; (8001098 <MX_GPIO_Init+0x304>)
 8000fdc:	f000 fdc6 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000fe0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_GPIO_Init+0x304>)
 8000ff8:	f000 fdb8 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	481f      	ldr	r0, [pc, #124]	; (8001094 <MX_GPIO_Init+0x300>)
 8001018:	f000 fda8 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800101c:	2378      	movs	r3, #120	; 0x78
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102c:	2307      	movs	r3, #7
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <MX_GPIO_Init+0x300>)
 8001038:	f000 fd98 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800103c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104e:	2304      	movs	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_GPIO_Init+0x2fc>)
 800105a:	f000 fd87 	bl	8001b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2017      	movs	r0, #23
 8001064:	f000 fc3f 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001068:	2017      	movs	r0, #23
 800106a:	f000 fc58 	bl	800191e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2028      	movs	r0, #40	; 0x28
 8001074:	f000 fc37 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f000 fc50 	bl	800191e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	48001000 	.word	0x48001000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48000800 	.word	0x48000800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	; 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	; 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fa8d 	bl	8009630 <memset>
  if(DFSDM1_Init == 0)
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d142      	bne.n	80011a4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4618      	mov	r0, r3
 8001130:	f003 f902 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800113a:	f7ff ffaf 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001144:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800116e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001188:	2306      	movs	r3, #6
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001196:	f000 fce9 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a02      	ldr	r2, [pc, #8]	; (80011ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011a2:	6013      	str	r3, [r2, #0]
  }

}
 80011a4:	bf00      	nop
 80011a6:	37b0      	adds	r7, #176	; 0xb0
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000384 	.word	0x20000384
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48001000 	.word	0x48001000

080011b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0ac      	sub	sp, #176	; 0xb0
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2288      	movs	r2, #136	; 0x88
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f008 fa29 	bl	8009630 <memset>
  if(hi2c->Instance==I2C2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <HAL_I2C_MspInit+0xb0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d13b      	bne.n	8001260 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 f89f 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001200:	f7ff ff4c 	bl	800109c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_I2C_MspInit+0xb4>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <HAL_I2C_MspInit+0xb4>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_I2C_MspInit+0xb4>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800121c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001224:	2312      	movs	r3, #18
 8001226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122a:	2301      	movs	r3, #1
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001236:	2304      	movs	r3, #4
 8001238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_I2C_MspInit+0xb8>)
 8001244:	f000 fc92 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_I2C_MspInit+0xb4>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_I2C_MspInit+0xb4>)
 800124e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_I2C_MspInit+0xb4>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	37b0      	adds	r7, #176	; 0xb0
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40005800 	.word	0x40005800
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400

08001274 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_QSPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 8001298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	6513      	str	r3, [r2, #80]	; 0x50
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 80012a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_QSPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012c6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012ca:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012d8:	230a      	movs	r3, #10
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_QSPI_MspInit+0x84>)
 80012e4:	f000 fc42 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	a0001000 	.word	0xa0001000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48001000 	.word	0x48001000

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x7c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d128      	bne.n	8001370 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_SPI_MspInit+0x80>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_SPI_MspInit+0x80>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_SPI_MspInit+0x80>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800134e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001360:	2306      	movs	r3, #6
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_SPI_MspInit+0x84>)
 800136c:	f000 fbfe 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40003c00 	.word	0x40003c00
 800137c:	40021000 	.word	0x40021000
 8001380:	48000800 	.word	0x48000800

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0ae      	sub	sp, #184	; 0xb8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2288      	movs	r2, #136	; 0x88
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 f943 	bl	8009630 <memset>
  if(huart->Instance==USART1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <HAL_UART_MspInit+0x134>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d13b      	bne.n	800142c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 ffb9 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013cc:	f7ff fe66 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d4:	4a39      	ldr	r2, [pc, #228]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013da:	6613      	str	r3, [r2, #96]	; 0x60
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a33      	ldr	r2, [pc, #204]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_UART_MspInit+0x138>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001400:	23c0      	movs	r3, #192	; 0xc0
 8001402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001418:	2307      	movs	r3, #7
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001422:	4619      	mov	r1, r3
 8001424:	4826      	ldr	r0, [pc, #152]	; (80014c0 <HAL_UART_MspInit+0x13c>)
 8001426:	f000 fba1 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800142a:	e040      	b.n	80014ae <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_UART_MspInit+0x140>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d13b      	bne.n	80014ae <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001436:	2304      	movs	r3, #4
 8001438:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800143a:	2300      	movs	r3, #0
 800143c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4618      	mov	r0, r3
 8001444:	f002 ff78 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800144e:	f7ff fe25 	bl	800109c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_UART_MspInit+0x138>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_UART_MspInit+0x138>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_MspInit+0x138>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_UART_MspInit+0x138>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_UART_MspInit+0x138>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_UART_MspInit+0x138>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800149c:	2307      	movs	r3, #7
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <HAL_UART_MspInit+0x144>)
 80014aa:	f000 fb5f 	bl	8001b6c <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	37b8      	adds	r7, #184	; 0xb8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	40004800 	.word	0x40004800
 80014c8:	48000c00 	.word	0x48000c00

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f8c6 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001524:	2020      	movs	r0, #32
 8001526:	f000 fce3 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800152a:	2040      	movs	r0, #64	; 0x40
 800152c:	f000 fce0 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001530:	2080      	movs	r0, #128	; 0x80
 8001532:	f000 fcdd 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800153a:	f000 fcd9 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001546:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800154a:	f000 fcd1 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800154e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001552:	f000 fccd 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001556:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800155a:	f000 fcc9 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800155e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001562:	f000 fcc5 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001566:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800156a:	f000 fcc1 	bl	8001ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <OTG_FS_IRQHandler+0x10>)
 800157a:	f000 ff61 	bl	8002440 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000894 	.word	0x20000894

08001588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff ffea 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopForever+0xe>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopForever+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f008 f831 	bl	8009640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015de:	f7ff f9bb 	bl	8000958 <main>

080015e2 <LoopForever>:

LoopForever:
    b LoopForever
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80015f0:	08009770 	.word	0x08009770
  ldr r2, =_sbss
 80015f4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80015f8:	20000dc0 	.word	0x20000dc0

080015fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>

080015fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f961 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f80e 	bl	8001630 <HAL_InitTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	e001      	b.n	8001624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001620:	f7ff fd42 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001624:	79fb      	ldrb	r3, [r7, #7]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_InitTick+0x6c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_InitTick+0x70>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_InitTick+0x6c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f96d 	bl	800193a <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d809      	bhi.n	8001680 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f937 	bl	80018e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e007      	b.n	8001690 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e001      	b.n	8001690 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000388 	.word	0x20000388

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000388 	.word	0x20000388

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0ac      	b.n	8001ac0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f8b2 	bl	8001ad4 <DFSDM_GetChannelFromInstance>
 8001970:	4603      	mov	r3, r0
 8001972:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <HAL_DFSDM_ChannelInit+0x174>)
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e09f      	b.n	8001ac0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fbb5 	bl	80010f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 800198e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001990:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_DFSDM_ChannelInit+0x178>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d125      	bne.n	80019e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 800199e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4948      	ldr	r1, [pc, #288]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80019bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	493f      	ldr	r1, [pc, #252]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3c      	ldr	r2, [pc, #240]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x17c>)
 80019de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80019f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a02:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a08:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 020f 	bic.w	r2, r2, #15
 8001a20:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001a48:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f002 0207 	and.w	r2, r2, #7
 8001a74:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f810 	bl	8001ad4 <DFSDM_GetChannelFromInstance>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <HAL_DFSDM_ChannelInit+0x174>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000390 	.word	0x20000390
 8001acc:	2000038c 	.word	0x2000038c
 8001ad0:	40016000 	.word	0x40016000

08001ad4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <DFSDM_GetChannelFromInstance+0x7c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d102      	bne.n	8001aea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e02b      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <DFSDM_GetChannelFromInstance+0x80>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d102      	bne.n	8001af8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e024      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <DFSDM_GetChannelFromInstance+0x84>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d102      	bne.n	8001b06 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e01d      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <DFSDM_GetChannelFromInstance+0x88>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d102      	bne.n	8001b14 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e016      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e00f      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <DFSDM_GetChannelFromInstance+0x90>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d102      	bne.n	8001b30 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e008      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <DFSDM_GetChannelFromInstance+0x94>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d102      	bne.n	8001b3e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e001      	b.n	8001b42 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40016000 	.word	0x40016000
 8001b54:	40016020 	.word	0x40016020
 8001b58:	40016040 	.word	0x40016040
 8001b5c:	40016080 	.word	0x40016080
 8001b60:	400160a0 	.word	0x400160a0
 8001b64:	400160c0 	.word	0x400160c0
 8001b68:	400160e0 	.word	0x400160e0

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e17f      	b.n	8001e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8171 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0201 	and.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d118      	bne.n	8001c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ac 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d36:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x242>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae78 	bne.w	8001b7c <HAL_GPIO_Init+0x10>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	48001800 	.word	0x48001800
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f806 	bl	8001f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e08d      	b.n	8002064 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d106      	bne.n	8001f62 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff f92b 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2224      	movs	r2, #36	; 0x24
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e006      	b.n	8001fbe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d108      	bne.n	8001fd8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	e007      	b.n	8001fe8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69d9      	ldr	r1, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b20      	cmp	r3, #32
 8002080:	d138      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800208c:	2302      	movs	r3, #2
 800208e:	e032      	b.n	80020f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	d139      	bne.n	800218c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002122:	2302      	movs	r3, #2
 8002124:	e033      	b.n	800218e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2224      	movs	r2, #36	; 0x24
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800219a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219c:	b08f      	sub	sp, #60	; 0x3c
 800219e:	af0a      	add	r7, sp, #40	; 0x28
 80021a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e116      	b.n	80023da <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f006 fdf0 	bl	8008dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2203      	movs	r2, #3
 80021d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fc09 	bl	8005a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	687e      	ldr	r6, [r7, #4]
 80021f8:	466d      	mov	r5, sp
 80021fa:	f106 0410 	add.w	r4, r6, #16
 80021fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800220a:	e885 0003 	stmia.w	r5, {r0, r1}
 800220e:	1d33      	adds	r3, r6, #4
 8002210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	f003 fb1b 	bl	800584e <USB_CoreInit>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0d7      	b.n	80023da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fbf7 	bl	8005a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e04a      	b.n	80022d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	333d      	adds	r3, #61	; 0x3d
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	333c      	adds	r3, #60	; 0x3c
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	b298      	uxth	r0, r3
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3356      	adds	r3, #86	; 0x56
 8002278:	4602      	mov	r2, r0
 800227a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3340      	adds	r3, #64	; 0x40
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3348      	adds	r3, #72	; 0x48
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	3301      	adds	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3af      	bcc.n	800223c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e044      	b.n	800236c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3b5      	bcc.n	80022e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	687e      	ldr	r6, [r7, #4]
 800237e:	466d      	mov	r5, sp
 8002380:	f106 0410 	add.w	r4, r6, #16
 8002384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800238c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002390:	e885 0003 	stmia.w	r5, {r0, r1}
 8002394:	1d33      	adds	r3, r6, #4
 8002396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002398:	6838      	ldr	r0, [r7, #0]
 800239a:	f003 fb8f 	bl	8005abc <USB_DevInit>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e014      	b.n	80023da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f001 f851 	bl	8003470 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fb3d 	bl	8006a52 <USB_DevDisconnect>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_Start+0x1c>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e01c      	b.n	8002438 <HAL_PCD_Start+0x56>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fade 	bl	80059e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f004 faf1 	bl	8006a10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b08d      	sub	sp, #52	; 0x34
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fbaf 	bl	8006bba <USB_GetMode>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 847e 	bne.w	8002d60 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f004 fb13 	bl	8006a94 <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8474 	beq.w	8002d5e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f004 fb00 	bl	8006a94 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 0202 	and.w	r2, r2, #2
 80024ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 faee 	bl	8006a94 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d161      	bne.n	8002586 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0210 	bic.w	r2, r2, #16
 80024d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	0c5b      	lsrs	r3, r3, #17
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d124      	bne.n	8002548 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d035      	beq.n	8002576 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6a38      	ldr	r0, [r7, #32]
 800251e:	f004 f925 	bl	800676c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252e:	441a      	add	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002540:	441a      	add	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	e016      	b.n	8002576 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b06      	cmp	r3, #6
 8002552:	d110      	bne.n	8002576 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800255a:	2208      	movs	r2, #8
 800255c:	4619      	mov	r1, r3
 800255e:	6a38      	ldr	r0, [r7, #32]
 8002560:	f004 f904 	bl	800676c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002570:	441a      	add	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0210 	orr.w	r2, r2, #16
 8002584:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fa82 	bl	8006a94 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002596:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800259a:	f040 80a7 	bne.w	80026ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fa87 	bl	8006aba <USB_ReadDevAllOutEpInterrupt>
 80025ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025ae:	e099      	b.n	80026e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 808e 	beq.w	80026d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 faab 	bl	8006b22 <USB_ReadDevOutEPInterrupt>
 80025cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00c      	beq.n	80025f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e4:	461a      	mov	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fe65 	bl	80032bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	461a      	mov	r2, r3
 800260a:	2308      	movs	r3, #8
 800260c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fea1 	bl	8003358 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	2310      	movs	r3, #16
 8002630:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d030      	beq.n	800269e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d109      	bne.n	800265c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	78db      	ldrb	r3, [r3, #3]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f006 fcf6 	bl	8009078 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	2302      	movs	r3, #2
 800269c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b4:	461a      	mov	r2, r3
 80026b6:	2320      	movs	r3, #32
 80026b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	3301      	adds	r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f47f af62 	bne.w	80025b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f004 f9cf 	bl	8006a94 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002700:	f040 80a4 	bne.w	800284c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f004 f9f0 	bl	8006aee <USB_ReadDevAllInEpInterrupt>
 800270e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002714:	e096      	b.n	8002844 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808b 	beq.w	8002838 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fa16 	bl	8006b5e <USB_ReadDevInEPInterrupt>
 8002732:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d020      	beq.n	8002780 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	2201      	movs	r2, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800275e:	4013      	ands	r3, r2
 8002760:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276e:	461a      	mov	r2, r3
 8002770:	2301      	movs	r3, #1
 8002772:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f006 fbe7 	bl	8008f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002796:	461a      	mov	r2, r3
 8002798:	2308      	movs	r3, #8
 800279a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b2:	461a      	mov	r2, r3
 80027b4:	2310      	movs	r3, #16
 80027b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d023      	beq.n	8002826 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	6a38      	ldr	r0, [r7, #32]
 80027e2:	f003 faad 	bl	8005d40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3338      	adds	r3, #56	; 0x38
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	78db      	ldrb	r3, [r3, #3]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f006 fc44 	bl	800909c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	461a      	mov	r2, r3
 8002822:	2302      	movs	r3, #2
 8002824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fcba 	bl	80031ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3301      	adds	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	f47f af65 	bne.w	8002716 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 f91f 	bl	8006a94 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800285c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002860:	d122      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800287c:	2b01      	cmp	r3, #1
 800287e:	d108      	bne.n	8002892 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002888:	2100      	movs	r1, #0
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f006 fe64 	bl	8009558 <HAL_PCDEx_LPM_Callback>
 8002890:	e002      	b.n	8002898 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f006 fbc8 	bl	8009028 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f004 f8f1 	bl	8006a94 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028bc:	d112      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f006 fb84 	bl	8008fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f8d3 	bl	8006a94 <USB_ReadInterrupts>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f8:	d121      	bne.n	800293e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002908:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800292e:	2101      	movs	r1, #1
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f006 fe11 	bl	8009558 <HAL_PCDEx_LPM_Callback>
 8002936:	e002      	b.n	800293e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f006 fb4f 	bl	8008fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f004 f8a6 	bl	8006a94 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	f040 80b5 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2110      	movs	r1, #16
 8002970:	4618      	mov	r0, r3
 8002972:	f003 f9e5 	bl	8005d40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297a:	e046      	b.n	8002a0a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002988:	461a      	mov	r2, r3
 800298a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800298e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a0:	0151      	lsls	r1, r2, #5
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	440a      	add	r2, r1
 80029a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029bc:	461a      	mov	r2, r3
 80029be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	3301      	adds	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3b3      	bcc.n	800297c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f043 030b 	orr.w	r3, r3, #11
 8002a44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f043 030b 	orr.w	r3, r3, #11
 8002a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5c:	e015      	b.n	8002a8a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a70:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a84:	f043 030b 	orr.w	r3, r3, #11
 8002a88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f004 f8b6 	bl	8006c1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 ffe5 	bl	8006a94 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d124      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f87b 	bl	8006bd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 f9a8 	bl	8005e3a <USB_GetDevSpeed>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681c      	ldr	r4, [r3, #0]
 8002af6:	f001 fb87 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8002afa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	4620      	mov	r0, r4
 8002b06:	f002 fecf 	bl	80058a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f006 fa47 	bl	8008f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 ffb5 	bl	8006a94 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d10a      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f006 fa24 	bl	8008f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 0208 	and.w	r2, r2, #8
 8002b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 ffa0 	bl	8006a94 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d122      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e014      	b.n	8002b9a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fadb 	bl	800314a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	3301      	adds	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3e5      	bcc.n	8002b70 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 ff73 	bl	8006a94 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb8:	d13b      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bba:	2301      	movs	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	e02b      	b.n	8002c18 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3340      	adds	r3, #64	; 0x40
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d115      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002be6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da12      	bge.n	8002c12 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333f      	adds	r3, #63	; 0x3f
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa9c 	bl	800314a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	3301      	adds	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3ce      	bcc.n	8002bc0 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 ff2c 	bl	8006a94 <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c46:	d155      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e045      	b.n	8002cda <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12e      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da2b      	bge.n	8002cd4 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d121      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd0:	6053      	str	r3, [r2, #4]
            break;
 8002cd2:	e007      	b.n	8002ce4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3b4      	bcc.n	8002c4e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fecb 	bl	8006a94 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d10a      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f006 f9d8 	bl	80090c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 feb5 	bl	8006a94 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d115      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 f9c8 	bl	80090dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	e000      	b.n	8002d60 <HAL_PCD_IRQHandler+0x920>
      return;
 8002d5e:	bf00      	nop
    }
  }
}
 8002d60:	3734      	adds	r7, #52	; 0x34
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_PCD_SetAddress+0x1a>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e013      	b.n	8002da8 <HAL_PCD_SetAddress+0x42>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fe13 	bl	80069c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	70fb      	strb	r3, [r7, #3]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	803b      	strh	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da0f      	bge.n	8002df6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	3338      	adds	r3, #56	; 0x38
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
 8002df4:	e00f      	b.n	8002e16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e22:	883a      	ldrh	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e40:	78bb      	ldrb	r3, [r7, #2]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_PCD_EP_Open+0xaa>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e00e      	b.n	8002e78 <HAL_PCD_EP_Open+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 f805 	bl	8005e78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0f      	bge.n	8002eb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3338      	adds	r3, #56	; 0x38
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_PCD_EP_Close+0x6e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e00e      	b.n	8002f0c <HAL_PCD_EP_Close+0x8c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 f843 	bl	8005f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	460b      	mov	r3, r1
 8002f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 f8e9 	bl	8006140 <USB_EPStartXfer>

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	460b      	mov	r3, r1
 8002f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3338      	adds	r3, #56	; 0x38
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6979      	ldr	r1, [r7, #20]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f8b8 	bl	8006140 <USB_EPStartXfer>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d901      	bls.n	8002ff8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e04e      	b.n	8003096 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da0f      	bge.n	8003020 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3338      	adds	r3, #56	; 0x38
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	705a      	strb	r2, [r3, #1]
 800301e:	e00d      	b.n	800303c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_PCD_EP_SetStall+0x82>
 8003058:	2302      	movs	r3, #2
 800305a:	e01c      	b.n	8003096 <HAL_PCD_EP_SetStall+0xbc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fbd6 	bl	800681c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f003 fdc8 	bl	8006c1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 020f 	and.w	r2, r3, #15
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d901      	bls.n	80030bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e042      	b.n	8003142 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da0f      	bge.n	80030e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 020f 	and.w	r2, r3, #15
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	3338      	adds	r3, #56	; 0x38
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	705a      	strb	r2, [r3, #1]
 80030e2:	e00f      	b.n	8003104 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 020f 	and.w	r2, r3, #15
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_PCD_EP_ClrStall+0x86>
 8003120:	2302      	movs	r3, #2
 8003122:	e00e      	b.n	8003142 <HAL_PCD_EP_ClrStall+0xa4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fbe0 	bl	80068f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da0c      	bge.n	8003178 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3338      	adds	r3, #56	; 0x38
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e00c      	b.n	8003192 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fa03 	bl	80065a4 <USB_EPStopXfer>
 800319e:	4603      	mov	r3, r0
 80031a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031a2:	7afb      	ldrb	r3, [r7, #11]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d901      	bls.n	80031e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e067      	b.n	80032b4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d902      	bls.n	8003200 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3303      	adds	r3, #3
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003208:	e026      	b.n	8003258 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	d902      	bls.n	8003226 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3303      	adds	r3, #3
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68d9      	ldr	r1, [r3, #12]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	b29b      	uxth	r3, r3
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f003 fa5c 	bl	80066f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	441a      	add	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	429a      	cmp	r2, r3
 800326c:	d809      	bhi.n	8003282 <PCD_WriteEmptyTxFifo+0xd6>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003276:	429a      	cmp	r2, r3
 8003278:	d203      	bcs.n	8003282 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1c3      	bne.n	800320a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	429a      	cmp	r2, r3
 800328c:	d811      	bhi.n	80032b2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	6939      	ldr	r1, [r7, #16]
 80032aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ae:	4013      	ands	r3, r2
 80032b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	333c      	adds	r3, #60	; 0x3c
 80032d4:	3304      	adds	r3, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <PCD_EP_OutXfrComplete_int+0x98>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d124      	bne.n	800333c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003308:	461a      	mov	r2, r3
 800330a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330e:	6093      	str	r3, [r2, #8]
 8003310:	e01a      	b.n	8003348 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	2320      	movs	r3, #32
 800332c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f005 fdef 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
 800333a:	e005      	b.n	8003348 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f005 fde8 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	4f54310a 	.word	0x4f54310a

08003358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	333c      	adds	r3, #60	; 0x3c
 8003370:	3304      	adds	r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <PCD_EP_OutSetupPacket_int+0x64>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d90e      	bls.n	80033ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f005 fda1 	bl	8008ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	4f54300a 	.word	0x4f54300a

080033c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
 80033cc:	4613      	mov	r3, r2
 80033ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033de:	883b      	ldrh	r3, [r7, #0]
 80033e0:	0419      	lsls	r1, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
 80033ec:	e028      	b.n	8003440 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4413      	add	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e00d      	b.n	800341e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	3340      	adds	r3, #64	; 0x40
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4413      	add	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	3301      	adds	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	3b01      	subs	r3, #1
 8003424:	429a      	cmp	r2, r3
 8003426:	d3ec      	bcc.n	8003402 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003428:	883b      	ldrh	r3, [r7, #0]
 800342a:	0418      	lsls	r0, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	3b01      	subs	r3, #1
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	4302      	orrs	r2, r0
 8003438:	3340      	adds	r3, #64	; 0x40
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	f043 0303 	orr.w	r3, r3, #3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40007000 	.word	0x40007000

080034d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003502:	d130      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800350c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003510:	d038      	beq.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800351a:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2232      	movs	r2, #50	; 0x32
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003538:	e002      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3b01      	subs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d102      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x60>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f2      	bne.n	800353a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d110      	bne.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e00f      	b.n	8003586 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d007      	beq.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800357c:	4a05      	ldr	r2, [pc, #20]	; (8003594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003582:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40007000 	.word	0x40007000
 8003598:	20000000 	.word	0x20000000
 800359c:	431bde83 	.word	0x431bde83

080035a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ae:	6053      	str	r3, [r2, #4]
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7fe f882 	bl	80016d0 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e063      	b.n	80036a0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd fe41 	bl	8001274 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80035f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f858 	bl	80036ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	3b01      	subs	r3, #1
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	2120      	movs	r1, #32
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f850 	bl	80036c8 <QSPI_WaitFlagStateUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800362c:	7afb      	ldrb	r3, [r7, #11]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d131      	bne.n	8003696 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	0611      	lsls	r1, r2, #24
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_QSPI_Init+0xe8>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6912      	ldr	r2, [r2, #16]
 8003662:	0411      	lsls	r1, r2, #16
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6952      	ldr	r2, [r2, #20]
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6992      	ldr	r2, [r2, #24]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800369e:	7afb      	ldrb	r3, [r7, #11]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	ffe0f8fe 	.word	0xffe0f8fe

080036ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80036d8:	e01a      	b.n	8003710 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d016      	beq.n	8003710 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fd fff5 	bl	80016d0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2204      	movs	r2, #4
 80036fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e00e      	b.n	800372e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d1d6      	bne.n	80036da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e3ca      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	4b97      	ldr	r3, [pc, #604]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003754:	4b94      	ldr	r3, [pc, #592]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80e4 	beq.w	8003934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_RCC_OscConfig+0x4a>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	f040 808b 	bne.w	8003890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 8087 	bne.w	8003890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e3a2      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	4b82      	ldr	r3, [pc, #520]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_RCC_OscConfig+0x7c>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b2:	e005      	b.n	80037c0 <HAL_RCC_OscConfig+0x88>
 80037b4:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d223      	bcs.n	800380c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fd55 	bl	8004278 <RCC_SetFlashLatencyFromMSIRange>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e383      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d8:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037de:	f043 0308 	orr.w	r3, r3, #8
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	496d      	ldr	r1, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	4968      	ldr	r1, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
 800380a:	e025      	b.n	8003858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380c:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4960      	ldr	r1, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	495b      	ldr	r1, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fd15 	bl	8004278 <RCC_SetFlashLatencyFromMSIRange>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e343      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003858:	f000 fc4a 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	4950      	ldr	r1, [pc, #320]	; (80039ac <HAL_RCC_OscConfig+0x274>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	4a4e      	ldr	r2, [pc, #312]	; (80039b0 <HAL_RCC_OscConfig+0x278>)
 8003876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003878:	4b4e      	ldr	r3, [pc, #312]	; (80039b4 <HAL_RCC_OscConfig+0x27c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fed7 	bl	8001630 <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d052      	beq.n	8003932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	e327      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a4:	f7fd ff14 	bl	80016d0 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ac:	f7fd ff10 	bl	80016d0 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e310      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a36      	ldr	r2, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4931      	ldr	r1, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	492c      	ldr	r1, [pc, #176]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e01a      	b.n	8003934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390a:	f7fd fee1 	bl	80016d0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003912:	f7fd fedd 	bl	80016d0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e2dd      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x1da>
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d074      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b08      	cmp	r3, #8
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x21a>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d10e      	bne.n	800396a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d10b      	bne.n	800396a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d064      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d160      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e2ba      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x24a>
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e026      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800398a:	d115      	bne.n	80039b8 <HAL_RCC_OscConfig+0x280>
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a02      	ldr	r2, [pc, #8]	; (80039a8 <HAL_RCC_OscConfig+0x270>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e014      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08009718 	.word	0x08009718
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004
 80039b8:	4ba0      	ldr	r3, [pc, #640]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a9f      	ldr	r2, [pc, #636]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b9d      	ldr	r3, [pc, #628]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a9c      	ldr	r2, [pc, #624]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe7a 	bl	80016d0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fe76 	bl	80016d0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e276      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f2:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2a8>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fe66 	bl	80016d0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd fe62 	bl	80016d0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e262      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1a:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2d0>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d060      	beq.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x310>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d116      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	4b7c      	ldr	r3, [pc, #496]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x328>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e23f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	4973      	ldr	r1, [pc, #460]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	e040      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d023      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fe21 	bl	80016d0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fd fe1d 	bl	80016d0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e21d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa4:	4b65      	ldr	r3, [pc, #404]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b62      	ldr	r3, [pc, #392]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	495f      	ldr	r1, [pc, #380]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e018      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a5c      	ldr	r2, [pc, #368]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fdfd 	bl	80016d0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fd fdf9 	bl	80016d0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1f9      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b12:	4a4a      	ldr	r2, [pc, #296]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fdd8 	bl	80016d0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fd fdd4 	bl	80016d0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1d4      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCC_OscConfig+0x3ec>
 8003b44:	e01b      	b.n	8003b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b46:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	4a3b      	ldr	r2, [pc, #236]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fd fdbb 	bl	80016d0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fdb7 	bl	80016d0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1b7      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ef      	bne.n	8003b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a6 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d118      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fd7e 	bl	80016d0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fd fd7a 	bl	80016d0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e17a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4d8>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c0e:	e029      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_OscConfig+0x50c>
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	4b9c      	ldr	r3, [pc, #624]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	4a9b      	ldr	r2, [pc, #620]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c54:	4b98      	ldr	r3, [pc, #608]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	4a97      	ldr	r2, [pc, #604]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fd30 	bl	80016d0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fd fd2c 	bl	80016d0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e12a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCC_OscConfig+0x53c>
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fd19 	bl	80016d0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fd fd15 	bl	80016d0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e113      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb8:	4b7f      	ldr	r3, [pc, #508]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ed      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4a79      	ldr	r2, [pc, #484]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80fe 	beq.w	8003ede <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 80d0 	bne.w	8003e8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cec:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0203 	and.w	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d130      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d127      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d11f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d2c:	2a07      	cmp	r2, #7
 8003d2e:	bf14      	ite	ne
 8003d30:	2201      	movne	r2, #1
 8003d32:	2200      	moveq	r2, #0
 8003d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d113      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d06e      	beq.n	8003e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d069      	beq.n	8003e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0ad      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a4b      	ldr	r2, [pc, #300]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d90:	f7fd fc9e 	bl	80016d0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fc9a 	bl	80016d0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e09a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003daa:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCC_OscConfig+0x784>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dd0:	0212      	lsls	r2, r2, #8
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dd8:	0852      	lsrs	r2, r2, #1
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	0552      	lsls	r2, r2, #21
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003de4:	0852      	lsrs	r2, r2, #1
 8003de6:	3a01      	subs	r2, #1
 8003de8:	0652      	lsls	r2, r2, #25
 8003dea:	4311      	orrs	r1, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003df0:	0912      	lsrs	r2, r2, #4
 8003df2:	0452      	lsls	r2, r2, #17
 8003df4:	430a      	orrs	r2, r1
 8003df6:	4930      	ldr	r1, [pc, #192]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e14:	f7fd fc5c 	bl	80016d0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fc58 	bl	80016d0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e058      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3a:	e050      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e04f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d148      	bne.n	8003ede <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e58:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e64:	f7fd fc34 	bl	80016d0 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd fc30 	bl	80016d0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e030      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x734>
 8003e8a:	e028      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d023      	beq.n	8003eda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x780>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fc17 	bl	80016d0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd fc13 	bl	80016d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d905      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ec      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4905      	ldr	r1, [pc, #20]	; (8003ee8 <HAL_RCC_OscConfig+0x7b0>)
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_OscConfig+0x7b4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e001      	b.n	8003ede <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	feeefffc 	.word	0xfeeefffc

08003ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0e7      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f04:	4b75      	ldr	r3, [pc, #468]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d910      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 0207 	bic.w	r2, r3, #7
 8003f1a:	4970      	ldr	r1, [pc, #448]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b6e      	ldr	r3, [pc, #440]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0cf      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d908      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b63      	ldr	r3, [pc, #396]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4960      	ldr	r1, [pc, #384]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04c      	beq.n	8004008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b5a      	ldr	r3, [pc, #360]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d121      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0a6      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8e:	4b54      	ldr	r3, [pc, #336]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e09a      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e08e      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e086      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4943      	ldr	r1, [pc, #268]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fb7a 	bl	80016d0 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fd fb76 	bl	80016d0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e06e      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 020c 	and.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d1eb      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004020:	429a      	cmp	r2, r3
 8004022:	d208      	bcs.n	8004036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	492b      	ldr	r1, [pc, #172]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d210      	bcs.n	8004066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 0207 	bic.w	r2, r3, #7
 800404c:	4923      	ldr	r1, [pc, #140]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_RCC_ClockConfig+0x1ec>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e036      	b.n	80040d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4918      	ldr	r1, [pc, #96]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4910      	ldr	r1, [pc, #64]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040a4:	f000 f824 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	490b      	ldr	r1, [pc, #44]	; (80040e4 <HAL_RCC_ClockConfig+0x1f4>)
 80040b6:	5ccb      	ldrb	r3, [r1, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_ClockConfig+0x1fc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fab1 	bl	8001630 <HAL_InitTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040d2:	7afb      	ldrb	r3, [r7, #11]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08009718 	.word	0x08009718
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d121      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d11e      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004124:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	e005      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800414c:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d102      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e004      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d101      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 8004176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d134      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0xa6>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xac>
 8004194:	e005      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	e005      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 800419e:	617b      	str	r3, [r7, #20]
      break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	617b      	str	r3, [r7, #20]
      break;
 80041a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	3301      	adds	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	fb03 f202 	mul.w	r2, r3, r2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	0e5b      	lsrs	r3, r3, #25
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	3301      	adds	r3, #1
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041e8:	69bb      	ldr	r3, [r7, #24]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08009730 	.word	0x08009730
 8004200:	00f42400 	.word	0x00f42400
 8004204:	007a1200 	.word	0x007a1200

08004208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCC_GetHCLKFreq+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004224:	f7ff fff0 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	08009728 	.word	0x08009728

0800424c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004250:	f7ff ffda 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0adb      	lsrs	r3, r3, #11
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	08009728 	.word	0x08009728

08004278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004284:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004290:	f7ff f922 	bl	80034d8 <HAL_PWREx_GetVoltageRange>
 8004294:	6178      	str	r0, [r7, #20]
 8004296:	e014      	b.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042b0:	f7ff f912 	bl	80034d8 <HAL_PWREx_GetVoltageRange>
 80042b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042b6:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c8:	d10b      	bne.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d919      	bls.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2ba0      	cmp	r3, #160	; 0xa0
 80042d4:	d902      	bls.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d6:	2302      	movs	r3, #2
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e013      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042dc:	2301      	movs	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e010      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d902      	bls.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042e8:	2303      	movs	r3, #3
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e00a      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d102      	bne.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f4:	2302      	movs	r3, #2
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	e004      	b.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d101      	bne.n	8004304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004300:	2301      	movs	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 0207 	bic.w	r2, r3, #7
 800430c:	4909      	ldr	r1, [pc, #36]	; (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	40022000 	.word	0x40022000

08004338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004340:	2300      	movs	r3, #0
 8004342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004344:	2300      	movs	r3, #0
 8004346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004350:	2b00      	cmp	r3, #0
 8004352:	d041      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800435c:	d02a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800435e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004362:	d824      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004368:	d008      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800436a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800436e:	d81e      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004378:	d010      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800437a:	e018      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800437c:	4b86      	ldr	r3, [pc, #536]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a85      	ldr	r2, [pc, #532]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004386:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004388:	e015      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 facb 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3320      	adds	r3, #32
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fbb6 	bl	8004b14 <RCCEx_PLLSAI2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	74fb      	strb	r3, [r7, #19]
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043bc:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	4973      	ldr	r1, [pc, #460]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d041      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043ec:	d02a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043f2:	d824      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f8:	d008      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043fe:	d81e      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d010      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800440a:	e018      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a61      	ldr	r2, [pc, #388]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004418:	e015      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fa83 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800442a:	e00c      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3320      	adds	r3, #32
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb6e 	bl	8004b14 <RCCEx_PLLSAI2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
      break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800444c:	4b52      	ldr	r3, [pc, #328]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445a:	494f      	ldr	r1, [pc, #316]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a0 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4a40      	ldr	r2, [pc, #256]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	; 0x58
 800449c:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3a      	ldr	r2, [pc, #232]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b8:	f7fd f90a 	bl	80016d0 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fd f906 	bl	80016d0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	74fb      	strb	r3, [r7, #19]
        break;
 80044d2:	e005      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e6:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	d019      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a20      	ldr	r2, [pc, #128]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd f8c5 	bl	80016d0 <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004548:	e00b      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd f8c1 	bl	80016d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d902      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	74fb      	strb	r3, [r7, #19]
            break;
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ec      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	4904      	ldr	r1, [pc, #16]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800458e:	e009      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a4:	7c7b      	ldrb	r3, [r7, #17]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b9e      	ldr	r3, [pc, #632]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	4a9d      	ldr	r2, [pc, #628]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4b98      	ldr	r3, [pc, #608]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f023 0203 	bic.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	4994      	ldr	r1, [pc, #592]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e4:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 020c 	bic.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	498c      	ldr	r1, [pc, #560]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004606:	4b87      	ldr	r3, [pc, #540]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	4983      	ldr	r1, [pc, #524]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	497b      	ldr	r1, [pc, #492]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800464a:	4b76      	ldr	r3, [pc, #472]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004658:	4972      	ldr	r1, [pc, #456]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466c:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	496a      	ldr	r1, [pc, #424]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	4961      	ldr	r1, [pc, #388]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b0:	4b5c      	ldr	r3, [pc, #368]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046be:	4959      	ldr	r1, [pc, #356]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d2:	4b54      	ldr	r3, [pc, #336]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	4950      	ldr	r1, [pc, #320]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	4948      	ldr	r1, [pc, #288]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004716:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	493f      	ldr	r1, [pc, #252]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d028      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004738:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004756:	d106      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b32      	ldr	r3, [pc, #200]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a31      	ldr	r2, [pc, #196]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	e011      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800476e:	d10c      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f8d8 	bl	800492c <RCCEx_PLLSAI1_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	491f      	ldr	r1, [pc, #124]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c0:	60d3      	str	r3, [r2, #12]
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f8a9 	bl	800492c <RCCEx_PLLSAI1_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	4908      	ldr	r1, [pc, #32]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004812:	d109      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a02      	ldr	r2, [pc, #8]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e014      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f877 	bl	800492c <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	4928      	ldr	r1, [pc, #160]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004876:	d10d      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2102      	movs	r1, #2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f854 	bl	800492c <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3320      	adds	r3, #32
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f935 	bl	8004b14 <RCCEx_PLLSAI2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d2:	490d      	ldr	r1, [pc, #52]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f6:	4904      	ldr	r1, [pc, #16]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004946:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800495e:	4b6c      	ldr	r3, [pc, #432]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d047      	beq.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e044      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d018      	beq.n	80049b2 <RCCEx_PLLSAI1_Config+0x86>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d825      	bhi.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x62>
 8004988:	2b02      	cmp	r3, #2
 800498a:	d009      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x74>
 800498c:	e020      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498e:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499e:	e01a      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a0:	4b5b      	ldr	r3, [pc, #364]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b0:	e013      	b.n	80049da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b2:	4b57      	ldr	r3, [pc, #348]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049be:	4b54      	ldr	r3, [pc, #336]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ce:	e006      	b.n	80049de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      break;
 80049d4:	e004      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049de:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	430b      	orrs	r3, r1
 80049fc:	4944      	ldr	r1, [pc, #272]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d17d      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a08:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a40      	ldr	r2, [pc, #256]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fc fe5c 	bl	80016d0 <HAL_GetTick>
 8004a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a1a:	e009      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a1c:	f7fc fe58 	bl	80016d0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d902      	bls.n	8004a30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2e:	e005      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a30:	4b37      	ldr	r3, [pc, #220]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ef      	bne.n	8004a1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d160      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d111      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	0211      	lsls	r1, r2, #8
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	0912      	lsrs	r2, r2, #4
 8004a60:	0452      	lsls	r2, r2, #17
 8004a62:	430a      	orrs	r2, r1
 8004a64:	492a      	ldr	r1, [pc, #168]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
 8004a6a:	e027      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d112      	bne.n	8004a98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6892      	ldr	r2, [r2, #8]
 8004a82:	0211      	lsls	r1, r2, #8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6912      	ldr	r2, [r2, #16]
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0552      	lsls	r2, r2, #21
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	491f      	ldr	r1, [pc, #124]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	610b      	str	r3, [r1, #16]
 8004a96:	e011      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6892      	ldr	r2, [r2, #8]
 8004aa8:	0211      	lsls	r1, r2, #8
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6952      	ldr	r2, [r2, #20]
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0652      	lsls	r2, r2, #25
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	4916      	ldr	r1, [pc, #88]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fc fe02 	bl	80016d0 <HAL_GetTick>
 8004acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ace:	e009      	b.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad0:	f7fc fdfe 	bl	80016d0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d902      	bls.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ae2:	e005      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	4904      	ldr	r1, [pc, #16]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000

08004b14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d018      	beq.n	8004b60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b2e:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0203 	and.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d10d      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
       ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b46:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
       ||
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d047      	beq.n	8004bea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	e044      	b.n	8004bea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d018      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0x86>
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d825      	bhi.n	8004bb8 <RCCEx_PLLSAI2_Config+0xa4>
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d002      	beq.n	8004b76 <RCCEx_PLLSAI2_Config+0x62>
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d009      	beq.n	8004b88 <RCCEx_PLLSAI2_Config+0x74>
 8004b74:	e020      	b.n	8004bb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b76:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11d      	bne.n	8004bbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b86:	e01a      	b.n	8004bbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b88:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b98:	e013      	b.n	8004bc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b9a:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ba6:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bb6:	e006      	b.n	8004bc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e004      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bce:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	430b      	orrs	r3, r1
 8004be4:	4939      	ldr	r1, [pc, #228]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d167      	bne.n	8004cc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fc fd68 	bl	80016d0 <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c02:	e009      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c04:	f7fc fd64 	bl	80016d0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d902      	bls.n	8004c18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	73fb      	strb	r3, [r7, #15]
        break;
 8004c16:	e005      	b.n	8004c24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ef      	bne.n	8004c04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14a      	bne.n	8004cc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d111      	bne.n	8004c54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	0211      	lsls	r1, r2, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68d2      	ldr	r2, [r2, #12]
 8004c46:	0912      	lsrs	r2, r2, #4
 8004c48:	0452      	lsls	r2, r2, #17
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	491f      	ldr	r1, [pc, #124]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	614b      	str	r3, [r1, #20]
 8004c52:	e011      	b.n	8004c78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6892      	ldr	r2, [r2, #8]
 8004c64:	0211      	lsls	r1, r2, #8
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6912      	ldr	r2, [r2, #16]
 8004c6a:	0852      	lsrs	r2, r2, #1
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	0652      	lsls	r2, r2, #25
 8004c70:	430a      	orrs	r2, r1
 8004c72:	4916      	ldr	r1, [pc, #88]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7fc fd24 	bl	80016d0 <HAL_GetTick>
 8004c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c8a:	e009      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c8c:	f7fc fd20 	bl	80016d0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d902      	bls.n	8004ca0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c9e:	e005      	b.n	8004cac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ef      	beq.n	8004c8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4904      	ldr	r1, [pc, #16]	; (8004ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e095      	b.n	8004e0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf2:	d009      	beq.n	8004d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61da      	str	r2, [r3, #28]
 8004cfa:	e005      	b.n	8004d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc faea 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d48:	d902      	bls.n	8004d50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e002      	b.n	8004d56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d5e:	d007      	beq.n	8004d70 <HAL_SPI_Init+0xa0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	f003 0204 	and.w	r2, r3, #4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dec:	ea42 0103 	orr.w	r1, r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e040      	b.n	8004eaa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fc faa3 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2224      	movs	r2, #36	; 0x24
 8004e42:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fae1 	bl	8005424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f826 	bl	8004eb4 <UART_SetConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e01b      	b.n	8004eaa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb60 	bl	8005568 <UART_CheckIdleState>
 8004ea8:	4603      	mov	r3, r0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b08a      	sub	sp, #40	; 0x28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4ba4      	ldr	r3, [pc, #656]	; (8005174 <UART_SetConfig+0x2c0>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a99      	ldr	r2, [pc, #612]	; (8005178 <UART_SetConfig+0x2c4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a90      	ldr	r2, [pc, #576]	; (800517c <UART_SetConfig+0x2c8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d126      	bne.n	8004f8c <UART_SetConfig+0xd8>
 8004f3e:	4b90      	ldr	r3, [pc, #576]	; (8005180 <UART_SetConfig+0x2cc>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d81b      	bhi.n	8004f84 <UART_SetConfig+0xd0>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0xa0>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e116      	b.n	800519a <UART_SetConfig+0x2e6>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e112      	b.n	800519a <UART_SetConfig+0x2e6>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e10e      	b.n	800519a <UART_SetConfig+0x2e6>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e10a      	b.n	800519a <UART_SetConfig+0x2e6>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e106      	b.n	800519a <UART_SetConfig+0x2e6>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7c      	ldr	r2, [pc, #496]	; (8005184 <UART_SetConfig+0x2d0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d138      	bne.n	8005008 <UART_SetConfig+0x154>
 8004f96:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <UART_SetConfig+0x2cc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d82d      	bhi.n	8005000 <UART_SetConfig+0x14c>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0xf8>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0d8      	b.n	800519a <UART_SetConfig+0x2e6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0d4      	b.n	800519a <UART_SetConfig+0x2e6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e0d0      	b.n	800519a <UART_SetConfig+0x2e6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e0cc      	b.n	800519a <UART_SetConfig+0x2e6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e0c8      	b.n	800519a <UART_SetConfig+0x2e6>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5e      	ldr	r2, [pc, #376]	; (8005188 <UART_SetConfig+0x2d4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d125      	bne.n	800505e <UART_SetConfig+0x1aa>
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <UART_SetConfig+0x2cc>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d016      	beq.n	800504e <UART_SetConfig+0x19a>
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d818      	bhi.n	8005056 <UART_SetConfig+0x1a2>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d00a      	beq.n	800503e <UART_SetConfig+0x18a>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d814      	bhi.n	8005056 <UART_SetConfig+0x1a2>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <UART_SetConfig+0x182>
 8005030:	2b10      	cmp	r3, #16
 8005032:	d008      	beq.n	8005046 <UART_SetConfig+0x192>
 8005034:	e00f      	b.n	8005056 <UART_SetConfig+0x1a2>
 8005036:	2300      	movs	r3, #0
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0ad      	b.n	800519a <UART_SetConfig+0x2e6>
 800503e:	2302      	movs	r3, #2
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e0a9      	b.n	800519a <UART_SetConfig+0x2e6>
 8005046:	2304      	movs	r3, #4
 8005048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504c:	e0a5      	b.n	800519a <UART_SetConfig+0x2e6>
 800504e:	2308      	movs	r3, #8
 8005050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005054:	e0a1      	b.n	800519a <UART_SetConfig+0x2e6>
 8005056:	2310      	movs	r3, #16
 8005058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505c:	e09d      	b.n	800519a <UART_SetConfig+0x2e6>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <UART_SetConfig+0x2d8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d125      	bne.n	80050b4 <UART_SetConfig+0x200>
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <UART_SetConfig+0x2cc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005072:	2bc0      	cmp	r3, #192	; 0xc0
 8005074:	d016      	beq.n	80050a4 <UART_SetConfig+0x1f0>
 8005076:	2bc0      	cmp	r3, #192	; 0xc0
 8005078:	d818      	bhi.n	80050ac <UART_SetConfig+0x1f8>
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d00a      	beq.n	8005094 <UART_SetConfig+0x1e0>
 800507e:	2b80      	cmp	r3, #128	; 0x80
 8005080:	d814      	bhi.n	80050ac <UART_SetConfig+0x1f8>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <UART_SetConfig+0x1d8>
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d008      	beq.n	800509c <UART_SetConfig+0x1e8>
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x1f8>
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e082      	b.n	800519a <UART_SetConfig+0x2e6>
 8005094:	2302      	movs	r3, #2
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e07e      	b.n	800519a <UART_SetConfig+0x2e6>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e07a      	b.n	800519a <UART_SetConfig+0x2e6>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e076      	b.n	800519a <UART_SetConfig+0x2e6>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e072      	b.n	800519a <UART_SetConfig+0x2e6>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a35      	ldr	r2, [pc, #212]	; (8005190 <UART_SetConfig+0x2dc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d12a      	bne.n	8005114 <UART_SetConfig+0x260>
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <UART_SetConfig+0x2cc>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050cc:	d01a      	beq.n	8005104 <UART_SetConfig+0x250>
 80050ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0x258>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d8:	d00c      	beq.n	80050f4 <UART_SetConfig+0x240>
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d815      	bhi.n	800510c <UART_SetConfig+0x258>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <UART_SetConfig+0x238>
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d008      	beq.n	80050fc <UART_SetConfig+0x248>
 80050ea:	e00f      	b.n	800510c <UART_SetConfig+0x258>
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e052      	b.n	800519a <UART_SetConfig+0x2e6>
 80050f4:	2302      	movs	r3, #2
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e04e      	b.n	800519a <UART_SetConfig+0x2e6>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e04a      	b.n	800519a <UART_SetConfig+0x2e6>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e046      	b.n	800519a <UART_SetConfig+0x2e6>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e042      	b.n	800519a <UART_SetConfig+0x2e6>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a17      	ldr	r2, [pc, #92]	; (8005178 <UART_SetConfig+0x2c4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d13a      	bne.n	8005194 <UART_SetConfig+0x2e0>
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <UART_SetConfig+0x2cc>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512c:	d01a      	beq.n	8005164 <UART_SetConfig+0x2b0>
 800512e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005132:	d81b      	bhi.n	800516c <UART_SetConfig+0x2b8>
 8005134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005138:	d00c      	beq.n	8005154 <UART_SetConfig+0x2a0>
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d815      	bhi.n	800516c <UART_SetConfig+0x2b8>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <UART_SetConfig+0x298>
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005148:	d008      	beq.n	800515c <UART_SetConfig+0x2a8>
 800514a:	e00f      	b.n	800516c <UART_SetConfig+0x2b8>
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e022      	b.n	800519a <UART_SetConfig+0x2e6>
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e01e      	b.n	800519a <UART_SetConfig+0x2e6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e01a      	b.n	800519a <UART_SetConfig+0x2e6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e016      	b.n	800519a <UART_SetConfig+0x2e6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e012      	b.n	800519a <UART_SetConfig+0x2e6>
 8005174:	efff69f3 	.word	0xefff69f3
 8005178:	40008000 	.word	0x40008000
 800517c:	40013800 	.word	0x40013800
 8005180:	40021000 	.word	0x40021000
 8005184:	40004400 	.word	0x40004400
 8005188:	40004800 	.word	0x40004800
 800518c:	40004c00 	.word	0x40004c00
 8005190:	40005000 	.word	0x40005000
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a9f      	ldr	r2, [pc, #636]	; (800541c <UART_SetConfig+0x568>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d17a      	bne.n	800529a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d824      	bhi.n	80051f6 <UART_SetConfig+0x342>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x300>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051e7 	.word	0x080051e7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051f7 	.word	0x080051f7
 80051d0:	080051f7 	.word	0x080051f7
 80051d4:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7ff f822 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 80051dc:	61f8      	str	r0, [r7, #28]
        break;
 80051de:	e010      	b.n	8005202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b8f      	ldr	r3, [pc, #572]	; (8005420 <UART_SetConfig+0x56c>)
 80051e2:	61fb      	str	r3, [r7, #28]
        break;
 80051e4:	e00d      	b.n	8005202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe ff83 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80051ea:	61f8      	str	r0, [r7, #28]
        break;
 80051ec:	e009      	b.n	8005202 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f2:	61fb      	str	r3, [r7, #28]
        break;
 80051f4:	e005      	b.n	8005202 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005200:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80fb 	beq.w	8005400 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	429a      	cmp	r2, r3
 8005218:	d305      	bcc.n	8005226 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	429a      	cmp	r2, r3
 8005224:	d903      	bls.n	800522e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800522c:	e0e8      	b.n	8005400 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2200      	movs	r2, #0
 8005232:	461c      	mov	r4, r3
 8005234:	4615      	mov	r5, r2
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	022b      	lsls	r3, r5, #8
 8005240:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005244:	0222      	lsls	r2, r4, #8
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	6849      	ldr	r1, [r1, #4]
 800524a:	0849      	lsrs	r1, r1, #1
 800524c:	2000      	movs	r0, #0
 800524e:	4688      	mov	r8, r1
 8005250:	4681      	mov	r9, r0
 8005252:	eb12 0a08 	adds.w	sl, r2, r8
 8005256:	eb43 0b09 	adc.w	fp, r3, r9
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005268:	4650      	mov	r0, sl
 800526a:	4659      	mov	r1, fp
 800526c:	f7fa ffac 	bl	80001c8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527e:	d308      	bcc.n	8005292 <UART_SetConfig+0x3de>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005286:	d204      	bcs.n	8005292 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e0b6      	b.n	8005400 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005298:	e0b2      	b.n	8005400 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d15e      	bne.n	8005362 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d828      	bhi.n	80052fe <UART_SetConfig+0x44a>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x400>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fe ffa2 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 80052dc:	61f8      	str	r0, [r7, #28]
        break;
 80052de:	e014      	b.n	800530a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7fe ffb4 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 80052e4:	61f8      	str	r0, [r7, #28]
        break;
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <UART_SetConfig+0x56c>)
 80052ea:	61fb      	str	r3, [r7, #28]
        break;
 80052ec:	e00d      	b.n	800530a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fe feff 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80052f2:	61f8      	str	r0, [r7, #28]
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	61fb      	str	r3, [r7, #28]
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d077      	beq.n	8005400 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	441a      	add	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d916      	bls.n	800535a <UART_SetConfig+0x4a6>
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d212      	bcs.n	800535a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f023 030f 	bic.w	r3, r3, #15
 800533c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	b29b      	uxth	r3, r3
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	b29a      	uxth	r2, r3
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	4313      	orrs	r3, r2
 800534e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	8afa      	ldrh	r2, [r7, #22]
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	e052      	b.n	8005400 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005360:	e04e      	b.n	8005400 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005366:	2b08      	cmp	r3, #8
 8005368:	d827      	bhi.n	80053ba <UART_SetConfig+0x506>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <UART_SetConfig+0x4bc>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539d 	.word	0x0800539d
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053ab 	.word	0x080053ab
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053bb 	.word	0x080053bb
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005394:	f7fe ff44 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8005398:	61f8      	str	r0, [r7, #28]
        break;
 800539a:	e014      	b.n	80053c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fe ff56 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 80053a0:	61f8      	str	r0, [r7, #28]
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <UART_SetConfig+0x56c>)
 80053a6:	61fb      	str	r3, [r7, #28]
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fe fea1 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80053ae:	61f8      	str	r0, [r7, #28]
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	61fb      	str	r3, [r7, #28]
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c4:	bf00      	nop
    }

    if (pclk != 0U)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d019      	beq.n	8005400 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	085a      	lsrs	r2, r3, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	d909      	bls.n	80053fa <UART_SetConfig+0x546>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d205      	bcs.n	80053fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	e002      	b.n	8005400 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800540c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	; 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541a:	bf00      	nop
 800541c:	40008000 	.word	0x40008000
 8005420:	00f42400 	.word	0x00f42400

08005424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01a      	beq.n	800553a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005522:	d10a      	bne.n	800553a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  }
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b098      	sub	sp, #96	; 0x60
 800556c:	af02      	add	r7, sp, #8
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005578:	f7fc f8aa 	bl	80016d0 <HAL_GetTick>
 800557c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b08      	cmp	r3, #8
 800558a:	d12e      	bne.n	80055ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800558c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f88c 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d021      	beq.n	80055ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ba:	653b      	str	r3, [r7, #80]	; 0x50
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
 80055c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e062      	b.n	80056b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d149      	bne.n	800568c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005600:	2200      	movs	r2, #0
 8005602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f856 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d03c      	beq.n	800568c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	623b      	str	r3, [r7, #32]
   return(result);
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
 8005632:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60fb      	str	r3, [r7, #12]
   return(result);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	64bb      	str	r3, [r7, #72]	; 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005664:	61fa      	str	r2, [r7, #28]
 8005666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	617b      	str	r3, [r7, #20]
   return(result);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e011      	b.n	80056b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3758      	adds	r7, #88	; 0x58
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	e049      	b.n	800575e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d045      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fb fffd 	bl	80016d0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e048      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d031      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b08      	cmp	r3, #8
 8005706:	d110      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2208      	movs	r2, #8
 800570e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f838 	bl	8005786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2208      	movs	r2, #8
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e029      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005738:	d111      	bne.n	800575e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f81e 	bl	8005786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e00f      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d0a6      	beq.n	80056ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005786:	b480      	push	{r7}
 8005788:	b095      	sub	sp, #84	; 0x54
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	643b      	str	r3, [r7, #64]	; 0x40
 80057ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e5      	bne.n	80057c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d118      	bne.n	800582e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	60bb      	str	r3, [r7, #8]
   return(result);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0310 	bic.w	r3, r3, #16
 8005810:	647b      	str	r3, [r7, #68]	; 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	613b      	str	r3, [r7, #16]
   return(result);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005842:	bf00      	nop
 8005844:	3754      	adds	r7, #84	; 0x54
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584e:	b084      	sub	sp, #16
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	f107 001c 	add.w	r0, r7, #28
 800585c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 fa1d 	bl	8006cac <USB_CoreReset>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
 8005888:	e005      	b.n	8005896 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a2:	b004      	add	sp, #16
 80058a4:	4770      	bx	lr
	...

080058a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d165      	bne.n	8005988 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a3e      	ldr	r2, [pc, #248]	; (80059b8 <USB_SetTurnaroundTime+0x110>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d906      	bls.n	80058d2 <USB_SetTurnaroundTime+0x2a>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a3d      	ldr	r2, [pc, #244]	; (80059bc <USB_SetTurnaroundTime+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d202      	bcs.n	80058d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058cc:	230f      	movs	r3, #15
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e05c      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4a39      	ldr	r2, [pc, #228]	; (80059bc <USB_SetTurnaroundTime+0x114>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d306      	bcc.n	80058e8 <USB_SetTurnaroundTime+0x40>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4a38      	ldr	r2, [pc, #224]	; (80059c0 <USB_SetTurnaroundTime+0x118>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d202      	bcs.n	80058e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058e2:	230e      	movs	r3, #14
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e051      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a35      	ldr	r2, [pc, #212]	; (80059c0 <USB_SetTurnaroundTime+0x118>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d306      	bcc.n	80058fe <USB_SetTurnaroundTime+0x56>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a34      	ldr	r2, [pc, #208]	; (80059c4 <USB_SetTurnaroundTime+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d202      	bcs.n	80058fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058f8:	230d      	movs	r3, #13
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e046      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <USB_SetTurnaroundTime+0x11c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d306      	bcc.n	8005914 <USB_SetTurnaroundTime+0x6c>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <USB_SetTurnaroundTime+0x120>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d802      	bhi.n	8005914 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800590e:	230c      	movs	r3, #12
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e03b      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <USB_SetTurnaroundTime+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d906      	bls.n	800592a <USB_SetTurnaroundTime+0x82>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <USB_SetTurnaroundTime+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d802      	bhi.n	800592a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005924:	230b      	movs	r3, #11
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e030      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <USB_SetTurnaroundTime+0x124>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d906      	bls.n	8005940 <USB_SetTurnaroundTime+0x98>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <USB_SetTurnaroundTime+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d802      	bhi.n	8005940 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800593a:	230a      	movs	r3, #10
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e025      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <USB_SetTurnaroundTime+0x128>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d906      	bls.n	8005956 <USB_SetTurnaroundTime+0xae>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <USB_SetTurnaroundTime+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d202      	bcs.n	8005956 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005950:	2309      	movs	r3, #9
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e01a      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <USB_SetTurnaroundTime+0x12c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d306      	bcc.n	800596c <USB_SetTurnaroundTime+0xc4>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <USB_SetTurnaroundTime+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005966:	2308      	movs	r3, #8
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e00f      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <USB_SetTurnaroundTime+0x130>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d906      	bls.n	8005982 <USB_SetTurnaroundTime+0xda>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a19      	ldr	r2, [pc, #100]	; (80059dc <USB_SetTurnaroundTime+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d202      	bcs.n	8005982 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800597c:	2307      	movs	r3, #7
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e004      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005982:	2306      	movs	r3, #6
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e001      	b.n	800598c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005988:	2309      	movs	r3, #9
 800598a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00d8acbf 	.word	0x00d8acbf
 80059bc:	00e4e1c0 	.word	0x00e4e1c0
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	01067380 	.word	0x01067380
 80059c8:	011a499f 	.word	0x011a499f
 80059cc:	01312cff 	.word	0x01312cff
 80059d0:	014ca43f 	.word	0x014ca43f
 80059d4:	016e3600 	.word	0x016e3600
 80059d8:	01a6ab1f 	.word	0x01a6ab1f
 80059dc:	01e84800 	.word	0x01e84800

080059e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d115      	bne.n	8005a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fb fe48 	bl	80016e8 <HAL_Delay>
      ms++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 f8ab 	bl	8006bba <USB_GetMode>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d01e      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b31      	cmp	r3, #49	; 0x31
 8005a6e:	d9f0      	bls.n	8005a52 <USB_SetCurrentMode+0x2e>
 8005a70:	e01a      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d115      	bne.n	8005aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a84:	2001      	movs	r0, #1
 8005a86:	f7fb fe2f 	bl	80016e8 <HAL_Delay>
      ms++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f892 	bl	8006bba <USB_GetMode>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USB_SetCurrentMode+0x84>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b31      	cmp	r3, #49	; 0x31
 8005aa0:	d9f0      	bls.n	8005a84 <USB_SetCurrentMode+0x60>
 8005aa2:	e001      	b.n	8005aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e005      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b32      	cmp	r3, #50	; 0x32
 8005aac:	d101      	bne.n	8005ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005abc:	b084      	sub	sp, #16
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e009      	b.n	8005af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3301      	adds	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b0e      	cmp	r3, #14
 8005af4:	d9f2      	bls.n	8005adc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11c      	bne.n	8005b36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e005      	b.n	8005b42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b4e:	2103      	movs	r1, #3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f959 	bl	8005e08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b56:	2110      	movs	r1, #16
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f8f1 	bl	8005d40 <USB_FlushTxFifo>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f91d 	bl	8005da8 <USB_FlushRxFifo>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2300      	movs	r3, #0
 8005b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	461a      	mov	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e043      	b.n	8005c2a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb8:	d118      	bne.n	8005bec <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e013      	b.n	8005bfe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e008      	b.n	8005bfe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	3301      	adds	r3, #1
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d3b7      	bcc.n	8005ba2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	e043      	b.n	8005cc0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4e:	d118      	bne.n	8005c82 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e013      	b.n	8005c94 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	e008      	b.n	8005c94 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3b7      	bcc.n	8005c38 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f043 0210 	orr.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <USB_DevInit+0x280>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f043 0208 	orr.w	r2, r3, #8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d107      	bne.n	8005d2a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d36:	b004      	add	sp, #16
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	803c3800 	.word	0x803c3800

08005d40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3301      	adds	r3, #1
 8005d52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <USB_FlushTxFifo+0x64>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e01b      	b.n	8005d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	daf2      	bge.n	8005d4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	019b      	lsls	r3, r3, #6
 8005d70:	f043 0220 	orr.w	r2, r3, #32
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <USB_FlushTxFifo+0x64>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e006      	b.n	8005d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d0f0      	beq.n	8005d78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	00030d40 	.word	0x00030d40

08005da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <USB_FlushRxFifo+0x5c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e018      	b.n	8005df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	daf2      	bge.n	8005db4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <USB_FlushRxFifo+0x5c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e006      	b.n	8005df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d0f0      	beq.n	8005dd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	00030d40 	.word	0x00030d40

08005e08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b087      	sub	sp, #28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0306 	and.w	r3, r3, #6
 8005e52:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d002      	beq.n	8005e60 <USB_GetDevSpeed+0x26>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	d102      	bne.n	8005e66 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e60:	2302      	movs	r3, #2
 8005e62:	75fb      	strb	r3, [r7, #23]
 8005e64:	e001      	b.n	8005e6a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005e66:	230f      	movs	r3, #15
 8005e68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d13a      	bne.n	8005f0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d155      	bne.n	8005f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e036      	b.n	8005f78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11a      	bne.n	8005f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	791b      	ldrb	r3, [r3, #4]
 8005f5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d161      	bne.n	8006068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fba:	d11f      	bne.n	8005ffc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601c:	4013      	ands	r3, r2
 800601e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	2101      	movs	r1, #1
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006040:	4013      	ands	r3, r2
 8006042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0159      	lsls	r1, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	440b      	add	r3, r1
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	4619      	mov	r1, r3
 8006060:	4b35      	ldr	r3, [pc, #212]	; (8006138 <USB_DeactivateEndpoint+0x1b0>)
 8006062:	4013      	ands	r3, r2
 8006064:	600b      	str	r3, [r1, #0]
 8006066:	e060      	b.n	800612a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800607e:	d11f      	bne.n	80060c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800609e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	43db      	mvns	r3, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4013      	ands	r3, r2
 80060e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	2101      	movs	r1, #1
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	43db      	mvns	r3, r3
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006104:	4013      	ands	r3, r2
 8006106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	0159      	lsls	r1, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	440b      	add	r3, r1
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	4619      	mov	r1, r3
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <USB_DeactivateEndpoint+0x1b4>)
 8006126:	4013      	ands	r3, r2
 8006128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	ec337800 	.word	0xec337800
 800613c:	eff37800 	.word	0xeff37800

08006140 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	f040 8128 	bne.w	80063ae <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d132      	bne.n	80061cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c4:	0cdb      	lsrs	r3, r3, #19
 80061c6:	04db      	lsls	r3, r3, #19
 80061c8:	6113      	str	r3, [r2, #16]
 80061ca:	e092      	b.n	80062f2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	0cdb      	lsrs	r3, r3, #19
 80061e8:	04db      	lsls	r3, r3, #19
 80061ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800620a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800620e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11a      	bne.n	800624c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d903      	bls.n	800622a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	e01b      	b.n	8006284 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6919      	ldr	r1, [r3, #16]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	440b      	add	r3, r1
 8006264:	1e59      	subs	r1, r3, #1
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	fbb1 f3f3 	udiv	r3, r1, r3
 800626e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006270:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <USB_EPStartXfer+0x368>)
 8006272:	400b      	ands	r3, r1
 8006274:	6939      	ldr	r1, [r7, #16]
 8006276:	0148      	lsls	r0, r1, #5
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	4401      	add	r1, r0
 800627c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006280:	4313      	orrs	r3, r2
 8006282:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	6939      	ldr	r1, [r7, #16]
 800629c:	0148      	lsls	r0, r1, #5
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	4401      	add	r1, r0
 80062a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d11f      	bne.n	80062f2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062f0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006310:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d015      	beq.n	8006346 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 8139 	beq.w	8006596 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	2101      	movs	r1, #1
 8006336:	fa01 f303 	lsl.w	r3, r1, r3
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4313      	orrs	r3, r2
 8006342:	634b      	str	r3, [r1, #52]	; 0x34
 8006344:	e127      	b.n	8006596 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e00f      	b.n	8006398 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006396:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68d9      	ldr	r1, [r3, #12]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9a6 	bl	80066f8 <USB_WritePacket>
 80063ac:	e0f3      	b.n	8006596 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c8:	0cdb      	lsrs	r3, r3, #19
 80063ca:	04db      	lsls	r3, r3, #19
 80063cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d12f      	bne.n	8006458 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006426:	6939      	ldr	r1, [r7, #16]
 8006428:	0148      	lsls	r0, r1, #5
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	4401      	add	r1, r0
 800642e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006432:	4313      	orrs	r3, r2
 8006434:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006454:	6113      	str	r3, [r2, #16]
 8006456:	e061      	b.n	800651c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d125      	bne.n	80064ac <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	0148      	lsls	r0, r1, #5
 800647a:	6979      	ldr	r1, [r7, #20]
 800647c:	4401      	add	r1, r0
 800647e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006482:	4313      	orrs	r3, r2
 8006484:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064a4:	6113      	str	r3, [r2, #16]
 80064a6:	e039      	b.n	800651c <USB_EPStartXfer+0x3dc>
 80064a8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	89fa      	ldrh	r2, [r7, #14]
 80064c8:	fb03 f202 	mul.w	r2, r3, r2
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	04d9      	lsls	r1, r3, #19
 80064e2:	4b2f      	ldr	r3, [pc, #188]	; (80065a0 <USB_EPStartXfer+0x460>)
 80064e4:	400b      	ands	r3, r1
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	0148      	lsls	r0, r1, #5
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	4401      	add	r1, r0
 80064ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064f2:	4313      	orrs	r3, r2
 80064f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650c:	6939      	ldr	r1, [r7, #16]
 800650e:	0148      	lsls	r0, r1, #5
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	4401      	add	r1, r0
 8006514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006518:	4313      	orrs	r3, r2
 800651a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d128      	bne.n	8006576 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d110      	bne.n	8006556 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	e00f      	b.n	8006576 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006574:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006594:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	1ff80000 	.word	0x1ff80000

080065a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d14a      	bne.n	8006658 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065da:	f040 8086 	bne.w	80066ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006600:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006624:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006632:	4293      	cmp	r3, r2
 8006634:	d902      	bls.n	800663c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
          break;
 800663a:	e056      	b.n	80066ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006654:	d0e7      	beq.n	8006626 <USB_EPStopXfer+0x82>
 8006656:	e048      	b.n	80066ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800666c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006670:	d13b      	bne.n	80066ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006694:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	7812      	ldrb	r2, [r2, #0]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d902      	bls.n	80066d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
          break;
 80066ce:	e00c      	b.n	80066ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e8:	d0e7      	beq.n	80066ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	460b      	mov	r3, r1
 8006708:	71fb      	strb	r3, [r7, #7]
 800670a:	4613      	mov	r3, r2
 800670c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006716:	88bb      	ldrh	r3, [r7, #4]
 8006718:	3303      	adds	r3, #3
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	e018      	b.n	8006756 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	031a      	lsls	r2, r3, #12
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	4413      	add	r3, r2
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	461a      	mov	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	3301      	adds	r3, #1
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3e2      	bcc.n	8006724 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3724      	adds	r7, #36	; 0x24
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800676c:	b480      	push	{r7}
 800676e:	b08b      	sub	sp, #44	; 0x2c
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	b29b      	uxth	r3, r3
 8006788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006792:	2300      	movs	r3, #0
 8006794:	623b      	str	r3, [r7, #32]
 8006796:	e014      	b.n	80067c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	3301      	adds	r3, #1
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	3301      	adds	r3, #1
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	3301      	adds	r3, #1
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	3301      	adds	r3, #1
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3e6      	bcc.n	8006798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ca:	8bfb      	ldrh	r3, [r7, #30]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01e      	beq.n	800680e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	461a      	mov	r2, r3
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	701a      	strb	r2, [r3, #0]
      i++;
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	3301      	adds	r3, #1
 80067fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	3301      	adds	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	3b01      	subs	r3, #1
 8006806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006808:	8bfb      	ldrh	r3, [r7, #30]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1ea      	bne.n	80067e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006810:	4618      	mov	r0, r3
 8006812:	372c      	adds	r7, #44	; 0x2c
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d12c      	bne.n	8006892 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	db12      	blt.n	8006870 <USB_EPSetStall+0x54>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800686e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e02b      	b.n	80068ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	db12      	blt.n	80068ca <USB_EPSetStall+0xae>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00f      	beq.n	80068ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d128      	bne.n	8006966 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006932:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d003      	beq.n	8006944 <USB_EPClearStall+0x4c>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	791b      	ldrb	r3, [r3, #4]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d138      	bne.n	80069b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e027      	b.n	80069b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	791b      	ldrb	r3, [r3, #4]
 800698a:	2b03      	cmp	r3, #3
 800698c:	d003      	beq.n	8006996 <USB_EPClearStall+0x9e>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d10f      	bne.n	80069b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	4013      	ands	r3, r2
 8006adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	b29b      	uxth	r3, r3
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b50:	68bb      	ldr	r3, [r7, #8]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b087      	sub	sp, #28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	01db      	lsls	r3, r3, #7
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bac:	68bb      	ldr	r3, [r7, #8]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	333c      	adds	r3, #60	; 0x3c
 8006c2e:	3304      	adds	r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4a1c      	ldr	r2, [pc, #112]	; (8006ca8 <USB_EP0_OutStart+0x8c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d90a      	bls.n	8006c52 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4c:	d101      	bne.n	8006c52 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e024      	b.n	8006c9c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c80:	f043 0318 	orr.w	r3, r3, #24
 8006c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c98:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	4f54300a 	.word	0x4f54300a

08006cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <USB_CoreReset+0x64>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e01b      	b.n	8006d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	daf2      	bge.n	8006cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <USB_CoreReset+0x64>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e006      	b.n	8006d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d0f0      	beq.n	8006ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	00030d40 	.word	0x00030d40

08006d14 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006d20:	201c      	movs	r0, #28
 8006d22:	f002 fc67 	bl	80095f4 <USBD_static_malloc>
 8006d26:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	32b0      	adds	r2, #176	; 0xb0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e08a      	b.n	8006e58 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	32b0      	adds	r2, #176	; 0xb0
 8006d4c:	68f9      	ldr	r1, [r7, #12]
 8006d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	32b0      	adds	r2, #176	; 0xb0
 8006d5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7c1b      	ldrb	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11b      	bne.n	8006da6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d6e:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <USBD_CUSTOM_HID_Init+0x14c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 020f 	and.w	r2, r3, #15
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	3326      	adds	r3, #38	; 0x26
 8006d84:	2205      	movs	r2, #5
 8006d86:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <USBD_CUSTOM_HID_Init+0x150>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 020f 	and.w	r2, r3, #15
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006da0:	2205      	movs	r2, #5
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e01a      	b.n	8006ddc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006da6:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <USBD_CUSTOM_HID_Init+0x14c>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f003 020f 	and.w	r2, r3, #15
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	3326      	adds	r3, #38	; 0x26
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <USBD_CUSTOM_HID_Init+0x150>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 020f 	and.w	r2, r3, #15
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006dd8:	2205      	movs	r2, #5
 8006dda:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006ddc:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <USBD_CUSTOM_HID_Init+0x14c>)
 8006dde:	7819      	ldrb	r1, [r3, #0]
 8006de0:	2302      	movs	r3, #2
 8006de2:	2203      	movs	r2, #3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f002 fa05 	bl	80091f4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <USBD_CUSTOM_HID_Init+0x14c>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	2201      	movs	r2, #1
 8006e02:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006e04:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <USBD_CUSTOM_HID_Init+0x150>)
 8006e06:	7819      	ldrb	r1, [r3, #0]
 8006e08:	2302      	movs	r3, #2
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 f9f1 	bl	80091f4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <USBD_CUSTOM_HID_Init+0x150>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	33b0      	adds	r3, #176	; 0xb0
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <USBD_CUSTOM_HID_Init+0x150>)
 8006e4a:	7819      	ldrb	r1, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	2307      	movs	r3, #7
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 fb49 	bl	80094e8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000086 	.word	0x20000086
 8006e64:	20000087 	.word	0x20000087

08006e68 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006e74:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 f9f8 	bl	8009270 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006e80:	4b34      	ldr	r3, [pc, #208]	; (8006f54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3324      	adds	r3, #36	; 0x24
 8006e96:	2200      	movs	r2, #0
 8006e98:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006e9a:	4b2e      	ldr	r3, [pc, #184]	; (8006f54 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 020f 	and.w	r2, r3, #15
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3326      	adds	r3, #38	; 0x26
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f002 f9d8 	bl	8009270 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006ec0:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 020f 	and.w	r2, r3, #15
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ed8:	2200      	movs	r2, #0
 8006eda:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006edc:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	32b0      	adds	r2, #176	; 0xb0
 8006f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01f      	beq.n	8006f4a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	33b0      	adds	r3, #176	; 0xb0
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	; 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f002 fb6f 	bl	8009610 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32b0      	adds	r2, #176	; 0xb0
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000086 	.word	0x20000086
 8006f58:	20000087 	.word	0x20000087

08006f5c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	32b0      	adds	r2, #176	; 0xb0
 8006f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f74:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e0f8      	b.n	8007182 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d056      	beq.n	800704a <USBD_CUSTOM_HID_Setup+0xee>
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	f040 80e8 	bne.w	8007172 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	3b02      	subs	r3, #2
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d846      	bhi.n	800703a <USBD_CUSTOM_HID_Setup+0xde>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <USBD_CUSTOM_HID_Setup+0x58>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	08006feb 	.word	0x08006feb
 8006fbc:	0800703b 	.word	0x0800703b
 8006fc0:	0800703b 	.word	0x0800703b
 8006fc4:	0800703b 	.word	0x0800703b
 8006fc8:	0800703b 	.word	0x0800703b
 8006fcc:	0800703b 	.word	0x0800703b
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	08006ffb 	.word	0x08006ffb
 8006fd8:	08006fdd 	.word	0x08006fdd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	885b      	ldrh	r3, [r3, #2]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	609a      	str	r2, [r3, #8]
          break;
 8006fe8:	e02e      	b.n	8007048 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3308      	adds	r3, #8
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fcd0 	bl	8008998 <USBD_CtlSendData>
          break;
 8006ff8:	e026      	b.n	8007048 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	60da      	str	r2, [r3, #12]
          break;
 800700a:	e01d      	b.n	8007048 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	330c      	adds	r3, #12
 8007010:	2201      	movs	r2, #1
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fcbf 	bl	8008998 <USBD_CtlSendData>
          break;
 800701a:	e015      	b.n	8007048 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2201      	movs	r2, #1
 8007020:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007022:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	88db      	ldrh	r3, [r3, #6]
 8007028:	2b07      	cmp	r3, #7
 800702a:	bf28      	it	cs
 800702c:	2307      	movcs	r3, #7
 800702e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007030:	461a      	mov	r2, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fcdc 	bl	80089f0 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007038:	e006      	b.n	8007048 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fc3a 	bl	80088b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	75fb      	strb	r3, [r7, #23]
          break;
 8007046:	bf00      	nop
      }
      break;
 8007048:	e09a      	b.n	8007180 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b0b      	cmp	r3, #11
 8007050:	f200 8086 	bhi.w	8007160 <USBD_CUSTOM_HID_Setup+0x204>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <USBD_CUSTOM_HID_Setup+0x100>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	0800708d 	.word	0x0800708d
 8007060:	0800716f 	.word	0x0800716f
 8007064:	08007161 	.word	0x08007161
 8007068:	08007161 	.word	0x08007161
 800706c:	08007161 	.word	0x08007161
 8007070:	08007161 	.word	0x08007161
 8007074:	080070b7 	.word	0x080070b7
 8007078:	08007161 	.word	0x08007161
 800707c:	08007161 	.word	0x08007161
 8007080:	08007161 	.word	0x08007161
 8007084:	0800710f 	.word	0x0800710f
 8007088:	08007139 	.word	0x08007139
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b03      	cmp	r3, #3
 8007096:	d107      	bne.n	80070a8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007098:	f107 030e 	add.w	r3, r7, #14
 800709c:	2202      	movs	r2, #2
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fc79 	bl	8008998 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070a6:	e063      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fc03 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	75fb      	strb	r3, [r7, #23]
          break;
 80070b4:	e05c      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	0a1b      	lsrs	r3, r3, #8
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	d110      	bne.n	80070e4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	88db      	ldrh	r3, [r3, #6]
 80070c6:	2b1d      	cmp	r3, #29
 80070c8:	bf28      	it	cs
 80070ca:	231d      	movcs	r3, #29
 80070cc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	33b0      	adds	r3, #176	; 0xb0
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	e00d      	b.n	8007100 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	885b      	ldrh	r3, [r3, #2]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b21      	cmp	r3, #33	; 0x21
 80070ee:	d107      	bne.n	8007100 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <USBD_CUSTOM_HID_Setup+0x230>)
 80070f2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	88db      	ldrh	r3, [r3, #6]
 80070f8:	2b09      	cmp	r3, #9
 80070fa:	bf28      	it	cs
 80070fc:	2309      	movcs	r3, #9
 80070fe:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007100:	8bfb      	ldrh	r3, [r7, #30]
 8007102:	461a      	mov	r2, r3
 8007104:	69b9      	ldr	r1, [r7, #24]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fc46 	bl	8008998 <USBD_CtlSendData>
          break;
 800710c:	e030      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d107      	bne.n	800712a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3310      	adds	r3, #16
 800711e:	2201      	movs	r2, #1
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fc38 	bl	8008998 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007128:	e022      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 fbc2 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	75fb      	strb	r3, [r7, #23]
          break;
 8007136:	e01b      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b03      	cmp	r3, #3
 8007142:	d106      	bne.n	8007152 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007150:	e00e      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fbae 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800715a:	2303      	movs	r3, #3
 800715c:	75fb      	strb	r3, [r7, #23]
          break;
 800715e:	e007      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fba7 	bl	80088b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	75fb      	strb	r3, [r7, #23]
          break;
 800716c:	e000      	b.n	8007170 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800716e:	bf00      	nop
      }
      break;
 8007170:	e006      	b.n	8007180 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fb9e 	bl	80088b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800717a:	2303      	movs	r3, #3
 800717c:	75fb      	strb	r3, [r7, #23]
      break;
 800717e:	bf00      	nop
  }
  return (uint8_t)ret;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000070 	.word	0x20000070

08007190 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	32b0      	adds	r2, #176	; 0xb0
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e017      	b.n	80071e8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d110      	bne.n	80071e6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	7e1b      	ldrb	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2201      	movs	r2, #1
 80071d0:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <USBD_CUSTOM_HID_SendReport+0x60>)
 80071d4:	7819      	ldrb	r1, [r3, #0]
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f002 f94c 	bl	8009478 <USBD_LL_Transmit>
 80071e0:	e001      	b.n	80071e6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000086 	.word	0x20000086

080071f4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80071fc:	2181      	movs	r1, #129	; 0x81
 80071fe:	4815      	ldr	r0, [pc, #84]	; (8007254 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007200:	f000 fcf7 	bl	8007bf2 <USBD_GetEpDesc>
 8007204:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007206:	2101      	movs	r1, #1
 8007208:	4812      	ldr	r0, [pc, #72]	; (8007254 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800720a:	f000 fcf2 	bl	8007bf2 <USBD_GetEpDesc>
 800720e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f042 0202 	orr.w	r2, r2, #2
 800721e:	711a      	strb	r2, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2205      	movs	r2, #5
 8007228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2200      	movs	r2, #0
 8007234:	f042 0202 	orr.w	r2, r2, #2
 8007238:	711a      	strb	r2, [r3, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2205      	movs	r2, #5
 8007242:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2229      	movs	r2, #41	; 0x29
 8007248:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800724a:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000044 	.word	0x20000044

08007258 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007260:	2181      	movs	r1, #129	; 0x81
 8007262:	4815      	ldr	r0, [pc, #84]	; (80072b8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007264:	f000 fcc5 	bl	8007bf2 <USBD_GetEpDesc>
 8007268:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800726a:	2101      	movs	r1, #1
 800726c:	4812      	ldr	r0, [pc, #72]	; (80072b8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800726e:	f000 fcc0 	bl	8007bf2 <USBD_GetEpDesc>
 8007272:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f042 0202 	orr.w	r2, r2, #2
 8007282:	711a      	strb	r2, [r3, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2205      	movs	r2, #5
 800728c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	f042 0202 	orr.w	r2, r2, #2
 800729c:	711a      	strb	r2, [r3, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2205      	movs	r2, #5
 80072a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2229      	movs	r2, #41	; 0x29
 80072ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80072ae:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000044 	.word	0x20000044

080072bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80072c4:	2181      	movs	r1, #129	; 0x81
 80072c6:	4815      	ldr	r0, [pc, #84]	; (800731c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80072c8:	f000 fc93 	bl	8007bf2 <USBD_GetEpDesc>
 80072cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80072ce:	2101      	movs	r1, #1
 80072d0:	4812      	ldr	r0, [pc, #72]	; (800731c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80072d2:	f000 fc8e 	bl	8007bf2 <USBD_GetEpDesc>
 80072d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f042 0202 	orr.w	r2, r2, #2
 80072e6:	711a      	strb	r2, [r3, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2205      	movs	r2, #5
 80072f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f042 0202 	orr.w	r2, r2, #2
 8007300:	711a      	strb	r2, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2205      	movs	r2, #5
 800730a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2229      	movs	r2, #41	; 0x29
 8007310:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007312:	4b02      	ldr	r3, [pc, #8]	; (800731c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000044 	.word	0x20000044

08007320 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32b0      	adds	r2, #176	; 0xb0
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	2200      	movs	r2, #0
 800733c:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32b0      	adds	r2, #176	; 0xb0
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	e017      	b.n	800739e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	32b0      	adds	r2, #176	; 0xb0
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	33b0      	adds	r3, #176	; 0xb0
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	7810      	ldrb	r0, [r2, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	7852      	ldrb	r2, [r2, #1]
 8007398:	4611      	mov	r1, r2
 800739a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	32b0      	adds	r2, #176	; 0xb0
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e016      	b.n	80073f6 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d111      	bne.n	80073f4 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	33b0      	adds	r3, #176	; 0xb0
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	7810      	ldrb	r0, [r2, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	7852      	ldrb	r2, [r2, #1]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220a      	movs	r2, #10
 800740c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	2000007c 	.word	0x2000007c

08007420 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e009      	b.n	8007448 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	33b0      	adds	r3, #176	; 0xb0
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007468:	2303      	movs	r3, #3
 800746a:	e01f      	b.n	80074ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	79fa      	ldrb	r2, [r7, #7]
 800749e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f001 fe29 	bl	80090f8 <USBD_LL_Init>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e025      	b.n	8007518 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	32ae      	adds	r2, #174	; 0xae
 80074de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00f      	beq.n	8007508 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	f107 020e 	add.w	r2, r7, #14
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fe31 	bl	8009190 <USBD_LL_Start>
 800752e:	4603      	mov	r3, r0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	4611      	mov	r1, r2
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	4611      	mov	r1, r2
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f938 	bl	8008842 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075e0:	461a      	mov	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d01a      	beq.n	800762c <USBD_LL_SetupStage+0x72>
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d822      	bhi.n	8007640 <USBD_LL_SetupStage+0x86>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <USBD_LL_SetupStage+0x4a>
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d00a      	beq.n	8007618 <USBD_LL_SetupStage+0x5e>
 8007602:	e01d      	b.n	8007640 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb65 	bl	8007cdc <USBD_StdDevReq>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
      break;
 8007616:	e020      	b.n	800765a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbcd 	bl	8007dc0 <USBD_StdItfReq>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
      break;
 800762a:	e016      	b.n	800765a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc2f 	bl	8007e98 <USBD_StdEPReq>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]
      break;
 800763e:	e00c      	b.n	800765a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800764a:	b2db      	uxtb	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fe44 	bl	80092dc <USBD_LL_StallEP>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]
      break;
 8007658:	bf00      	nop
  }

  return ret;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	460b      	mov	r3, r1
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d16e      	bne.n	800775a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800768a:	2b03      	cmp	r3, #3
 800768c:	f040 8098 	bne.w	80077c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	429a      	cmp	r2, r3
 800769a:	d913      	bls.n	80076c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	1ad2      	subs	r2, r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4293      	cmp	r3, r2
 80076b4:	bf28      	it	cs
 80076b6:	4613      	movcs	r3, r2
 80076b8:	461a      	mov	r2, r3
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f001 f9b4 	bl	8008a2a <USBD_CtlContinueRx>
 80076c2:	e07d      	b.n	80077c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d014      	beq.n	80076fc <USBD_LL_DataOutStage+0x98>
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d81d      	bhi.n	8007712 <USBD_LL_DataOutStage+0xae>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <USBD_LL_DataOutStage+0x7c>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d003      	beq.n	80076e6 <USBD_LL_DataOutStage+0x82>
 80076de:	e018      	b.n	8007712 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75bb      	strb	r3, [r7, #22]
            break;
 80076e4:	e018      	b.n	8007718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	4619      	mov	r1, r3
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fa64 	bl	8007bbe <USBD_CoreFindIF>
 80076f6:	4603      	mov	r3, r0
 80076f8:	75bb      	strb	r3, [r7, #22]
            break;
 80076fa:	e00d      	b.n	8007718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007702:	b2db      	uxtb	r3, r3
 8007704:	4619      	mov	r1, r3
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fa66 	bl	8007bd8 <USBD_CoreFindEP>
 800770c:	4603      	mov	r3, r0
 800770e:	75bb      	strb	r3, [r7, #22]
            break;
 8007710:	e002      	b.n	8007718 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	75bb      	strb	r3, [r7, #22]
            break;
 8007716:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007718:	7dbb      	ldrb	r3, [r7, #22]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d119      	bne.n	8007752 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d113      	bne.n	8007752 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800772a:	7dba      	ldrb	r2, [r7, #22]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	32ae      	adds	r2, #174	; 0xae
 8007730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800773a:	7dba      	ldrb	r2, [r7, #22]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007742:	7dba      	ldrb	r2, [r7, #22]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	32ae      	adds	r2, #174	; 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 f97a 	bl	8008a4c <USBD_CtlSendStatus>
 8007758:	e032      	b.n	80077c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	b2db      	uxtb	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fa37 	bl	8007bd8 <USBD_CoreFindEP>
 800776a:	4603      	mov	r3, r0
 800776c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800776e:	7dbb      	ldrb	r3, [r7, #22]
 8007770:	2bff      	cmp	r3, #255	; 0xff
 8007772:	d025      	beq.n	80077c0 <USBD_LL_DataOutStage+0x15c>
 8007774:	7dbb      	ldrb	r3, [r7, #22]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d122      	bne.n	80077c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d117      	bne.n	80077b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	32ae      	adds	r2, #174	; 0xae
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00f      	beq.n	80077b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007796:	7dba      	ldrb	r2, [r7, #22]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800779e:	7dba      	ldrb	r2, [r7, #22]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	32ae      	adds	r2, #174	; 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	7afa      	ldrb	r2, [r7, #11]
 80077ac:	4611      	mov	r1, r2
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	4798      	blx	r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	e000      	b.n	80077c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	460b      	mov	r3, r1
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d16f      	bne.n	80078be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3314      	adds	r3, #20
 80077e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d15a      	bne.n	80078a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d914      	bls.n	8007824 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	1ad2      	subs	r2, r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	461a      	mov	r2, r3
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f001 f8dc 	bl	80089ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007816:	2300      	movs	r3, #0
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f001 fe63 	bl	80094e8 <USBD_LL_PrepareReceive>
 8007822:	e03f      	b.n	80078a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d11c      	bne.n	800786a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007838:	429a      	cmp	r2, r3
 800783a:	d316      	bcc.n	800786a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007846:	429a      	cmp	r2, r3
 8007848:	d20f      	bcs.n	800786a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f001 f8bd 	bl	80089ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785c:	2300      	movs	r3, #0
 800785e:	2200      	movs	r2, #0
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 fe40 	bl	80094e8 <USBD_LL_PrepareReceive>
 8007868:	e01c      	b.n	80078a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b03      	cmp	r3, #3
 8007874:	d10f      	bne.n	8007896 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007896:	2180      	movs	r1, #128	; 0x80
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fd1f 	bl	80092dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f001 f8e7 	bl	8008a72 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d03a      	beq.n	8007924 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fe42 	bl	8007538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078bc:	e032      	b.n	8007924 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f985 	bl	8007bd8 <USBD_CoreFindEP>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2bff      	cmp	r3, #255	; 0xff
 80078d6:	d025      	beq.n	8007924 <USBD_LL_DataInStage+0x15a>
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d122      	bne.n	8007924 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d11c      	bne.n	8007924 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078ea:	7dfa      	ldrb	r2, [r7, #23]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	32ae      	adds	r2, #174	; 0xae
 80078f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d014      	beq.n	8007924 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078fa:	7dfa      	ldrb	r2, [r7, #23]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007902:	7dfa      	ldrb	r2, [r7, #23]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	32ae      	adds	r2, #174	; 0xae
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	7afa      	ldrb	r2, [r7, #11]
 8007910:	4611      	mov	r1, r2
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800791a:	7dbb      	ldrb	r3, [r7, #22]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007920:	7dbb      	ldrb	r3, [r7, #22]
 8007922:	e000      	b.n	8007926 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d014      	beq.n	8007994 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00e      	beq.n	8007994 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6852      	ldr	r2, [r2, #4]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	4611      	mov	r1, r2
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fc2a 	bl	80091f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2240      	movs	r2, #64	; 0x40
 80079ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	2200      	movs	r2, #0
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fc1c 	bl	80091f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2240      	movs	r2, #64	; 0x40
 80079c6:	621a      	str	r2, [r3, #32]

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	78fa      	ldrb	r2, [r7, #3]
 80079e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d006      	beq.n	8007a14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d106      	bne.n	8007a4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d110      	bne.n	8007a90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	32ae      	adds	r2, #174	; 0xae
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e01c      	b.n	8007af6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d115      	bne.n	8007af4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32ae      	adds	r2, #174	; 0xae
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	; 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	4611      	mov	r1, r2
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	32ae      	adds	r2, #174	; 0xae
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e01c      	b.n	8007b5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d115      	bne.n	8007b58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	32ae      	adds	r2, #174	; 0xae
 8007b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32ae      	adds	r2, #174	; 0xae
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	4611      	mov	r1, r2
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00e      	beq.n	8007bb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007be4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d920      	bls.n	8007c5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c22:	e013      	b.n	8007c4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c24:	f107 030a 	add.w	r3, r7, #10
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f000 f81b 	bl	8007c66 <USBD_GetNextDesc>
 8007c30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d108      	bne.n	8007c4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	789b      	ldrb	r3, [r3, #2]
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d008      	beq.n	8007c5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	885b      	ldrh	r3, [r3, #2]
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	897b      	ldrh	r3, [r7, #10]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d8e5      	bhi.n	8007c24 <USBD_GetEpDesc+0x32>
 8007c58:	e000      	b.n	8007c5c <USBD_GetEpDesc+0x6a>
          break;
 8007c5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c5c:	693b      	ldr	r3, [r7, #16]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	881a      	ldrh	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4413      	add	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c92:	68fb      	ldr	r3, [r7, #12]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cbe:	8a3b      	ldrh	r3, [r7, #16]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	b21a      	sxth	r2, r3
 8007cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	b21b      	sxth	r3, r3
 8007ccc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cce:	89fb      	ldrh	r3, [r7, #14]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	d005      	beq.n	8007d02 <USBD_StdDevReq+0x26>
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d857      	bhi.n	8007daa <USBD_StdDevReq+0xce>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00f      	beq.n	8007d1e <USBD_StdDevReq+0x42>
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d153      	bne.n	8007daa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	32ae      	adds	r2, #174	; 0xae
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1c:	e04a      	b.n	8007db4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	d83b      	bhi.n	8007d9e <USBD_StdDevReq+0xc2>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBD_StdDevReq+0x50>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d81 	.word	0x08007d81
 8007d30:	08007d95 	.word	0x08007d95
 8007d34:	08007d9f 	.word	0x08007d9f
 8007d38:	08007d8b 	.word	0x08007d8b
 8007d3c:	08007d9f 	.word	0x08007d9f
 8007d40:	08007d5f 	.word	0x08007d5f
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d9f 	.word	0x08007d9f
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d69 	.word	0x08007d69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa3c 	bl	80081d4 <USBD_GetDescriptor>
          break;
 8007d5c:	e024      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fbcb 	bl	80084fc <USBD_SetAddress>
          break;
 8007d66:	e01f      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc0a 	bl	8008584 <USBD_SetConfig>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
          break;
 8007d74:	e018      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fcad 	bl	80086d8 <USBD_GetConfig>
          break;
 8007d7e:	e013      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fcde 	bl	8008744 <USBD_GetStatus>
          break;
 8007d88:	e00e      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fd0d 	bl	80087ac <USBD_SetFeature>
          break;
 8007d92:	e009      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fd31 	bl	80087fe <USBD_ClrFeature>
          break;
 8007d9c:	e004      	b.n	8007da8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fd88 	bl	80088b6 <USBD_CtlError>
          break;
 8007da6:	bf00      	nop
      }
      break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fd82 	bl	80088b6 <USBD_CtlError>
      break;
 8007db2:	bf00      	nop
  }

  return ret;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop

08007dc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dd6:	2b40      	cmp	r3, #64	; 0x40
 8007dd8:	d005      	beq.n	8007de6 <USBD_StdItfReq+0x26>
 8007dda:	2b40      	cmp	r3, #64	; 0x40
 8007ddc:	d852      	bhi.n	8007e84 <USBD_StdItfReq+0xc4>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <USBD_StdItfReq+0x26>
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d14e      	bne.n	8007e84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d840      	bhi.n	8007e76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	889b      	ldrh	r3, [r3, #4]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d836      	bhi.n	8007e6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fed9 	bl	8007bbe <USBD_CoreFindIF>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d01d      	beq.n	8007e52 <USBD_StdItfReq+0x92>
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d11a      	bne.n	8007e52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e1c:	7bba      	ldrb	r2, [r7, #14]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	; 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00f      	beq.n	8007e4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e2c:	7bba      	ldrb	r2, [r7, #14]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e34:	7bba      	ldrb	r2, [r7, #14]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32ae      	adds	r2, #174	; 0xae
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e4a:	e004      	b.n	8007e56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e50:	e001      	b.n	8007e56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e52:	2303      	movs	r3, #3
 8007e54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d110      	bne.n	8007e80 <USBD_StdItfReq+0xc0>
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10d      	bne.n	8007e80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fdf1 	bl	8008a4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e6a:	e009      	b.n	8007e80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fd21 	bl	80088b6 <USBD_CtlError>
          break;
 8007e74:	e004      	b.n	8007e80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fd1c 	bl	80088b6 <USBD_CtlError>
          break;
 8007e7e:	e000      	b.n	8007e82 <USBD_StdItfReq+0xc2>
          break;
 8007e80:	bf00      	nop
      }
      break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fd15 	bl	80088b6 <USBD_CtlError>
      break;
 8007e8c:	bf00      	nop
  }

  return ret;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	889b      	ldrh	r3, [r3, #4]
 8007eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d007      	beq.n	8007ec8 <USBD_StdEPReq+0x30>
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	f200 817f 	bhi.w	80081bc <USBD_StdEPReq+0x324>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d02a      	beq.n	8007f18 <USBD_StdEPReq+0x80>
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	f040 817a 	bne.w	80081bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fe83 	bl	8007bd8 <USBD_CoreFindEP>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2bff      	cmp	r3, #255	; 0xff
 8007eda:	f000 8174 	beq.w	80081c6 <USBD_StdEPReq+0x32e>
 8007ede:	7b7b      	ldrb	r3, [r7, #13]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8170 	bne.w	80081c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ee6:	7b7a      	ldrb	r2, [r7, #13]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007eee:	7b7a      	ldrb	r2, [r7, #13]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	32ae      	adds	r2, #174	; 0xae
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8163 	beq.w	80081c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f00:	7b7a      	ldrb	r2, [r7, #13]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	32ae      	adds	r2, #174	; 0xae
 8007f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f16:	e156      	b.n	80081c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d008      	beq.n	8007f32 <USBD_StdEPReq+0x9a>
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	f300 8145 	bgt.w	80081b0 <USBD_StdEPReq+0x318>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 809b 	beq.w	8008062 <USBD_StdEPReq+0x1ca>
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d03c      	beq.n	8007faa <USBD_StdEPReq+0x112>
 8007f30:	e13e      	b.n	80081b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d002      	beq.n	8007f44 <USBD_StdEPReq+0xac>
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d016      	beq.n	8007f70 <USBD_StdEPReq+0xd8>
 8007f42:	e02c      	b.n	8007f9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00d      	beq.n	8007f66 <USBD_StdEPReq+0xce>
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b80      	cmp	r3, #128	; 0x80
 8007f4e:	d00a      	beq.n	8007f66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 f9c1 	bl	80092dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f5a:	2180      	movs	r1, #128	; 0x80
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f9bd 	bl	80092dc <USBD_LL_StallEP>
 8007f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f64:	e020      	b.n	8007fa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fca4 	bl	80088b6 <USBD_CtlError>
              break;
 8007f6e:	e01b      	b.n	8007fa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10e      	bne.n	8007f96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <USBD_StdEPReq+0xfe>
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d008      	beq.n	8007f96 <USBD_StdEPReq+0xfe>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	88db      	ldrh	r3, [r3, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f9a3 	bl	80092dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fd58 	bl	8008a4c <USBD_CtlSendStatus>

              break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc88 	bl	80088b6 <USBD_CtlError>
              break;
 8007fa6:	bf00      	nop
          }
          break;
 8007fa8:	e107      	b.n	80081ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d002      	beq.n	8007fbc <USBD_StdEPReq+0x124>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d016      	beq.n	8007fe8 <USBD_StdEPReq+0x150>
 8007fba:	e04b      	b.n	8008054 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <USBD_StdEPReq+0x146>
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b80      	cmp	r3, #128	; 0x80
 8007fc6:	d00a      	beq.n	8007fde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f985 	bl	80092dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fd2:	2180      	movs	r1, #128	; 0x80
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f981 	bl	80092dc <USBD_LL_StallEP>
 8007fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fdc:	e040      	b.n	8008060 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc68 	bl	80088b6 <USBD_CtlError>
              break;
 8007fe6:	e03b      	b.n	8008060 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d136      	bne.n	800805e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f9a2 	bl	8009348 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd21 	bl	8008a4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fde2 	bl	8007bd8 <USBD_CoreFindEP>
 8008014:	4603      	mov	r3, r0
 8008016:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008018:	7b7b      	ldrb	r3, [r7, #13]
 800801a:	2bff      	cmp	r3, #255	; 0xff
 800801c:	d01f      	beq.n	800805e <USBD_StdEPReq+0x1c6>
 800801e:	7b7b      	ldrb	r3, [r7, #13]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11c      	bne.n	800805e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008024:	7b7a      	ldrb	r2, [r7, #13]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800802c:	7b7a      	ldrb	r2, [r7, #13]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32ae      	adds	r2, #174	; 0xae
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d010      	beq.n	800805e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800803c:	7b7a      	ldrb	r2, [r7, #13]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	; 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008052:	e004      	b.n	800805e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fc2d 	bl	80088b6 <USBD_CtlError>
              break;
 800805c:	e000      	b.n	8008060 <USBD_StdEPReq+0x1c8>
              break;
 800805e:	bf00      	nop
          }
          break;
 8008060:	e0ab      	b.n	80081ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d002      	beq.n	8008074 <USBD_StdEPReq+0x1dc>
 800806e:	2b03      	cmp	r3, #3
 8008070:	d032      	beq.n	80080d8 <USBD_StdEPReq+0x240>
 8008072:	e097      	b.n	80081a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <USBD_StdEPReq+0x1f2>
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b80      	cmp	r3, #128	; 0x80
 800807e:	d004      	beq.n	800808a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fc17 	bl	80088b6 <USBD_CtlError>
                break;
 8008088:	e091      	b.n	80081ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800808a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	da0b      	bge.n	80080aa <USBD_StdEPReq+0x212>
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	3310      	adds	r3, #16
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	3304      	adds	r3, #4
 80080a8:	e00b      	b.n	80080c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	3304      	adds	r3, #4
 80080c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2202      	movs	r2, #2
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fc61 	bl	8008998 <USBD_CtlSendData>
              break;
 80080d6:	e06a      	b.n	80081ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da11      	bge.n	8008104 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	3324      	adds	r3, #36	; 0x24
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d117      	bne.n	800812a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fbda 	bl	80088b6 <USBD_CtlError>
                  break;
 8008102:	e054      	b.n	80081ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	f003 020f 	and.w	r2, r3, #15
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fbc7 	bl	80088b6 <USBD_CtlError>
                  break;
 8008128:	e041      	b.n	80081ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800812a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da0b      	bge.n	800814a <USBD_StdEPReq+0x2b2>
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	3310      	adds	r3, #16
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4413      	add	r3, r2
 8008146:	3304      	adds	r3, #4
 8008148:	e00b      	b.n	8008162 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <USBD_StdEPReq+0x2d8>
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b80      	cmp	r3, #128	; 0x80
 800816e:	d103      	bne.n	8008178 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e00e      	b.n	8008196 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 f919 	bl	80093b4 <USBD_LL_IsStallEP>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2201      	movs	r2, #1
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e002      	b.n	8008196 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2202      	movs	r2, #2
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fbfb 	bl	8008998 <USBD_CtlSendData>
              break;
 80081a2:	e004      	b.n	80081ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb85 	bl	80088b6 <USBD_CtlError>
              break;
 80081ac:	bf00      	nop
          }
          break;
 80081ae:	e004      	b.n	80081ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb7f 	bl	80088b6 <USBD_CtlError>
          break;
 80081b8:	bf00      	nop
      }
      break;
 80081ba:	e005      	b.n	80081c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb79 	bl	80088b6 <USBD_CtlError>
      break;
 80081c4:	e000      	b.n	80081c8 <USBD_StdEPReq+0x330>
      break;
 80081c6:	bf00      	nop
  }

  return ret;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	0a1b      	lsrs	r3, r3, #8
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	2b0e      	cmp	r3, #14
 80081f6:	f200 8152 	bhi.w	800849e <USBD_GetDescriptor+0x2ca>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <USBD_GetDescriptor+0x2c>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008271 	.word	0x08008271
 8008204:	08008289 	.word	0x08008289
 8008208:	080082c9 	.word	0x080082c9
 800820c:	0800849f 	.word	0x0800849f
 8008210:	0800849f 	.word	0x0800849f
 8008214:	0800843f 	.word	0x0800843f
 8008218:	0800846b 	.word	0x0800846b
 800821c:	0800849f 	.word	0x0800849f
 8008220:	0800849f 	.word	0x0800849f
 8008224:	0800849f 	.word	0x0800849f
 8008228:	0800849f 	.word	0x0800849f
 800822c:	0800849f 	.word	0x0800849f
 8008230:	0800849f 	.word	0x0800849f
 8008234:	0800849f 	.word	0x0800849f
 8008238:	0800823d 	.word	0x0800823d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 0108 	add.w	r1, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800825e:	e126      	b.n	80084ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fb27 	bl	80088b6 <USBD_CtlError>
        err++;
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	3301      	adds	r3, #1
 800826c:	72fb      	strb	r3, [r7, #11]
      break;
 800826e:	e11e      	b.n	80084ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7c12      	ldrb	r2, [r2, #16]
 800827c:	f107 0108 	add.w	r1, r7, #8
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
      break;
 8008286:	e112      	b.n	80084ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7c1b      	ldrb	r3, [r3, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10d      	bne.n	80082ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	f107 0208 	add.w	r2, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	2202      	movs	r2, #2
 80082a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082aa:	e100      	b.n	80084ae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	f107 0208 	add.w	r2, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2202      	movs	r2, #2
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	e0f2      	b.n	80084ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	885b      	ldrh	r3, [r3, #2]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	f200 80ac 	bhi.w	800842c <USBD_GetDescriptor+0x258>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <USBD_GetDescriptor+0x108>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	08008329 	.word	0x08008329
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	08008391 	.word	0x08008391
 80082ec:	080083c5 	.word	0x080083c5
 80082f0:	080083f9 	.word	0x080083f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e091      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 facb 	bl	80088b6 <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e089      	b.n	800843c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e077      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fab1 	bl	80088b6 <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e06f      	b.n	800843c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e05d      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa97 	bl	80088b6 <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e055      	b.n	800843c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7c12      	ldrb	r2, [r2, #16]
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b2:	e043      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa7d 	bl	80088b6 <USBD_CtlError>
            err++;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	3301      	adds	r3, #1
 80083c0:	72fb      	strb	r3, [r7, #11]
          break;
 80083c2:	e03b      	b.n	800843c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	7c12      	ldrb	r2, [r2, #16]
 80083dc:	f107 0108 	add.w	r1, r7, #8
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e6:	e029      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa63 	bl	80088b6 <USBD_CtlError>
            err++;
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	3301      	adds	r3, #1
 80083f4:	72fb      	strb	r3, [r7, #11]
          break;
 80083f6:	e021      	b.n	800843c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	7c12      	ldrb	r2, [r2, #16]
 8008410:	f107 0108 	add.w	r1, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841a:	e00f      	b.n	800843c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa49 	bl	80088b6 <USBD_CtlError>
            err++;
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	3301      	adds	r3, #1
 8008428:	72fb      	strb	r3, [r7, #11]
          break;
 800842a:	e007      	b.n	800843c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa41 	bl	80088b6 <USBD_CtlError>
          err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800843a:	bf00      	nop
      }
      break;
 800843c:	e037      	b.n	80084ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7c1b      	ldrb	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	f107 0208 	add.w	r2, r7, #8
 8008452:	4610      	mov	r0, r2
 8008454:	4798      	blx	r3
 8008456:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008458:	e029      	b.n	80084ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa2a 	bl	80088b6 <USBD_CtlError>
        err++;
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	3301      	adds	r3, #1
 8008466:	72fb      	strb	r3, [r7, #11]
      break;
 8008468:	e021      	b.n	80084ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10d      	bne.n	800848e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f107 0208 	add.w	r2, r7, #8
 800847e:	4610      	mov	r0, r2
 8008480:	4798      	blx	r3
 8008482:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	2207      	movs	r2, #7
 800848a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800848c:	e00f      	b.n	80084ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fa10 	bl	80088b6 <USBD_CtlError>
        err++;
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	3301      	adds	r3, #1
 800849a:	72fb      	strb	r3, [r7, #11]
      break;
 800849c:	e007      	b.n	80084ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fa08 	bl	80088b6 <USBD_CtlError>
      err++;
 80084a6:	7afb      	ldrb	r3, [r7, #11]
 80084a8:	3301      	adds	r3, #1
 80084aa:	72fb      	strb	r3, [r7, #11]
      break;
 80084ac:	bf00      	nop
  }

  if (err != 0U)
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11e      	bne.n	80084f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d016      	beq.n	80084ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80084bc:	893b      	ldrh	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88da      	ldrh	r2, [r3, #6]
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bf28      	it	cs
 80084cc:	4613      	movcs	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	461a      	mov	r2, r3
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa5d 	bl	8008998 <USBD_CtlSendData>
 80084de:	e009      	b.n	80084f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9e7 	bl	80088b6 <USBD_CtlError>
 80084e8:	e004      	b.n	80084f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 faae 	bl	8008a4c <USBD_CtlSendStatus>
 80084f0:	e000      	b.n	80084f4 <USBD_GetDescriptor+0x320>
    return;
 80084f2:	bf00      	nop
  }
}
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d131      	bne.n	8008572 <USBD_SetAddress+0x76>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d12d      	bne.n	8008572 <USBD_SetAddress+0x76>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	2b7f      	cmp	r3, #127	; 0x7f
 800851c:	d829      	bhi.n	8008572 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d104      	bne.n	8008540 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9bc 	bl	80088b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	e01d      	b.n	800857c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7bfa      	ldrb	r2, [r7, #15]
 8008544:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 ff5d 	bl	800940c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa7a 	bl	8008a4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	e009      	b.n	800857c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008570:	e004      	b.n	800857c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f99e 	bl	80088b6 <USBD_CtlError>
  }
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	4b4e      	ldr	r3, [pc, #312]	; (80086d4 <USBD_SetConfig+0x150>)
 800859a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800859c:	4b4d      	ldr	r3, [pc, #308]	; (80086d4 <USBD_SetConfig+0x150>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d905      	bls.n	80085b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f985 	bl	80088b6 <USBD_CtlError>
    return USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e08c      	b.n	80086ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d002      	beq.n	80085c2 <USBD_SetConfig+0x3e>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d029      	beq.n	8008614 <USBD_SetConfig+0x90>
 80085c0:	e075      	b.n	80086ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085c2:	4b44      	ldr	r3, [pc, #272]	; (80086d4 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085ca:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <USBD_SetConfig+0x150>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d4:	4b3f      	ldr	r3, [pc, #252]	; (80086d4 <USBD_SetConfig+0x150>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe ffb7 	bl	800754e <USBD_SetClassConfig>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f962 	bl	80088b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085fa:	e065      	b.n	80086c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa25 	bl	8008a4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800860a:	e05d      	b.n	80086c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa1d 	bl	8008a4c <USBD_CtlSendStatus>
      break;
 8008612:	e059      	b.n	80086c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008614:	4b2f      	ldr	r3, [pc, #188]	; (80086d4 <USBD_SetConfig+0x150>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d112      	bne.n	8008642 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008624:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <USBD_SetConfig+0x150>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800862e:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <USBD_SetConfig+0x150>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fe ffa6 	bl	8007586 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa06 	bl	8008a4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008640:	e042      	b.n	80086c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008642:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <USBD_SetConfig+0x150>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d02a      	beq.n	80086a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe ff94 	bl	8007586 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800865e:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <USBD_SetConfig+0x150>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008668:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <USBD_SetConfig+0x150>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7fe ff6d 	bl	800754e <USBD_SetClassConfig>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f918 	bl	80088b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fe ff79 	bl	8007586 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800869c:	e014      	b.n	80086c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9d4 	bl	8008a4c <USBD_CtlSendStatus>
      break;
 80086a4:	e010      	b.n	80086c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9d0 	bl	8008a4c <USBD_CtlSendStatus>
      break;
 80086ac:	e00c      	b.n	80086c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f900 	bl	80088b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <USBD_SetConfig+0x150>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7fe ff62 	bl	8007586 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200003b0 	.word	0x200003b0

080086d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d004      	beq.n	80086f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8e2 	bl	80088b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086f2:	e023      	b.n	800873c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	dc02      	bgt.n	8008706 <USBD_GetConfig+0x2e>
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc03      	bgt.n	800870c <USBD_GetConfig+0x34>
 8008704:	e015      	b.n	8008732 <USBD_GetConfig+0x5a>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d00b      	beq.n	8008722 <USBD_GetConfig+0x4a>
 800870a:	e012      	b.n	8008732 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3308      	adds	r3, #8
 8008716:	2201      	movs	r2, #1
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f93c 	bl	8008998 <USBD_CtlSendData>
        break;
 8008720:	e00c      	b.n	800873c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3304      	adds	r3, #4
 8008726:	2201      	movs	r2, #1
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f934 	bl	8008998 <USBD_CtlSendData>
        break;
 8008730:	e004      	b.n	800873c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8be 	bl	80088b6 <USBD_CtlError>
        break;
 800873a:	bf00      	nop
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	2b02      	cmp	r3, #2
 800875a:	d81e      	bhi.n	800879a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	88db      	ldrh	r3, [r3, #6]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d004      	beq.n	800876e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8a5 	bl	80088b6 <USBD_CtlError>
        break;
 800876c:	e01a      	b.n	80087a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f043 0202 	orr.w	r2, r3, #2
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	330c      	adds	r3, #12
 800878e:	2202      	movs	r2, #2
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f900 	bl	8008998 <USBD_CtlSendData>
      break;
 8008798:	e004      	b.n	80087a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f88a 	bl	80088b6 <USBD_CtlError>
      break;
 80087a2:	bf00      	nop
  }
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d107      	bne.n	80087ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f940 	bl	8008a4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087cc:	e013      	b.n	80087f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d10b      	bne.n	80087ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	889b      	ldrh	r3, [r3, #4]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f930 	bl	8008a4c <USBD_CtlSendStatus>
}
 80087ec:	e003      	b.n	80087f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f860 	bl	80088b6 <USBD_CtlError>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880e:	b2db      	uxtb	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	2b02      	cmp	r3, #2
 8008814:	d80b      	bhi.n	800882e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10c      	bne.n	8008838 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f910 	bl	8008a4c <USBD_CtlSendStatus>
      }
      break;
 800882c:	e004      	b.n	8008838 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f840 	bl	80088b6 <USBD_CtlError>
      break;
 8008836:	e000      	b.n	800883a <USBD_ClrFeature+0x3c>
      break;
 8008838:	bf00      	nop
  }
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fa17 	bl	8007ca0 <SWAPBYTE>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fa0a 	bl	8007ca0 <SWAPBYTE>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3301      	adds	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff f9fd 	bl	8007ca0 <SWAPBYTE>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461a      	mov	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	80da      	strh	r2, [r3, #6]
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088c0:	2180      	movs	r1, #128	; 0x80
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fd0a 	bl	80092dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088c8:	2100      	movs	r1, #0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fd06 	bl	80092dc <USBD_LL_StallEP>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d036      	beq.n	800895c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088f2:	6938      	ldr	r0, [r7, #16]
 80088f4:	f000 f836 	bl	8008964 <USBD_GetLen>
 80088f8:	4603      	mov	r3, r0
 80088fa:	3301      	adds	r3, #1
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	4413      	add	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	701a      	strb	r2, [r3, #0]
  idx++;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	2203      	movs	r2, #3
 8008920:	701a      	strb	r2, [r3, #0]
  idx++;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	3301      	adds	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008928:	e013      	b.n	8008952 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	4413      	add	r3, r2
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
    idx++;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	3301      	adds	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	4413      	add	r3, r2
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
    idx++;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	3301      	adds	r3, #1
 8008950:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e7      	bne.n	800892a <USBD_GetString+0x52>
 800895a:	e000      	b.n	800895e <USBD_GetString+0x86>
    return;
 800895c:	bf00      	nop
  }
}
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008974:	e005      	b.n	8008982 <USBD_GetLen+0x1e>
  {
    len++;
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	3301      	adds	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	3301      	adds	r3, #1
 8008980:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f5      	bne.n	8008976 <USBD_GetLen+0x12>
  }

  return len;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	2100      	movs	r1, #0
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fd5a 	bl	8009478 <USBD_LL_Transmit>

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	2100      	movs	r1, #0
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fd49 	bl	8009478 <USBD_LL_Transmit>

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2203      	movs	r2, #3
 8008a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fd64 	bl	80094e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fd53 	bl	80094e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2204      	movs	r2, #4
 8008a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fd08 	bl	8009478 <USBD_LL_Transmit>

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2205      	movs	r2, #5
 8008a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a82:	2300      	movs	r3, #0
 8008a84:	2200      	movs	r2, #0
 8008a86:	2100      	movs	r1, #0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fd2d 	bl	80094e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4912      	ldr	r1, [pc, #72]	; (8008ae8 <MX_USB_DEVICE_Init+0x50>)
 8008aa0:	4812      	ldr	r0, [pc, #72]	; (8008aec <MX_USB_DEVICE_Init+0x54>)
 8008aa2:	f7fe fcd7 	bl	8007454 <USBD_Init>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008aac:	f7f8 faf6 	bl	800109c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008ab0:	490f      	ldr	r1, [pc, #60]	; (8008af0 <MX_USB_DEVICE_Init+0x58>)
 8008ab2:	480e      	ldr	r0, [pc, #56]	; (8008aec <MX_USB_DEVICE_Init+0x54>)
 8008ab4:	f7fe fcfe 	bl	80074b4 <USBD_RegisterClass>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008abe:	f7f8 faed 	bl	800109c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008ac2:	490c      	ldr	r1, [pc, #48]	; (8008af4 <MX_USB_DEVICE_Init+0x5c>)
 8008ac4:	4809      	ldr	r0, [pc, #36]	; (8008aec <MX_USB_DEVICE_Init+0x54>)
 8008ac6:	f7fe fcab 	bl	8007420 <USBD_CUSTOM_HID_RegisterInterface>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ad0:	f7f8 fae4 	bl	800109c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ad4:	4805      	ldr	r0, [pc, #20]	; (8008aec <MX_USB_DEVICE_Init+0x54>)
 8008ad6:	f7fe fd23 	bl	8007520 <USBD_Start>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ae0:	f7f8 fadc 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ae4:	bf00      	nop
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	200000b8 	.word	0x200000b8
 8008aec:	200003b4 	.word	0x200003b4
 8008af0:	2000000c 	.word	0x2000000c
 8008af4:	200000a8 	.word	0x200000a8

08008af8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008b0c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	460a      	mov	r2, r1
 8008b22:	71fb      	strb	r3, [r7, #7]
 8008b24:	4613      	mov	r3, r2
 8008b26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
miflag=1;
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <CUSTOM_HID_OutEvent_FS+0x24>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
//  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 8008b2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000690 	.word	0x20000690

08008b40 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8008b4c:	887b      	ldrh	r3, [r7, #2]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4804      	ldr	r0, [pc, #16]	; (8008b64 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8008b54:	f7fe fb1c 	bl	8007190 <USBD_CUSTOM_HID_SendReport>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	b25b      	sxtb	r3, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200003b4 	.word	0x200003b4

08008b68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2212      	movs	r2, #18
 8008b78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b7a:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	200000d8 	.word	0x200000d8

08008b8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2204      	movs	r2, #4
 8008b9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b9e:	4b03      	ldr	r3, [pc, #12]	; (8008bac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	200000f8 	.word	0x200000f8

08008bb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	4907      	ldr	r1, [pc, #28]	; (8008be4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bc6:	4808      	ldr	r0, [pc, #32]	; (8008be8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bc8:	f7ff fe86 	bl	80088d8 <USBD_GetString>
 8008bcc:	e004      	b.n	8008bd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4904      	ldr	r1, [pc, #16]	; (8008be4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd2:	4805      	ldr	r0, [pc, #20]	; (8008be8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd4:	f7ff fe80 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000694 	.word	0x20000694
 8008be8:	080096b8 	.word	0x080096b8

08008bec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	4904      	ldr	r1, [pc, #16]	; (8008c0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bfc:	4804      	ldr	r0, [pc, #16]	; (8008c10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bfe:	f7ff fe6b 	bl	80088d8 <USBD_GetString>
  return USBD_StrDesc;
 8008c02:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000694 	.word	0x20000694
 8008c10:	080096d8 	.word	0x080096d8

08008c14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	221a      	movs	r2, #26
 8008c24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c26:	f000 f855 	bl	8008cd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c2a:	4b02      	ldr	r3, [pc, #8]	; (8008c34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200000fc 	.word	0x200000fc

08008c38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	4907      	ldr	r1, [pc, #28]	; (8008c6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c4e:	4808      	ldr	r0, [pc, #32]	; (8008c70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c50:	f7ff fe42 	bl	80088d8 <USBD_GetString>
 8008c54:	e004      	b.n	8008c60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4904      	ldr	r1, [pc, #16]	; (8008c6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5a:	4805      	ldr	r0, [pc, #20]	; (8008c70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c5c:	f7ff fe3c 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000694 	.word	0x20000694
 8008c70:	080096ec 	.word	0x080096ec

08008c74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4907      	ldr	r1, [pc, #28]	; (8008ca8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c8a:	4808      	ldr	r0, [pc, #32]	; (8008cac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c8c:	f7ff fe24 	bl	80088d8 <USBD_GetString>
 8008c90:	e004      	b.n	8008c9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	4904      	ldr	r1, [pc, #16]	; (8008ca8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c96:	4805      	ldr	r0, [pc, #20]	; (8008cac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c98:	f7ff fe1e 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c9c:	4b02      	ldr	r3, [pc, #8]	; (8008ca8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000694 	.word	0x20000694
 8008cac:	08009700 	.word	0x08009700

08008cb0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	220c      	movs	r2, #12
 8008cc0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cc2:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	200000ec 	.word	0x200000ec

08008cd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cda:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <Get_SerialNum+0x44>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	; (8008d1c <Get_SerialNum+0x48>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ce6:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <Get_SerialNum+0x4c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	4909      	ldr	r1, [pc, #36]	; (8008d24 <Get_SerialNum+0x50>)
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f814 	bl	8008d2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d04:	2204      	movs	r2, #4
 8008d06:	4908      	ldr	r1, [pc, #32]	; (8008d28 <Get_SerialNum+0x54>)
 8008d08:	68b8      	ldr	r0, [r7, #8]
 8008d0a:	f000 f80f 	bl	8008d2c <IntToUnicode>
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	1fff7590 	.word	0x1fff7590
 8008d1c:	1fff7594 	.word	0x1fff7594
 8008d20:	1fff7598 	.word	0x1fff7598
 8008d24:	200000fe 	.word	0x200000fe
 8008d28:	2000010e 	.word	0x2000010e

08008d2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
 8008d42:	e027      	b.n	8008d94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	2b09      	cmp	r3, #9
 8008d4a:	d80b      	bhi.n	8008d64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	0f1b      	lsrs	r3, r3, #28
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	4619      	mov	r1, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	440b      	add	r3, r1
 8008d5c:	3230      	adds	r2, #48	; 0x30
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	e00a      	b.n	8008d7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	0f1b      	lsrs	r3, r3, #28
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	4619      	mov	r1, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	440b      	add	r3, r1
 8008d74:	3237      	adds	r2, #55	; 0x37
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	3301      	adds	r3, #1
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4413      	add	r3, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	3301      	adds	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
 8008d94:	7dfa      	ldrb	r2, [r7, #23]
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3d3      	bcc.n	8008d44 <IntToUnicode+0x18>
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b0ac      	sub	sp, #176	; 0xb0
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	609a      	str	r2, [r3, #8]
 8008dc0:	60da      	str	r2, [r3, #12]
 8008dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008dc4:	f107 0314 	add.w	r3, r7, #20
 8008dc8:	2288      	movs	r2, #136	; 0x88
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fc2f 	bl	8009630 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dda:	f040 8085 	bne.w	8008ee8 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008de2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008de4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008dec:	2301      	movs	r3, #1
 8008dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008df0:	2301      	movs	r3, #1
 8008df2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008df4:	2318      	movs	r3, #24
 8008df6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008df8:	2307      	movs	r3, #7
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008e00:	2302      	movs	r3, #2
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e0a:	f107 0314 	add.w	r3, r7, #20
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fb fa92 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8008e1a:	f7f8 f93f 	bl	800109c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e1e:	4b34      	ldr	r3, [pc, #208]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e22:	4a33      	ldr	r2, [pc, #204]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e24:	f043 0301 	orr.w	r3, r3, #1
 8008e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e2a:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8008e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008e4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008e4e:	4619      	mov	r1, r3
 8008e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e54:	f7f8 fe8a 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008e58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e60:	2302      	movs	r3, #2
 8008e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e72:	230a      	movs	r3, #10
 8008e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e82:	f7f8 fe73 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8a:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d114      	bne.n	8008ed4 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eaa:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	4a10      	ldr	r2, [pc, #64]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008ec2:	f7fa fb6d 	bl	80035a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eca:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <HAL_PCD_MspInit+0x144>)
 8008ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed2:	e001      	b.n	8008ed8 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008ed4:	f7fa fb64 	bl	80035a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2100      	movs	r1, #0
 8008edc:	2043      	movs	r0, #67	; 0x43
 8008ede:	f7f8 fd02 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ee2:	2043      	movs	r0, #67	; 0x43
 8008ee4:	f7f8 fd1b 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ee8:	bf00      	nop
 8008eea:	37b0      	adds	r7, #176	; 0xb0
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40021000 	.word	0x40021000

08008ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe fb55 	bl	80075ba <USBD_LL_SetupStage>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7fe fb8f 	bl	8007664 <USBD_LL_DataOutStage>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3348      	adds	r3, #72	; 0x48
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	4619      	mov	r1, r3
 8008f76:	f7fe fc28 	bl	80077ca <USBD_LL_DataInStage>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fd62 	bl	8007a5a <USBD_LL_SOF>
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d001      	beq.n	8008fb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fb2:	f7f8 f873 	bl	800109c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fbc:	7bfa      	ldrb	r2, [r7, #15]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fd06 	bl	80079d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fcae 	bl	800792e <USBD_LL_Reset>
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fcf5 	bl	80079f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <HAL_PCD_SuspendCallback+0x48>)
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	4a03      	ldr	r2, [pc, #12]	; (8009024 <HAL_PCD_SuspendCallback+0x48>)
 8009016:	f043 0306 	orr.w	r3, r3, #6
 800901a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000ed00 	.word	0xe000ed00

08009028 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <HAL_PCD_ResumeCallback+0x4c>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	4a07      	ldr	r2, [pc, #28]	; (8009074 <HAL_PCD_ResumeCallback+0x4c>)
 8009056:	f023 0306 	bic.w	r3, r3, #6
 800905a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800905c:	f000 fae2 	bl	8009624 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fcdf 	bl	8007a2a <USBD_LL_Resume>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed00 	.word	0xe000ed00

08009078 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fd35 	bl	8007afe <USBD_LL_IsoOUTIncomplete>
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fcf1 	bl	8007a9a <USBD_LL_IsoINIncomplete>
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fd47 	bl	8007b62 <USBD_LL_DevConnected>
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fd44 	bl	8007b78 <USBD_LL_DevDisconnected>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d13c      	bne.n	8009182 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009108:	4a20      	ldr	r2, [pc, #128]	; (800918c <USBD_LL_Init+0x94>)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a1e      	ldr	r2, [pc, #120]	; (800918c <USBD_LL_Init+0x94>)
 8009114:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009118:	4b1c      	ldr	r3, [pc, #112]	; (800918c <USBD_LL_Init+0x94>)
 800911a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800911e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009120:	4b1a      	ldr	r3, [pc, #104]	; (800918c <USBD_LL_Init+0x94>)
 8009122:	2206      	movs	r2, #6
 8009124:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009126:	4b19      	ldr	r3, [pc, #100]	; (800918c <USBD_LL_Init+0x94>)
 8009128:	2202      	movs	r2, #2
 800912a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800912c:	4b17      	ldr	r3, [pc, #92]	; (800918c <USBD_LL_Init+0x94>)
 800912e:	2202      	movs	r2, #2
 8009130:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009132:	4b16      	ldr	r3, [pc, #88]	; (800918c <USBD_LL_Init+0x94>)
 8009134:	2200      	movs	r2, #0
 8009136:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009138:	4b14      	ldr	r3, [pc, #80]	; (800918c <USBD_LL_Init+0x94>)
 800913a:	2200      	movs	r2, #0
 800913c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <USBD_LL_Init+0x94>)
 8009140:	2200      	movs	r2, #0
 8009142:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009144:	4b11      	ldr	r3, [pc, #68]	; (800918c <USBD_LL_Init+0x94>)
 8009146:	2200      	movs	r2, #0
 8009148:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <USBD_LL_Init+0x94>)
 800914c:	2200      	movs	r2, #0
 800914e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <USBD_LL_Init+0x94>)
 8009152:	2200      	movs	r2, #0
 8009154:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009156:	480d      	ldr	r0, [pc, #52]	; (800918c <USBD_LL_Init+0x94>)
 8009158:	f7f9 f81f 	bl	800219a <HAL_PCD_Init>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009162:	f7f7 ff9b 	bl	800109c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009166:	2180      	movs	r1, #128	; 0x80
 8009168:	4808      	ldr	r0, [pc, #32]	; (800918c <USBD_LL_Init+0x94>)
 800916a:	f7fa f970 	bl	800344e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800916e:	2240      	movs	r2, #64	; 0x40
 8009170:	2100      	movs	r1, #0
 8009172:	4806      	ldr	r0, [pc, #24]	; (800918c <USBD_LL_Init+0x94>)
 8009174:	f7fa f924 	bl	80033c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009178:	2280      	movs	r2, #128	; 0x80
 800917a:	2101      	movs	r1, #1
 800917c:	4803      	ldr	r0, [pc, #12]	; (800918c <USBD_LL_Init+0x94>)
 800917e:	f7fa f91f 	bl	80033c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000894 	.word	0x20000894

08009190 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7f9 f91b 	bl	80023e2 <HAL_PCD_Start>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d816      	bhi.n	80091e4 <USBD_LL_Start+0x54>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <USBD_LL_Start+0x2c>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d3 	.word	0x080091d3
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091df 	.word	0x080091df
    case HAL_OK :
      usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	e00b      	b.n	80091ea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	73fb      	strb	r3, [r7, #15]
    break;
 80091d6:	e008      	b.n	80091ea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e005      	b.n	80091ea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e002      	b.n	80091ea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	bf00      	nop
  }
  return usb_status;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	461a      	mov	r2, r3
 8009202:	4603      	mov	r3, r0
 8009204:	70fb      	strb	r3, [r7, #3]
 8009206:	460b      	mov	r3, r1
 8009208:	70bb      	strb	r3, [r7, #2]
 800920a:	4613      	mov	r3, r2
 800920c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800921c:	78bb      	ldrb	r3, [r7, #2]
 800921e:	883a      	ldrh	r2, [r7, #0]
 8009220:	78f9      	ldrb	r1, [r7, #3]
 8009222:	f7f9 fdc5 	bl	8002db0 <HAL_PCD_EP_Open>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d817      	bhi.n	8009260 <USBD_LL_OpenEP+0x6c>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <USBD_LL_OpenEP+0x44>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009249 	.word	0x08009249
 800923c:	0800924f 	.word	0x0800924f
 8009240:	08009255 	.word	0x08009255
 8009244:	0800925b 	.word	0x0800925b
    case HAL_OK :
      usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
    break;
 800924c:	e00b      	b.n	8009266 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800924e:	2303      	movs	r3, #3
 8009250:	73fb      	strb	r3, [r7, #15]
    break;
 8009252:	e008      	b.n	8009266 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
    break;
 8009258:	e005      	b.n	8009266 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800925a:	2303      	movs	r3, #3
 800925c:	73fb      	strb	r3, [r7, #15]
    break;
 800925e:	e002      	b.n	8009266 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009260:	2303      	movs	r3, #3
 8009262:	73fb      	strb	r3, [r7, #15]
    break;
 8009264:	bf00      	nop
  }
  return usb_status;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7f9 fdf6 	bl	8002e80 <HAL_PCD_EP_Close>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b03      	cmp	r3, #3
 800929c:	d816      	bhi.n	80092cc <USBD_LL_CloseEP+0x5c>
 800929e:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <USBD_LL_CloseEP+0x34>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	080092bb 	.word	0x080092bb
 80092ac:	080092c1 	.word	0x080092c1
 80092b0:	080092c7 	.word	0x080092c7
    case HAL_OK :
      usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	e00b      	b.n	80092d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	73fb      	strb	r3, [r7, #15]
    break;
 80092be:	e008      	b.n	80092d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
    break;
 80092c4:	e005      	b.n	80092d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092c6:	2303      	movs	r3, #3
 80092c8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ca:	e002      	b.n	80092d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	73fb      	strb	r3, [r7, #15]
    break;
 80092d0:	bf00      	nop
  }
  return usb_status;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f9 fe6d 	bl	8002fda <HAL_PCD_EP_SetStall>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b03      	cmp	r3, #3
 8009308:	d816      	bhi.n	8009338 <USBD_LL_StallEP+0x5c>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <USBD_LL_StallEP+0x34>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009321 	.word	0x08009321
 8009314:	08009327 	.word	0x08009327
 8009318:	0800932d 	.word	0x0800932d
 800931c:	08009333 	.word	0x08009333
    case HAL_OK :
      usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	e00b      	b.n	800933e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009326:	2303      	movs	r3, #3
 8009328:	73fb      	strb	r3, [r7, #15]
    break;
 800932a:	e008      	b.n	800933e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	e005      	b.n	800933e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
    break;
 8009336:	e002      	b.n	800933e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	bf00      	nop
  }
  return usb_status;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7f9 fe99 	bl	800309e <HAL_PCD_EP_ClrStall>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b03      	cmp	r3, #3
 8009374:	d816      	bhi.n	80093a4 <USBD_LL_ClearStallEP+0x5c>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBD_LL_ClearStallEP+0x34>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	0800938d 	.word	0x0800938d
 8009380:	08009393 	.word	0x08009393
 8009384:	08009399 	.word	0x08009399
 8009388:	0800939f 	.word	0x0800939f
    case HAL_OK :
      usb_status = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	e00b      	b.n	80093aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	73fb      	strb	r3, [r7, #15]
    break;
 8009396:	e008      	b.n	80093aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e005      	b.n	80093aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e002      	b.n	80093aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	bf00      	nop
  }
  return usb_status;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0b      	bge.n	80093e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	333e      	adds	r3, #62	; 0x3e
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	e00b      	b.n	8009400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	4613      	mov	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7f9 fc9b 	bl	8002d66 <HAL_PCD_SetAddress>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	2b03      	cmp	r3, #3
 8009438:	d816      	bhi.n	8009468 <USBD_LL_SetUSBAddress+0x5c>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USBD_LL_SetUSBAddress+0x34>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009451 	.word	0x08009451
 8009444:	08009457 	.word	0x08009457
 8009448:	0800945d 	.word	0x0800945d
 800944c:	08009463 	.word	0x08009463
    case HAL_OK :
      usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	e00b      	b.n	800946e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
    break;
 800945a:	e008      	b.n	800946e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
    break;
 8009460:	e005      	b.n	800946e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009462:	2303      	movs	r3, #3
 8009464:	73fb      	strb	r3, [r7, #15]
    break;
 8009466:	e002      	b.n	800946e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	73fb      	strb	r3, [r7, #15]
    break;
 800946c:	bf00      	nop
  }
  return usb_status;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	460b      	mov	r3, r1
 8009486:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009496:	7af9      	ldrb	r1, [r7, #11]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f7f9 fd6c 	bl	8002f78 <HAL_PCD_EP_Transmit>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80094a4:	7dbb      	ldrb	r3, [r7, #22]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d816      	bhi.n	80094d8 <USBD_LL_Transmit+0x60>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <USBD_LL_Transmit+0x38>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c7 	.word	0x080094c7
 80094b8:	080094cd 	.word	0x080094cd
 80094bc:	080094d3 	.word	0x080094d3
    case HAL_OK :
      usb_status = USBD_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
    break;
 80094c4:	e00b      	b.n	80094de <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	75fb      	strb	r3, [r7, #23]
    break;
 80094ca:	e008      	b.n	80094de <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094cc:	2301      	movs	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]
    break;
 80094d0:	e005      	b.n	80094de <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	75fb      	strb	r3, [r7, #23]
    break;
 80094d6:	e002      	b.n	80094de <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	75fb      	strb	r3, [r7, #23]
    break;
 80094dc:	bf00      	nop
  }
  return usb_status;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	460b      	mov	r3, r1
 80094f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009506:	7af9      	ldrb	r1, [r7, #11]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	f7f9 fd02 	bl	8002f14 <HAL_PCD_EP_Receive>
 8009510:	4603      	mov	r3, r0
 8009512:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009514:	7dbb      	ldrb	r3, [r7, #22]
 8009516:	2b03      	cmp	r3, #3
 8009518:	d816      	bhi.n	8009548 <USBD_LL_PrepareReceive+0x60>
 800951a:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <USBD_LL_PrepareReceive+0x38>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009531 	.word	0x08009531
 8009524:	08009537 	.word	0x08009537
 8009528:	0800953d 	.word	0x0800953d
 800952c:	08009543 	.word	0x08009543
    case HAL_OK :
      usb_status = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75fb      	strb	r3, [r7, #23]
    break;
 8009534:	e00b      	b.n	800954e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009536:	2303      	movs	r3, #3
 8009538:	75fb      	strb	r3, [r7, #23]
    break;
 800953a:	e008      	b.n	800954e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
    break;
 8009540:	e005      	b.n	800954e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009542:	2303      	movs	r3, #3
 8009544:	75fb      	strb	r3, [r7, #23]
    break;
 8009546:	e002      	b.n	800954e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009548:	2303      	movs	r3, #3
 800954a:	75fb      	strb	r3, [r7, #23]
    break;
 800954c:	bf00      	nop
  }
  return usb_status;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <HAL_PCDEx_LPM_Callback+0x18>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d01f      	beq.n	80095ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800956e:	e03b      	b.n	80095e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009578:	f000 f854 	bl	8009624 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800957c:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009582:	f023 0306 	bic.w	r3, r3, #6
 8009586:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fa3f 	bl	8007a2a <USBD_LL_Resume>
    break;
 80095ac:	e01c      	b.n	80095e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095c0:	f043 0301 	orr.w	r3, r3, #1
 80095c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe fa10 	bl	80079f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	4a04      	ldr	r2, [pc, #16]	; (80095f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80095e0:	f043 0306 	orr.w	r3, r3, #6
 80095e4:	6113      	str	r3, [r2, #16]
    break;
 80095e6:	bf00      	nop
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	e000ed00 	.word	0xe000ed00

080095f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80095fc:	4b03      	ldr	r3, [pc, #12]	; (800960c <USBD_static_malloc+0x18>)
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20000da0 	.word	0x20000da0

08009610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009628:	f7f7 fa16 	bl	8000a58 <SystemClock_Config>
}
 800962c:	bf00      	nop
 800962e:	bd80      	pop	{r7, pc}

08009630 <memset>:
 8009630:	4402      	add	r2, r0
 8009632:	4603      	mov	r3, r0
 8009634:	4293      	cmp	r3, r2
 8009636:	d100      	bne.n	800963a <memset+0xa>
 8009638:	4770      	bx	lr
 800963a:	f803 1b01 	strb.w	r1, [r3], #1
 800963e:	e7f9      	b.n	8009634 <memset+0x4>

08009640 <__libc_init_array>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4d0d      	ldr	r5, [pc, #52]	; (8009678 <__libc_init_array+0x38>)
 8009644:	4c0d      	ldr	r4, [pc, #52]	; (800967c <__libc_init_array+0x3c>)
 8009646:	1b64      	subs	r4, r4, r5
 8009648:	10a4      	asrs	r4, r4, #2
 800964a:	2600      	movs	r6, #0
 800964c:	42a6      	cmp	r6, r4
 800964e:	d109      	bne.n	8009664 <__libc_init_array+0x24>
 8009650:	4d0b      	ldr	r5, [pc, #44]	; (8009680 <__libc_init_array+0x40>)
 8009652:	4c0c      	ldr	r4, [pc, #48]	; (8009684 <__libc_init_array+0x44>)
 8009654:	f000 f818 	bl	8009688 <_init>
 8009658:	1b64      	subs	r4, r4, r5
 800965a:	10a4      	asrs	r4, r4, #2
 800965c:	2600      	movs	r6, #0
 800965e:	42a6      	cmp	r6, r4
 8009660:	d105      	bne.n	800966e <__libc_init_array+0x2e>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	f855 3b04 	ldr.w	r3, [r5], #4
 8009668:	4798      	blx	r3
 800966a:	3601      	adds	r6, #1
 800966c:	e7ee      	b.n	800964c <__libc_init_array+0xc>
 800966e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009672:	4798      	blx	r3
 8009674:	3601      	adds	r6, #1
 8009676:	e7f2      	b.n	800965e <__libc_init_array+0x1e>
 8009678:	08009768 	.word	0x08009768
 800967c:	08009768 	.word	0x08009768
 8009680:	08009768 	.word	0x08009768
 8009684:	0800976c 	.word	0x0800976c

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
