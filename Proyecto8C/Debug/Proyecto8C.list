
Proyecto8C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005848  08005848  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005850  08005850  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd0  20000010  08005868  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  08005868  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a73  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad6  00000000  00000000  00031aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000345c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cea  00000000  00000000  00035680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d3  00000000  00000000  0003636a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012375  00000000  00000000  0003893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c141a  00000000  00000000  0004acb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045e8  00000000  00000000  0010c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001106b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08005690 	.word	0x08005690

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08005690 	.word	0x08005690

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14c      	bne.n	800030a <__udivmoddi4+0xaa>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d967      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b153      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	fa01 fe03 	lsl.w	lr, r1, r3
 8000288:	fa20 f202 	lsr.w	r2, r0, r2
 800028c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbbe f1f7 	udiv	r1, lr, r7
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a2:	fb01 f005 	mul.w	r0, r1, r5
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 3eff 	add.w	lr, r1, #4294967295
 80002b8:	f080 8119 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8116 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb00 f505 	mul.w	r5, r0, r5
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8104 	bcs.w	80004f2 <__udivmoddi4+0x292>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8101 	bls.w	80004f2 <__udivmoddi4+0x292>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xc0>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ea 	beq.w	80004e8 <__udivmoddi4+0x288>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d148      	bne.n	80003ba <__udivmoddi4+0x15a>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xd2>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4696      	mov	lr, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000340:	e9c6 4e00 	strd	r4, lr, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa6>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xea>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 808e 	bne.w	8000470 <__udivmoddi4+0x210>
 8000354:	1a88      	subs	r0, r1, r2
 8000356:	2101      	movs	r1, #1
 8000358:	0c17      	lsrs	r7, r2, #16
 800035a:	fa1f fe82 	uxth.w	lr, r2
 800035e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000362:	fb07 0015 	mls	r0, r7, r5, r0
 8000366:	0c22      	lsrs	r2, r4, #16
 8000368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036c:	fb0e f005 	mul.w	r0, lr, r5
 8000370:	4290      	cmp	r0, r2
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x126>
 8000374:	eb1c 0202 	adds.w	r2, ip, r2
 8000378:	f105 38ff 	add.w	r8, r5, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x124>
 800037e:	4290      	cmp	r0, r2
 8000380:	f200 80cc 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000384:	4645      	mov	r5, r8
 8000386:	1a12      	subs	r2, r2, r0
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039a:	45a6      	cmp	lr, r4
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x150>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x14e>
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	f200 80b4 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003ae:	4610      	mov	r0, r2
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e7a0      	b.n	80002fc <__udivmoddi4+0x9c>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	fbba f8f9 	udiv	r8, sl, r9
 80003d4:	408d      	lsls	r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	fb09 aa18 	mls	sl, r9, r8, sl
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	432b      	orrs	r3, r5
 80003e4:	fa00 f501 	lsl.w	r5, r0, r1
 80003e8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ec:	0c1c      	lsrs	r4, r3, #16
 80003ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f2:	42a0      	cmp	r0, r4
 80003f4:	fa02 f201 	lsl.w	r2, r2, r1
 80003f8:	d90b      	bls.n	8000412 <__udivmoddi4+0x1b2>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	f080 8086 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000406:	42a0      	cmp	r0, r4
 8000408:	f240 8083 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040c:	f1a8 0802 	sub.w	r8, r8, #2
 8000410:	4464      	add	r4, ip
 8000412:	1a24      	subs	r4, r4, r0
 8000414:	b298      	uxth	r0, r3
 8000416:	fbb4 f3f9 	udiv	r3, r4, r9
 800041a:	fb09 4413 	mls	r4, r9, r3, r4
 800041e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000422:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000426:	45a6      	cmp	lr, r4
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x1dc>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000432:	d26a      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000434:	45a6      	cmp	lr, r4
 8000436:	d968      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000438:	3b02      	subs	r3, #2
 800043a:	4464      	add	r4, ip
 800043c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000440:	fba0 9302 	umull	r9, r3, r0, r2
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	429c      	cmp	r4, r3
 800044a:	46c8      	mov	r8, r9
 800044c:	469e      	mov	lr, r3
 800044e:	d354      	bcc.n	80004fa <__udivmoddi4+0x29a>
 8000450:	d051      	beq.n	80004f6 <__udivmoddi4+0x296>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d067      	beq.n	8000526 <__udivmoddi4+0x2c6>
 8000456:	ebb5 0308 	subs.w	r3, r5, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	40cb      	lsrs	r3, r1
 8000460:	fa04 f707 	lsl.w	r7, r4, r7
 8000464:	431f      	orrs	r7, r3
 8000466:	40cc      	lsrs	r4, r1
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	2100      	movs	r1, #0
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0xa6>
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	f1c3 0020 	rsb	r0, r3, #32
 8000478:	40c1      	lsrs	r1, r0
 800047a:	409d      	lsls	r5, r3
 800047c:	fa24 f000 	lsr.w	r0, r4, r0
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	4328      	orrs	r0, r5
 8000486:	fbb1 f5f7 	udiv	r5, r1, r7
 800048a:	fb07 1115 	mls	r1, r7, r5, r1
 800048e:	fa1f fe8c 	uxth.w	lr, ip
 8000492:	0c02      	lsrs	r2, r0, #16
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	fa04 f403 	lsl.w	r4, r4, r3
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80004bc:	fb07 2211 	mls	r2, r7, r1, r2
 80004c0:	b280      	uxth	r0, r0
 80004c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004c6:	fb01 f20e 	mul.w	r2, r1, lr
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x280>
 80004ce:	eb1c 0000 	adds.w	r0, ip, r0
 80004d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004d6:	d216      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d914      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004dc:	3902      	subs	r1, #2
 80004de:	4460      	add	r0, ip
 80004e0:	1a80      	subs	r0, r0, r2
 80004e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004e6:	e73a      	b.n	800035e <__udivmoddi4+0xfe>
 80004e8:	4631      	mov	r1, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e70b      	b.n	8000306 <__udivmoddi4+0xa6>
 80004ee:	4671      	mov	r1, lr
 80004f0:	e6e9      	b.n	80002c6 <__udivmoddi4+0x66>
 80004f2:	4610      	mov	r0, r2
 80004f4:	e6fe      	b.n	80002f4 <__udivmoddi4+0x94>
 80004f6:	454d      	cmp	r5, r9
 80004f8:	d2ab      	bcs.n	8000452 <__udivmoddi4+0x1f2>
 80004fa:	ebb9 0802 	subs.w	r8, r9, r2
 80004fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000502:	3801      	subs	r0, #1
 8000504:	e7a5      	b.n	8000452 <__udivmoddi4+0x1f2>
 8000506:	4641      	mov	r1, r8
 8000508:	e7ea      	b.n	80004e0 <__udivmoddi4+0x280>
 800050a:	4603      	mov	r3, r0
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1dc>
 800050e:	4645      	mov	r5, r8
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	46d0      	mov	r8, sl
 8000514:	e77d      	b.n	8000412 <__udivmoddi4+0x1b2>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e749      	b.n	80003b0 <__udivmoddi4+0x150>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e731      	b.n	8000386 <__udivmoddi4+0x126>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xdc>
 8000526:	4631      	mov	r1, r6
 8000528:	e6ed      	b.n	8000306 <__udivmoddi4+0xa6>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000534:	f000 fae4 	bl	8000b00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000538:	f000 f872 	bl	8000620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053c:	f000 f8b2 	bl	80006a4 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000540:	f001 fd60 	bl	8002004 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semaverde */
	semaverdeHandle = osSemaphoreNew(5, 0, &semaverde_attributes);
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <main+0x9c>)
 8000546:	2100      	movs	r1, #0
 8000548:	2005      	movs	r0, #5
 800054a:	f001 fe99 	bl	8002280 <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

	/* creation of semarillo */
	semarilloHandle = osSemaphoreNew(5, 0, &semarillo_attributes);
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	2005      	movs	r0, #5
 800055a:	f001 fe91 	bl	8002280 <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <main+0xa8>)
 8000562:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of num_pulsa */
	num_pulsaHandle = osMessageQueueNew(3, sizeof(uint16_t),
 8000564:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <main+0xac>)
 8000566:	2102      	movs	r1, #2
 8000568:	2003      	movs	r0, #3
 800056a:	f001 ff8b 	bl	8002484 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <main+0xb0>)
 8000572:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <main+0xb4>)
 8000576:	2100      	movs	r1, #0
 8000578:	481b      	ldr	r0, [pc, #108]	; (80005e8 <main+0xb8>)
 800057a:	f001 fda9 	bl	80020d0 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <main+0xbc>)
 8000582:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of ledVerde */
	ledVerdeHandle = osThreadNew(Start_led_verde, NULL, &ledVerde_attributes);
 8000584:	4a1a      	ldr	r2, [pc, #104]	; (80005f0 <main+0xc0>)
 8000586:	2100      	movs	r1, #0
 8000588:	481a      	ldr	r0, [pc, #104]	; (80005f4 <main+0xc4>)
 800058a:	f001 fda1 	bl	80020d0 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <main+0xc8>)
 8000592:	6013      	str	r3, [r2, #0]

	/* creation of ledAmarillo */
	ledAmarilloHandle = osThreadNew(Start_led_amarillo, NULL,
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <main+0xcc>)
 8000596:	2100      	movs	r1, #0
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <main+0xd0>)
 800059a:	f001 fd99 	bl	80020d0 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xd4>)
 80005a2:	6013      	str	r3, [r2, #0]
			&ledAmarillo_attributes);

	/* creation of control_leds */
	control_ledsHandle = osThreadNew(Start_control_leds, NULL,
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <main+0xd8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0xdc>)
 80005aa:	f001 fd91 	bl	80020d0 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <main+0xe0>)
 80005b2:	6013      	str	r3, [r2, #0]
			&control_leds_attributes);

	/* creation of respuesta */
	respuestaHandle = osThreadNew(StartTask05, NULL, &respuesta_attributes);
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <main+0xe4>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0xe8>)
 80005ba:	f001 fd89 	bl	80020d0 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a16      	ldr	r2, [pc, #88]	; (800061c <main+0xec>)
 80005c2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005c4:	f001 fd50 	bl	8002068 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005c8:	e7fe      	b.n	80005c8 <main+0x98>
 80005ca:	bf00      	nop
 80005cc:	080057f0 	.word	0x080057f0
 80005d0:	20000044 	.word	0x20000044
 80005d4:	08005800 	.word	0x08005800
 80005d8:	20000048 	.word	0x20000048
 80005dc:	080057d8 	.word	0x080057d8
 80005e0:	20000040 	.word	0x20000040
 80005e4:	08005724 	.word	0x08005724
 80005e8:	08000755 	.word	0x08000755
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	08005748 	.word	0x08005748
 80005f4:	08000765 	.word	0x08000765
 80005f8:	20000030 	.word	0x20000030
 80005fc:	0800576c 	.word	0x0800576c
 8000600:	080007a9 	.word	0x080007a9
 8000604:	20000034 	.word	0x20000034
 8000608:	08005790 	.word	0x08005790
 800060c:	080007e9 	.word	0x080007e9
 8000610:	20000038 	.word	0x20000038
 8000614:	080057b4 	.word	0x080057b4
 8000618:	08000891 	.word	0x08000891
 800061c:	2000003c 	.word	0x2000003c

08000620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	; 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fff4 	bl	800561c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064e:	2300      	movs	r3, #0
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000652:	2300      	movs	r3, #0
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd16 	bl	800108c <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x4a>
		Error_Handler();
 8000666:	f000 f95f 	bl	8000928 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f818 	bl	80016b8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x72>
		Error_Handler();
 800068e:	f000 f94b 	bl	8000928 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000692:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SystemClock_Config+0x80>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	42420070 	.word	0x42420070

080006a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_GPIO_Init+0xa4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VERDE_Pin | AMARILLO_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	21c0      	movs	r1, #192	; 0xc0
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <MX_GPIO_Init+0xa8>)
 80006ee:	f000 fcb4 	bl	800105a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TAMPER_Pin */
	GPIO_InitStruct.Pin = TAMPER_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TAMPER_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_GPIO_Init+0xa8>)
 8000708:	f000 fb0c 	bl	8000d24 <HAL_GPIO_Init>

	/*Configure GPIO pin : WKUP_Pin */
	GPIO_InitStruct.Pin = WKUP_Pin;
 800070c:	2301      	movs	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xac>)
 8000720:	f000 fb00 	bl	8000d24 <HAL_GPIO_Init>

	/*Configure GPIO pins : VERDE_Pin AMARILLO_Pin */
	GPIO_InitStruct.Pin = VERDE_Pin | AMARILLO_Pin;
 8000724:	23c0      	movs	r3, #192	; 0xc0
 8000726:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xa8>)
 800073c:	f000 faf2 	bl	8000d24 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800

08000754 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {

		osDelay(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f001 fd61 	bl	8002224 <osDelay>
 8000762:	e7fb      	b.n	800075c <StartDefaultTask+0x8>

08000764 <Start_led_verde>:
 * @brief Function implementing the ledVerde thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_verde */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Start_led_verde+0x3c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fe1f 	bl	80023b8 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <Start_led_verde+0x40>)
 8000780:	f000 fc6b 	bl	800105a <HAL_GPIO_WritePin>
		osDelay(300);
 8000784:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000788:	f001 fd4c 	bl	8002224 <osDelay>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2140      	movs	r1, #64	; 0x40
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <Start_led_verde+0x40>)
 8000792:	f000 fc62 	bl	800105a <HAL_GPIO_WritePin>
		osDelay(300);
 8000796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079a:	f001 fd43 	bl	8002224 <osDelay>
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 800079e:	e7e5      	b.n	800076c <Start_led_verde+0x8>
 80007a0:	20000044 	.word	0x20000044
 80007a4:	40011000 	.word	0x40011000

080007a8 <Start_led_amarillo>:
 * @brief Function implementing the ledAmarillo thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_amarillo */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <Start_led_amarillo+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fdfd 	bl	80023b8 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <Start_led_amarillo+0x3c>)
 80007c4:	f000 fc49 	bl	800105a <HAL_GPIO_WritePin>
		osDelay(200);
 80007c8:	20c8      	movs	r0, #200	; 0xc8
 80007ca:	f001 fd2b 	bl	8002224 <osDelay>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <Start_led_amarillo+0x3c>)
 80007d4:	f000 fc41 	bl	800105a <HAL_GPIO_WritePin>
		osDelay(200);
 80007d8:	20c8      	movs	r0, #200	; 0xc8
 80007da:	f001 fd23 	bl	8002224 <osDelay>
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 80007de:	e7e7      	b.n	80007b0 <Start_led_amarillo+0x8>
 80007e0:	20000048 	.word	0x20000048
 80007e4:	40011000 	.word	0x40011000

080007e8 <Start_control_leds>:
 * @brief Function implementing the control_leds thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_control_leds */
void Start_control_leds(void *argument) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_control_leds */
	/* Infinite loop */

	unsigned short respuesta;
	//mientras no se plse el tamper, esperamos de forma activa
	while (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80007f0:	bf00      	nop
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4824      	ldr	r0, [pc, #144]	; (8000888 <Start_control_leds+0xa0>)
 80007f8:	f000 fc18 	bl	800102c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d13d      	bne.n	800087e <Start_control_leds+0x96>
		osDelay(101);
 8000802:	2065      	movs	r0, #101	; 0x65
 8000804:	f001 fd0e 	bl	8002224 <osDelay>
		osMessageQueueReset(num_pulsaHandle);
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <Start_control_leds+0xa4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 ffa5 	bl	800275c <osMessageQueueReset>
		for (;;) {
			osMessageQueueGet(num_pulsaHandle, &respuesta, 0, 0xFFFFFFFF);
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <Start_control_leds+0xa4>)
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	f107 010e 	add.w	r1, r7, #14
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	2200      	movs	r2, #0
 8000820:	f001 ff2a 	bl	8002678 <osMessageQueueGet>
			if (respuesta % 2 == 0) { // es par
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	b29b      	uxth	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10a      	bne.n	8000846 <Start_control_leds+0x5e>
				HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <Start_control_leds+0xa0>)
 8000836:	f000 fc10 	bl	800105a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <Start_control_leds+0xa0>)
 8000840:	f000 fc0b 	bl	800105a <HAL_GPIO_WritePin>
 8000844:	e009      	b.n	800085a <Start_control_leds+0x72>
			} else {
				HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <Start_control_leds+0xa0>)
 800084c:	f000 fc05 	bl	800105a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <Start_control_leds+0xa0>)
 8000856:	f000 fc00 	bl	800105a <HAL_GPIO_WritePin>
			}

			osDelay(2000);
 800085a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800085e:	f001 fce1 	bl	8002224 <osDelay>
			HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <Start_control_leds+0xa0>)
 8000868:	f000 fbf7 	bl	800105a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <Start_control_leds+0xa0>)
 8000872:	f000 fbf2 	bl	800105a <HAL_GPIO_WritePin>
			osDelay(10); // eliminar en la fase 4
 8000876:	200a      	movs	r0, #10
 8000878:	f001 fcd4 	bl	8002224 <osDelay>
			osMessageQueueGet(num_pulsaHandle, &respuesta, 0, 0xFFFFFFFF);
 800087c:	e7c9      	b.n	8000812 <Start_control_leds+0x2a>
		}
	}
	/* USER CODE END Start_control_leds */
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40011000 	.word	0x40011000
 800088c:	20000040 	.word	0x20000040

08000890 <StartTask05>:
 * @brief Function implementing the respuesta thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	unsigned short conta2;
	for (;;) {
		if (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 8000898:	2101      	movs	r1, #1
 800089a:	4817      	ldr	r0, [pc, #92]	; (80008f8 <StartTask05+0x68>)
 800089c:	f000 fbc6 	bl	800102c <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d10e      	bne.n	80008c4 <StartTask05+0x34>
			conta2++;
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	81fb      	strh	r3, [r7, #14]
			while (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 80008ae:	e002      	b.n	80008b6 <StartTask05+0x26>
				//hasta que no se libere no salimos
				osDelay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 fcb7 	bl	8002224 <osDelay>
			while (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 80008b6:	2101      	movs	r1, #1
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <StartTask05+0x68>)
 80008ba:	f000 fbb7 	bl	800102c <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d0f5      	beq.n	80008b0 <StartTask05+0x20>
			}
		}
		// metemos en la cola
		if (HAL_GPIO_ReadPin(GPIOC, TAMPER_Pin) == 0 && conta2 != 0) {
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <StartTask05+0x6c>)
 80008ca:	f000 fbaf 	bl	800102c <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10c      	bne.n	80008ee <StartTask05+0x5e>
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d009      	beq.n	80008ee <StartTask05+0x5e>
			osMessageQueuePut(num_pulsaHandle, &conta2, 0, 0);
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <StartTask05+0x70>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f107 010e 	add.w	r1, r7, #14
 80008e2:	2300      	movs	r3, #0
 80008e4:	2200      	movs	r2, #0
 80008e6:	f001 fe53 	bl	8002590 <osMessageQueuePut>
			conta2 = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	81fb      	strh	r3, [r7, #14]
		}

		osDelay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f001 fc98 	bl	8002224 <osDelay>
		if (HAL_GPIO_ReadPin(GPIOA, WKUP_Pin) == 1) {
 80008f4:	e7d0      	b.n	8000898 <StartTask05+0x8>
 80008f6:	bf00      	nop
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40011000 	.word	0x40011000
 8000900:	20000040 	.word	0x20000040

08000904 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000916:	f000 f909 	bl	8000b2c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40012c00 	.word	0x40012c00

08000928 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_MspInit+0x4c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x4c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x4c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 f9ac 	bl	8000cce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <HAL_InitTick+0xd0>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a2d      	ldr	r2, [pc, #180]	; (8000a54 <HAL_InitTick+0xd0>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <HAL_InitTick+0xd0>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 020c 	add.w	r2, r7, #12
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 f877 	bl	8001ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009c2:	f001 f861 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 80009c6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <HAL_InitTick+0xd4>)
 80009cc:	fba2 2303 	umull	r2, r3, r2, r3
 80009d0:	0c9b      	lsrs	r3, r3, #18
 80009d2:	3b01      	subs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_InitTick+0xd8>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <HAL_InitTick+0xdc>)
 80009da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_InitTick+0xd8>)
 80009de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <HAL_InitTick+0xd8>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_InitTick+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_InitTick+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_InitTick+0xd8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <HAL_InitTick+0xd8>)
 80009fe:	f001 f8a5 	bl	8001b4c <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11b      	bne.n	8000a48 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a10:	4812      	ldr	r0, [pc, #72]	; (8000a5c <HAL_InitTick+0xd8>)
 8000a12:	f001 f8f3 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d111      	bne.n	8000a48 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 f96e 	bl	8000d06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d808      	bhi.n	8000a42 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2019      	movs	r0, #25
 8000a36:	f000 f94a 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_InitTick+0xe0>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e002      	b.n	8000a48 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	2000004c 	.word	0x2000004c
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	20000004 	.word	0x20000004

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
	...

08000a94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM1_UP_IRQHandler+0x10>)
 8000a9a:	f001 f909 	bl	8001cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000004c 	.word	0x2000004c

08000aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff fff8 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aba:	490c      	ldr	r1, [pc, #48]	; (8000aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad0:	4c09      	ldr	r4, [pc, #36]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000ade:	f004 fda5 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fd25 	bl	8000530 <main>
  bx lr
 8000ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000af0:	08005858 	.word	0x08005858
  ldr r2, =_sbss
 8000af4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af8:	20001de0 	.word	0x20001de0

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8d1 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff ff34 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff ff0a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000094 	.word	0x20000094

08000b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000094 	.word	0x20000094

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff4f 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff64 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ffb2 	bl	8000c54 <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff81 	bl	8000c00 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff57 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e169      	b.n	800100c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8158 	bne.w	8001006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a9a      	ldr	r2, [pc, #616]	; (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d05e      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d60:	4a98      	ldr	r2, [pc, #608]	; (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d875      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d66:	4a98      	ldr	r2, [pc, #608]	; (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d058      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d6c:	4a96      	ldr	r2, [pc, #600]	; (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d86f      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d72:	4a96      	ldr	r2, [pc, #600]	; (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d052      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d78:	4a94      	ldr	r2, [pc, #592]	; (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d869      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d7e:	4a94      	ldr	r2, [pc, #592]	; (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d04c      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d84:	4a92      	ldr	r2, [pc, #584]	; (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d863      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d8a:	4a92      	ldr	r2, [pc, #584]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d046      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
 8000d90:	4a90      	ldr	r2, [pc, #576]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d85d      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d82a      	bhi.n	8000df0 <HAL_GPIO_Init+0xcc>
 8000d9a:	2b12      	cmp	r3, #18
 8000d9c:	d859      	bhi.n	8000e52 <HAL_GPIO_Init+0x12e>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <HAL_GPIO_Init+0x80>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000df9 	.word	0x08000df9
 8000dac:	08000e0b 	.word	0x08000e0b
 8000db0:	08000e4d 	.word	0x08000e4d
 8000db4:	08000e53 	.word	0x08000e53
 8000db8:	08000e53 	.word	0x08000e53
 8000dbc:	08000e53 	.word	0x08000e53
 8000dc0:	08000e53 	.word	0x08000e53
 8000dc4:	08000e53 	.word	0x08000e53
 8000dc8:	08000e53 	.word	0x08000e53
 8000dcc:	08000e53 	.word	0x08000e53
 8000dd0:	08000e53 	.word	0x08000e53
 8000dd4:	08000e53 	.word	0x08000e53
 8000dd8:	08000e53 	.word	0x08000e53
 8000ddc:	08000e53 	.word	0x08000e53
 8000de0:	08000e53 	.word	0x08000e53
 8000de4:	08000e53 	.word	0x08000e53
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e15 	.word	0x08000e15
 8000df0:	4a79      	ldr	r2, [pc, #484]	; (8000fd8 <HAL_GPIO_Init+0x2b4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000df6:	e02c      	b.n	8000e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e029      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	3304      	adds	r3, #4
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e024      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	3308      	adds	r3, #8
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e01f      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	330c      	adds	r3, #12
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e01a      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e26:	2304      	movs	r3, #4
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e013      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	611a      	str	r2, [r3, #16]
          break;
 8000e3e:	e009      	b.n	8000e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	615a      	str	r2, [r3, #20]
          break;
 8000e4a:	e003      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_Init+0x130>
          break;
 8000e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d801      	bhi.n	8000e5e <HAL_GPIO_Init+0x13a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	e001      	b.n	8000e62 <HAL_GPIO_Init+0x13e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3304      	adds	r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2bff      	cmp	r3, #255	; 0xff
 8000e68:	d802      	bhi.n	8000e70 <HAL_GPIO_Init+0x14c>
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x152>
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	3b08      	subs	r3, #8
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	6a39      	ldr	r1, [r7, #32]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x2b8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ebc:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_GPIO_Init+0x2bc>)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a40      	ldr	r2, [pc, #256]	; (8000fe4 <HAL_GPIO_Init+0x2c0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d013      	beq.n	8000f10 <HAL_GPIO_Init+0x1ec>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a3f      	ldr	r2, [pc, #252]	; (8000fe8 <HAL_GPIO_Init+0x2c4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_Init+0x1e8>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3d      	ldr	r2, [pc, #244]	; (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_Init+0x1e0>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f04:	2304      	movs	r3, #4
 8000f06:	e004      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <HAL_GPIO_Init+0x1ee>
 8000f10:	2300      	movs	r3, #0
 8000f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f22:	492f      	ldr	r1, [pc, #188]	; (8000fe0 <HAL_GPIO_Init+0x2bc>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	492c      	ldr	r1, [pc, #176]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4928      	ldr	r1, [pc, #160]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	4922      	ldr	r1, [pc, #136]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60cb      	str	r3, [r1, #12]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	491e      	ldr	r1, [pc, #120]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4918      	ldr	r1, [pc, #96]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d021      	beq.n	8000ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
 8000fc0:	e021      	b.n	8001006 <HAL_GPIO_Init+0x2e2>
 8000fc2:	bf00      	nop
 8000fc4:	10320000 	.word	0x10320000
 8000fc8:	10310000 	.word	0x10310000
 8000fcc:	10220000 	.word	0x10220000
 8000fd0:	10210000 	.word	0x10210000
 8000fd4:	10120000 	.word	0x10120000
 8000fd8:	10110000 	.word	0x10110000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40011400 	.word	0x40011400
 8000ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <HAL_GPIO_Init+0x304>)
 8001002:	4013      	ands	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fa22 f303 	lsr.w	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	f47f ae8e 	bne.w	8000d38 <HAL_GPIO_Init+0x14>
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	372c      	adds	r7, #44	; 0x2c
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800106a:	787b      	ldrb	r3, [r7, #1]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001076:	e003      	b.n	8001080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	041a      	lsls	r2, r3, #16
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e304      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8087 	beq.w	80011ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ac:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d00c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b8:	4b8f      	ldr	r3, [pc, #572]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d112      	bne.n	80010ea <HAL_RCC_OscConfig+0x5e>
 80010c4:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d10b      	bne.n	80010ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d2:	4b89      	ldr	r3, [pc, #548]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d06c      	beq.n	80011b8 <HAL_RCC_OscConfig+0x12c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d168      	bne.n	80011b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e2de      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f2:	d106      	bne.n	8001102 <HAL_RCC_OscConfig+0x76>
 80010f4:	4b80      	ldr	r3, [pc, #512]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a7f      	ldr	r2, [pc, #508]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e02e      	b.n	8001160 <HAL_RCC_OscConfig+0xd4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x98>
 800110a:	4b7b      	ldr	r3, [pc, #492]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7a      	ldr	r2, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b78      	ldr	r3, [pc, #480]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0xd4>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0xbc>
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a71      	ldr	r2, [pc, #452]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6e      	ldr	r2, [pc, #440]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0xd4>
 8001148:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a6a      	ldr	r2, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a67      	ldr	r2, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcf2 	bl	8000b50 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcee 	bl	8000b50 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e292      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xe4>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fcde 	bl	8000b50 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fcda 	bl	8000b50 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e27e      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x10c>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c6:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d11c      	bne.n	8001218 <HAL_RCC_OscConfig+0x18c>
 80011de:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x176>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e252      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4939      	ldr	r1, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e03a      	b.n	800128e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x270>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fc93 	bl	8000b50 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fc8f 	bl	8000b50 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e233      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x270>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc72 	bl	8000b50 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc6e 	bl	8000b50 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e212      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d03a      	beq.n	8001310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d019      	beq.n	80012d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_RCC_OscConfig+0x274>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc52 	bl	8000b50 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc4e 	bl	8000b50 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1f2      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fc1e 	bl	8001b10 <RCC_Delay>
 80012d4:	e01c      	b.n	8001310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_RCC_OscConfig+0x274>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fc38 	bl	8000b50 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e2:	e00f      	b.n	8001304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc34 	bl	8000b50 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d908      	bls.n	8001304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1d8      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	42420000 	.word	0x42420000
 8001300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	4b9b      	ldr	r3, [pc, #620]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e9      	bne.n	80012e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80a6 	beq.w	800146a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001322:	4b94      	ldr	r3, [pc, #592]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10d      	bne.n	800134a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b91      	ldr	r3, [pc, #580]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a90      	ldr	r2, [pc, #576]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001346:	2301      	movs	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x4ec>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x4ec>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x4ec>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff fbf5 	bl	8000b50 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff fbf1 	bl	8000b50 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e195      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x4ec>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x312>
 8001390:	4b78      	ldr	r3, [pc, #480]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a77      	ldr	r2, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	e02d      	b.n	80013fa <HAL_RCC_OscConfig+0x36e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x334>
 80013a6:	4b73      	ldr	r3, [pc, #460]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a72      	ldr	r2, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b70      	ldr	r3, [pc, #448]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	e01c      	b.n	80013fa <HAL_RCC_OscConfig+0x36e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x356>
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a69      	ldr	r2, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a66      	ldr	r2, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x36e>
 80013e2:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d015      	beq.n	800142e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fba5 	bl	8000b50 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fba1 	bl	8000b50 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e143      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	4b54      	ldr	r3, [pc, #336]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ee      	beq.n	800140a <HAL_RCC_OscConfig+0x37e>
 800142c:	e014      	b.n	8001458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb8f 	bl	8000b50 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fb8b 	bl	8000b50 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e12d      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ee      	bne.n	8001436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d105      	bne.n	800146a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 808c 	beq.w	800158c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800148a:	2b08      	cmp	r3, #8
 800148c:	d108      	bne.n	80014a0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e103      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d14e      	bne.n	8001546 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0ef      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_RCC_OscConfig+0x4f0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb3f 	bl	8000b50 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014d6:	f7ff fb3b 	bl	8000b50 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0df      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	491c      	ldr	r1, [pc, #112]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001502:	4313      	orrs	r3, r2
 8001504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4918      	ldr	r1, [pc, #96]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001514:	4313      	orrs	r3, r2
 8001516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_RCC_OscConfig+0x4f0>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb17 	bl	8000b50 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001526:	f7ff fb13 	bl	8000b50 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0b7      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x49a>
 8001544:	e022      	b.n	800158c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_RCC_OscConfig+0x4e8>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x4f0>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fafa 	bl	8000b50 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800155e:	e00f      	b.n	8001580 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001560:	f7ff faf6 	bl	8000b50 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d908      	bls.n	8001580 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e09a      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e9      	bne.n	8001560 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8088 	beq.w	80016a6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d068      	beq.n	8001674 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d14d      	bne.n	8001646 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_RCC_OscConfig+0x628>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff face 	bl	8000b50 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff faca 	bl	8000b50 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e06e      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015de:	d10f      	bne.n	8001600 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4931      	ldr	r1, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f023 020f 	bic.w	r2, r3, #15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	492d      	ldr	r1, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	430b      	orrs	r3, r1
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x628>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fa97 	bl	8000b50 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fa93 	bl	8000b50 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e037      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x59a>
 8001644:	e02f      	b.n	80016a6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x628>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fa80 	bl	8000b50 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fa7c 	bl	8000b50 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c8>
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x624>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	42420060 	.word	0x42420060

080016b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0d0      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4965      	ldr	r1, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d040      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d115      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e073      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06b      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff f9d2 	bl	8000b50 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff f9ce 	bl	8000b50 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e053      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d210      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4922      	ldr	r1, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1cc>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f88c 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	08005810 	.word	0x08005810
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b092      	sub	sp, #72	; 0x48
 8001892:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d002      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d003      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018c4:	e0c3      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018ca:	e0c3      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ac 	beq.w	8001a3e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80018e6:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x1e0>)
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 808c 	beq.w	8001a1a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001902:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	3301      	adds	r3, #1
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3302      	adds	r3, #2
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	2200      	movs	r2, #0
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	627a      	str	r2, [r7, #36]	; 0x24
 8001926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001928:	2200      	movs	r2, #0
 800192a:	4618      	mov	r0, r3
 800192c:	4611      	mov	r1, r2
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fb00 f203 	mul.w	r2, r0, r3
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	fb03 f301 	mul.w	r3, r3, r1
 800193a:	4413      	add	r3, r2
 800193c:	6a3a      	ldr	r2, [r7, #32]
 800193e:	fba2 4500 	umull	r4, r5, r2, r0
 8001942:	442b      	add	r3, r5
 8001944:	461d      	mov	r5, r3
 8001946:	4622      	mov	r2, r4
 8001948:	462b      	mov	r3, r5
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0159      	lsls	r1, r3, #5
 8001954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001958:	0150      	lsls	r0, r2, #5
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	ebb2 0a04 	subs.w	sl, r2, r4
 8001962:	eb63 0b05 	sbc.w	fp, r3, r5
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001972:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001976:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800197a:	ebb2 080a 	subs.w	r8, r2, sl
 800197e:	eb63 090b 	sbc.w	r9, r3, fp
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	eb18 0304 	adds.w	r3, r8, r4
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	eb49 0305 	adc.w	r3, r9, r5
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	024b      	lsls	r3, r1, #9
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	4604      	mov	r4, r0
 80019bc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019c0:	4601      	mov	r1, r0
 80019c2:	024a      	lsls	r2, r1, #9
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ca:	2200      	movs	r2, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	617a      	str	r2, [r7, #20]
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	2200      	movs	r2, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	60fa      	str	r2, [r7, #12]
 80019d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019dc:	4622      	mov	r2, r4
 80019de:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019e2:	4645      	mov	r5, r8
 80019e4:	fb05 f202 	mul.w	r2, r5, r2
 80019e8:	46cc      	mov	ip, r9
 80019ea:	4625      	mov	r5, r4
 80019ec:	461c      	mov	r4, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	fb03 f30c 	mul.w	r3, r3, ip
 80019f4:	4413      	add	r3, r2
 80019f6:	4622      	mov	r2, r4
 80019f8:	4644      	mov	r4, r8
 80019fa:	fba2 2404 	umull	r2, r4, r2, r4
 80019fe:	61fc      	str	r4, [r7, #28]
 8001a00:	61ba      	str	r2, [r7, #24]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0c:	f7fe fc10 	bl	8000230 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
 8001a18:	e007      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001a1e:	fb03 f202 	mul.w	r2, r3, r2
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001a2c:	7b5b      	ldrb	r3, [r3, #13]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8001a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	e004      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a4c:	e002      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001a50:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3748      	adds	r7, #72	; 0x48
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	08005828 	.word	0x08005828
 8001a6c:	08005838 	.word	0x08005838
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0adb      	lsrs	r3, r3, #11
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08005820 	.word	0x08005820

08001ab0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	220f      	movs	r2, #15
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0207 	and.w	r2, r3, #7
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40022000 	.word	0x40022000

08001b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <RCC_Delay+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <RCC_Delay+0x38>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b2c:	bf00      	nop
  }
  while (Delay --);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <RCC_Delay+0x1c>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000000 	.word	0x20000000
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9bc 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e03f      	b.n	8001c94 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_TIM_Base_Start_IT+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d00e      	beq.n	8001c5e <HAL_TIM_Base_Start_IT+0x62>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_TIM_Base_Start_IT+0x62>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xac>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_TIM_Base_Start_IT+0x62>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_TIM_Base_Start_IT+0xb0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d111      	bne.n	8001c82 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b06      	cmp	r3, #6
 8001c6e:	d010      	beq.n	8001c92 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c80:	e007      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d122      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0202 	mvn.w	r2, #2
 8001cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8ed 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8e0 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8ef 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0204 	mvn.w	r2, #4
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8c3 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8b6 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8c5 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0208 	mvn.w	r2, #8
 8001d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f899 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f88c 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f89b 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0210 	mvn.w	r2, #16
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f86f 	bl	8001ed2 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f862 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f871 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0201 	mvn.w	r2, #1
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fd68 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b80      	cmp	r3, #128	; 0x80
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8c9 	bl	8001ff2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b40      	cmp	r3, #64	; 0x40
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f835 	bl	8001ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d107      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f894 	bl	8001fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <TIM_Base_SetConfig+0xc8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <TIM_Base_SetConfig+0xcc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <TIM_Base_SetConfig+0xd0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <TIM_Base_SetConfig+0xd4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <TIM_Base_SetConfig+0xc8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0x72>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0x72>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <TIM_Base_SetConfig+0xcc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0x72>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <TIM_Base_SetConfig+0xd0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x72>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <TIM_Base_SetConfig+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <TIM_Base_SetConfig+0xc8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00

08001fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200a:	f3ef 8305 	mrs	r3, IPSR
 800200e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002010:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002016:	f3ef 8310 	mrs	r3, PRIMASK
 800201a:	607b      	str	r3, [r7, #4]
  return(result);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <osKernelInitialize+0x32>
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <osKernelInitialize+0x60>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d109      	bne.n	800203e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202a:	f3ef 8311 	mrs	r3, BASEPRI
 800202e:	603b      	str	r3, [r7, #0]
  return(result);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002036:	f06f 0305 	mvn.w	r3, #5
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e00c      	b.n	8002058 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <osKernelInitialize+0x60>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <osKernelInitialize+0x60>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e002      	b.n	8002058 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	20000098 	.word	0x20000098

08002068 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800206e:	f3ef 8305 	mrs	r3, IPSR
 8002072:	60bb      	str	r3, [r7, #8]
  return(result);
 8002074:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207a:	f3ef 8310 	mrs	r3, PRIMASK
 800207e:	607b      	str	r3, [r7, #4]
  return(result);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <osKernelStart+0x32>
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <osKernelStart+0x64>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d109      	bne.n	80020a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800208e:	f3ef 8311 	mrs	r3, BASEPRI
 8002092:	603b      	str	r3, [r7, #0]
  return(result);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800209a:	f06f 0305 	mvn.w	r3, #5
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e00e      	b.n	80020c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <osKernelStart+0x64>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <osKernelStart+0x64>)
 80020ac:	2202      	movs	r2, #2
 80020ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80020b0:	f001 fdb2 	bl	8003c18 <vTaskStartScheduler>
      stat = osOK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e002      	b.n	80020c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000098 	.word	0x20000098

080020d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b092      	sub	sp, #72	; 0x48
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e0:	f3ef 8305 	mrs	r3, IPSR
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8094 	bne.w	8002216 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ee:	f3ef 8310 	mrs	r3, PRIMASK
 80020f2:	623b      	str	r3, [r7, #32]
  return(result);
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 808d 	bne.w	8002216 <osThreadNew+0x146>
 80020fc:	4b48      	ldr	r3, [pc, #288]	; (8002220 <osThreadNew+0x150>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d106      	bne.n	8002112 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002104:	f3ef 8311 	mrs	r3, BASEPRI
 8002108:	61fb      	str	r3, [r7, #28]
  return(result);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8082 	bne.w	8002216 <osThreadNew+0x146>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d07e      	beq.n	8002216 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800211c:	2318      	movs	r3, #24
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002120:	2300      	movs	r3, #0
 8002122:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002124:	f107 031b 	add.w	r3, r7, #27
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d045      	beq.n	80021c2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <osThreadNew+0x74>
        name = attr->name;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <osThreadNew+0x9a>
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	2b38      	cmp	r3, #56	; 0x38
 800215c:	d805      	bhi.n	800216a <osThreadNew+0x9a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <osThreadNew+0x9e>
        return (NULL);
 800216a:	2300      	movs	r3, #0
 800216c:	e054      	b.n	8002218 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <osThreadNew+0xd4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b5b      	cmp	r3, #91	; 0x5b
 800218c:	d90a      	bls.n	80021a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <osThreadNew+0xd4>
        mem = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a2:	e010      	b.n	80021c6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10c      	bne.n	80021c6 <osThreadNew+0xf6>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <osThreadNew+0xf6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <osThreadNew+0xf6>
          mem = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c0:	e001      	b.n	80021c6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d110      	bne.n	80021ee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021d4:	9202      	str	r2, [sp, #8]
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f001 fb4c 	bl	8003880 <xTaskCreateStatic>
 80021e8:	4603      	mov	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e013      	b.n	8002216 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d110      	bne.n	8002216 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f001 fb96 	bl	8003938 <xTaskCreate>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <osThreadNew+0x146>
          hTask = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002216:	697b      	ldr	r3, [r7, #20]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3738      	adds	r7, #56	; 0x38
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000098 	.word	0x20000098

08002224 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800222c:	f3ef 8305 	mrs	r3, IPSR
 8002230:	613b      	str	r3, [r7, #16]
  return(result);
 8002232:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10f      	bne.n	8002258 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	60fb      	str	r3, [r7, #12]
  return(result);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <osDelay+0x34>
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <osDelay+0x58>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d109      	bne.n	8002260 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800224c:	f3ef 8311 	mrs	r3, BASEPRI
 8002250:	60bb      	str	r3, [r7, #8]
  return(result);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <osDelay+0x3c>
    stat = osErrorISR;
 8002258:	f06f 0305 	mvn.w	r3, #5
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e007      	b.n	8002270 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <osDelay+0x4c>
      vTaskDelay(ticks);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f001 fca0 	bl	8003bb0 <vTaskDelay>
    }
  }

  return (stat);
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000098 	.word	0x20000098

08002280 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002290:	f3ef 8305 	mrs	r3, IPSR
 8002294:	61bb      	str	r3, [r7, #24]
  return(result);
 8002296:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8086 	bne.w	80023aa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229e:	f3ef 8310 	mrs	r3, PRIMASK
 80022a2:	617b      	str	r3, [r7, #20]
  return(result);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d17f      	bne.n	80023aa <osSemaphoreNew+0x12a>
 80022aa:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <osSemaphoreNew+0x134>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d105      	bne.n	80022be <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022b2:	f3ef 8311 	mrs	r3, BASEPRI
 80022b6:	613b      	str	r3, [r7, #16]
  return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d175      	bne.n	80023aa <osSemaphoreNew+0x12a>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d072      	beq.n	80023aa <osSemaphoreNew+0x12a>
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d86e      	bhi.n	80023aa <osSemaphoreNew+0x12a>
    mem = -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <osSemaphoreNew+0x6e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b4f      	cmp	r3, #79	; 0x4f
 80022e6:	d902      	bls.n	80022ee <osSemaphoreNew+0x6e>
        mem = 1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	e00c      	b.n	8002308 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <osSemaphoreNew+0x88>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <osSemaphoreNew+0x88>
          mem = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	e001      	b.n	8002308 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d04c      	beq.n	80023aa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d128      	bne.n	8002368 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10a      	bne.n	8002332 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2203      	movs	r2, #3
 8002322:	9200      	str	r2, [sp, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2001      	movs	r0, #1
 800232a:	f000 fb95 	bl	8002a58 <xQueueGenericCreateStatic>
 800232e:	6278      	str	r0, [r7, #36]	; 0x24
 8002330:	e005      	b.n	800233e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002332:	2203      	movs	r2, #3
 8002334:	2100      	movs	r1, #0
 8002336:	2001      	movs	r0, #1
 8002338:	f000 fc05 	bl	8002b46 <xQueueGenericCreate>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d022      	beq.n	800238a <osSemaphoreNew+0x10a>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01f      	beq.n	800238a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800234a:	2300      	movs	r3, #0
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002352:	f000 fcc3 	bl	8002cdc <xQueueGenericSend>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d016      	beq.n	800238a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800235c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235e:	f001 f8bf 	bl	80034e0 <vQueueDelete>
            hSemaphore = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e010      	b.n	800238a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	461a      	mov	r2, r3
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fc46 	bl	8002c08 <xQueueCreateCountingSemaphoreStatic>
 800237c:	6278      	str	r0, [r7, #36]	; 0x24
 800237e:	e004      	b.n	800238a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fc77 	bl	8002c76 <xQueueCreateCountingSemaphore>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <osSemaphoreNew+0x11e>
          name = attr->name;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	e001      	b.n	80023a2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80023a2:	69f9      	ldr	r1, [r7, #28]
 80023a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a6:	f001 f9e5 	bl	8003774 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000098 	.word	0x20000098

080023b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80023d0:	f06f 0303 	mvn.w	r3, #3
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e04b      	b.n	8002470 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023d8:	f3ef 8305 	mrs	r3, IPSR
 80023dc:	617b      	str	r3, [r7, #20]
  return(result);
 80023de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10f      	bne.n	8002404 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e4:	f3ef 8310 	mrs	r3, PRIMASK
 80023e8:	613b      	str	r3, [r7, #16]
  return(result);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <osSemaphoreAcquire+0x4c>
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <osSemaphoreAcquire+0xc4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d128      	bne.n	800244a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023f8:	f3ef 8311 	mrs	r3, BASEPRI
 80023fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d022      	beq.n	800244a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800240a:	f06f 0303 	mvn.w	r3, #3
 800240e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002410:	e02d      	b.n	800246e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	461a      	mov	r2, r3
 800241c:	2100      	movs	r1, #0
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	f000 ffde 	bl	80033e0 <xQueueReceiveFromISR>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d003      	beq.n	8002432 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800242a:	f06f 0302 	mvn.w	r3, #2
 800242e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002430:	e01d      	b.n	800246e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01a      	beq.n	800246e <osSemaphoreAcquire+0xb6>
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <osSemaphoreAcquire+0xc8>)
 800243a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002448:	e011      	b.n	800246e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	69b8      	ldr	r0, [r7, #24]
 800244e:	f000 febb 	bl	80031c8 <xQueueSemaphoreTake>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d00b      	beq.n	8002470 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800245e:	f06f 0301 	mvn.w	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	e004      	b.n	8002470 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002466:	f06f 0302 	mvn.w	r3, #2
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	e000      	b.n	8002470 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800246e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002470:	69fb      	ldr	r3, [r7, #28]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000098 	.word	0x20000098
 8002480:	e000ed04 	.word	0xe000ed04

08002484 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002494:	f3ef 8305 	mrs	r3, IPSR
 8002498:	61bb      	str	r3, [r7, #24]
  return(result);
 800249a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800249c:	2b00      	cmp	r3, #0
 800249e:	d16f      	bne.n	8002580 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a0:	f3ef 8310 	mrs	r3, PRIMASK
 80024a4:	617b      	str	r3, [r7, #20]
  return(result);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d169      	bne.n	8002580 <osMessageQueueNew+0xfc>
 80024ac:	4b37      	ldr	r3, [pc, #220]	; (800258c <osMessageQueueNew+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d105      	bne.n	80024c0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024b4:	f3ef 8311 	mrs	r3, BASEPRI
 80024b8:	613b      	str	r3, [r7, #16]
  return(result);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d15f      	bne.n	8002580 <osMessageQueueNew+0xfc>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d05c      	beq.n	8002580 <osMessageQueueNew+0xfc>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d059      	beq.n	8002580 <osMessageQueueNew+0xfc>
    mem = -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d029      	beq.n	800252c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <osMessageQueueNew+0x82>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b4f      	cmp	r3, #79	; 0x4f
 80024e6:	d90e      	bls.n	8002506 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <osMessageQueueNew+0x82>
        mem = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	e014      	b.n	8002530 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d110      	bne.n	8002530 <osMessageQueueNew+0xac>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <osMessageQueueNew+0xac>
          mem = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	e001      	b.n	8002530 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10b      	bne.n	800254e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2100      	movs	r1, #0
 8002540:	9100      	str	r1, [sp, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa87 	bl	8002a58 <xQueueGenericCreateStatic>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24
 800254c:	e008      	b.n	8002560 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002554:	2200      	movs	r2, #0
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 faf4 	bl	8002b46 <xQueueGenericCreate>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <osMessageQueueNew+0xf0>
        name = attr->name;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e001      	b.n	8002578 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002578:	69f9      	ldr	r1, [r7, #28]
 800257a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800257c:	f001 f8fa 	bl	8003774 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002582:	4618      	mov	r0, r3
 8002584:	3728      	adds	r7, #40	; 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000098 	.word	0x20000098

08002590 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a8:	f3ef 8305 	mrs	r3, IPSR
 80025ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80025ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10f      	bne.n	80025d4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b4:	f3ef 8310 	mrs	r3, PRIMASK
 80025b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <osMessageQueuePut+0x44>
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <osMessageQueuePut+0xe0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d12e      	bne.n	8002626 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c8:	f3ef 8311 	mrs	r3, BASEPRI
 80025cc:	617b      	str	r3, [r7, #20]
  return(result);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d028      	beq.n	8002626 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <osMessageQueuePut+0x56>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <osMessageQueuePut+0x56>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80025e6:	f06f 0303 	mvn.w	r3, #3
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80025ec:	e039      	b.n	8002662 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80025f2:	f107 0210 	add.w	r2, r7, #16
 80025f6:	2300      	movs	r3, #0
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6a38      	ldr	r0, [r7, #32]
 80025fc:	f000 fc6c 	bl	8002ed8 <xQueueGenericSendFromISR>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d003      	beq.n	800260e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002606:	f06f 0302 	mvn.w	r3, #2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800260c:	e029      	b.n	8002662 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d026      	beq.n	8002662 <osMessageQueuePut+0xd2>
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <osMessageQueuePut+0xe4>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002624:	e01d      	b.n	8002662 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <osMessageQueuePut+0xa2>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002632:	f06f 0303 	mvn.w	r3, #3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	e014      	b.n	8002664 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800263a:	2300      	movs	r3, #0
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	6a38      	ldr	r0, [r7, #32]
 8002642:	f000 fb4b 	bl	8002cdc <xQueueGenericSend>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d00b      	beq.n	8002664 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002652:	f06f 0301 	mvn.w	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e004      	b.n	8002664 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800265a:	f06f 0302 	mvn.w	r3, #2
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e000      	b.n	8002664 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002662:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002666:	4618      	mov	r0, r3
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000098 	.word	0x20000098
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268e:	f3ef 8305 	mrs	r3, IPSR
 8002692:	61fb      	str	r3, [r7, #28]
  return(result);
 8002694:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269a:	f3ef 8310 	mrs	r3, PRIMASK
 800269e:	61bb      	str	r3, [r7, #24]
  return(result);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <osMessageQueueGet+0x42>
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <osMessageQueueGet+0xdc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d12e      	bne.n	800270c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026ae:	f3ef 8311 	mrs	r3, BASEPRI
 80026b2:	617b      	str	r3, [r7, #20]
  return(result);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d028      	beq.n	800270c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <osMessageQueueGet+0x54>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <osMessageQueueGet+0x54>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80026cc:	f06f 0303 	mvn.w	r3, #3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026d2:	e038      	b.n	8002746 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	461a      	mov	r2, r3
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	6a38      	ldr	r0, [r7, #32]
 80026e2:	f000 fe7d 	bl	80033e0 <xQueueReceiveFromISR>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d003      	beq.n	80026f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80026ec:	f06f 0302 	mvn.w	r3, #2
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026f2:	e028      	b.n	8002746 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d025      	beq.n	8002746 <osMessageQueueGet+0xce>
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <osMessageQueueGet+0xe0>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800270a:	e01c      	b.n	8002746 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <osMessageQueueGet+0xa0>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002718:	f06f 0303 	mvn.w	r3, #3
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	e013      	b.n	8002748 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	6a38      	ldr	r0, [r7, #32]
 8002726:	f000 fc6f 	bl	8003008 <xQueueReceive>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d00b      	beq.n	8002748 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002736:	f06f 0301 	mvn.w	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	e004      	b.n	8002748 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800273e:	f06f 0302 	mvn.w	r3, #2
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e000      	b.n	8002748 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002746:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800274a:	4618      	mov	r0, r3
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000098 	.word	0x20000098
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002768:	f3ef 8305 	mrs	r3, IPSR
 800276c:	617b      	str	r3, [r7, #20]
  return(result);
 800276e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10f      	bne.n	8002794 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002774:	f3ef 8310 	mrs	r3, PRIMASK
 8002778:	613b      	str	r3, [r7, #16]
  return(result);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <osMessageQueueReset+0x38>
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <osMessageQueueReset+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d109      	bne.n	800279c <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002788:	f3ef 8311 	mrs	r3, BASEPRI
 800278c:	60fb      	str	r3, [r7, #12]
  return(result);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8002794:	f06f 0305 	mvn.w	r3, #5
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e00c      	b.n	80027b6 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 80027a2:	f06f 0303 	mvn.w	r3, #3
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	e005      	b.n	80027b6 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 80027ae:	2100      	movs	r1, #0
 80027b0:	69b8      	ldr	r0, [r7, #24]
 80027b2:	f000 f8e9 	bl	8002988 <xQueueGenericReset>
  }

  return (stat);
 80027b6:	69fb      	ldr	r3, [r7, #28]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000098 	.word	0x20000098

080027c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a06      	ldr	r2, [pc, #24]	; (80027ec <vApplicationGetIdleTaskMemory+0x28>)
 80027d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80027da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	2000009c 	.word	0x2000009c
 80027f0:	200000f8 	.word	0x200000f8

080027f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <vApplicationGetTimerTaskMemory+0x2c>)
 8002804:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <vApplicationGetTimerTaskMemory+0x30>)
 800280a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200002f8 	.word	0x200002f8
 8002824:	20000354 	.word	0x20000354

08002828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0208 	add.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0208 	add.w	r2, r3, #8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 0208 	add.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d103      	bne.n	80028e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e00c      	b.n	80028fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3308      	adds	r3, #8
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e002      	b.n	80028f2 <vListInsert+0x2e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d2f6      	bcs.n	80028ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6892      	ldr	r2, [r2, #8]
 800294a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6852      	ldr	r2, [r2, #4]
 8002954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d103      	bne.n	8002968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029b2:	f002 fb59 	bl	8005068 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	3b01      	subs	r3, #1
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d114      	bne.n	8002a32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01a      	beq.n	8002a46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3310      	adds	r3, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fb89 	bl	800412c <xTaskRemoveFromEventList>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <xQueueGenericReset+0xcc>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	e009      	b.n	8002a46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3310      	adds	r3, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fef6 	bl	8002828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fef1 	bl	8002828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a46:	f002 fb3f 	bl	80050c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08e      	sub	sp, #56	; 0x38
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <xQueueGenericCreateStatic+0x52>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <xQueueGenericCreateStatic+0x56>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericCreateStatic+0x58>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	623b      	str	r3, [r7, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <xQueueGenericCreateStatic+0x7e>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueGenericCreateStatic+0x82>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueGenericCreateStatic+0x84>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61fb      	str	r3, [r7, #28]
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002af6:	2350      	movs	r3, #80	; 0x50
 8002af8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d00a      	beq.n	8002b16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	61bb      	str	r3, [r7, #24]
}
 8002b12:	bf00      	nop
 8002b14:	e7fe      	b.n	8002b14 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f843 	bl	8002bc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3730      	adds	r7, #48	; 0x30
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b08a      	sub	sp, #40	; 0x28
 8002b4a:	af02      	add	r7, sp, #8
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	613b      	str	r3, [r7, #16]
}
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e004      	b.n	8002b86 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3350      	adds	r3, #80	; 0x50
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fb6e 	bl	800526c <pvPortMalloc>
 8002b90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00f      	beq.n	8002bb8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3350      	adds	r3, #80	; 0x50
 8002b9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f805 	bl	8002bc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e002      	b.n	8002be4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	69b8      	ldr	r0, [r7, #24]
 8002bf4:	f7ff fec8 	bl	8002988 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	61bb      	str	r3, [r7, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	e7fe      	b.n	8002c2e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d90a      	bls.n	8002c4e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	617b      	str	r3, [r7, #20]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c4e:	2302      	movs	r3, #2
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2100      	movs	r1, #0
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fefd 	bl	8002a58 <xQueueGenericCreateStatic>
 8002c5e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
	}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	613b      	str	r3, [r7, #16]
}
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d90a      	bls.n	8002cba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60fb      	str	r3, [r7, #12]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cba:	2202      	movs	r2, #2
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff41 	bl	8002b46 <xQueueGenericCreate>
 8002cc4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002cd2:	697b      	ldr	r3, [r7, #20]
	}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08e      	sub	sp, #56	; 0x38
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xQueueGenericSend+0x32>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <xQueueGenericSend+0x40>
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <xQueueGenericSend+0x44>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <xQueueGenericSend+0x46>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <xQueueGenericSend+0x60>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d103      	bne.n	8002d4a <xQueueGenericSend+0x6e>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <xQueueGenericSend+0x72>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <xQueueGenericSend+0x74>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericSend+0x8e>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	623b      	str	r3, [r7, #32]
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d6a:	f001 fba1 	bl	80044b0 <xTaskGetSchedulerState>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <xQueueGenericSend+0x9e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSend+0xa2>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSend+0xa4>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueGenericSend+0xbe>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	61fb      	str	r3, [r7, #28]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d9a:	f002 f965 	bl	8005068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <xQueueGenericSend+0xd4>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d129      	bne.n	8002e04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db6:	f000 fbcd 	bl	8003554 <prvCopyDataToQueue>
 8002dba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	3324      	adds	r3, #36	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 f9af 	bl	800412c <xTaskRemoveFromEventList>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <xQueueGenericSend+0x1f8>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	e00a      	b.n	8002dfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dec:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <xQueueGenericSend+0x1f8>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dfc:	f002 f964 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e063      	b.n	8002ecc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e0a:	f002 f95d 	bl	80050c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e05c      	b.n	8002ecc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 f9e9 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e26:	f002 f94f 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e2a:	f000 ff5b 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e2e:	f002 f91b 	bl	8005068 <vPortEnterCritical>
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d103      	bne.n	8002e48 <xQueueGenericSend+0x16c>
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSend+0x182>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5e:	f002 f933 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e62:	1d3a      	adds	r2, r7, #4
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f9d8 	bl	8004220 <xTaskCheckForTimeOut>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d124      	bne.n	8002ec0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e78:	f000 fc64 	bl	8003744 <prvIsQueueFull>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	3310      	adds	r3, #16
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 f8fe 	bl	800408c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e92:	f000 fbef 	bl	8003674 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e96:	f000 ff33 	bl	8003d00 <xTaskResumeAll>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f af7c 	bne.w	8002d9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <xQueueGenericSend+0x1f8>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	e772      	b.n	8002d9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb6:	f000 fbdd 	bl	8003674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eba:	f000 ff21 	bl	8003d00 <xTaskResumeAll>
 8002ebe:	e76c      	b.n	8002d9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f000 fbd7 	bl	8003674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ec6:	f000 ff1b 	bl	8003d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eca:	2300      	movs	r3, #0
		}
	}
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3738      	adds	r7, #56	; 0x38
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08e      	sub	sp, #56	; 0x38
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <xQueueGenericSendFromISR+0x3c>
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <xQueueGenericSendFromISR+0x40>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <xQueueGenericSendFromISR+0x42>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	623b      	str	r3, [r7, #32]
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d103      	bne.n	8002f42 <xQueueGenericSendFromISR+0x6a>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <xQueueGenericSendFromISR+0x6e>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <xQueueGenericSendFromISR+0x70>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	61fb      	str	r3, [r7, #28]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f62:	f002 f945 	bl	80051f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f66:	f3ef 8211 	mrs	r2, BASEPRI
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	61ba      	str	r2, [r7, #24]
 8002f7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <xQueueGenericSendFromISR+0xbc>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d12c      	bne.n	8002fee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa4:	f000 fad6 	bl	8003554 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fa8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d112      	bne.n	8002fd8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	3324      	adds	r3, #36	; 0x24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 f8b4 	bl	800412c <xTaskRemoveFromEventList>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e007      	b.n	8002fe8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	b25a      	sxtb	r2, r3
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002fec:	e001      	b.n	8002ff2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ffc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003000:	4618      	mov	r0, r3
 8003002:	3738      	adds	r7, #56	; 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <xQueueReceive+0x30>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	623b      	str	r3, [r7, #32]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <xQueueReceive+0x3e>
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueReceive+0x42>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueReceive+0x44>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueReceive+0x5e>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61fb      	str	r3, [r7, #28]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003066:	f001 fa23 	bl	80044b0 <xTaskGetSchedulerState>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <xQueueReceive+0x6e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueReceive+0x72>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueReceive+0x74>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueReceive+0x8e>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61bb      	str	r3, [r7, #24]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003096:	f001 ffe7 	bl	8005068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01f      	beq.n	80030e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030aa:	f000 fabd 	bl	8003628 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00f      	beq.n	80030de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	3310      	adds	r3, #16
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f832 	bl	800412c <xTaskRemoveFromEventList>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <xQueueReceive+0x1bc>)
 80030d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030de:	f001 fff3 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e069      	b.n	80031ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ec:	f001 ffec 	bl	80050c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e062      	b.n	80031ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f878 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003108:	f001 ffde 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310c:	f000 fdea 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003110:	f001 ffaa 	bl	8005068 <vPortEnterCritical>
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueReceive+0x122>
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003130:	b25b      	sxtb	r3, r3
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d103      	bne.n	8003140 <xQueueReceive+0x138>
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003140:	f001 ffc2 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003144:	1d3a      	adds	r2, r7, #4
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f867 	bl	8004220 <xTaskCheckForTimeOut>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d123      	bne.n	80031a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315a:	f000 fadd 	bl	8003718 <prvIsQueueEmpty>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	3324      	adds	r3, #36	; 0x24
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f000 ff8d 	bl	800408c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003174:	f000 fa7e 	bl	8003674 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003178:	f000 fdc2 	bl	8003d00 <xTaskResumeAll>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d189      	bne.n	8003096 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <xQueueReceive+0x1bc>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	e780      	b.n	8003096 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f000 fa6d 	bl	8003674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319a:	f000 fdb1 	bl	8003d00 <xTaskResumeAll>
 800319e:	e77a      	b.n	8003096 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f000 fa67 	bl	8003674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a6:	f000 fdab 	bl	8003d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ac:	f000 fab4 	bl	8003718 <prvIsQueueEmpty>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f43f af6f 	beq.w	8003096 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3730      	adds	r7, #48	; 0x30
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	; 0x38
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	623b      	str	r3, [r7, #32]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	61fb      	str	r3, [r7, #28]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003218:	f001 f94a 	bl	80044b0 <xTaskGetSchedulerState>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <xQueueSemaphoreTake+0x60>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <xQueueSemaphoreTake+0x64>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <xQueueSemaphoreTake+0x66>
 800322c:	2300      	movs	r3, #0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	61bb      	str	r3, [r7, #24]
}
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003248:	f001 ff0e 	bl	8005068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d024      	beq.n	80032a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003268:	f001 faa2 	bl	80047b0 <pvTaskIncrementMutexHeldCount>
 800326c:	4602      	mov	r2, r0
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00f      	beq.n	800329a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	3310      	adds	r3, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f000 ff54 	bl	800412c <xTaskRemoveFromEventList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800328a:	4b54      	ldr	r3, [pc, #336]	; (80033dc <xQueueSemaphoreTake+0x214>)
 800328c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800329a:	f001 ff15 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 800329e:	2301      	movs	r3, #1
 80032a0:	e097      	b.n	80033d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	617b      	str	r3, [r7, #20]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032c4:	f001 ff00 	bl	80050c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e082      	b.n	80033d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 ff8c 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e0:	f001 fef2 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e4:	f000 fcfe 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e8:	f001 febe 	bl	8005068 <vPortEnterCritical>
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d103      	bne.n	8003302 <xQueueSemaphoreTake+0x13a>
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d103      	bne.n	8003318 <xQueueSemaphoreTake+0x150>
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003318:	f001 fed6 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331c:	463a      	mov	r2, r7
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ff7b 	bl	8004220 <xTaskCheckForTimeOut>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d132      	bne.n	8003396 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003332:	f000 f9f1 	bl	8003718 <prvIsQueueEmpty>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d026      	beq.n	800338a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003344:	f001 fe90 	bl	8005068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	f001 f8cd 	bl	80044ec <xTaskPriorityInherit>
 8003352:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003354:	f001 feb8 	bl	80050c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	3324      	adds	r3, #36	; 0x24
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fe93 	bl	800408c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003368:	f000 f984 	bl	8003674 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800336c:	f000 fcc8 	bl	8003d00 <xTaskResumeAll>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f af68 	bne.w	8003248 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <xQueueSemaphoreTake+0x214>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	e75e      	b.n	8003248 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800338a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800338c:	f000 f972 	bl	8003674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003390:	f000 fcb6 	bl	8003d00 <xTaskResumeAll>
 8003394:	e758      	b.n	8003248 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003398:	f000 f96c 	bl	8003674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339c:	f000 fcb0 	bl	8003d00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033a2:	f000 f9b9 	bl	8003718 <prvIsQueueEmpty>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f43f af4d 	beq.w	8003248 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80033b4:	f001 fe58 	bl	8005068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ba:	f000 f8b4 	bl	8003526 <prvGetDisinheritPriorityAfterTimeout>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f96c 	bl	80046a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033cc:	f001 fe7c 	bl	80050c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3738      	adds	r7, #56	; 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	; 0x38
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	623b      	str	r3, [r7, #32]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <xQueueReceiveFromISR+0x3a>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <xQueueReceiveFromISR+0x3e>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueReceiveFromISR+0x40>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	61fb      	str	r3, [r7, #28]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800343a:	f001 fed9 	bl	80051f0 <vPortValidateInterruptPriority>
	__asm volatile
 800343e:	f3ef 8211 	mrs	r2, BASEPRI
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	61ba      	str	r2, [r7, #24]
 8003454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02f      	beq.n	80034c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003474:	f000 f8d8 	bl	8003628 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d112      	bne.n	80034b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	3310      	adds	r3, #16
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fe48 	bl	800412c <xTaskRemoveFromEventList>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e007      	b.n	80034c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b4:	3301      	adds	r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	b25a      	sxtb	r2, r3
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80034c0:	2301      	movs	r3, #1
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
 80034c4:	e001      	b.n	80034ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f383 8811 	msr	BASEPRI, r3
}
 80034d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3738      	adds	r7, #56	; 0x38
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <vQueueDelete+0x28>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	60bb      	str	r3, [r7, #8]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f95b 	bl	80037c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f001 ff6b 	bl	80053f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e001      	b.n	8003548 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003548:	68fb      	ldr	r3, [r7, #12]
	}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d14d      	bne.n	8003616 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4618      	mov	r0, r3
 8003580:	f001 f822 	bl	80045c8 <xTaskPriorityDisinherit>
 8003584:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	e043      	b.n	8003616 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6898      	ldr	r0, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	461a      	mov	r2, r3
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	f002 f868 	bl	8005674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	441a      	add	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d32b      	bcc.n	8003616 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	e026      	b.n	8003616 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68d8      	ldr	r0, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	461a      	mov	r2, r3
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	f002 f84e 	bl	8005674 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	425b      	negs	r3, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d207      	bcs.n	8003604 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	425b      	negs	r3, r3
 80035fe:	441a      	add	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d105      	bne.n	8003616 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3b01      	subs	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800361e:	697b      	ldr	r3, [r7, #20]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d303      	bcc.n	800365c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	461a      	mov	r2, r3
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f002 f804 	bl	8005674 <memcpy>
	}
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800367c:	f001 fcf4 	bl	8005068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003686:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003688:	e011      	b.n	80036ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3324      	adds	r3, #36	; 0x24
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fd48 	bl	800412c <xTaskRemoveFromEventList>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036a2:	f000 fe1f 	bl	80042e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dce9      	bgt.n	800368a <prvUnlockQueue+0x16>
 80036b6:	e000      	b.n	80036ba <prvUnlockQueue+0x46>
					break;
 80036b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036c2:	f001 fd01 	bl	80050c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036c6:	f001 fccf 	bl	8005068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d2:	e011      	b.n	80036f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3310      	adds	r3, #16
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fd23 	bl	800412c <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036ec:	f000 fdfa 	bl	80042e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	dce9      	bgt.n	80036d4 <prvUnlockQueue+0x60>
 8003700:	e000      	b.n	8003704 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003702:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800370c:	f001 fcdc 	bl	80050c8 <vPortExitCritical>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003720:	f001 fca2 	bl	8005068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e001      	b.n	8003736 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003736:	f001 fcc7 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800374c:	f001 fc8c 	bl	8005068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	429a      	cmp	r2, r3
 800375a:	d102      	bne.n	8003762 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e001      	b.n	8003766 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003766:	f001 fcaf 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e014      	b.n	80037ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <vQueueAddToRegistry+0x4c>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003790:	490b      	ldr	r1, [pc, #44]	; (80037c0 <vQueueAddToRegistry+0x4c>)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <vQueueAddToRegistry+0x4c>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037a6:	e006      	b.n	80037b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d9e7      	bls.n	8003784 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000754 	.word	0x20000754

080037c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e016      	b.n	8003800 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <vQueueUnregisterQueue+0x50>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80037e2:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <vQueueUnregisterQueue+0x50>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2100      	movs	r1, #0
 80037e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <vQueueUnregisterQueue+0x50>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	2200      	movs	r2, #0
 80037f6:	605a      	str	r2, [r3, #4]
				break;
 80037f8:	e006      	b.n	8003808 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b07      	cmp	r3, #7
 8003804:	d9e5      	bls.n	80037d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000754 	.word	0x20000754

08003818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003828:	f001 fc1e 	bl	8005068 <vPortEnterCritical>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003832:	b25b      	sxtb	r3, r3
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d103      	bne.n	8003842 <vQueueWaitForMessageRestricted+0x2a>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003848:	b25b      	sxtb	r3, r3
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d103      	bne.n	8003858 <vQueueWaitForMessageRestricted+0x40>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003858:	f001 fc36 	bl	80050c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fc31 	bl	80040d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff fefe 	bl	8003674 <prvUnlockQueue>
	}
 8003878:	bf00      	nop
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af04      	add	r7, sp, #16
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	61fb      	str	r3, [r7, #28]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038c6:	235c      	movs	r3, #92	; 0x5c
 80038c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b5c      	cmp	r3, #92	; 0x5c
 80038ce:	d00a      	beq.n	80038e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	61bb      	str	r3, [r7, #24]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01e      	beq.n	800392a <xTaskCreateStatic+0xaa>
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01b      	beq.n	800392a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003904:	2300      	movs	r3, #0
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	9302      	str	r3, [sp, #8]
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f850 	bl	80039c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003924:	f000 f8d4 	bl	8003ad0 <prvAddNewTaskToReadyList>
 8003928:	e001      	b.n	800392e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800392e:	697b      	ldr	r3, [r7, #20]
	}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08c      	sub	sp, #48	; 0x30
 800393c:	af04      	add	r7, sp, #16
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fc8d 	bl	800526c <pvPortMalloc>
 8003952:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800395a:	205c      	movs	r0, #92	; 0x5c
 800395c:	f001 fc86 	bl	800526c <pvPortMalloc>
 8003960:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
 800396e:	e005      	b.n	800397c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003970:	6978      	ldr	r0, [r7, #20]
 8003972:	f001 fd3f 	bl	80053f4 <vPortFree>
 8003976:	e001      	b.n	800397c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d017      	beq.n	80039b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	2300      	movs	r3, #0
 800398e:	9303      	str	r3, [sp, #12]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f80e 	bl	80039c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a6:	69f8      	ldr	r0, [r7, #28]
 80039a8:	f000 f892 	bl	8003ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039ac:	2301      	movs	r3, #1
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e002      	b.n	80039b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039b8:	69bb      	ldr	r3, [r7, #24]
	}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	21a5      	movs	r1, #165	; 0xa5
 80039dc:	f001 fe1e 	bl	800561c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ea:	3b01      	subs	r3, #1
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f023 0307 	bic.w	r3, r3, #7
 80039f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	617b      	str	r3, [r7, #20]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e012      	b.n	8003a46 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	7819      	ldrb	r1, [r3, #0]
 8003a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3334      	adds	r3, #52	; 0x34
 8003a30:	460a      	mov	r2, r1
 8003a32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d9e9      	bls.n	8003a20 <prvInitialiseNewTask+0x5e>
 8003a4c:	e000      	b.n	8003a50 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003a4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	2b37      	cmp	r3, #55	; 0x37
 8003a5c:	d901      	bls.n	8003a62 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5e:	2337      	movs	r3, #55	; 0x37
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2200      	movs	r2, #0
 8003a72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fef4 	bl	8002866 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3318      	adds	r3, #24
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe feef 	bl	8002866 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f001 f9f7 	bl	8004ea4 <pxPortInitialiseStack>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad8:	f001 fac6 	bl	8005068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aee:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <prvAddNewTaskToReadyList+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d110      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003afc:	f000 fc16 	bl	800432c <prvInitialiseTaskLists>
 8003b00:	e00d      	b.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d802      	bhi.n	8003b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <prvAddNewTaskToReadyList+0xd0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <prvAddNewTaskToReadyList+0x74>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <prvAddNewTaskToReadyList+0xd4>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <prvAddNewTaskToReadyList+0xd8>)
 8003b52:	441a      	add	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7fe fe8f 	bl	800287e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b60:	f001 fab2 	bl	80050c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <prvAddNewTaskToReadyList+0xcc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <prvAddNewTaskToReadyList+0xc8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d207      	bcs.n	8003b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <prvAddNewTaskToReadyList+0xdc>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000c68 	.word	0x20000c68
 8003b98:	20000794 	.word	0x20000794
 8003b9c:	20000c74 	.word	0x20000c74
 8003ba0:	20000c84 	.word	0x20000c84
 8003ba4:	20000c70 	.word	0x20000c70
 8003ba8:	20000798 	.word	0x20000798
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <vTaskDelay+0x60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <vTaskDelay+0x30>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60bb      	str	r3, [r7, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003be0:	f000 f880 	bl	8003ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003be4:	2100      	movs	r1, #0
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fdf6 	bl	80047d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bec:	f000 f888 	bl	8003d00 <xTaskResumeAll>
 8003bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <vTaskDelay+0x64>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000c90 	.word	0x20000c90
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c26:	463a      	mov	r2, r7
 8003c28:	1d39      	adds	r1, r7, #4
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fdc8 	bl	80027c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c34:	6839      	ldr	r1, [r7, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	9202      	str	r2, [sp, #8]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	460a      	mov	r2, r1
 8003c46:	4921      	ldr	r1, [pc, #132]	; (8003ccc <vTaskStartScheduler+0xb4>)
 8003c48:	4821      	ldr	r0, [pc, #132]	; (8003cd0 <vTaskStartScheduler+0xb8>)
 8003c4a:	f7ff fe19 	bl	8003880 <xTaskCreateStatic>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <vTaskStartScheduler+0xbc>)
 8003c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <vTaskStartScheduler+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e001      	b.n	8003c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c6c:	f000 fe08 	bl	8004880 <xTimerCreateTimerTask>
 8003c70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d116      	bne.n	8003ca6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	613b      	str	r3, [r7, #16]
}
 8003c8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <vTaskStartScheduler+0xc0>)
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <vTaskStartScheduler+0xc4>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vTaskStartScheduler+0xc8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ca0:	f001 f982 	bl	8004fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ca4:	e00e      	b.n	8003cc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d10a      	bne.n	8003cc4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60fb      	str	r3, [r7, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <vTaskStartScheduler+0xaa>
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0800570c 	.word	0x0800570c
 8003cd0:	080042fd 	.word	0x080042fd
 8003cd4:	20000c8c 	.word	0x20000c8c
 8003cd8:	20000c88 	.word	0x20000c88
 8003cdc:	20000c74 	.word	0x20000c74
 8003ce0:	20000c6c 	.word	0x20000c6c

08003ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <vTaskSuspendAll+0x18>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <vTaskSuspendAll+0x18>)
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000c90 	.word	0x20000c90

08003d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	603b      	str	r3, [r7, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d2c:	f001 f99c 	bl	8005068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <xTaskResumeAll+0x118>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d162      	bne.n	8003e08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <xTaskResumeAll+0x11c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d05e      	beq.n	8003e08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4a:	e02f      	b.n	8003dac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <xTaskResumeAll+0x120>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3318      	adds	r3, #24
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fdeb 	bl	8002934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fde6 	bl	8002934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <xTaskResumeAll+0x124>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d903      	bls.n	8003d7c <xTaskResumeAll+0x7c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <xTaskResumeAll+0x124>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <xTaskResumeAll+0x128>)
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fe fd73 	bl	800287e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <xTaskResumeAll+0x12c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <xTaskResumeAll+0x130>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <xTaskResumeAll+0x120>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1cb      	bne.n	8003d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dba:	f000 fb55 	bl	8004468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <xTaskResumeAll+0x134>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dca:	f000 f845 	bl	8003e58 <xTaskIncrementTick>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <xTaskResumeAll+0x130>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f1      	bne.n	8003dca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <xTaskResumeAll+0x134>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xTaskResumeAll+0x130>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskResumeAll+0x138>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e08:	f001 f95e 	bl	80050c8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000c90 	.word	0x20000c90
 8003e1c:	20000c68 	.word	0x20000c68
 8003e20:	20000c28 	.word	0x20000c28
 8003e24:	20000c70 	.word	0x20000c70
 8003e28:	20000798 	.word	0x20000798
 8003e2c:	20000794 	.word	0x20000794
 8003e30:	20000c7c 	.word	0x20000c7c
 8003e34:	20000c78 	.word	0x20000c78
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <xTaskGetTickCount+0x18>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e48:	687b      	ldr	r3, [r7, #4]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20000c6c 	.word	0x20000c6c

08003e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <xTaskIncrementTick+0x150>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 808e 	bne.w	8003f88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <xTaskIncrementTick+0x154>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e74:	4a4d      	ldr	r2, [pc, #308]	; (8003fac <xTaskIncrementTick+0x154>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d120      	bne.n	8003ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <xTaskIncrementTick+0x158>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	603b      	str	r3, [r7, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <xTaskIncrementTick+0x46>
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <xTaskIncrementTick+0x158>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <xTaskIncrementTick+0x15c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a41      	ldr	r2, [pc, #260]	; (8003fb0 <xTaskIncrementTick+0x158>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <xTaskIncrementTick+0x15c>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <xTaskIncrementTick+0x160>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <xTaskIncrementTick+0x160>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	f000 fad3 	bl	8004468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <xTaskIncrementTick+0x164>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d34e      	bcc.n	8003f6a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ecc:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <xTaskIncrementTick+0x158>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <xTaskIncrementTick+0x82>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <xTaskIncrementTick+0x84>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <xTaskIncrementTick+0x164>)
 8003ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee6:	601a      	str	r2, [r3, #0]
					break;
 8003ee8:	e03f      	b.n	8003f6a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <xTaskIncrementTick+0x158>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d203      	bcs.n	8003f0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f02:	4a2e      	ldr	r2, [pc, #184]	; (8003fbc <xTaskIncrementTick+0x164>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6013      	str	r3, [r2, #0]
						break;
 8003f08:	e02f      	b.n	8003f6a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fd10 	bl	8002934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3318      	adds	r3, #24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fd07 	bl	8002934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <xTaskIncrementTick+0x168>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d903      	bls.n	8003f3a <xTaskIncrementTick+0xe2>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <xTaskIncrementTick+0x168>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <xTaskIncrementTick+0x16c>)
 8003f48:	441a      	add	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f7fe fc94 	bl	800287e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <xTaskIncrementTick+0x170>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d3b3      	bcc.n	8003ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f68:	e7b0      	b.n	8003ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f6a:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <xTaskIncrementTick+0x170>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4914      	ldr	r1, [pc, #80]	; (8003fc4 <xTaskIncrementTick+0x16c>)
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d907      	bls.n	8003f92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <xTaskIncrementTick+0x174>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <xTaskIncrementTick+0x174>)
 8003f90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <xTaskIncrementTick+0x178>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f9e:	697b      	ldr	r3, [r7, #20]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000c90 	.word	0x20000c90
 8003fac:	20000c6c 	.word	0x20000c6c
 8003fb0:	20000c20 	.word	0x20000c20
 8003fb4:	20000c24 	.word	0x20000c24
 8003fb8:	20000c80 	.word	0x20000c80
 8003fbc:	20000c88 	.word	0x20000c88
 8003fc0:	20000c70 	.word	0x20000c70
 8003fc4:	20000798 	.word	0x20000798
 8003fc8:	20000794 	.word	0x20000794
 8003fcc:	20000c78 	.word	0x20000c78
 8003fd0:	20000c7c 	.word	0x20000c7c

08003fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <vTaskSwitchContext+0xa4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <vTaskSwitchContext+0xa8>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fe8:	e041      	b.n	800406e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <vTaskSwitchContext+0xa8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <vTaskSwitchContext+0xac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e010      	b.n	800401a <vTaskSwitchContext+0x46>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	607b      	str	r3, [r7, #4]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <vTaskSwitchContext+0x3e>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	491a      	ldr	r1, [pc, #104]	; (8004084 <vTaskSwitchContext+0xb0>)
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0e4      	beq.n	8003ff8 <vTaskSwitchContext+0x24>
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <vTaskSwitchContext+0xb0>)
 800403a:	4413      	add	r3, r2
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3308      	adds	r3, #8
 8004050:	429a      	cmp	r2, r3
 8004052:	d104      	bne.n	800405e <vTaskSwitchContext+0x8a>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <vTaskSwitchContext+0xb4>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4a05      	ldr	r2, [pc, #20]	; (8004080 <vTaskSwitchContext+0xac>)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6013      	str	r3, [r2, #0]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	20000c90 	.word	0x20000c90
 800407c:	20000c7c 	.word	0x20000c7c
 8004080:	20000c70 	.word	0x20000c70
 8004084:	20000798 	.word	0x20000798
 8004088:	20000794 	.word	0x20000794

0800408c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <vTaskPlaceOnEventList+0x44>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3318      	adds	r3, #24
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe fc02 	bl	80028c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040c0:	2101      	movs	r1, #1
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f000 fb88 	bl	80047d8 <prvAddCurrentTaskToDelayedList>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000794 	.word	0x20000794

080040d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	617b      	str	r3, [r7, #20]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <vTaskPlaceOnEventListRestricted+0x54>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3318      	adds	r3, #24
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fe fbba 	bl	800287e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f000 fb5d 	bl	80047d8 <prvAddCurrentTaskToDelayedList>
	}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000794 	.word	0x20000794

0800412c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3318      	adds	r3, #24
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fbe9 	bl	8002934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004162:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <xTaskRemoveFromEventList+0xb0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11d      	bne.n	80041a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fbe0 	bl	8002934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <xTaskRemoveFromEventList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d903      	bls.n	8004188 <xTaskRemoveFromEventList+0x5c>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <xTaskRemoveFromEventList+0xb4>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <xTaskRemoveFromEventList+0xb8>)
 8004196:	441a      	add	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe fb6d 	bl	800287e <vListInsertEnd>
 80041a4:	e005      	b.n	80041b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3318      	adds	r3, #24
 80041aa:	4619      	mov	r1, r3
 80041ac:	480e      	ldr	r0, [pc, #56]	; (80041e8 <xTaskRemoveFromEventList+0xbc>)
 80041ae:	f7fe fb66 	bl	800287e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <xTaskRemoveFromEventList+0xc0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d905      	bls.n	80041cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <xTaskRemoveFromEventList+0xc4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e001      	b.n	80041d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000c90 	.word	0x20000c90
 80041e0:	20000c70 	.word	0x20000c70
 80041e4:	20000798 	.word	0x20000798
 80041e8:	20000c28 	.word	0x20000c28
 80041ec:	20000794 	.word	0x20000794
 80041f0:	20000c7c 	.word	0x20000c7c

080041f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <vTaskInternalSetTimeOutState+0x24>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <vTaskInternalSetTimeOutState+0x28>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000c80 	.word	0x20000c80
 800421c:	20000c6c 	.word	0x20000c6c

08004220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004262:	f000 ff01 	bl	8005068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <xTaskCheckForTimeOut+0xbc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d102      	bne.n	8004286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e023      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <xTaskCheckForTimeOut+0xc0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d007      	beq.n	80042a2 <xTaskCheckForTimeOut+0x82>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d302      	bcc.n	80042a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e015      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d20b      	bcs.n	80042c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff9b 	bl	80041f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e004      	b.n	80042ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ce:	f000 fefb 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 80042d2:	69fb      	ldr	r3, [r7, #28]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000c6c 	.word	0x20000c6c
 80042e0:	20000c80 	.word	0x20000c80

080042e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <vTaskMissedYield+0x14>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000c7c 	.word	0x20000c7c

080042fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004304:	f000 f852 	bl	80043ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvIdleTask+0x28>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d9f9      	bls.n	8004304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <prvIdleTask+0x2c>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004320:	e7f0      	b.n	8004304 <prvIdleTask+0x8>
 8004322:	bf00      	nop
 8004324:	20000798 	.word	0x20000798
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e00c      	b.n	8004352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <prvInitialiseTaskLists+0x60>)
 8004344:	4413      	add	r3, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fa6e 	bl	8002828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b37      	cmp	r3, #55	; 0x37
 8004356:	d9ef      	bls.n	8004338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004358:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800435a:	f7fe fa65 	bl	8002828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800435e:	480d      	ldr	r0, [pc, #52]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004360:	f7fe fa62 	bl	8002828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004364:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x6c>)
 8004366:	f7fe fa5f 	bl	8002828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800436a:	480c      	ldr	r0, [pc, #48]	; (800439c <prvInitialiseTaskLists+0x70>)
 800436c:	f7fe fa5c 	bl	8002828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x74>)
 8004372:	f7fe fa59 	bl	8002828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <prvInitialiseTaskLists+0x78>)
 8004378:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800437a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <prvInitialiseTaskLists+0x7c>)
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000798 	.word	0x20000798
 8004390:	20000bf8 	.word	0x20000bf8
 8004394:	20000c0c 	.word	0x20000c0c
 8004398:	20000c28 	.word	0x20000c28
 800439c:	20000c3c 	.word	0x20000c3c
 80043a0:	20000c54 	.word	0x20000c54
 80043a4:	20000c20 	.word	0x20000c20
 80043a8:	20000c24 	.word	0x20000c24

080043ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b2:	e019      	b.n	80043e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b4:	f000 fe58 	bl	8005068 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <prvCheckTasksWaitingTermination+0x50>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fab5 	bl	8002934 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043de:	f000 fe73 	bl	80050c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f810 	bl	8004408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e1      	bne.n	80043b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000c3c 	.word	0x20000c3c
 8004400:	20000c68 	.word	0x20000c68
 8004404:	20000c50 	.word	0x20000c50

08004408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ffe8 	bl	80053f4 <vPortFree>
				vPortFree( pxTCB );
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 ffe5 	bl	80053f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800442a:	e018      	b.n	800445e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004432:	2b01      	cmp	r3, #1
 8004434:	d103      	bne.n	800443e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 ffdc 	bl	80053f4 <vPortFree>
	}
 800443c:	e00f      	b.n	800445e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004444:	2b02      	cmp	r3, #2
 8004446:	d00a      	beq.n	800445e <prvDeleteTCB+0x56>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvDeleteTCB+0x54>
	}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <prvResetNextTaskUnblockTime+0x40>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <prvResetNextTaskUnblockTime+0x14>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <prvResetNextTaskUnblockTime+0x16>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvResetNextTaskUnblockTime+0x44>)
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800448a:	e008      	b.n	800449e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <prvResetNextTaskUnblockTime+0x40>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <prvResetNextTaskUnblockTime+0x44>)
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	20000c20 	.word	0x20000c20
 80044ac:	20000c88 	.word	0x20000c88

080044b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <xTaskGetSchedulerState+0x34>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044be:	2301      	movs	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e008      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <xTaskGetSchedulerState+0x38>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044cc:	2302      	movs	r3, #2
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e001      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044d6:	687b      	ldr	r3, [r7, #4]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000c74 	.word	0x20000c74
 80044e8:	20000c90 	.word	0x20000c90

080044ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d056      	beq.n	80045b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	4b2d      	ldr	r3, [pc, #180]	; (80045bc <xTaskPriorityInherit+0xd0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d246      	bcs.n	800459e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db06      	blt.n	8004526 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <xTaskPriorityInherit+0xd0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6959      	ldr	r1, [r3, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <xTaskPriorityInherit+0xd4>)
 8004538:	4413      	add	r3, r2
 800453a:	4299      	cmp	r1, r3
 800453c:	d101      	bne.n	8004542 <xTaskPriorityInherit+0x56>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <xTaskPriorityInherit+0x58>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d022      	beq.n	800458e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe f9f1 	bl	8002934 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <xTaskPriorityInherit+0xd0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <xTaskPriorityInherit+0xd8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d903      	bls.n	8004570 <xTaskPriorityInherit+0x84>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <xTaskPriorityInherit+0xd8>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <xTaskPriorityInherit+0xd4>)
 800457e:	441a      	add	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe f979 	bl	800287e <vListInsertEnd>
 800458c:	e004      	b.n	8004598 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <xTaskPriorityInherit+0xd0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e008      	b.n	80045b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <xTaskPriorityInherit+0xd0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d201      	bcs.n	80045b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045b0:	68fb      	ldr	r3, [r7, #12]
	}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000794 	.word	0x20000794
 80045c0:	20000798 	.word	0x20000798
 80045c4:	20000c70 	.word	0x20000c70

080045c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d056      	beq.n	800468c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <xTaskPriorityDisinherit+0xd0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d00a      	beq.n	80045fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	429a      	cmp	r2, r3
 8004630:	d02c      	beq.n	800468c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004636:	2b00      	cmp	r3, #0
 8004638:	d128      	bne.n	800468c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe f978 	bl	8002934 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <xTaskPriorityDisinherit+0xd4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d903      	bls.n	800466c <xTaskPriorityDisinherit+0xa4>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <xTaskPriorityDisinherit+0xd4>)
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <xTaskPriorityDisinherit+0xd8>)
 800467a:	441a      	add	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3304      	adds	r3, #4
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f7fe f8fb 	bl	800287e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800468c:	697b      	ldr	r3, [r7, #20]
	}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000794 	.word	0x20000794
 800469c:	20000c70 	.word	0x20000c70
 80046a0:	20000798 	.word	0x20000798

080046a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d06f      	beq.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d902      	bls.n	80046ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e002      	b.n	80046f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d050      	beq.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d14b      	bne.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	429a      	cmp	r2, r3
 800470c:	d10a      	bne.n	8004724 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60bb      	str	r3, [r7, #8]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db04      	blt.n	8004742 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6959      	ldr	r1, [r3, #20]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004752:	4413      	add	r3, r2
 8004754:	4299      	cmp	r1, r3
 8004756:	d101      	bne.n	800475c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01c      	beq.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe f8e4 	bl	8002934 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800478e:	441a      	add	r2, r3
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe f871 	bl	800287e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800479c:	bf00      	nop
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000794 	.word	0x20000794
 80047a8:	20000798 	.word	0x20000798
 80047ac:	20000c70 	.word	0x20000c70

080047b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c2:	3201      	adds	r2, #1
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80047c6:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80047c8:	681b      	ldr	r3, [r3, #0]
	}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000794 	.word	0x20000794

080047d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <prvAddCurrentTaskToDelayedList+0x90>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e8:	4b20      	ldr	r3, [pc, #128]	; (800486c <prvAddCurrentTaskToDelayedList+0x94>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe f8a0 	bl	8002934 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d10a      	bne.n	8004812 <prvAddCurrentTaskToDelayedList+0x3a>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004802:	4b1a      	ldr	r3, [pc, #104]	; (800486c <prvAddCurrentTaskToDelayedList+0x94>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4819      	ldr	r0, [pc, #100]	; (8004870 <prvAddCurrentTaskToDelayedList+0x98>)
 800480c:	f7fe f837 	bl	800287e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004810:	e026      	b.n	8004860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <prvAddCurrentTaskToDelayedList+0x94>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	429a      	cmp	r2, r3
 8004828:	d209      	bcs.n	800483e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <prvAddCurrentTaskToDelayedList+0x94>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe f844 	bl	80028c4 <vListInsert>
}
 800483c:	e010      	b.n	8004860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <prvAddCurrentTaskToDelayedList+0x94>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f7fe f83a 	bl	80028c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	d202      	bcs.n	8004860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <prvAddCurrentTaskToDelayedList+0xa4>)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6013      	str	r3, [r2, #0]
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000c6c 	.word	0x20000c6c
 800486c:	20000794 	.word	0x20000794
 8004870:	20000c54 	.word	0x20000c54
 8004874:	20000c24 	.word	0x20000c24
 8004878:	20000c20 	.word	0x20000c20
 800487c:	20000c88 	.word	0x20000c88

08004880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800488a:	f000 facb 	bl	8004e24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <xTimerCreateTimerTask+0x80>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d021      	beq.n	80048da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800489e:	1d3a      	adds	r2, r7, #4
 80048a0:	f107 0108 	add.w	r1, r7, #8
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd ffa3 	bl	80027f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	9202      	str	r2, [sp, #8]
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	2302      	movs	r3, #2
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	460a      	mov	r2, r1
 80048c0:	4910      	ldr	r1, [pc, #64]	; (8004904 <xTimerCreateTimerTask+0x84>)
 80048c2:	4811      	ldr	r0, [pc, #68]	; (8004908 <xTimerCreateTimerTask+0x88>)
 80048c4:	f7fe ffdc 	bl	8003880 <xTaskCreateStatic>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4a10      	ldr	r2, [pc, #64]	; (800490c <xTimerCreateTimerTask+0x8c>)
 80048cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <xTimerCreateTimerTask+0x8c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048d6:	2301      	movs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	613b      	str	r3, [r7, #16]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000cc4 	.word	0x20000cc4
 8004904:	08005714 	.word	0x08005714
 8004908:	08004a2d 	.word	0x08004a2d
 800490c:	20000cc8 	.word	0x20000cc8

08004910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	623b      	str	r3, [r7, #32]
}
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <xTimerGenericCommand+0x98>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02a      	beq.n	800499c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b05      	cmp	r3, #5
 8004956:	dc18      	bgt.n	800498a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004958:	f7ff fdaa 	bl	80044b0 <xTaskGetSchedulerState>
 800495c:	4603      	mov	r3, r0
 800495e:	2b02      	cmp	r3, #2
 8004960:	d109      	bne.n	8004976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <xTimerGenericCommand+0x98>)
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f107 0110 	add.w	r1, r7, #16
 800496a:	2300      	movs	r3, #0
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	f7fe f9b5 	bl	8002cdc <xQueueGenericSend>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24
 8004974:	e012      	b.n	800499c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <xTimerGenericCommand+0x98>)
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f107 0110 	add.w	r1, r7, #16
 800497e:	2300      	movs	r3, #0
 8004980:	2200      	movs	r2, #0
 8004982:	f7fe f9ab 	bl	8002cdc <xQueueGenericSend>
 8004986:	6278      	str	r0, [r7, #36]	; 0x24
 8004988:	e008      	b.n	800499c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <xTimerGenericCommand+0x98>)
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f107 0110 	add.w	r1, r7, #16
 8004992:	2300      	movs	r3, #0
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	f7fe fa9f 	bl	8002ed8 <xQueueGenericSendFromISR>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000cc4 	.word	0x20000cc4

080049ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <prvProcessExpiredTimer+0x7c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd ffb5 	bl	8002934 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d122      	bne.n	8004a18 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	18d1      	adds	r1, r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f000 f8c8 	bl	8004b74 <prvInsertTimerInActiveList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	2100      	movs	r1, #0
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7ff ff8b 	bl	8004910 <xTimerGenericCommand>
 80049fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60fb      	str	r3, [r7, #12]
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	4798      	blx	r3
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000cbc 	.word	0x20000cbc

08004a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 f857 	bl	8004aec <prvGetNextExpireTime>
 8004a3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4619      	mov	r1, r3
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f803 	bl	8004a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a4a:	f000 f8d5 	bl	8004bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a4e:	e7f1      	b.n	8004a34 <prvTimerTask+0x8>

08004a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a5a:	f7ff f943 	bl	8003ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f866 	bl	8004b34 <prvSampleTimeNow>
 8004a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d130      	bne.n	8004ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <prvProcessTimerOrBlockTask+0x3c>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d806      	bhi.n	8004a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a7e:	f7ff f93f 	bl	8003d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff91 	bl	80049ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a8a:	e024      	b.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <prvProcessTimerOrBlockTask+0x90>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <prvProcessTimerOrBlockTask+0x94>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f7fe feb1 	bl	8003818 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ab6:	f7ff f923 	bl	8003d00 <xTaskResumeAll>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <prvProcessTimerOrBlockTask+0x98>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
}
 8004ad0:	e001      	b.n	8004ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ad2:	f7ff f915 	bl	8003d00 <xTaskResumeAll>
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000cc0 	.word	0x20000cc0
 8004ae4:	20000cc4 	.word	0x20000cc4
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <prvGetNextExpireTime+0x44>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <prvGetNextExpireTime+0x44>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e001      	b.n	8004b22 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b22:	68fb      	ldr	r3, [r7, #12]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000cbc 	.word	0x20000cbc

08004b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b3c:	f7ff f97e 	bl	8003e3c <xTaskGetTickCount>
 8004b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <prvSampleTimeNow+0x3c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d205      	bcs.n	8004b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b4c:	f000 f908 	bl	8004d60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e002      	b.n	8004b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b5e:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <prvSampleTimeNow+0x3c>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000ccc 	.word	0x20000ccc

08004b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d812      	bhi.n	8004bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e01b      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <prvInsertTimerInActiveList+0x7c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fd fe83 	bl	80028c4 <vListInsert>
 8004bbe:	e012      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d206      	bcs.n	8004bd6 <prvInsertTimerInActiveList+0x62>
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e007      	b.n	8004be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvInsertTimerInActiveList+0x80>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fd fe6f 	bl	80028c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004be6:	697b      	ldr	r3, [r7, #20]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000cc0 	.word	0x20000cc0
 8004bf4:	20000cbc 	.word	0x20000cbc

08004bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bfe:	e09d      	b.n	8004d3c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da18      	bge.n	8004c38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	3304      	adds	r3, #4
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61fb      	str	r3, [r7, #28]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2e:	6850      	ldr	r0, [r2, #4]
 8004c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c32:	6892      	ldr	r2, [r2, #8]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db7e      	blt.n	8004d3c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fe70 	bl	8002934 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c54:	463b      	mov	r3, r7
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff6c 	bl	8004b34 <prvSampleTimeNow>
 8004c5c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d86a      	bhi.n	8004d3a <prvProcessReceivedCommands+0x142>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <prvProcessReceivedCommands+0x74>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c95 	.word	0x08004c95
 8004c78:	08004d3d 	.word	0x08004d3d
 8004c7c:	08004cf1 	.word	0x08004cf1
 8004c80:	08004d29 	.word	0x08004d29
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c95 	.word	0x08004c95
 8004c8c:	08004d3d 	.word	0x08004d3d
 8004c90:	08004cf1 	.word	0x08004cf1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	18d1      	adds	r1, r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca2:	f7ff ff67 	bl	8004b74 <prvInsertTimerInActiveList>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d047      	beq.n	8004d3c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d13f      	bne.n	8004d3c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cce:	f7ff fe1f 	bl	8004910 <xTimerGenericCommand>
 8004cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d130      	bne.n	8004d3c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	61bb      	str	r3, [r7, #24]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	18d1      	adds	r1, r2, r3
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d22:	f7ff ff27 	bl	8004b74 <prvInsertTimerInActiveList>
					break;
 8004d26:	e009      	b.n	8004d3c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d34:	f000 fb5e 	bl	80053f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d38:	e000      	b.n	8004d3c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004d3a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <prvProcessReceivedCommands+0x164>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1d39      	adds	r1, r7, #4
 8004d42:	2200      	movs	r2, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe f95f 	bl	8003008 <xQueueReceive>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af57 	bne.w	8004c00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	3730      	adds	r7, #48	; 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000cc4 	.word	0x20000cc4

08004d60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d66:	e045      	b.n	8004df4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d68:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fd fdd7 	bl	8002934 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d12e      	bne.n	8004df4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d90e      	bls.n	8004dc6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fd fd80 	bl	80028c4 <vListInsert>
 8004dc4:	e016      	b.n	8004df4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff fd9d 	bl	8004910 <xTimerGenericCommand>
 8004dd6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	603b      	str	r3, [r7, #0]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1b4      	bne.n	8004d68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <prvSwitchTimerLists+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <prvSwitchTimerLists+0xbc>)
 8004e0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <prvSwitchTimerLists+0xc0>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000cbc 	.word	0x20000cbc
 8004e20:	20000cc0 	.word	0x20000cc0

08004e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e2a:	f000 f91d 	bl	8005068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <prvCheckForValidListAndQueue+0x60>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d120      	bne.n	8004e78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e36:	4814      	ldr	r0, [pc, #80]	; (8004e88 <prvCheckForValidListAndQueue+0x64>)
 8004e38:	f7fd fcf6 	bl	8002828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e3c:	4813      	ldr	r0, [pc, #76]	; (8004e8c <prvCheckForValidListAndQueue+0x68>)
 8004e3e:	f7fd fcf3 	bl	8002828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <prvCheckForValidListAndQueue+0x6c>)
 8004e44:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <prvCheckForValidListAndQueue+0x64>)
 8004e46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <prvCheckForValidListAndQueue+0x70>)
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <prvCheckForValidListAndQueue+0x68>)
 8004e4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <prvCheckForValidListAndQueue+0x74>)
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <prvCheckForValidListAndQueue+0x78>)
 8004e56:	2110      	movs	r1, #16
 8004e58:	200a      	movs	r0, #10
 8004e5a:	f7fd fdfd 	bl	8002a58 <xQueueGenericCreateStatic>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <prvCheckForValidListAndQueue+0x60>)
 8004e62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <prvCheckForValidListAndQueue+0x60>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <prvCheckForValidListAndQueue+0x60>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	490b      	ldr	r1, [pc, #44]	; (8004ea0 <prvCheckForValidListAndQueue+0x7c>)
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fc7e 	bl	8003774 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e78:	f000 f926 	bl	80050c8 <vPortExitCritical>
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000cc4 	.word	0x20000cc4
 8004e88:	20000c94 	.word	0x20000c94
 8004e8c:	20000ca8 	.word	0x20000ca8
 8004e90:	20000cbc 	.word	0x20000cbc
 8004e94:	20000cc0 	.word	0x20000cc0
 8004e98:	20000d70 	.word	0x20000d70
 8004e9c:	20000cd0 	.word	0x20000cd0
 8004ea0:	0800571c 	.word	0x0800571c

08004ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <pxPortInitialiseStack+0x54>)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b14      	subs	r3, #20
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b20      	subs	r3, #32
 8004eea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	08004efd 	.word	0x08004efd

08004efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <prvTaskExitError+0x54>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d00a      	beq.n	8004f26 <prvTaskExitError+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <prvTaskExitError+0x28>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f3a:	bf00      	nop
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0fc      	beq.n	8004f3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
	...

08004f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <pxCurrentTCBConst2>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f6a:	f380 8809 	msr	PSP, r0
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f7e:	4770      	bx	lr

08004f80 <pxCurrentTCBConst2>:
 8004f80:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f88:	4806      	ldr	r0, [pc, #24]	; (8004fa4 <prvPortStartFirstTask+0x1c>)
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f380 8808 	msr	MSP, r0
 8004f92:	b662      	cpsie	i
 8004f94:	b661      	cpsie	f
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	df00      	svc	0
 8004fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed08 	.word	0xe000ed08

08004fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <xPortStartScheduler+0xac>)
 8004fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <xPortStartScheduler+0xb0>)
 8004fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fd6:	4b21      	ldr	r3, [pc, #132]	; (800505c <xPortStartScheduler+0xb4>)
 8004fd8:	2207      	movs	r2, #7
 8004fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fdc:	e009      	b.n	8004ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004fde:	4b1f      	ldr	r3, [pc, #124]	; (800505c <xPortStartScheduler+0xb4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <xPortStartScheduler+0xb4>)
 8004fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d0ef      	beq.n	8004fde <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <xPortStartScheduler+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <xPortStartScheduler+0xb4>)
 8005006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <xPortStartScheduler+0xb4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <xPortStartScheduler+0xb4>)
 8005012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <xPortStartScheduler+0xb8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <xPortStartScheduler+0xb8>)
 8005022:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <xPortStartScheduler+0xb8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <xPortStartScheduler+0xb8>)
 800502e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005034:	f000 f8ba 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <xPortStartScheduler+0xbc>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800503e:	f7ff ffa3 	bl	8004f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005042:	f7fe ffc7 	bl	8003fd4 <vTaskSwitchContext>
	prvTaskExitError();
 8005046:	f7ff ff59 	bl	8004efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	e000e400 	.word	0xe000e400
 8005058:	20000dc0 	.word	0x20000dc0
 800505c:	20000dc4 	.word	0x20000dc4
 8005060:	e000ed20 	.word	0xe000ed20
 8005064:	2000000c 	.word	0x2000000c

08005068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <vPortEnterCritical+0x58>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <vPortEnterCritical+0x58>)
 800508a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <vPortEnterCritical+0x58>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10f      	bne.n	80050b4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortEnterCritical+0x5c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <vPortEnterCritical+0x4c>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	603b      	str	r3, [r7, #0]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vPortEnterCritical+0x4a>
	}
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <vPortExitCritical+0x4c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <vPortExitCritical+0x24>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	607b      	str	r3, [r7, #4]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <vPortExitCritical+0x4c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4a08      	ldr	r2, [pc, #32]	; (8005114 <vPortExitCritical+0x4c>)
 80050f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <vPortExitCritical+0x4c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <vPortExitCritical+0x42>
 80050fe:	2300      	movs	r3, #0
 8005100:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005108:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	2000000c 	.word	0x2000000c
	...

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005130:	6010      	str	r0, [r2, #0]
 8005132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800513a:	f380 8811 	msr	BASEPRI, r0
 800513e:	f7fe ff49 	bl	8003fd4 <vTaskSwitchContext>
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	6808      	ldr	r0, [r1, #0]
 8005152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005156:	f380 8809 	msr	PSP, r0
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	4770      	bx	lr

08005160 <pxCurrentTCBConst>:
 8005160:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7fe fe69 	bl	8003e58 <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SysTick_Handler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <vPortSetupTimerInterrupt+0x30>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a08      	ldr	r2, [pc, #32]	; (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <vPortSetupTimerInterrupt+0x30>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	e000e010 	.word	0xe000e010
 80051e0:	e000e018 	.word	0xe000e018
 80051e4:	20000000 	.word	0x20000000
 80051e8:	10624dd3 	.word	0x10624dd3
 80051ec:	e000e014 	.word	0xe000e014

080051f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051f6:	f3ef 8305 	mrs	r3, IPSR
 80051fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d914      	bls.n	800522c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005202:	4a16      	ldr	r2, [pc, #88]	; (800525c <vPortValidateInterruptPriority+0x6c>)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800520c:	4b14      	ldr	r3, [pc, #80]	; (8005260 <vPortValidateInterruptPriority+0x70>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	7afa      	ldrb	r2, [r7, #11]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20a      	bcs.n	800522c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	607b      	str	r3, [r7, #4]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <vPortValidateInterruptPriority+0x74>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <vPortValidateInterruptPriority+0x78>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d90a      	bls.n	8005252 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	603b      	str	r3, [r7, #0]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <vPortValidateInterruptPriority+0x60>
	}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	e000e3f0 	.word	0xe000e3f0
 8005260:	20000dc0 	.word	0x20000dc0
 8005264:	e000ed0c 	.word	0xe000ed0c
 8005268:	20000dc4 	.word	0x20000dc4

0800526c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005278:	f7fe fd34 	bl	8003ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800527c:	4b58      	ldr	r3, [pc, #352]	; (80053e0 <pvPortMalloc+0x174>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005284:	f000 f910 	bl	80054a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005288:	4b56      	ldr	r3, [pc, #344]	; (80053e4 <pvPortMalloc+0x178>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 808e 	bne.w	80053b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01d      	beq.n	80052d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800529c:	2208      	movs	r2, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d014      	beq.n	80052d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	3308      	adds	r3, #8
 80052b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <pvPortMalloc+0x6c>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	617b      	str	r3, [r7, #20]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d069      	beq.n	80053b2 <pvPortMalloc+0x146>
 80052de:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <pvPortMalloc+0x17c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d864      	bhi.n	80053b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052e8:	4b40      	ldr	r3, [pc, #256]	; (80053ec <pvPortMalloc+0x180>)
 80052ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052ec:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <pvPortMalloc+0x180>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052f2:	e004      	b.n	80052fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d903      	bls.n	8005310 <pvPortMalloc+0xa4>
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f1      	bne.n	80052f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005310:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <pvPortMalloc+0x174>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	429a      	cmp	r2, r3
 8005318:	d04b      	beq.n	80053b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2208      	movs	r2, #8
 8005320:	4413      	add	r3, r2
 8005322:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	2308      	movs	r3, #8
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	429a      	cmp	r2, r3
 800533a:	d91f      	bls.n	800537c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <pvPortMalloc+0xf8>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	613b      	str	r3, [r7, #16]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad2      	subs	r2, r2, r3
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005376:	69b8      	ldr	r0, [r7, #24]
 8005378:	f000 f8f8 	bl	800556c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <pvPortMalloc+0x17c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <pvPortMalloc+0x17c>)
 8005388:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <pvPortMalloc+0x17c>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <pvPortMalloc+0x184>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d203      	bcs.n	800539e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <pvPortMalloc+0x17c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <pvPortMalloc+0x184>)
 800539c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <pvPortMalloc+0x178>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053b2:	f7fe fca5 	bl	8003d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <pvPortMalloc+0x16a>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <pvPortMalloc+0x168>
	return pvReturn;
 80053d6:	69fb      	ldr	r3, [r7, #28]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20001dd0 	.word	0x20001dd0
 80053e4:	20001ddc 	.word	0x20001ddc
 80053e8:	20001dd4 	.word	0x20001dd4
 80053ec:	20001dc8 	.word	0x20001dc8
 80053f0:	20001dd8 	.word	0x20001dd8

080053f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d048      	beq.n	8005498 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005406:	2308      	movs	r3, #8
 8005408:	425b      	negs	r3, r3
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <vPortFree+0xac>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <vPortFree+0x44>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60fb      	str	r3, [r7, #12]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <vPortFree+0x62>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60bb      	str	r3, [r7, #8]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <vPortFree+0xac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d115      	bne.n	8005498 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <vPortFree+0xac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800547c:	f7fe fc32 	bl	8003ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <vPortFree+0xb0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4413      	add	r3, r2
 800548a:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <vPortFree+0xb0>)
 800548c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800548e:	6938      	ldr	r0, [r7, #16]
 8005490:	f000 f86c 	bl	800556c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005494:	f7fe fc34 	bl	8003d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20001ddc 	.word	0x20001ddc
 80054a4:	20001dd4 	.word	0x20001dd4

080054a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <prvHeapInit+0xac>)
 80054b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3307      	adds	r3, #7
 80054c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0307 	bic.w	r3, r3, #7
 80054ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <prvHeapInit+0xac>)
 80054d8:	4413      	add	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <prvHeapInit+0xb0>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <prvHeapInit+0xb0>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054f4:	2208      	movs	r2, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0307 	bic.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <prvHeapInit+0xb4>)
 8005508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <prvHeapInit+0xb4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <prvHeapInit+0xb4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	1ad2      	subs	r2, r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <prvHeapInit+0xb4>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <prvHeapInit+0xb8>)
 8005536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4a09      	ldr	r2, [pc, #36]	; (8005564 <prvHeapInit+0xbc>)
 800553e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <prvHeapInit+0xc0>)
 8005542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005546:	601a      	str	r2, [r3, #0]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000dc8 	.word	0x20000dc8
 8005558:	20001dc8 	.word	0x20001dc8
 800555c:	20001dd0 	.word	0x20001dd0
 8005560:	20001dd8 	.word	0x20001dd8
 8005564:	20001dd4 	.word	0x20001dd4
 8005568:	20001ddc 	.word	0x20001ddc

0800556c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005574:	4b27      	ldr	r3, [pc, #156]	; (8005614 <prvInsertBlockIntoFreeList+0xa8>)
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e002      	b.n	8005580 <prvInsertBlockIntoFreeList+0x14>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d8f7      	bhi.n	800557a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4413      	add	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	429a      	cmp	r2, r3
 800559a:	d108      	bne.n	80055ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d118      	bne.n	80055f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <prvInsertBlockIntoFreeList+0xac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d00d      	beq.n	80055ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e008      	b.n	80055fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <prvInsertBlockIntoFreeList+0xac>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e003      	b.n	80055fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d002      	beq.n	800560a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	20001dc8 	.word	0x20001dc8
 8005618:	20001dd0 	.word	0x20001dd0

0800561c <memset>:
 800561c:	4603      	mov	r3, r0
 800561e:	4402      	add	r2, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	2600      	movs	r6, #0
 8005630:	4d0c      	ldr	r5, [pc, #48]	; (8005664 <__libc_init_array+0x38>)
 8005632:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	f000 f828 	bl	8005690 <_init>
 8005640:	2600      	movs	r6, #0
 8005642:	4d0a      	ldr	r5, [pc, #40]	; (800566c <__libc_init_array+0x40>)
 8005644:	4c0a      	ldr	r4, [pc, #40]	; (8005670 <__libc_init_array+0x44>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08005850 	.word	0x08005850
 8005668:	08005850 	.word	0x08005850
 800566c:	08005850 	.word	0x08005850
 8005670:	08005854 	.word	0x08005854

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	4291      	cmp	r1, r2
 8005688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <_init>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr

0800569c <_fini>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr
