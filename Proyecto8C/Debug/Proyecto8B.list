
Proyecto8B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055fc  080055fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  20000010  08005614  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  08005614  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118fb  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae0  00000000  00000000  00031977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00034458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce4  00000000  00000000  00035508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d3  00000000  00000000  000361ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001236a  00000000  00000000  000387bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c13bc  00000000  00000000  0004ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045c4  00000000  00000000  0010bee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001104ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08005490 	.word	0x08005490

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08005490 	.word	0x08005490

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14c      	bne.n	800030a <__udivmoddi4+0xaa>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d967      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b153      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	fa01 fe03 	lsl.w	lr, r1, r3
 8000288:	fa20 f202 	lsr.w	r2, r0, r2
 800028c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbbe f1f7 	udiv	r1, lr, r7
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a2:	fb01 f005 	mul.w	r0, r1, r5
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 3eff 	add.w	lr, r1, #4294967295
 80002b8:	f080 8119 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8116 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb00 f505 	mul.w	r5, r0, r5
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8104 	bcs.w	80004f2 <__udivmoddi4+0x292>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8101 	bls.w	80004f2 <__udivmoddi4+0x292>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xc0>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ea 	beq.w	80004e8 <__udivmoddi4+0x288>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d148      	bne.n	80003ba <__udivmoddi4+0x15a>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xd2>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4696      	mov	lr, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000340:	e9c6 4e00 	strd	r4, lr, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa6>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xea>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 808e 	bne.w	8000470 <__udivmoddi4+0x210>
 8000354:	1a88      	subs	r0, r1, r2
 8000356:	2101      	movs	r1, #1
 8000358:	0c17      	lsrs	r7, r2, #16
 800035a:	fa1f fe82 	uxth.w	lr, r2
 800035e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000362:	fb07 0015 	mls	r0, r7, r5, r0
 8000366:	0c22      	lsrs	r2, r4, #16
 8000368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036c:	fb0e f005 	mul.w	r0, lr, r5
 8000370:	4290      	cmp	r0, r2
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x126>
 8000374:	eb1c 0202 	adds.w	r2, ip, r2
 8000378:	f105 38ff 	add.w	r8, r5, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x124>
 800037e:	4290      	cmp	r0, r2
 8000380:	f200 80cc 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000384:	4645      	mov	r5, r8
 8000386:	1a12      	subs	r2, r2, r0
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039a:	45a6      	cmp	lr, r4
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x150>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x14e>
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	f200 80b4 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003ae:	4610      	mov	r0, r2
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e7a0      	b.n	80002fc <__udivmoddi4+0x9c>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	fbba f8f9 	udiv	r8, sl, r9
 80003d4:	408d      	lsls	r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	fb09 aa18 	mls	sl, r9, r8, sl
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	432b      	orrs	r3, r5
 80003e4:	fa00 f501 	lsl.w	r5, r0, r1
 80003e8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ec:	0c1c      	lsrs	r4, r3, #16
 80003ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f2:	42a0      	cmp	r0, r4
 80003f4:	fa02 f201 	lsl.w	r2, r2, r1
 80003f8:	d90b      	bls.n	8000412 <__udivmoddi4+0x1b2>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	f080 8086 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000406:	42a0      	cmp	r0, r4
 8000408:	f240 8083 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040c:	f1a8 0802 	sub.w	r8, r8, #2
 8000410:	4464      	add	r4, ip
 8000412:	1a24      	subs	r4, r4, r0
 8000414:	b298      	uxth	r0, r3
 8000416:	fbb4 f3f9 	udiv	r3, r4, r9
 800041a:	fb09 4413 	mls	r4, r9, r3, r4
 800041e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000422:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000426:	45a6      	cmp	lr, r4
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x1dc>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000432:	d26a      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000434:	45a6      	cmp	lr, r4
 8000436:	d968      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000438:	3b02      	subs	r3, #2
 800043a:	4464      	add	r4, ip
 800043c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000440:	fba0 9302 	umull	r9, r3, r0, r2
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	429c      	cmp	r4, r3
 800044a:	46c8      	mov	r8, r9
 800044c:	469e      	mov	lr, r3
 800044e:	d354      	bcc.n	80004fa <__udivmoddi4+0x29a>
 8000450:	d051      	beq.n	80004f6 <__udivmoddi4+0x296>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d067      	beq.n	8000526 <__udivmoddi4+0x2c6>
 8000456:	ebb5 0308 	subs.w	r3, r5, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	40cb      	lsrs	r3, r1
 8000460:	fa04 f707 	lsl.w	r7, r4, r7
 8000464:	431f      	orrs	r7, r3
 8000466:	40cc      	lsrs	r4, r1
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	2100      	movs	r1, #0
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0xa6>
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	f1c3 0020 	rsb	r0, r3, #32
 8000478:	40c1      	lsrs	r1, r0
 800047a:	409d      	lsls	r5, r3
 800047c:	fa24 f000 	lsr.w	r0, r4, r0
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	4328      	orrs	r0, r5
 8000486:	fbb1 f5f7 	udiv	r5, r1, r7
 800048a:	fb07 1115 	mls	r1, r7, r5, r1
 800048e:	fa1f fe8c 	uxth.w	lr, ip
 8000492:	0c02      	lsrs	r2, r0, #16
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	fa04 f403 	lsl.w	r4, r4, r3
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80004bc:	fb07 2211 	mls	r2, r7, r1, r2
 80004c0:	b280      	uxth	r0, r0
 80004c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004c6:	fb01 f20e 	mul.w	r2, r1, lr
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x280>
 80004ce:	eb1c 0000 	adds.w	r0, ip, r0
 80004d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004d6:	d216      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d914      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004dc:	3902      	subs	r1, #2
 80004de:	4460      	add	r0, ip
 80004e0:	1a80      	subs	r0, r0, r2
 80004e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004e6:	e73a      	b.n	800035e <__udivmoddi4+0xfe>
 80004e8:	4631      	mov	r1, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e70b      	b.n	8000306 <__udivmoddi4+0xa6>
 80004ee:	4671      	mov	r1, lr
 80004f0:	e6e9      	b.n	80002c6 <__udivmoddi4+0x66>
 80004f2:	4610      	mov	r0, r2
 80004f4:	e6fe      	b.n	80002f4 <__udivmoddi4+0x94>
 80004f6:	454d      	cmp	r5, r9
 80004f8:	d2ab      	bcs.n	8000452 <__udivmoddi4+0x1f2>
 80004fa:	ebb9 0802 	subs.w	r8, r9, r2
 80004fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000502:	3801      	subs	r0, #1
 8000504:	e7a5      	b.n	8000452 <__udivmoddi4+0x1f2>
 8000506:	4641      	mov	r1, r8
 8000508:	e7ea      	b.n	80004e0 <__udivmoddi4+0x280>
 800050a:	4603      	mov	r3, r0
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1dc>
 800050e:	4645      	mov	r5, r8
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	46d0      	mov	r8, sl
 8000514:	e77d      	b.n	8000412 <__udivmoddi4+0x1b2>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e749      	b.n	80003b0 <__udivmoddi4+0x150>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e731      	b.n	8000386 <__udivmoddi4+0x126>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xdc>
 8000526:	4631      	mov	r1, r6
 8000528:	e6ed      	b.n	8000306 <__udivmoddi4+0xa6>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000534:	f000 faa2 	bl	8000a7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000538:	f000 f858 	bl	80005ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053c:	f000 f898 	bl	8000670 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000540:	f001 fd1e 	bl	8001f80 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semaverde */
	semaverdeHandle = osSemaphoreNew(5, 0, &semaverde_attributes);
 8000544:	4a19      	ldr	r2, [pc, #100]	; (80005ac <main+0x7c>)
 8000546:	2100      	movs	r1, #0
 8000548:	2005      	movs	r0, #5
 800054a:	f001 fe57 	bl	80021fc <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <main+0x80>)
 8000552:	6013      	str	r3, [r2, #0]

	/* creation of semarillo */
	semarilloHandle = osSemaphoreNew(5, 0, &semarillo_attributes);
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <main+0x84>)
 8000556:	2100      	movs	r1, #0
 8000558:	2005      	movs	r0, #5
 800055a:	f001 fe4f 	bl	80021fc <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <main+0x88>)
 8000562:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <main+0x8c>)
 8000566:	2100      	movs	r1, #0
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0x90>)
 800056a:	f001 fd6f 	bl	800204c <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0x94>)
 8000572:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of ledVerde */
	ledVerdeHandle = osThreadNew(Start_led_verde, NULL, &ledVerde_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <main+0x98>)
 8000576:	2100      	movs	r1, #0
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <main+0x9c>)
 800057a:	f001 fd67 	bl	800204c <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <main+0xa0>)
 8000582:	6013      	str	r3, [r2, #0]

	/* creation of ledAmarillo */
	ledAmarilloHandle = osThreadNew(Start_led_amarillo, NULL,
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <main+0xa4>)
 8000586:	2100      	movs	r1, #0
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <main+0xa8>)
 800058a:	f001 fd5f 	bl	800204c <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <main+0xac>)
 8000592:	6013      	str	r3, [r2, #0]
			&ledAmarillo_attributes);

	/* creation of control_leds */
	control_ledsHandle = osThreadNew(Start_control_leds, NULL,
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <main+0xb0>)
 8000596:	2100      	movs	r1, #0
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <main+0xb4>)
 800059a:	f001 fd57 	bl	800204c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <main+0xb8>)
 80005a2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005a4:	f001 fd1e 	bl	8001fe4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005a8:	e7fe      	b.n	80005a8 <main+0x78>
 80005aa:	bf00      	nop
 80005ac:	0800559c 	.word	0x0800559c
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	080055ac 	.word	0x080055ac
 80005b8:	20000040 	.word	0x20000040
 80005bc:	0800550c 	.word	0x0800550c
 80005c0:	08000721 	.word	0x08000721
 80005c4:	2000002c 	.word	0x2000002c
 80005c8:	08005530 	.word	0x08005530
 80005cc:	08000731 	.word	0x08000731
 80005d0:	20000030 	.word	0x20000030
 80005d4:	08005554 	.word	0x08005554
 80005d8:	08000775 	.word	0x08000775
 80005dc:	20000034 	.word	0x20000034
 80005e0:	08005578 	.word	0x08005578
 80005e4:	080007b5 	.word	0x080007b5
 80005e8:	20000038 	.word	0x20000038

080005ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2238      	movs	r2, #56	; 0x38
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 ff0e 	bl	800541c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2310      	movs	r3, #16
 8000618:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061a:	2300      	movs	r3, #0
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fcee 	bl	8001008 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x4a>
		Error_Handler();
 8000632:	f000 f937 	bl	80008a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fff0 	bl	8001634 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x72>
		Error_Handler();
 800065a:	f000 f923 	bl	80008a4 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800065e:	4b03      	ldr	r3, [pc, #12]	; (800066c <SystemClock_Config+0x80>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	42420070 	.word	0x42420070

08000670 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_GPIO_Init+0xa4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <MX_GPIO_Init+0xa4>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0xa4>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0310 	and.w	r3, r3, #16
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_GPIO_Init+0xa4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_GPIO_Init+0xa4>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_GPIO_Init+0xa4>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VERDE_Pin | AMARILLO_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	21c0      	movs	r1, #192	; 0xc0
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006ba:	f000 fc8c 	bl	8000fd6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TAMPER_Pin */
	GPIO_InitStruct.Pin = TAMPER_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TAMPER_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006d4:	f000 fae4 	bl	8000ca0 <HAL_GPIO_Init>

	/*Configure GPIO pin : WKUP_Pin */
	GPIO_InitStruct.Pin = WKUP_Pin;
 80006d8:	2301      	movs	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xac>)
 80006ec:	f000 fad8 	bl	8000ca0 <HAL_GPIO_Init>

	/*Configure GPIO pins : VERDE_Pin AMARILLO_Pin */
	GPIO_InitStruct.Pin = VERDE_Pin | AMARILLO_Pin;
 80006f0:	23c0      	movs	r3, #192	; 0xc0
 80006f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xa8>)
 8000708:	f000 faca 	bl	8000ca0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40011000 	.word	0x40011000
 800071c:	40010800 	.word	0x40010800

08000720 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fd39 	bl	80021a0 <osDelay>
 800072e:	e7fb      	b.n	8000728 <StartDefaultTask+0x8>

08000730 <Start_led_verde>:
 * @brief Function implementing the ledVerde thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_verde */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <Start_led_verde+0x3c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fdf7 	bl	8002334 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <Start_led_verde+0x40>)
 800074c:	f000 fc43 	bl	8000fd6 <HAL_GPIO_WritePin>
		osDelay(300);
 8000750:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000754:	f001 fd24 	bl	80021a0 <osDelay>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <Start_led_verde+0x40>)
 800075e:	f000 fc3a 	bl	8000fd6 <HAL_GPIO_WritePin>
		osDelay(300);
 8000762:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000766:	f001 fd1b 	bl	80021a0 <osDelay>
		osSemaphoreAcquire(semaverdeHandle, 0xFFFFFFF);
 800076a:	e7e5      	b.n	8000738 <Start_led_verde+0x8>
 800076c:	2000003c 	.word	0x2000003c
 8000770:	40011000 	.word	0x40011000

08000774 <Start_led_amarillo>:
 * @brief Function implementing the ledAmarillo thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_amarillo */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <Start_led_amarillo+0x38>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fdd5 	bl	8002334 <osSemaphoreAcquire>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <Start_led_amarillo+0x3c>)
 8000790:	f000 fc21 	bl	8000fd6 <HAL_GPIO_WritePin>
		osDelay(200);
 8000794:	20c8      	movs	r0, #200	; 0xc8
 8000796:	f001 fd03 	bl	80021a0 <osDelay>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <Start_led_amarillo+0x3c>)
 80007a0:	f000 fc19 	bl	8000fd6 <HAL_GPIO_WritePin>
		osDelay(200);
 80007a4:	20c8      	movs	r0, #200	; 0xc8
 80007a6:	f001 fcfb 	bl	80021a0 <osDelay>
		osSemaphoreAcquire(semarilloHandle, 0xFFFFFFF);
 80007aa:	e7e7      	b.n	800077c <Start_led_amarillo+0x8>
 80007ac:	20000040 	.word	0x20000040
 80007b0:	40011000 	.word	0x40011000

080007b4 <Start_control_leds>:
 * @brief Function implementing the control_leds thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_control_leds */
void Start_control_leds(void *argument) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_control_leds */
	/* Infinite loop */

	unsigned short contador, i;
	//mientras no se plse el tamper, esperamos de forma activa
	while (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80007bc:	e002      	b.n	80007c4 <Start_control_leds+0x10>
		osDelay(50);
 80007be:	2032      	movs	r0, #50	; 0x32
 80007c0:	f001 fcee 	bl	80021a0 <osDelay>
	while (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4829      	ldr	r0, [pc, #164]	; (8000870 <Start_control_leds+0xbc>)
 80007ca:	f000 fbed 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f4      	beq.n	80007be <Start_control_leds+0xa>
	}
	for (;;) {
		if(HAL_GPIO_ReadPin(GPIOA, WKUP_Pin)==1){
 80007d4:	2101      	movs	r1, #1
 80007d6:	4827      	ldr	r0, [pc, #156]	; (8000874 <Start_control_leds+0xc0>)
 80007d8:	f000 fbe6 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10d      	bne.n	80007fe <Start_control_leds+0x4a>
			contador++;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	3301      	adds	r3, #1
 80007e6:	81fb      	strh	r3, [r7, #14]
			//incrementamos el contador en uno por cada pulsación
			while(HAL_GPIO_ReadPin(GPIOA,WKUP_Pin)==1){
 80007e8:	e002      	b.n	80007f0 <Start_control_leds+0x3c>
				//hasta que no se libere no salimos
				osDelay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 fcd8 	bl	80021a0 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOA,WKUP_Pin)==1){
 80007f0:	2101      	movs	r1, #1
 80007f2:	4820      	ldr	r0, [pc, #128]	; (8000874 <Start_control_leds+0xc0>)
 80007f4:	f000 fbd8 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d0f5      	beq.n	80007ea <Start_control_leds+0x36>
			}
		}
		//ahora lo mismo con el tamper
		if(HAL_GPIO_ReadPin(GPIOC, TAMPER_Pin)==0){
 80007fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <Start_control_leds+0xbc>)
 8000804:	f000 fbd0 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d12b      	bne.n	8000866 <Start_control_leds+0xb2>
			for(i = 0; i<contador; i++){
 800080e:	2300      	movs	r3, #0
 8000810:	81bb      	strh	r3, [r7, #12]
 8000812:	e007      	b.n	8000824 <Start_control_leds+0x70>
				osSemaphoreRelease(semaverdeHandle);
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <Start_control_leds+0xc4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fdf1 	bl	8002400 <osSemaphoreRelease>
			for(i = 0; i<contador; i++){
 800081e:	89bb      	ldrh	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	81bb      	strh	r3, [r7, #12]
 8000824:	89ba      	ldrh	r2, [r7, #12]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3f3      	bcc.n	8000814 <Start_control_leds+0x60>
			}
			for(i = 0; i<contador; i++){
 800082c:	2300      	movs	r3, #0
 800082e:	81bb      	strh	r3, [r7, #12]
 8000830:	e007      	b.n	8000842 <Start_control_leds+0x8e>
				osSemaphoreRelease(semarilloHandle);
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <Start_control_leds+0xc8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fde2 	bl	8002400 <osSemaphoreRelease>
			for(i = 0; i<contador; i++){
 800083c:	89bb      	ldrh	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	81bb      	strh	r3, [r7, #12]
 8000842:	89ba      	ldrh	r2, [r7, #12]
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	429a      	cmp	r2, r3
 8000848:	d3f3      	bcc.n	8000832 <Start_control_leds+0x7e>
			}
			contador =0;
 800084a:	2300      	movs	r3, #0
 800084c:	81fb      	strh	r3, [r7, #14]
			while(HAL_GPIO_ReadPin(GPIOC, TAMPER_Pin)==1){
 800084e:	e002      	b.n	8000856 <Start_control_leds+0xa2>
				//esperamos a que se libere para salir
				osDelay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f001 fca5 	bl	80021a0 <osDelay>
			while(HAL_GPIO_ReadPin(GPIOC, TAMPER_Pin)==1){
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <Start_control_leds+0xbc>)
 800085c:	f000 fba4 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d0f4      	beq.n	8000850 <Start_control_leds+0x9c>
			}
		}

		osDelay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f001 fc9a 	bl	80021a0 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOA, WKUP_Pin)==1){
 800086c:	e7b2      	b.n	80007d4 <Start_control_leds+0x20>
 800086e:	bf00      	nop
 8000870:	40011000 	.word	0x40011000
 8000874:	40010800 	.word	0x40010800
 8000878:	2000003c 	.word	0x2000003c
 800087c:	20000040 	.word	0x20000040

08000880 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000892:	f000 f909 	bl	8000aa8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00

080008a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_MspInit+0x4c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_MspInit+0x4c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x4c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 f9ac 	bl	8000c4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <HAL_InitTick+0xd0>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <HAL_InitTick+0xd0>)
 800091c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <HAL_InitTick+0xd0>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092e:	f107 020c 	add.w	r2, r7, #12
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f877 	bl	8001a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800093e:	f001 f861 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 8000942:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <HAL_InitTick+0xd4>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	0c9b      	lsrs	r3, r3, #18
 800094e:	3b01      	subs	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_InitTick+0xd8>)
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <HAL_InitTick+0xdc>)
 8000956:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_InitTick+0xd8>)
 800095a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_InitTick+0xd8>)
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_InitTick+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_InitTick+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_InitTick+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000978:	4817      	ldr	r0, [pc, #92]	; (80009d8 <HAL_InitTick+0xd8>)
 800097a:	f001 f8a5 	bl	8001ac8 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d11b      	bne.n	80009c4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <HAL_InitTick+0xd8>)
 800098e:	f001 f8f3 	bl	8001b78 <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800099c:	2b00      	cmp	r3, #0
 800099e:	d111      	bne.n	80009c4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009a0:	2019      	movs	r0, #25
 80009a2:	f000 f96e 	bl	8000c82 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d808      	bhi.n	80009be <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2019      	movs	r0, #25
 80009b2:	f000 f94a 	bl	8000c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_InitTick+0xe0>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e002      	b.n	80009c4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	20000044 	.word	0x20000044
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	20000004 	.word	0x20000004

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_UP_IRQHandler+0x10>)
 8000a16:	f001 f909 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000044 	.word	0x20000044

08000a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff fff8 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a36:	490c      	ldr	r1, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a4c:	4c09      	ldr	r4, [pc, #36]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f004 fce7 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fd67 	bl	8000530 <main>
  bx lr
 8000a62:	4770      	bx	lr
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a6c:	08005604 	.word	0x08005604
  ldr r2, =_sbss
 8000a70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a74:	20001dd8 	.word	0x20001dd8

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f8d1 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff ff34 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff ff0a 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	2000008c 	.word	0x2000008c

08000acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <__NVIC_EnableIRQ+0x34>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff4f 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff64 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ffb2 	bl	8000bd0 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff81 	bl	8000b7c <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff57 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b08b      	sub	sp, #44	; 0x2c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	e169      	b.n	8000f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8158 	bne.w	8000f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4a9a      	ldr	r2, [pc, #616]	; (8000f40 <HAL_GPIO_Init+0x2a0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d05e      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a98      	ldr	r2, [pc, #608]	; (8000f40 <HAL_GPIO_Init+0x2a0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d875      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000ce2:	4a98      	ldr	r2, [pc, #608]	; (8000f44 <HAL_GPIO_Init+0x2a4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d058      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
 8000ce8:	4a96      	ldr	r2, [pc, #600]	; (8000f44 <HAL_GPIO_Init+0x2a4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d86f      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000cee:	4a96      	ldr	r2, [pc, #600]	; (8000f48 <HAL_GPIO_Init+0x2a8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d052      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
 8000cf4:	4a94      	ldr	r2, [pc, #592]	; (8000f48 <HAL_GPIO_Init+0x2a8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d869      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000cfa:	4a94      	ldr	r2, [pc, #592]	; (8000f4c <HAL_GPIO_Init+0x2ac>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d04c      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
 8000d00:	4a92      	ldr	r2, [pc, #584]	; (8000f4c <HAL_GPIO_Init+0x2ac>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d863      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000d06:	4a92      	ldr	r2, [pc, #584]	; (8000f50 <HAL_GPIO_Init+0x2b0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d046      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
 8000d0c:	4a90      	ldr	r2, [pc, #576]	; (8000f50 <HAL_GPIO_Init+0x2b0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d85d      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d82a      	bhi.n	8000d6c <HAL_GPIO_Init+0xcc>
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d859      	bhi.n	8000dce <HAL_GPIO_Init+0x12e>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <HAL_GPIO_Init+0x80>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d9b 	.word	0x08000d9b
 8000d24:	08000d75 	.word	0x08000d75
 8000d28:	08000d87 	.word	0x08000d87
 8000d2c:	08000dc9 	.word	0x08000dc9
 8000d30:	08000dcf 	.word	0x08000dcf
 8000d34:	08000dcf 	.word	0x08000dcf
 8000d38:	08000dcf 	.word	0x08000dcf
 8000d3c:	08000dcf 	.word	0x08000dcf
 8000d40:	08000dcf 	.word	0x08000dcf
 8000d44:	08000dcf 	.word	0x08000dcf
 8000d48:	08000dcf 	.word	0x08000dcf
 8000d4c:	08000dcf 	.word	0x08000dcf
 8000d50:	08000dcf 	.word	0x08000dcf
 8000d54:	08000dcf 	.word	0x08000dcf
 8000d58:	08000dcf 	.word	0x08000dcf
 8000d5c:	08000dcf 	.word	0x08000dcf
 8000d60:	08000dcf 	.word	0x08000dcf
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d91 	.word	0x08000d91
 8000d6c:	4a79      	ldr	r2, [pc, #484]	; (8000f54 <HAL_GPIO_Init+0x2b4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d72:	e02c      	b.n	8000dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e029      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	3304      	adds	r3, #4
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e024      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e01f      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	330c      	adds	r3, #12
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	e01a      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000da2:	2304      	movs	r3, #4
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e013      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d105      	bne.n	8000dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db0:	2308      	movs	r3, #8
 8000db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	611a      	str	r2, [r3, #16]
          break;
 8000dba:	e009      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	615a      	str	r2, [r3, #20]
          break;
 8000dc6:	e003      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x130>
          break;
 8000dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d801      	bhi.n	8000dda <HAL_GPIO_Init+0x13a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e001      	b.n	8000dde <HAL_GPIO_Init+0x13e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d802      	bhi.n	8000dec <HAL_GPIO_Init+0x14c>
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x152>
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	3b08      	subs	r3, #8
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	210f      	movs	r1, #15
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	401a      	ands	r2, r3
 8000e04:	6a39      	ldr	r1, [r7, #32]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80b1 	beq.w	8000f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e20:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <HAL_GPIO_Init+0x2b8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <HAL_GPIO_Init+0x2b8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <HAL_GPIO_Init+0x2b8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e38:	4a48      	ldr	r2, [pc, #288]	; (8000f5c <HAL_GPIO_Init+0x2bc>)
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a40      	ldr	r2, [pc, #256]	; (8000f60 <HAL_GPIO_Init+0x2c0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d013      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a3f      	ldr	r2, [pc, #252]	; (8000f64 <HAL_GPIO_Init+0x2c4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d00d      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_GPIO_Init+0x2c8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d007      	beq.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a3d      	ldr	r2, [pc, #244]	; (8000f6c <HAL_GPIO_Init+0x2cc>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <HAL_GPIO_Init+0x1e0>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e9e:	492f      	ldr	r1, [pc, #188]	; (8000f5c <HAL_GPIO_Init+0x2bc>)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	492c      	ldr	r1, [pc, #176]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4928      	ldr	r1, [pc, #160]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d006      	beq.n	8000eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	4922      	ldr	r1, [pc, #136]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60cb      	str	r3, [r1, #12]
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	491e      	ldr	r1, [pc, #120]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4918      	ldr	r1, [pc, #96]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4914      	ldr	r1, [pc, #80]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d021      	beq.n	8000f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	490e      	ldr	r1, [pc, #56]	; (8000f70 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e021      	b.n	8000f82 <HAL_GPIO_Init+0x2e2>
 8000f3e:	bf00      	nop
 8000f40:	10320000 	.word	0x10320000
 8000f44:	10310000 	.word	0x10310000
 8000f48:	10220000 	.word	0x10220000
 8000f4c:	10210000 	.word	0x10210000
 8000f50:	10120000 	.word	0x10120000
 8000f54:	10110000 	.word	0x10110000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40011400 	.word	0x40011400
 8000f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4909      	ldr	r1, [pc, #36]	; (8000fa4 <HAL_GPIO_Init+0x304>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f47f ae8e 	bne.w	8000cb4 <HAL_GPIO_Init+0x14>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	372c      	adds	r7, #44	; 0x2c
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e304      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001028:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b04      	cmp	r3, #4
 8001032:	d00c      	beq.n	800104e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b08      	cmp	r3, #8
 800103e:	d112      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06c      	beq.n	8001134 <HAL_RCC_OscConfig+0x12c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d168      	bne.n	8001134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e2de      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x76>
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e02e      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b78      	ldr	r3, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a71      	ldr	r2, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6e      	ldr	r2, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcf2 	bl	8000acc <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcee 	bl	8000acc <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e292      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xe4>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcde 	bl	8000acc <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcda 	bl	8000acc <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e27e      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x10c>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e252      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4939      	ldr	r1, [pc, #228]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fc93 	bl	8000acc <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc8f 	bl	8000acc <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e233      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc72 	bl	8000acc <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc6e 	bl	8000acc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e212      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03a      	beq.n	800128c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fc52 	bl	8000acc <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc4e 	bl	8000acc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1f2      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 fc1e 	bl	8001a8c <RCC_Delay>
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fc38 	bl	8000acc <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125e:	e00f      	b.n	8001280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc34 	bl	8000acc <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d908      	bls.n	8001280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1d8      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	42420000 	.word	0x42420000
 800127c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b9b      	ldr	r3, [pc, #620]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e9      	bne.n	8001260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a6 	beq.w	80013e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129e:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b8e      	ldr	r3, [pc, #568]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b8b      	ldr	r3, [pc, #556]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a87      	ldr	r2, [pc, #540]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fbf5 	bl	8000acc <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fbf1 	bl	8000acc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e195      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x312>
 800130c:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	e02d      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x334>
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6213      	str	r3, [r2, #32]
 800132e:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a6f      	ldr	r2, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	e01c      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x356>
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a66      	ldr	r2, [pc, #408]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800135e:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a63      	ldr	r2, [pc, #396]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b61      	ldr	r3, [pc, #388]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d015      	beq.n	80013aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fba5 	bl	8000acc <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fba1 	bl	8000acc <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e143      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ee      	beq.n	8001386 <HAL_RCC_OscConfig+0x37e>
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fb8f 	bl	8000acc <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fb8b 	bl	8000acc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e12d      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013da:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80013e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 808c 	beq.w	8001508 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80013f0:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d10e      	bne.n	800141c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001406:	2b08      	cmp	r3, #8
 8001408:	d108      	bne.n	800141c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e103      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	2b02      	cmp	r3, #2
 8001422:	d14e      	bne.n	80014c2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d009      	beq.n	8001444 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0ef      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_RCC_OscConfig+0x4f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fb3f 	bl	8000acc <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001452:	f7ff fb3b 	bl	8000acc <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0df      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	491c      	ldr	r1, [pc, #112]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 800147e:	4313      	orrs	r3, r2
 8001480:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	4313      	orrs	r3, r2
 8001492:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x4f0>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fb17 	bl	8000acc <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014a2:	f7ff fb13 	bl	8000acc <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0b7      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x49a>
 80014c0:	e022      	b.n	8001508 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_RCC_OscConfig+0x4e8>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x4f0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fafa 	bl	8000acc <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014dc:	f7ff faf6 	bl	8000acc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e09a      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x624>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e9      	bne.n	80014dc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8088 	beq.w	8001622 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x624>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d068      	beq.n	80015f0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d14d      	bne.n	80015c2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x628>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff face 	bl	8000acc <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff faca 	bl	8000acc <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e06e      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x624>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d10f      	bne.n	800157c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x624>)
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4931      	ldr	r1, [pc, #196]	; (800162c <HAL_RCC_OscConfig+0x624>)
 8001566:	4313      	orrs	r3, r2
 8001568:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x624>)
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f023 020f 	bic.w	r2, r3, #15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x624>)
 8001578:	4313      	orrs	r3, r2
 800157a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x624>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	430b      	orrs	r3, r1
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x624>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x628>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa97 	bl	8000acc <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fa93 	bl	8000acc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e037      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x624>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x59a>
 80015c0:	e02f      	b.n	8001622 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x628>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fa80 	bl	8000acc <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fa7c 	bl	8000acc <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e020      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x624>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5c8>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e013      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x624>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	42420060 	.word	0x42420060

08001634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0d0      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d910      	bls.n	8001678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0207 	bic.w	r2, r3, #7
 800165e:	4965      	ldr	r1, [pc, #404]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a52      	ldr	r2, [pc, #328]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d040      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e073      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06b      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4936      	ldr	r1, [pc, #216]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff f9d2 	bl	8000acc <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f9ce 	bl	8000acc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e053      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d210      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0207 	bic.w	r2, r3, #7
 800176a:	4922      	ldr	r1, [pc, #136]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f821 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	5ccb      	ldrb	r3, [r1, r3]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1cc>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1d0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f88c 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	080055bc 	.word	0x080055bc
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b092      	sub	sp, #72	; 0x48
 800180e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001814:	2300      	movs	r3, #0
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
 8001818:	2300      	movs	r3, #0
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182c:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d002      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x3a>
 800183c:	2b08      	cmp	r3, #8
 800183e:	d003      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x40>
 8001840:	e0c3      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001846:	e0c3      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	f003 020f 	and.w	r2, r3, #15
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001852:	5c9b      	ldrb	r3, [r3, r2]
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80ac 	beq.w	80019ba <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001862:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f003 020f 	and.w	r2, r3, #15
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800186c:	5c9b      	ldrb	r3, [r3, r2]
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 808c 	beq.w	8001996 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800187e:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	3301      	adds	r3, #1
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3302      	adds	r3, #2
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	2200      	movs	r2, #0
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	627a      	str	r2, [r7, #36]	; 0x24
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	2200      	movs	r2, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	4611      	mov	r1, r2
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fb00 f203 	mul.w	r2, r0, r3
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	fb03 f301 	mul.w	r3, r3, r1
 80018b6:	4413      	add	r3, r2
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	fba2 4500 	umull	r4, r5, r2, r0
 80018be:	442b      	add	r3, r5
 80018c0:	461d      	mov	r5, r3
 80018c2:	4622      	mov	r2, r4
 80018c4:	462b      	mov	r3, r5
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0159      	lsls	r1, r3, #5
 80018d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d4:	0150      	lsls	r0, r2, #5
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	ebb2 0a04 	subs.w	sl, r2, r4
 80018de:	eb63 0b05 	sbc.w	fp, r3, r5
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018f6:	ebb2 080a 	subs.w	r8, r2, sl
 80018fa:	eb63 090b 	sbc.w	r9, r3, fp
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800190a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800190e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	eb18 0304 	adds.w	r3, r8, r4
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	eb49 0305 	adc.w	r3, r9, r5
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800192e:	4629      	mov	r1, r5
 8001930:	024b      	lsls	r3, r1, #9
 8001932:	4620      	mov	r0, r4
 8001934:	4629      	mov	r1, r5
 8001936:	4604      	mov	r4, r0
 8001938:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800193c:	4601      	mov	r1, r0
 800193e:	024a      	lsls	r2, r1, #9
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001946:	2200      	movs	r2, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	617a      	str	r2, [r7, #20]
 800194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194e:	2200      	movs	r2, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001958:	4622      	mov	r2, r4
 800195a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800195e:	4645      	mov	r5, r8
 8001960:	fb05 f202 	mul.w	r2, r5, r2
 8001964:	46cc      	mov	ip, r9
 8001966:	4625      	mov	r5, r4
 8001968:	461c      	mov	r4, r3
 800196a:	4623      	mov	r3, r4
 800196c:	fb03 f30c 	mul.w	r3, r3, ip
 8001970:	4413      	add	r3, r2
 8001972:	4622      	mov	r2, r4
 8001974:	4644      	mov	r4, r8
 8001976:	fba2 2404 	umull	r2, r4, r2, r4
 800197a:	61fc      	str	r4, [r7, #28]
 800197c:	61ba      	str	r2, [r7, #24]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001988:	f7fe fc52 	bl	8000230 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
 8001994:	e007      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800199a:	fb03 f202 	mul.w	r2, r3, r2
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80019a8:	7b5b      	ldrb	r3, [r3, #13]
 80019aa:	461a      	mov	r2, r3
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d108      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
 80019b8:	e004      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1e4>)
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80019cc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3748      	adds	r7, #72	; 0x48
 80019d6:	46bd      	mov	sp, r7
 80019d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	080055d4 	.word	0x080055d4
 80019e8:	080055e4 	.word	0x080055e4
 80019ec:	003d0900 	.word	0x003d0900

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	20000000 	.word	0x20000000

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff fff2 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	080055cc 	.word	0x080055cc

08001a2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	220f      	movs	r2, #15
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_GetClockConfig+0x58>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetClockConfig+0x5c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40022000 	.word	0x40022000

08001a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <RCC_Delay+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <RCC_Delay+0x38>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a5b      	lsrs	r3, r3, #9
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa8:	bf00      	nop
  }
  while (Delay --);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <RCC_Delay+0x1c>
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e041      	b.n	8001b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f839 	bl	8001b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 f9bc 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e03f      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_TIM_Base_Start_IT+0xa4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_TIM_Base_Start_IT+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bba:	d00e      	beq.n	8001bda <HAL_TIM_Base_Start_IT+0x62>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_TIM_Base_Start_IT+0xa8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_TIM_Base_Start_IT+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_TIM_Base_Start_IT+0xac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d004      	beq.n	8001bda <HAL_TIM_Base_Start_IT+0x62>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d111      	bne.n	8001bfe <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d010      	beq.n	8001c0e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfc:	e007      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00

08001c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0202 	mvn.w	r2, #2
 8001c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8ed 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8e0 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8ef 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0204 	mvn.w	r2, #4
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8c3 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8b6 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8c5 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f899 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f88c 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f89b 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0210 	mvn.w	r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f86f 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f862 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f871 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0201 	mvn.w	r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fd68 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b80      	cmp	r3, #128	; 0x80
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8c9 	bl	8001f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	2b40      	cmp	r3, #64	; 0x40
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f835 	bl	8001e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0220 	mvn.w	r2, #32
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f894 	bl	8001f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <TIM_Base_SetConfig+0xc8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea2:	d00b      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <TIM_Base_SetConfig+0xcc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <TIM_Base_SetConfig+0xd0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <TIM_Base_SetConfig+0xd4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <TIM_Base_SetConfig+0xc8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00f      	beq.n	8001ef6 <TIM_Base_SetConfig+0x72>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001edc:	d00b      	beq.n	8001ef6 <TIM_Base_SetConfig+0x72>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <TIM_Base_SetConfig+0xcc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <TIM_Base_SetConfig+0x72>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <TIM_Base_SetConfig+0xd0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_Base_SetConfig+0x72>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <TIM_Base_SetConfig+0xd4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <TIM_Base_SetConfig+0xc8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d103      	bne.n	8001f3c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	615a      	str	r2, [r3, #20]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00

08001f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f86:	f3ef 8305 	mrs	r3, IPSR
 8001f8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f92:	f3ef 8310 	mrs	r3, PRIMASK
 8001f96:	607b      	str	r3, [r7, #4]
  return(result);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <osKernelInitialize+0x32>
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <osKernelInitialize+0x60>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d109      	bne.n	8001fba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8001faa:	603b      	str	r3, [r7, #0]
  return(result);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001fb2:	f06f 0305 	mvn.w	r3, #5
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e00c      	b.n	8001fd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <osKernelInitialize+0x60>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <osKernelInitialize+0x60>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e002      	b.n	8001fd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000090 	.word	0x20000090

08001fe4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fea:	f3ef 8305 	mrs	r3, IPSR
 8001fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	607b      	str	r3, [r7, #4]
  return(result);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <osKernelStart+0x32>
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <osKernelStart+0x64>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d109      	bne.n	800201e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800200a:	f3ef 8311 	mrs	r3, BASEPRI
 800200e:	603b      	str	r3, [r7, #0]
  return(result);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002016:	f06f 0305 	mvn.w	r3, #5
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e00e      	b.n	800203c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <osKernelStart+0x64>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <osKernelStart+0x64>)
 8002028:	2202      	movs	r2, #2
 800202a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800202c:	f001 fcf8 	bl	8003a20 <vTaskStartScheduler>
      stat = osOK;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800203c:	68fb      	ldr	r3, [r7, #12]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000090 	.word	0x20000090

0800204c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b092      	sub	sp, #72	; 0x48
 8002050:	af04      	add	r7, sp, #16
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800205c:	f3ef 8305 	mrs	r3, IPSR
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 8094 	bne.w	8002192 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206a:	f3ef 8310 	mrs	r3, PRIMASK
 800206e:	623b      	str	r3, [r7, #32]
  return(result);
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 808d 	bne.w	8002192 <osThreadNew+0x146>
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <osThreadNew+0x150>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d106      	bne.n	800208e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002080:	f3ef 8311 	mrs	r3, BASEPRI
 8002084:	61fb      	str	r3, [r7, #28]
  return(result);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8082 	bne.w	8002192 <osThreadNew+0x146>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d07e      	beq.n	8002192 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002098:	2318      	movs	r3, #24
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800209c:	2300      	movs	r3, #0
 800209e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80020a0:	f107 031b 	add.w	r3, r7, #27
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d045      	beq.n	800213e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <osThreadNew+0x74>
        name = attr->name;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <osThreadNew+0x9a>
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	2b38      	cmp	r3, #56	; 0x38
 80020d8:	d805      	bhi.n	80020e6 <osThreadNew+0x9a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <osThreadNew+0x9e>
        return (NULL);
 80020e6:	2300      	movs	r3, #0
 80020e8:	e054      	b.n	8002194 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00e      	beq.n	8002120 <osThreadNew+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b5b      	cmp	r3, #91	; 0x5b
 8002108:	d90a      	bls.n	8002120 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <osThreadNew+0xd4>
        mem = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
 800211e:	e010      	b.n	8002142 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10c      	bne.n	8002142 <osThreadNew+0xf6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d108      	bne.n	8002142 <osThreadNew+0xf6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <osThreadNew+0xf6>
          mem = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	e001      	b.n	8002142 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	2b01      	cmp	r3, #1
 8002146:	d110      	bne.n	800216a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002150:	9202      	str	r2, [sp, #8]
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f001 fa92 	bl	8003688 <xTaskCreateStatic>
 8002164:	4603      	mov	r3, r0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e013      	b.n	8002192 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d110      	bne.n	8002192 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	b29a      	uxth	r2, r3
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f001 fadc 	bl	8003740 <xTaskCreate>
 8002188:	4603      	mov	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d001      	beq.n	8002192 <osThreadNew+0x146>
          hTask = NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002192:	697b      	ldr	r3, [r7, #20]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3738      	adds	r7, #56	; 0x38
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000090 	.word	0x20000090

080021a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a8:	f3ef 8305 	mrs	r3, IPSR
 80021ac:	613b      	str	r3, [r7, #16]
  return(result);
 80021ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10f      	bne.n	80021d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b4:	f3ef 8310 	mrs	r3, PRIMASK
 80021b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <osDelay+0x34>
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <osDelay+0x58>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d109      	bne.n	80021dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021c8:	f3ef 8311 	mrs	r3, BASEPRI
 80021cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <osDelay+0x3c>
    stat = osErrorISR;
 80021d4:	f06f 0305 	mvn.w	r3, #5
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e007      	b.n	80021ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 fbe6 	bl	80039b8 <vTaskDelay>
    }
  }

  return (stat);
 80021ec:	697b      	ldr	r3, [r7, #20]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000090 	.word	0x20000090

080021fc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800220c:	f3ef 8305 	mrs	r3, IPSR
 8002210:	61bb      	str	r3, [r7, #24]
  return(result);
 8002212:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8086 	bne.w	8002326 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221a:	f3ef 8310 	mrs	r3, PRIMASK
 800221e:	617b      	str	r3, [r7, #20]
  return(result);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d17f      	bne.n	8002326 <osSemaphoreNew+0x12a>
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <osSemaphoreNew+0x134>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d105      	bne.n	800223a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800222e:	f3ef 8311 	mrs	r3, BASEPRI
 8002232:	613b      	str	r3, [r7, #16]
  return(result);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d175      	bne.n	8002326 <osSemaphoreNew+0x12a>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d072      	beq.n	8002326 <osSemaphoreNew+0x12a>
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d86e      	bhi.n	8002326 <osSemaphoreNew+0x12a>
    mem = -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <osSemaphoreNew+0x6e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b4f      	cmp	r3, #79	; 0x4f
 8002262:	d902      	bls.n	800226a <osSemaphoreNew+0x6e>
        mem = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	e00c      	b.n	8002284 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <osSemaphoreNew+0x88>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <osSemaphoreNew+0x88>
          mem = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
 800227e:	e001      	b.n	8002284 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d04c      	beq.n	8002326 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d128      	bne.n	80022e4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10a      	bne.n	80022ae <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2203      	movs	r2, #3
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 fa4d 	bl	8002744 <xQueueGenericCreateStatic>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24
 80022ac:	e005      	b.n	80022ba <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80022ae:	2203      	movs	r2, #3
 80022b0:	2100      	movs	r1, #0
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 fabd 	bl	8002832 <xQueueGenericCreate>
 80022b8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <osSemaphoreNew+0x10a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01f      	beq.n	8002306 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ce:	f000 fb7b 	bl	80029c8 <xQueueGenericSend>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d016      	beq.n	8002306 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80022d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022da:	f001 f805 	bl	80032e8 <vQueueDelete>
            hSemaphore = NULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	e010      	b.n	8002306 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fafe 	bl	80028f4 <xQueueCreateCountingSemaphoreStatic>
 80022f8:	6278      	str	r0, [r7, #36]	; 0x24
 80022fa:	e004      	b.n	8002306 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fb2f 	bl	8002962 <xQueueCreateCountingSemaphore>
 8002304:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <osSemaphoreNew+0x11e>
          name = attr->name;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e001      	b.n	800231e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800231e:	69f9      	ldr	r1, [r7, #28]
 8002320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002322:	f001 f92b 	bl	800357c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000090 	.word	0x20000090

08002334 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800234c:	f06f 0303 	mvn.w	r3, #3
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e04b      	b.n	80023ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002354:	f3ef 8305 	mrs	r3, IPSR
 8002358:	617b      	str	r3, [r7, #20]
  return(result);
 800235a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002360:	f3ef 8310 	mrs	r3, PRIMASK
 8002364:	613b      	str	r3, [r7, #16]
  return(result);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <osSemaphoreAcquire+0x4c>
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <osSemaphoreAcquire+0xc4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d128      	bne.n	80023c6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002374:	f3ef 8311 	mrs	r3, BASEPRI
 8002378:	60fb      	str	r3, [r7, #12]
  return(result);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d022      	beq.n	80023c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8002386:	f06f 0303 	mvn.w	r3, #3
 800238a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800238c:	e02d      	b.n	80023ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002392:	f107 0308 	add.w	r3, r7, #8
 8002396:	461a      	mov	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	69b8      	ldr	r0, [r7, #24]
 800239c:	f000 ff24 	bl	80031e8 <xQueueReceiveFromISR>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d003      	beq.n	80023ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80023a6:	f06f 0302 	mvn.w	r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80023ac:	e01d      	b.n	80023ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01a      	beq.n	80023ea <osSemaphoreAcquire+0xb6>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <osSemaphoreAcquire+0xc8>)
 80023b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80023c4:	e011      	b.n	80023ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	69b8      	ldr	r0, [r7, #24]
 80023ca:	f000 fe01 	bl	8002fd0 <xQueueSemaphoreTake>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d00b      	beq.n	80023ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80023da:	f06f 0301 	mvn.w	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	e004      	b.n	80023ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80023e2:	f06f 0302 	mvn.w	r3, #2
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e000      	b.n	80023ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80023ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80023ec:	69fb      	ldr	r3, [r7, #28]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000090 	.word	0x20000090
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002416:	f06f 0303 	mvn.w	r3, #3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e03e      	b.n	800249c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800241e:	f3ef 8305 	mrs	r3, IPSR
 8002422:	617b      	str	r3, [r7, #20]
  return(result);
 8002424:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242a:	f3ef 8310 	mrs	r3, PRIMASK
 800242e:	613b      	str	r3, [r7, #16]
  return(result);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <osSemaphoreRelease+0x4a>
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <osSemaphoreRelease+0xa8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d120      	bne.n	8002480 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800243e:	f3ef 8311 	mrs	r3, BASEPRI
 8002442:	60fb      	str	r3, [r7, #12]
  return(result);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01a      	beq.n	8002480 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	4619      	mov	r1, r3
 8002454:	69b8      	ldr	r0, [r7, #24]
 8002456:	f000 fc4d 	bl	8002cf4 <xQueueGiveFromISR>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d003      	beq.n	8002468 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8002460:	f06f 0302 	mvn.w	r3, #2
 8002464:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002466:	e018      	b.n	800249a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <osSemaphoreRelease+0x9a>
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <osSemaphoreRelease+0xac>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800247e:	e00c      	b.n	800249a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002480:	2300      	movs	r3, #0
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	69b8      	ldr	r0, [r7, #24]
 8002488:	f000 fa9e 	bl	80029c8 <xQueueGenericSend>
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d004      	beq.n	800249c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002492:	f06f 0302 	mvn.w	r3, #2
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	e000      	b.n	800249c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800249a:	bf00      	nop
    }
  }

  return (stat);
 800249c:	69fb      	ldr	r3, [r7, #28]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000090 	.word	0x20000090
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <vApplicationGetIdleTaskMemory+0x28>)
 80024c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4a05      	ldr	r2, [pc, #20]	; (80024dc <vApplicationGetIdleTaskMemory+0x2c>)
 80024c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000094 	.word	0x20000094
 80024dc:	200000f0 	.word	0x200000f0

080024e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <vApplicationGetTimerTaskMemory+0x2c>)
 80024f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <vApplicationGetTimerTaskMemory+0x30>)
 80024f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200002f0 	.word	0x200002f0
 8002510:	2000034c 	.word	0x2000034c

08002514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0208 	add.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0208 	add.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d103      	bne.n	80025d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e00c      	b.n	80025ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3308      	adds	r3, #8
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e002      	b.n	80025de <vListInsert+0x2e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d2f6      	bcs.n	80025d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6892      	ldr	r2, [r2, #8]
 8002636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6852      	ldr	r2, [r2, #4]
 8002640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	d103      	bne.n	8002654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
	...

08002674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800269e:	f002 fbe3 	bl	8004e68 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	441a      	add	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	3b01      	subs	r3, #1
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	441a      	add	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d114      	bne.n	800271e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01a      	beq.n	8002732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3310      	adds	r3, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fc17 	bl	8003f34 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <xQueueGenericReset+0xcc>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	e009      	b.n	8002732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3310      	adds	r3, #16
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fef6 	bl	8002514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3324      	adds	r3, #36	; 0x24
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fef1 	bl	8002514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002732:	f002 fbc9 	bl	8004ec8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <xQueueGenericCreateStatic+0x52>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <xQueueGenericCreateStatic+0x56>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueGenericCreateStatic+0x58>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	623b      	str	r3, [r7, #32]
}
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <xQueueGenericCreateStatic+0x7e>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <xQueueGenericCreateStatic+0x82>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <xQueueGenericCreateStatic+0x84>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	61fb      	str	r3, [r7, #28]
}
 80027de:	bf00      	nop
 80027e0:	e7fe      	b.n	80027e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027e2:	2350      	movs	r3, #80	; 0x50
 80027e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d00a      	beq.n	8002802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	61bb      	str	r3, [r7, #24]
}
 80027fe:	bf00      	nop
 8002800:	e7fe      	b.n	8002800 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002814:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f843 	bl	80028ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800282a:	4618      	mov	r0, r3
 800282c:	3730      	adds	r7, #48	; 0x30
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	613b      	str	r3, [r7, #16]
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e004      	b.n	8002872 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3350      	adds	r3, #80	; 0x50
 8002876:	4618      	mov	r0, r3
 8002878:	f002 fbf8 	bl	800506c <pvPortMalloc>
 800287c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	3350      	adds	r3, #80	; 0x50
 8002888:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002892:	79fa      	ldrb	r2, [r7, #7]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f805 	bl	80028ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028a4:	69bb      	ldr	r3, [r7, #24]
	}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e002      	b.n	80028d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028dc:	2101      	movs	r1, #1
 80028de:	69b8      	ldr	r0, [r7, #24]
 80028e0:	f7ff fec8 	bl	8002674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	61bb      	str	r3, [r7, #24]
}
 8002918:	bf00      	nop
 800291a:	e7fe      	b.n	800291a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d90a      	bls.n	800293a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	617b      	str	r3, [r7, #20]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fefd 	bl	8002744 <xQueueGenericCreateStatic>
 800294a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002958:	69fb      	ldr	r3, [r7, #28]
	}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	613b      	str	r3, [r7, #16]
}
 8002984:	bf00      	nop
 8002986:	e7fe      	b.n	8002986 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d90a      	bls.n	80029a6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	60fb      	str	r3, [r7, #12]
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80029a6:	2202      	movs	r2, #2
 80029a8:	2100      	movs	r1, #0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff41 	bl	8002832 <xQueueGenericCreate>
 80029b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80029be:	697b      	ldr	r3, [r7, #20]
	}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericSend+0x32>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <xQueueGenericSend+0x40>
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <xQueueGenericSend+0x44>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <xQueueGenericSend+0x46>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <xQueueGenericSend+0x60>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d103      	bne.n	8002a36 <xQueueGenericSend+0x6e>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <xQueueGenericSend+0x72>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xQueueGenericSend+0x74>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	623b      	str	r3, [r7, #32]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a56:	f001 fc2f 	bl	80042b8 <xTaskGetSchedulerState>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueGenericSend+0x9e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericSend+0xa2>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericSend+0xa4>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61fb      	str	r3, [r7, #28]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a86:	f002 f9ef 	bl	8004e68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <xQueueGenericSend+0xd4>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d129      	bne.n	8002af0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aa2:	f000 fc5b 	bl	800335c <prvCopyDataToQueue>
 8002aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 fa3d 	bl	8003f34 <xTaskRemoveFromEventList>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	e00a      	b.n	8002ae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ae8:	f002 f9ee 	bl	8004ec8 <vPortExitCritical>
				return pdPASS;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e063      	b.n	8002bb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002af6:	f002 f9e7 	bl	8004ec8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e05c      	b.n	8002bb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fa77 	bl	8003ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b12:	f002 f9d9 	bl	8004ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b16:	f000 ffe9 	bl	8003aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b1a:	f002 f9a5 	bl	8004e68 <vPortEnterCritical>
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d103      	bne.n	8002b34 <xQueueGenericSend+0x16c>
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d103      	bne.n	8002b4a <xQueueGenericSend+0x182>
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4a:	f002 f9bd 	bl	8004ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b4e:	1d3a      	adds	r2, r7, #4
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fa66 	bl	8004028 <xTaskCheckForTimeOut>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d124      	bne.n	8002bac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b64:	f000 fcf2 	bl	800354c <prvIsQueueFull>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	3310      	adds	r3, #16
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f98c 	bl	8003e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fc7d 	bl	800347c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b82:	f000 ffc1 	bl	8003b08 <xTaskResumeAll>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af7c 	bne.w	8002a86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <xQueueGenericSend+0x1f8>)
 8002b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	e772      	b.n	8002a86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 fc6b 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba6:	f000 ffaf 	bl	8003b08 <xTaskResumeAll>
 8002baa:	e76c      	b.n	8002a86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bae:	f000 fc65 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb2:	f000 ffa9 	bl	8003b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bb6:	2300      	movs	r3, #0
		}
	}
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3738      	adds	r7, #56	; 0x38
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	; 0x38
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <xQueueGenericSendFromISR+0x3c>
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <xQueueGenericSendFromISR+0x40>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <xQueueGenericSendFromISR+0x42>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	623b      	str	r3, [r7, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSendFromISR+0x6a>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <xQueueGenericSendFromISR+0x6e>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericSendFromISR+0x70>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	61fb      	str	r3, [r7, #28]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c4e:	f002 f9cf 	bl	8004ff0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c52:	f3ef 8211 	mrs	r2, BASEPRI
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	61ba      	str	r2, [r7, #24]
 8002c68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <xQueueGenericSendFromISR+0xbc>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d12c      	bne.n	8002cda <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c90:	f000 fb64 	bl	800335c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d112      	bne.n	8002cc4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	3324      	adds	r3, #36	; 0x24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f942 	bl	8003f34 <xTaskRemoveFromEventList>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e007      	b.n	8002cd4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	b25a      	sxtb	r2, r3
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002cd8:	e001      	b.n	8002cde <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ce8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	; 0x38
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	623b      	str	r3, [r7, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	61fb      	str	r3, [r7, #28]
}
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <xQueueGiveFromISR+0x58>
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGiveFromISR+0x5c>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <xQueueGiveFromISR+0x5e>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xQueueGiveFromISR+0x78>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	61bb      	str	r3, [r7, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d6c:	f002 f940 	bl	8004ff0 <vPortValidateInterruptPriority>
	__asm volatile
 8002d70:	f3ef 8211 	mrs	r2, BASEPRI
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	617a      	str	r2, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d88:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d22b      	bcs.n	8002df4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d112      	bne.n	8002dde <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d016      	beq.n	8002dee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 f8b5 	bl	8003f34 <xTaskRemoveFromEventList>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e007      	b.n	8002dee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de2:	3301      	adds	r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	b25a      	sxtb	r2, r3
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dee:	2301      	movs	r3, #1
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	e001      	b.n	8002df8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f383 8811 	msr	BASEPRI, r3
}
 8002e02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3738      	adds	r7, #56	; 0x38
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <xQueueReceive+0x30>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	623b      	str	r3, [r7, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueReceive+0x3e>
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueReceive+0x42>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueReceive+0x44>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xQueueReceive+0x5e>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61fb      	str	r3, [r7, #28]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6e:	f001 fa23 	bl	80042b8 <xTaskGetSchedulerState>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <xQueueReceive+0x6e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <xQueueReceive+0x72>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueReceive+0x74>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <xQueueReceive+0x8e>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	61bb      	str	r3, [r7, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e9e:	f001 ffe3 	bl	8004e68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01f      	beq.n	8002eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb2:	f000 fabd 	bl	8003430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	3310      	adds	r3, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f832 	bl	8003f34 <xTaskRemoveFromEventList>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <xQueueReceive+0x1bc>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ee6:	f001 ffef 	bl	8004ec8 <vPortExitCritical>
				return pdPASS;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e069      	b.n	8002fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef4:	f001 ffe8 	bl	8004ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e062      	b.n	8002fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f878 	bl	8003ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f10:	f001 ffda 	bl	8004ec8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f14:	f000 fdea 	bl	8003aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f18:	f001 ffa6 	bl	8004e68 <vPortEnterCritical>
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d103      	bne.n	8002f32 <xQueueReceive+0x122>
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <xQueueReceive+0x138>
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f48:	f001 ffbe 	bl	8004ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f4c:	1d3a      	adds	r2, r7, #4
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f867 	bl	8004028 <xTaskCheckForTimeOut>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f62:	f000 fadd 	bl	8003520 <prvIsQueueEmpty>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d017      	beq.n	8002f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ff8d 	bl	8003e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f000 fa7e 	bl	800347c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f80:	f000 fdc2 	bl	8003b08 <xTaskResumeAll>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d189      	bne.n	8002e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <xQueueReceive+0x1bc>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	e780      	b.n	8002e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 fa6d 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa2:	f000 fdb1 	bl	8003b08 <xTaskResumeAll>
 8002fa6:	e77a      	b.n	8002e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002faa:	f000 fa67 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fae:	f000 fdab 	bl	8003b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb4:	f000 fab4 	bl	8003520 <prvIsQueueEmpty>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f43f af6f 	beq.w	8002e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3730      	adds	r7, #48	; 0x30
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	623b      	str	r3, [r7, #32]
}
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	61fb      	str	r3, [r7, #28]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003020:	f001 f94a 	bl	80042b8 <xTaskGetSchedulerState>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <xQueueSemaphoreTake+0x60>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xQueueSemaphoreTake+0x64>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <xQueueSemaphoreTake+0x66>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	61bb      	str	r3, [r7, #24]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003050:	f001 ff0a 	bl	8004e68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d024      	beq.n	80030aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003070:	f001 faa2 	bl	80045b8 <pvTaskIncrementMutexHeldCount>
 8003074:	4602      	mov	r2, r0
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00f      	beq.n	80030a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	3310      	adds	r3, #16
 8003086:	4618      	mov	r0, r3
 8003088:	f000 ff54 	bl	8003f34 <xTaskRemoveFromEventList>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <xQueueSemaphoreTake+0x214>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030a2:	f001 ff11 	bl	8004ec8 <vPortExitCritical>
				return pdPASS;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e097      	b.n	80031da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	617b      	str	r3, [r7, #20]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030cc:	f001 fefc 	bl	8004ec8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e082      	b.n	80031da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 ff8c 	bl	8003ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e8:	f001 feee 	bl	8004ec8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ec:	f000 fcfe 	bl	8003aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f0:	f001 feba 	bl	8004e68 <vPortEnterCritical>
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d103      	bne.n	800310a <xQueueSemaphoreTake+0x13a>
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d103      	bne.n	8003120 <xQueueSemaphoreTake+0x150>
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003120:	f001 fed2 	bl	8004ec8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003124:	463a      	mov	r2, r7
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 ff7b 	bl	8004028 <xTaskCheckForTimeOut>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d132      	bne.n	800319e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800313a:	f000 f9f1 	bl	8003520 <prvIsQueueEmpty>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d026      	beq.n	8003192 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800314c:	f001 fe8c 	bl	8004e68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	f001 f8cd 	bl	80042f4 <xTaskPriorityInherit>
 800315a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800315c:	f001 feb4 	bl	8004ec8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe93 	bl	8003e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800316e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003170:	f000 f984 	bl	800347c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003174:	f000 fcc8 	bl	8003b08 <xTaskResumeAll>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f47f af68 	bne.w	8003050 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <xQueueSemaphoreTake+0x214>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	e75e      	b.n	8003050 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003194:	f000 f972 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003198:	f000 fcb6 	bl	8003b08 <xTaskResumeAll>
 800319c:	e758      	b.n	8003050 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800319e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a0:	f000 f96c 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a4:	f000 fcb0 	bl	8003b08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031aa:	f000 f9b9 	bl	8003520 <prvIsQueueEmpty>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f43f af4d 	beq.w	8003050 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031bc:	f001 fe54 	bl	8004e68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031c2:	f000 f8b4 	bl	800332e <prvGetDisinheritPriorityAfterTimeout>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 f96c 	bl	80044ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031d4:	f001 fe78 	bl	8004ec8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3738      	adds	r7, #56	; 0x38
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	623b      	str	r3, [r7, #32]
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <xQueueReceiveFromISR+0x3a>
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xQueueReceiveFromISR+0x3e>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueReceiveFromISR+0x40>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61fb      	str	r3, [r7, #28]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003242:	f001 fed5 	bl	8004ff0 <vPortValidateInterruptPriority>
	__asm volatile
 8003246:	f3ef 8211 	mrs	r2, BASEPRI
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61ba      	str	r2, [r7, #24]
 800325c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800325e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02f      	beq.n	80032ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327c:	f000 f8d8 	bl	8003430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d112      	bne.n	80032b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	3310      	adds	r3, #16
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fe48 	bl	8003f34 <xTaskRemoveFromEventList>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e007      	b.n	80032c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	3301      	adds	r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	b25a      	sxtb	r2, r3
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80032c8:	2301      	movs	r3, #1
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
 80032cc:	e001      	b.n	80032d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f383 8811 	msr	BASEPRI, r3
}
 80032dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3738      	adds	r7, #56	; 0x38
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <vQueueDelete+0x28>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f95b 	bl	80035cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f001 ff67 	bl	80051f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e001      	b.n	8003350 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003350:	68fb      	ldr	r3, [r7, #12]
	}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14d      	bne.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f822 	bl	80043d0 <xTaskPriorityDisinherit>
 800338c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e043      	b.n	800341e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d119      	bne.n	80033d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6898      	ldr	r0, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	f002 f864 	bl	8005474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d32b      	bcc.n	800341e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	e026      	b.n	800341e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68d8      	ldr	r0, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	461a      	mov	r2, r3
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	f002 f84a 	bl	8005474 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	425b      	negs	r3, r3
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d207      	bcs.n	800340c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	425b      	negs	r3, r3
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d105      	bne.n	800341e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3b01      	subs	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d303      	bcc.n	8003464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68d9      	ldr	r1, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	461a      	mov	r2, r3
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f002 f800 	bl	8005474 <memcpy>
	}
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003484:	f001 fcf0 	bl	8004e68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003490:	e011      	b.n	80034b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3324      	adds	r3, #36	; 0x24
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd48 	bl	8003f34 <xTaskRemoveFromEventList>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034aa:	f000 fe1f 	bl	80040ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dce9      	bgt.n	8003492 <prvUnlockQueue+0x16>
 80034be:	e000      	b.n	80034c2 <prvUnlockQueue+0x46>
					break;
 80034c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fcfd 	bl	8004ec8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ce:	f001 fccb 	bl	8004e68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034da:	e011      	b.n	8003500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fd23 	bl	8003f34 <xTaskRemoveFromEventList>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034f4:	f000 fdfa 	bl	80040ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003504:	2b00      	cmp	r3, #0
 8003506:	dce9      	bgt.n	80034dc <prvUnlockQueue+0x60>
 8003508:	e000      	b.n	800350c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800350a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003514:	f001 fcd8 	bl	8004ec8 <vPortExitCritical>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003528:	f001 fc9e 	bl	8004e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e001      	b.n	800353e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fcc3 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003554:	f001 fc88 	bl	8004e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	429a      	cmp	r2, r3
 8003562:	d102      	bne.n	800356a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e001      	b.n	800356e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356e:	f001 fcab 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e014      	b.n	80035b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003598:	490b      	ldr	r1, [pc, #44]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ae:	e006      	b.n	80035be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	d9e7      	bls.n	800358c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	2000074c 	.word	0x2000074c

080035cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e016      	b.n	8003608 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <vQueueUnregisterQueue+0x50>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d10b      	bne.n	8003602 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <vQueueUnregisterQueue+0x50>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2100      	movs	r1, #0
 80035f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <vQueueUnregisterQueue+0x50>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	2200      	movs	r2, #0
 80035fe:	605a      	str	r2, [r3, #4]
				break;
 8003600:	e006      	b.n	8003610 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b07      	cmp	r3, #7
 800360c:	d9e5      	bls.n	80035da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000074c 	.word	0x2000074c

08003620 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003630:	f001 fc1a 	bl	8004e68 <vPortEnterCritical>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800363a:	b25b      	sxtb	r3, r3
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d103      	bne.n	800364a <vQueueWaitForMessageRestricted+0x2a>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003650:	b25b      	sxtb	r3, r3
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d103      	bne.n	8003660 <vQueueWaitForMessageRestricted+0x40>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003660:	f001 fc32 	bl	8004ec8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fc31 	bl	8003edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff fefe 	bl	800347c <prvUnlockQueue>
	}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	; 0x38
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	623b      	str	r3, [r7, #32]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xTaskCreateStatic+0x46>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	61fb      	str	r3, [r7, #28]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036ce:	235c      	movs	r3, #92	; 0x5c
 80036d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b5c      	cmp	r3, #92	; 0x5c
 80036d6:	d00a      	beq.n	80036ee <xTaskCreateStatic+0x66>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	61bb      	str	r3, [r7, #24]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01e      	beq.n	8003732 <xTaskCreateStatic+0xaa>
 80036f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01b      	beq.n	8003732 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003702:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800370c:	2300      	movs	r3, #0
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f850 	bl	80037ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372c:	f000 f8d4 	bl	80038d8 <prvAddNewTaskToReadyList>
 8003730:	e001      	b.n	8003736 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003736:	697b      	ldr	r3, [r7, #20]
	}
 8003738:	4618      	mov	r0, r3
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fc89 	bl	800506c <pvPortMalloc>
 800375a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003762:	205c      	movs	r0, #92	; 0x5c
 8003764:	f001 fc82 	bl	800506c <pvPortMalloc>
 8003768:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
 8003776:	e005      	b.n	8003784 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f001 fd3b 	bl	80051f4 <vPortFree>
 800377e:	e001      	b.n	8003784 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	2300      	movs	r3, #0
 8003796:	9303      	str	r3, [sp, #12]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f80e 	bl	80037ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ae:	69f8      	ldr	r0, [r7, #28]
 80037b0:	f000 f892 	bl	80038d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e002      	b.n	80037c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037c0:	69bb      	ldr	r3, [r7, #24]
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b088      	sub	sp, #32
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	21a5      	movs	r1, #165	; 0xa5
 80037e4:	f001 fe1a 	bl	800541c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037f2:	3b01      	subs	r3, #1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <prvInitialiseNewTask+0x58>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	617b      	str	r3, [r7, #20]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e012      	b.n	800384e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	7819      	ldrb	r1, [r3, #0]
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	3334      	adds	r3, #52	; 0x34
 8003838:	460a      	mov	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d006      	beq.n	8003856 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d9e9      	bls.n	8003828 <prvInitialiseNewTask+0x5e>
 8003854:	e000      	b.n	8003858 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003856:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2b37      	cmp	r3, #55	; 0x37
 8003864:	d901      	bls.n	800386a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003866:	2337      	movs	r3, #55	; 0x37
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fe66 	bl	8002552 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	3318      	adds	r3, #24
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe61 	bl	8002552 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	69b8      	ldr	r0, [r7, #24]
 80038ba:	f001 f9f7 	bl	8004cac <pxPortInitialiseStack>
 80038be:	4602      	mov	r2, r0
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038e0:	f001 fac2 	bl	8004e68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <prvAddNewTaskToReadyList+0xc4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <prvAddNewTaskToReadyList+0xc4>)
 80038ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <prvAddNewTaskToReadyList+0xc4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d110      	bne.n	8003926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003904:	f000 fc16 	bl	8004134 <prvInitialiseTaskLists>
 8003908:	e00d      	b.n	8003926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <prvAddNewTaskToReadyList+0xcc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	429a      	cmp	r2, r3
 800391e:	d802      	bhi.n	8003926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <prvAddNewTaskToReadyList+0xd0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	4a1e      	ldr	r2, [pc, #120]	; (80039a8 <prvAddNewTaskToReadyList+0xd0>)
 800392e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <prvAddNewTaskToReadyList+0xd0>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <prvAddNewTaskToReadyList+0xd4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <prvAddNewTaskToReadyList+0x74>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <prvAddNewTaskToReadyList+0xd4>)
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <prvAddNewTaskToReadyList+0xd8>)
 800395a:	441a      	add	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f7fe fe01 	bl	800256a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003968:	f001 faae 	bl	8004ec8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <prvAddNewTaskToReadyList+0xcc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	429a      	cmp	r2, r3
 8003980:	d207      	bcs.n	8003992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <prvAddNewTaskToReadyList+0xdc>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000c60 	.word	0x20000c60
 80039a0:	2000078c 	.word	0x2000078c
 80039a4:	20000c6c 	.word	0x20000c6c
 80039a8:	20000c7c 	.word	0x20000c7c
 80039ac:	20000c68 	.word	0x20000c68
 80039b0:	20000790 	.word	0x20000790
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d017      	beq.n	80039fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <vTaskDelay+0x60>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <vTaskDelay+0x30>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039e8:	f000 f880 	bl	8003aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039ec:	2100      	movs	r1, #0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fdf6 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039f4:	f000 f888 	bl	8003b08 <xTaskResumeAll>
 80039f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <vTaskDelay+0x64>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000c88 	.word	0x20000c88
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2e:	463a      	mov	r2, r7
 8003a30:	1d39      	adds	r1, r7, #4
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fd3a 	bl	80024b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	9202      	str	r2, [sp, #8]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	4921      	ldr	r1, [pc, #132]	; (8003ad4 <vTaskStartScheduler+0xb4>)
 8003a50:	4821      	ldr	r0, [pc, #132]	; (8003ad8 <vTaskStartScheduler+0xb8>)
 8003a52:	f7ff fe19 	bl	8003688 <xTaskCreateStatic>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <vTaskStartScheduler+0xbc>)
 8003a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <vTaskStartScheduler+0xbc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e001      	b.n	8003a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a74:	f000 fe08 	bl	8004688 <xTimerCreateTimerTask>
 8003a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d116      	bne.n	8003aae <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	613b      	str	r3, [r7, #16]
}
 8003a92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <vTaskStartScheduler+0xc0>)
 8003a96:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <vTaskStartScheduler+0xc4>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <vTaskStartScheduler+0xc8>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aa8:	f001 f97e 	bl	8004da8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aac:	e00e      	b.n	8003acc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d10a      	bne.n	8003acc <vTaskStartScheduler+0xac>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	60fb      	str	r3, [r7, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <vTaskStartScheduler+0xaa>
}
 8003acc:	bf00      	nop
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	080054f4 	.word	0x080054f4
 8003ad8:	08004105 	.word	0x08004105
 8003adc:	20000c84 	.word	0x20000c84
 8003ae0:	20000c80 	.word	0x20000c80
 8003ae4:	20000c6c 	.word	0x20000c6c
 8003ae8:	20000c64 	.word	0x20000c64

08003aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <vTaskSuspendAll+0x18>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a03      	ldr	r2, [pc, #12]	; (8003b04 <vTaskSuspendAll+0x18>)
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000c88 	.word	0x20000c88

08003b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b16:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <xTaskResumeAll+0x118>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
}
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b34:	f001 f998 	bl	8004e68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b38:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <xTaskResumeAll+0x118>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <xTaskResumeAll+0x118>)
 8003b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <xTaskResumeAll+0x118>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d162      	bne.n	8003c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <xTaskResumeAll+0x11c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d05e      	beq.n	8003c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b52:	e02f      	b.n	8003bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <xTaskResumeAll+0x120>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fd5d 	bl	8002620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fd58 	bl	8002620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <xTaskResumeAll+0x124>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d903      	bls.n	8003b84 <xTaskResumeAll+0x7c>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <xTaskResumeAll+0x124>)
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <xTaskResumeAll+0x128>)
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f7fe fce5 	bl	800256a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <xTaskResumeAll+0x12c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <xTaskResumeAll+0x130>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <xTaskResumeAll+0x120>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1cb      	bne.n	8003b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bc2:	f000 fb55 	bl	8004270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <xTaskResumeAll+0x134>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bd2:	f000 f845 	bl	8003c60 <xTaskIncrementTick>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bdc:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <xTaskResumeAll+0x130>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f1      	bne.n	8003bd2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <xTaskResumeAll+0x134>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <xTaskResumeAll+0x130>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <xTaskResumeAll+0x138>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c10:	f001 f95a 	bl	8004ec8 <vPortExitCritical>

	return xAlreadyYielded;
 8003c14:	68bb      	ldr	r3, [r7, #8]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000c88 	.word	0x20000c88
 8003c24:	20000c60 	.word	0x20000c60
 8003c28:	20000c20 	.word	0x20000c20
 8003c2c:	20000c68 	.word	0x20000c68
 8003c30:	20000790 	.word	0x20000790
 8003c34:	2000078c 	.word	0x2000078c
 8003c38:	20000c74 	.word	0x20000c74
 8003c3c:	20000c70 	.word	0x20000c70
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <xTaskGetTickCount+0x18>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000c64 	.word	0x20000c64

08003c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <xTaskIncrementTick+0x150>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 808e 	bne.w	8003d90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c74:	4b4f      	ldr	r3, [pc, #316]	; (8003db4 <xTaskIncrementTick+0x154>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c7c:	4a4d      	ldr	r2, [pc, #308]	; (8003db4 <xTaskIncrementTick+0x154>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d120      	bne.n	8003cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	603b      	str	r3, [r7, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskIncrementTick+0x46>
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <xTaskIncrementTick+0x15c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a41      	ldr	r2, [pc, #260]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4a41      	ldr	r2, [pc, #260]	; (8003dbc <xTaskIncrementTick+0x15c>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <xTaskIncrementTick+0x160>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	4a3f      	ldr	r2, [pc, #252]	; (8003dc0 <xTaskIncrementTick+0x160>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	f000 fad3 	bl	8004270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <xTaskIncrementTick+0x164>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d34e      	bcc.n	8003d72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <xTaskIncrementTick+0x82>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xTaskIncrementTick+0x84>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce8:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <xTaskIncrementTick+0x164>)
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	601a      	str	r2, [r3, #0]
					break;
 8003cf0:	e03f      	b.n	8003d72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d203      	bcs.n	8003d12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d0a:	4a2e      	ldr	r2, [pc, #184]	; (8003dc4 <xTaskIncrementTick+0x164>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6013      	str	r3, [r2, #0]
						break;
 8003d10:	e02f      	b.n	8003d72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fc82 	bl	8002620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	3318      	adds	r3, #24
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fc79 	bl	8002620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <xTaskIncrementTick+0x168>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d903      	bls.n	8003d42 <xTaskIncrementTick+0xe2>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <xTaskIncrementTick+0x168>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <xTaskIncrementTick+0x16c>)
 8003d50:	441a      	add	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7fe fc06 	bl	800256a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <xTaskIncrementTick+0x170>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3b3      	bcc.n	8003cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d70:	e7b0      	b.n	8003cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <xTaskIncrementTick+0x170>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4914      	ldr	r1, [pc, #80]	; (8003dcc <xTaskIncrementTick+0x16c>)
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d907      	bls.n	8003d9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e004      	b.n	8003d9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <xTaskIncrementTick+0x174>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <xTaskIncrementTick+0x174>)
 8003d98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <xTaskIncrementTick+0x178>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000c88 	.word	0x20000c88
 8003db4:	20000c64 	.word	0x20000c64
 8003db8:	20000c18 	.word	0x20000c18
 8003dbc:	20000c1c 	.word	0x20000c1c
 8003dc0:	20000c78 	.word	0x20000c78
 8003dc4:	20000c80 	.word	0x20000c80
 8003dc8:	20000c68 	.word	0x20000c68
 8003dcc:	20000790 	.word	0x20000790
 8003dd0:	2000078c 	.word	0x2000078c
 8003dd4:	20000c70 	.word	0x20000c70
 8003dd8:	20000c74 	.word	0x20000c74

08003ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <vTaskSwitchContext+0xa4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <vTaskSwitchContext+0xa8>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003df0:	e041      	b.n	8003e76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <vTaskSwitchContext+0xa8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <vTaskSwitchContext+0xac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e010      	b.n	8003e22 <vTaskSwitchContext+0x46>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	607b      	str	r3, [r7, #4]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <vTaskSwitchContext+0x3e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	491a      	ldr	r1, [pc, #104]	; (8003e8c <vTaskSwitchContext+0xb0>)
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0e4      	beq.n	8003e00 <vTaskSwitchContext+0x24>
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <vTaskSwitchContext+0xb0>)
 8003e42:	4413      	add	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	3308      	adds	r3, #8
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d104      	bne.n	8003e66 <vTaskSwitchContext+0x8a>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <vTaskSwitchContext+0xb4>)
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <vTaskSwitchContext+0xac>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6013      	str	r3, [r2, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	20000c88 	.word	0x20000c88
 8003e84:	20000c74 	.word	0x20000c74
 8003e88:	20000c68 	.word	0x20000c68
 8003e8c:	20000790 	.word	0x20000790
 8003e90:	2000078c 	.word	0x2000078c

08003e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <vTaskPlaceOnEventList+0x44>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3318      	adds	r3, #24
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fe fb74 	bl	80025b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ec8:	2101      	movs	r1, #1
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	f000 fb88 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	2000078c 	.word	0x2000078c

08003edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	617b      	str	r3, [r7, #20]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7fe fb2c 	bl	800256a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	f000 fb5d 	bl	80045e0 <prvAddCurrentTaskToDelayedList>
	}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000078c 	.word	0x2000078c

08003f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60fb      	str	r3, [r7, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fb5b 	bl	8002620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <xTaskRemoveFromEventList+0xb0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11d      	bne.n	8003fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fb52 	bl	8002620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <xTaskRemoveFromEventList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d903      	bls.n	8003f90 <xTaskRemoveFromEventList+0x5c>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <xTaskRemoveFromEventList+0xb4>)
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4a13      	ldr	r2, [pc, #76]	; (8003fec <xTaskRemoveFromEventList+0xb8>)
 8003f9e:	441a      	add	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7fe fadf 	bl	800256a <vListInsertEnd>
 8003fac:	e005      	b.n	8003fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	480e      	ldr	r0, [pc, #56]	; (8003ff0 <xTaskRemoveFromEventList+0xbc>)
 8003fb6:	f7fe fad8 	bl	800256a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <xTaskRemoveFromEventList+0xc0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d905      	bls.n	8003fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <xTaskRemoveFromEventList+0xc4>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e001      	b.n	8003fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000c88 	.word	0x20000c88
 8003fe8:	20000c68 	.word	0x20000c68
 8003fec:	20000790 	.word	0x20000790
 8003ff0:	20000c20 	.word	0x20000c20
 8003ff4:	2000078c 	.word	0x2000078c
 8003ff8:	20000c74 	.word	0x20000c74

08003ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <vTaskInternalSetTimeOutState+0x24>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <vTaskInternalSetTimeOutState+0x28>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	605a      	str	r2, [r3, #4]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000c78 	.word	0x20000c78
 8004024:	20000c64 	.word	0x20000c64

08004028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	613b      	str	r3, [r7, #16]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800406a:	f000 fefd 	bl	8004e68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <xTaskCheckForTimeOut+0xbc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d102      	bne.n	800408e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e023      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <xTaskCheckForTimeOut+0xc0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d007      	beq.n	80040aa <xTaskCheckForTimeOut+0x82>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e015      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d20b      	bcs.n	80040cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff9b 	bl	8003ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e004      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040d6:	f000 fef7 	bl	8004ec8 <vPortExitCritical>

	return xReturn;
 80040da:	69fb      	ldr	r3, [r7, #28]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000c64 	.word	0x20000c64
 80040e8:	20000c78 	.word	0x20000c78

080040ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <vTaskMissedYield+0x14>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000c74 	.word	0x20000c74

08004104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800410c:	f000 f852 	bl	80041b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <prvIdleTask+0x28>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d9f9      	bls.n	800410c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <prvIdleTask+0x2c>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004128:	e7f0      	b.n	800410c <prvIdleTask+0x8>
 800412a:	bf00      	nop
 800412c:	20000790 	.word	0x20000790
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	e00c      	b.n	800415a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <prvInitialiseTaskLists+0x60>)
 800414c:	4413      	add	r3, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe f9e0 	bl	8002514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3301      	adds	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b37      	cmp	r3, #55	; 0x37
 800415e:	d9ef      	bls.n	8004140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004160:	480d      	ldr	r0, [pc, #52]	; (8004198 <prvInitialiseTaskLists+0x64>)
 8004162:	f7fe f9d7 	bl	8002514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004166:	480d      	ldr	r0, [pc, #52]	; (800419c <prvInitialiseTaskLists+0x68>)
 8004168:	f7fe f9d4 	bl	8002514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800416c:	480c      	ldr	r0, [pc, #48]	; (80041a0 <prvInitialiseTaskLists+0x6c>)
 800416e:	f7fe f9d1 	bl	8002514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004172:	480c      	ldr	r0, [pc, #48]	; (80041a4 <prvInitialiseTaskLists+0x70>)
 8004174:	f7fe f9ce 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <prvInitialiseTaskLists+0x74>)
 800417a:	f7fe f9cb 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <prvInitialiseTaskLists+0x78>)
 8004180:	4a05      	ldr	r2, [pc, #20]	; (8004198 <prvInitialiseTaskLists+0x64>)
 8004182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <prvInitialiseTaskLists+0x7c>)
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <prvInitialiseTaskLists+0x68>)
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000790 	.word	0x20000790
 8004198:	20000bf0 	.word	0x20000bf0
 800419c:	20000c04 	.word	0x20000c04
 80041a0:	20000c20 	.word	0x20000c20
 80041a4:	20000c34 	.word	0x20000c34
 80041a8:	20000c4c 	.word	0x20000c4c
 80041ac:	20000c18 	.word	0x20000c18
 80041b0:	20000c1c 	.word	0x20000c1c

080041b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041ba:	e019      	b.n	80041f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041bc:	f000 fe54 	bl	8004e68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <prvCheckTasksWaitingTermination+0x50>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fa27 	bl	8002620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <prvCheckTasksWaitingTermination+0x54>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <prvCheckTasksWaitingTermination+0x54>)
 80041da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041e6:	f000 fe6f 	bl	8004ec8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f810 	bl	8004210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <prvCheckTasksWaitingTermination+0x58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e1      	bne.n	80041bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000c34 	.word	0x20000c34
 8004208:	20000c60 	.word	0x20000c60
 800420c:	20000c48 	.word	0x20000c48

08004210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4618      	mov	r0, r3
 8004228:	f000 ffe4 	bl	80051f4 <vPortFree>
				vPortFree( pxTCB );
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 ffe1 	bl	80051f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004232:	e018      	b.n	8004266 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800423a:	2b01      	cmp	r3, #1
 800423c:	d103      	bne.n	8004246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ffd8 	bl	80051f4 <vPortFree>
	}
 8004244:	e00f      	b.n	8004266 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00a      	beq.n	8004266 <prvDeleteTCB+0x56>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <prvDeleteTCB+0x54>
	}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <prvResetNextTaskUnblockTime+0x40>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <prvResetNextTaskUnblockTime+0x14>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <prvResetNextTaskUnblockTime+0x16>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvResetNextTaskUnblockTime+0x44>)
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004292:	e008      	b.n	80042a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <prvResetNextTaskUnblockTime+0x40>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <prvResetNextTaskUnblockTime+0x44>)
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	20000c18 	.word	0x20000c18
 80042b4:	20000c80 	.word	0x20000c80

080042b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <xTaskGetSchedulerState+0x34>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042c6:	2301      	movs	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e008      	b.n	80042de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <xTaskGetSchedulerState+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042d4:	2302      	movs	r3, #2
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e001      	b.n	80042de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042de:	687b      	ldr	r3, [r7, #4]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000c6c 	.word	0x20000c6c
 80042f0:	20000c88 	.word	0x20000c88

080042f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d056      	beq.n	80043b8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <xTaskPriorityInherit+0xd0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d246      	bcs.n	80043a6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	db06      	blt.n	800432e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <xTaskPriorityInherit+0xd0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6959      	ldr	r1, [r3, #20]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <xTaskPriorityInherit+0xd4>)
 8004340:	4413      	add	r3, r2
 8004342:	4299      	cmp	r1, r3
 8004344:	d101      	bne.n	800434a <xTaskPriorityInherit+0x56>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <xTaskPriorityInherit+0x58>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d022      	beq.n	8004396 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f963 	bl	8002620 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <xTaskPriorityInherit+0xd0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <xTaskPriorityInherit+0xd8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d903      	bls.n	8004378 <xTaskPriorityInherit+0x84>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <xTaskPriorityInherit+0xd8>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <xTaskPriorityInherit+0xd4>)
 8004386:	441a      	add	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe f8eb 	bl	800256a <vListInsertEnd>
 8004394:	e004      	b.n	80043a0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <xTaskPriorityInherit+0xd0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e008      	b.n	80043b8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <xTaskPriorityInherit+0xd0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d201      	bcs.n	80043b8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043b8:	68fb      	ldr	r3, [r7, #12]
	}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000078c 	.word	0x2000078c
 80043c8:	20000790 	.word	0x20000790
 80043cc:	20000c68 	.word	0x20000c68

080043d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d056      	beq.n	8004494 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043e6:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <xTaskPriorityDisinherit+0xd0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d00a      	beq.n	8004406 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60bb      	str	r3, [r7, #8]
}
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	429a      	cmp	r2, r3
 8004438:	d02c      	beq.n	8004494 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	2b00      	cmp	r3, #0
 8004440:	d128      	bne.n	8004494 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3304      	adds	r3, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe f8ea 	bl	8002620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <xTaskPriorityDisinherit+0xd4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d903      	bls.n	8004474 <xTaskPriorityDisinherit+0xa4>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <xTaskPriorityDisinherit+0xd4>)
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <xTaskPriorityDisinherit+0xd8>)
 8004482:	441a      	add	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7fe f86d 	bl	800256a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004494:	697b      	ldr	r3, [r7, #20]
	}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	2000078c 	.word	0x2000078c
 80044a4:	20000c68 	.word	0x20000c68
 80044a8:	20000790 	.word	0x20000790

080044ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06f      	beq.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	60fb      	str	r3, [r7, #12]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d902      	bls.n	80044f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e002      	b.n	80044f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d050      	beq.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d14b      	bne.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	429a      	cmp	r2, r3
 8004514:	d10a      	bne.n	800452c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60bb      	str	r3, [r7, #8]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db04      	blt.n	800454a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6959      	ldr	r1, [r3, #20]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800455a:	4413      	add	r3, r2
 800455c:	4299      	cmp	r1, r3
 800455e:	d101      	bne.n	8004564 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01c      	beq.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f856 	bl	8002620 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d903      	bls.n	8004588 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a0b      	ldr	r2, [pc, #44]	; (80045b4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004596:	441a      	add	r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fd ffe3 	bl	800256a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045a4:	bf00      	nop
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000078c 	.word	0x2000078c
 80045b0:	20000790 	.word	0x20000790
 80045b4:	20000c68 	.word	0x20000c68

080045b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <pvTaskIncrementMutexHeldCount+0x24>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <pvTaskIncrementMutexHeldCount+0x24>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ca:	3201      	adds	r2, #1
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80045ce:	4b03      	ldr	r3, [pc, #12]	; (80045dc <pvTaskIncrementMutexHeldCount+0x24>)
 80045d0:	681b      	ldr	r3, [r3, #0]
	}
 80045d2:	4618      	mov	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000078c 	.word	0x2000078c

080045e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <prvAddCurrentTaskToDelayedList+0x90>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f0:	4b20      	ldr	r3, [pc, #128]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe f812 	bl	8002620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d10a      	bne.n	800461a <prvAddCurrentTaskToDelayedList+0x3a>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4819      	ldr	r0, [pc, #100]	; (8004678 <prvAddCurrentTaskToDelayedList+0x98>)
 8004614:	f7fd ffa9 	bl	800256a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004618:	e026      	b.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	429a      	cmp	r2, r3
 8004630:	d209      	bcs.n	8004646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fd ffb6 	bl	80025b0 <vListInsert>
}
 8004644:	e010      	b.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <prvAddCurrentTaskToDelayedList+0x94>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7fd ffac 	bl	80025b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	d202      	bcs.n	8004668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000c64 	.word	0x20000c64
 8004674:	2000078c 	.word	0x2000078c
 8004678:	20000c4c 	.word	0x20000c4c
 800467c:	20000c1c 	.word	0x20000c1c
 8004680:	20000c18 	.word	0x20000c18
 8004684:	20000c80 	.word	0x20000c80

08004688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004692:	f000 facb 	bl	8004c2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <xTimerCreateTimerTask+0x80>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d021      	beq.n	80046e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046a6:	1d3a      	adds	r2, r7, #4
 80046a8:	f107 0108 	add.w	r1, r7, #8
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd ff15 	bl	80024e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	9202      	str	r2, [sp, #8]
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2302      	movs	r3, #2
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	460a      	mov	r2, r1
 80046c8:	4910      	ldr	r1, [pc, #64]	; (800470c <xTimerCreateTimerTask+0x84>)
 80046ca:	4811      	ldr	r0, [pc, #68]	; (8004710 <xTimerCreateTimerTask+0x88>)
 80046cc:	f7fe ffdc 	bl	8003688 <xTaskCreateStatic>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <xTimerCreateTimerTask+0x8c>)
 80046d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <xTimerCreateTimerTask+0x8c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	613b      	str	r3, [r7, #16]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000cbc 	.word	0x20000cbc
 800470c:	080054fc 	.word	0x080054fc
 8004710:	08004835 	.word	0x08004835
 8004714:	20000cc0 	.word	0x20000cc0

08004718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	623b      	str	r3, [r7, #32]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02a      	beq.n	80047a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	dc18      	bgt.n	8004792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004760:	f7ff fdaa 	bl	80042b8 <xTaskGetSchedulerState>
 8004764:	4603      	mov	r3, r0
 8004766:	2b02      	cmp	r3, #2
 8004768:	d109      	bne.n	800477e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <xTimerGenericCommand+0x98>)
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	f107 0110 	add.w	r1, r7, #16
 8004772:	2300      	movs	r3, #0
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	f7fe f927 	bl	80029c8 <xQueueGenericSend>
 800477a:	6278      	str	r0, [r7, #36]	; 0x24
 800477c:	e012      	b.n	80047a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	f107 0110 	add.w	r1, r7, #16
 8004786:	2300      	movs	r3, #0
 8004788:	2200      	movs	r2, #0
 800478a:	f7fe f91d 	bl	80029c8 <xQueueGenericSend>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24
 8004790:	e008      	b.n	80047a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <xTimerGenericCommand+0x98>)
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	f107 0110 	add.w	r1, r7, #16
 800479a:	2300      	movs	r3, #0
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	f7fe fa11 	bl	8002bc4 <xQueueGenericSendFromISR>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000cbc 	.word	0x20000cbc

080047b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <prvProcessExpiredTimer+0x7c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fd ff27 	bl	8002620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d122      	bne.n	8004820 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	18d1      	adds	r1, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f000 f8c8 	bl	800497c <prvInsertTimerInActiveList>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047f2:	2300      	movs	r3, #0
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	2100      	movs	r1, #0
 80047fc:	6978      	ldr	r0, [r7, #20]
 80047fe:	f7ff ff8b 	bl	8004718 <xTimerGenericCommand>
 8004802:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60fb      	str	r3, [r7, #12]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	6978      	ldr	r0, [r7, #20]
 8004826:	4798      	blx	r3
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000cb4 	.word	0x20000cb4

08004834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f857 	bl	80048f4 <prvGetNextExpireTime>
 8004846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f803 	bl	8004858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004852:	f000 f8d5 	bl	8004a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004856:	e7f1      	b.n	800483c <prvTimerTask+0x8>

08004858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004862:	f7ff f943 	bl	8003aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f866 	bl	800493c <prvSampleTimeNow>
 8004870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d130      	bne.n	80048da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <prvProcessTimerOrBlockTask+0x3c>
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	429a      	cmp	r2, r3
 8004884:	d806      	bhi.n	8004894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004886:	f7ff f93f 	bl	8003b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff91 	bl	80047b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004892:	e024      	b.n	80048de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <prvProcessTimerOrBlockTask+0x90>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <prvProcessTimerOrBlockTask+0x94>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	f7fe feb1 	bl	8003620 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048be:	f7ff f923 	bl	8003b08 <xTaskResumeAll>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <prvProcessTimerOrBlockTask+0x98>)
 80048ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	f3bf 8f6f 	isb	sy
}
 80048d8:	e001      	b.n	80048de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048da:	f7ff f915 	bl	8003b08 <xTaskResumeAll>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000cb8 	.word	0x20000cb8
 80048ec:	20000cbc 	.word	0x20000cbc
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <prvGetNextExpireTime+0x44>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <prvGetNextExpireTime+0x44>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e001      	b.n	800492a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000cb4 	.word	0x20000cb4

0800493c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004944:	f7ff f97e 	bl	8003c44 <xTaskGetTickCount>
 8004948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <prvSampleTimeNow+0x3c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d205      	bcs.n	8004960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004954:	f000 f908 	bl	8004b68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e002      	b.n	8004966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <prvSampleTimeNow+0x3c>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000cc4 	.word	0x20000cc4

0800497c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d812      	bhi.n	80049c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e01b      	b.n	80049ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <prvInsertTimerInActiveList+0x7c>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7fd fdf5 	bl	80025b0 <vListInsert>
 80049c6:	e012      	b.n	80049ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d206      	bcs.n	80049de <prvInsertTimerInActiveList+0x62>
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e007      	b.n	80049ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <prvInsertTimerInActiveList+0x80>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fd fde1 	bl	80025b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ee:	697b      	ldr	r3, [r7, #20]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000cb8 	.word	0x20000cb8
 80049fc:	20000cb4 	.word	0x20000cb4

08004a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a06:	e09d      	b.n	8004b44 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da18      	bge.n	8004a40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	3304      	adds	r3, #4
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61fb      	str	r3, [r7, #28]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a36:	6850      	ldr	r0, [r2, #4]
 8004a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3a:	6892      	ldr	r2, [r2, #8]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	db7e      	blt.n	8004b44 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd fde2 	bl	8002620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff ff6c 	bl	800493c <prvSampleTimeNow>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b09      	cmp	r3, #9
 8004a6a:	d86a      	bhi.n	8004b42 <prvProcessReceivedCommands+0x142>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <prvProcessReceivedCommands+0x74>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004a9d 	.word	0x08004a9d
 8004a80:	08004b45 	.word	0x08004b45
 8004a84:	08004af9 	.word	0x08004af9
 8004a88:	08004b31 	.word	0x08004b31
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004a9d 	.word	0x08004a9d
 8004a94:	08004b45 	.word	0x08004b45
 8004a98:	08004af9 	.word	0x08004af9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	18d1      	adds	r1, r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f7ff ff67 	bl	800497c <prvInsertTimerInActiveList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d047      	beq.n	8004b44 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d13f      	bne.n	8004b44 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	441a      	add	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad6:	f7ff fe1f 	bl	8004718 <xTimerGenericCommand>
 8004ada:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d130      	bne.n	8004b44 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61bb      	str	r3, [r7, #24]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
}
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	18d1      	adds	r1, r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2a:	f7ff ff27 	bl	800497c <prvInsertTimerInActiveList>
					break;
 8004b2e:	e009      	b.n	8004b44 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3c:	f000 fb5a 	bl	80051f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b40:	e000      	b.n	8004b44 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004b42:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvProcessReceivedCommands+0x164>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1d39      	adds	r1, r7, #4
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe f95f 	bl	8002e10 <xQueueReceive>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af57 	bne.w	8004a08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	3730      	adds	r7, #48	; 0x30
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000cbc 	.word	0x20000cbc

08004b68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b6e:	e045      	b.n	8004bfc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fd fd49 	bl	8002620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d12e      	bne.n	8004bfc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d90e      	bls.n	8004bce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7fd fcf2 	bl	80025b0 <vListInsert>
 8004bcc:	e016      	b.n	8004bfc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fd9d 	bl	8004718 <xTimerGenericCommand>
 8004bde:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <prvSwitchTimerLists+0x94>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	603b      	str	r3, [r7, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1b4      	bne.n	8004b70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <prvSwitchTimerLists+0xc0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <prvSwitchTimerLists+0xbc>)
 8004c12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvSwitchTimerLists+0xc0>)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000cb4 	.word	0x20000cb4
 8004c28:	20000cb8 	.word	0x20000cb8

08004c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c32:	f000 f919 	bl	8004e68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d120      	bne.n	8004c80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c3e:	4814      	ldr	r0, [pc, #80]	; (8004c90 <prvCheckForValidListAndQueue+0x64>)
 8004c40:	f7fd fc68 	bl	8002514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c44:	4813      	ldr	r0, [pc, #76]	; (8004c94 <prvCheckForValidListAndQueue+0x68>)
 8004c46:	f7fd fc65 	bl	8002514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <prvCheckForValidListAndQueue+0x6c>)
 8004c4c:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <prvCheckForValidListAndQueue+0x64>)
 8004c4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <prvCheckForValidListAndQueue+0x70>)
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <prvCheckForValidListAndQueue+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <prvCheckForValidListAndQueue+0x74>)
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <prvCheckForValidListAndQueue+0x78>)
 8004c5e:	2110      	movs	r1, #16
 8004c60:	200a      	movs	r0, #10
 8004c62:	f7fd fd6f 	bl	8002744 <xQueueGenericCreateStatic>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <prvCheckForValidListAndQueue+0x60>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <prvCheckForValidListAndQueue+0x7c>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fc7e 	bl	800357c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c80:	f000 f922 	bl	8004ec8 <vPortExitCritical>
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000cbc 	.word	0x20000cbc
 8004c90:	20000c8c 	.word	0x20000c8c
 8004c94:	20000ca0 	.word	0x20000ca0
 8004c98:	20000cb4 	.word	0x20000cb4
 8004c9c:	20000cb8 	.word	0x20000cb8
 8004ca0:	20000d68 	.word	0x20000d68
 8004ca4:	20000cc8 	.word	0x20000cc8
 8004ca8:	08005504 	.word	0x08005504

08004cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <pxPortInitialiseStack+0x54>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b14      	subs	r3, #20
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b20      	subs	r3, #32
 8004cf2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	08004d05 	.word	0x08004d05

08004d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvTaskExitError+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d00a      	beq.n	8004d2e <prvTaskExitError+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvTaskExitError+0x28>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
}
 8004d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d42:	bf00      	nop
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0fc      	beq.n	8004d44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	00000000 	.word	0x00000000

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d7e:	4770      	bx	lr

08004d80 <pxCurrentTCBConst2>:
 8004d80:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d88:	4806      	ldr	r0, [pc, #24]	; (8004da4 <prvPortStartFirstTask+0x1c>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	b662      	cpsie	i
 8004d94:	b661      	cpsie	f
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	df00      	svc	0
 8004da0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed08 	.word	0xe000ed08

08004da8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <xPortStartScheduler+0xac>)
 8004db0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <xPortStartScheduler+0xb0>)
 8004dd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dd6:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ddc:	e009      	b.n	8004df2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004de6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d0ef      	beq.n	8004dde <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <xPortStartScheduler+0xb4>)
 8004e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xPortStartScheduler+0xb8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <xPortStartScheduler+0xb8>)
 8004e22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <xPortStartScheduler+0xb8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <xPortStartScheduler+0xb8>)
 8004e2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e34:	f000 f8ba 	bl	8004fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <xPortStartScheduler+0xbc>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e3e:	f7ff ffa3 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e42:	f7fe ffcb 	bl	8003ddc <vTaskSwitchContext>
	prvTaskExitError();
 8004e46:	f7ff ff5d 	bl	8004d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000e400 	.word	0xe000e400
 8004e58:	20000db8 	.word	0x20000db8
 8004e5c:	20000dbc 	.word	0x20000dbc
 8004e60:	e000ed20 	.word	0xe000ed20
 8004e64:	2000000c 	.word	0x2000000c

08004e68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
}
 8004e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <vPortEnterCritical+0x58>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <vPortEnterCritical+0x58>)
 8004e8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <vPortEnterCritical+0x58>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10f      	bne.n	8004eb4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <vPortEnterCritical+0x5c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vPortEnterCritical+0x4a>
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2000000c 	.word	0x2000000c
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ece:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <vPortExitCritical+0x24>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	607b      	str	r3, [r7, #4]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <vPortExitCritical+0x4c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vPortExitCritical+0x4c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <vPortExitCritical+0x42>
 8004efe:	2300      	movs	r3, #0
 8004f00:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	2000000c 	.word	0x2000000c
	...

08004f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f20:	f3ef 8009 	mrs	r0, PSP
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <pxCurrentTCBConst>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f30:	6010      	str	r0, [r2, #0]
 8004f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f3a:	f380 8811 	msr	BASEPRI, r0
 8004f3e:	f7fe ff4d 	bl	8003ddc <vTaskSwitchContext>
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	6808      	ldr	r0, [r1, #0]
 8004f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f56:	f380 8809 	msr	PSP, r0
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	4770      	bx	lr

08004f60 <pxCurrentTCBConst>:
 8004f60:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	607b      	str	r3, [r7, #4]
}
 8004f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f82:	f7fe fe6d 	bl	8003c60 <xTaskIncrementTick>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <SysTick_Handler+0x40>)
 8004f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	2300      	movs	r3, #0
 8004f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f383 8811 	msr	BASEPRI, r3
}
 8004f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <vPortSetupTimerInterrupt+0x30>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <vPortSetupTimerInterrupt+0x34>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <vPortSetupTimerInterrupt+0x38>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <vPortSetupTimerInterrupt+0x3c>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <vPortSetupTimerInterrupt+0x40>)
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fce:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <vPortSetupTimerInterrupt+0x30>)
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	601a      	str	r2, [r3, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	e000e010 	.word	0xe000e010
 8004fe0:	e000e018 	.word	0xe000e018
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	10624dd3 	.word	0x10624dd3
 8004fec:	e000e014 	.word	0xe000e014

08004ff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ff6:	f3ef 8305 	mrs	r3, IPSR
 8004ffa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d914      	bls.n	800502c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <vPortValidateInterruptPriority+0x6c>)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <vPortValidateInterruptPriority+0x70>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	7afa      	ldrb	r2, [r7, #11]
 8005012:	429a      	cmp	r2, r3
 8005014:	d20a      	bcs.n	800502c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	607b      	str	r3, [r7, #4]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <vPortValidateInterruptPriority+0x74>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <vPortValidateInterruptPriority+0x78>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d90a      	bls.n	8005052 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	603b      	str	r3, [r7, #0]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vPortValidateInterruptPriority+0x60>
	}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	e000e3f0 	.word	0xe000e3f0
 8005060:	20000db8 	.word	0x20000db8
 8005064:	e000ed0c 	.word	0xe000ed0c
 8005068:	20000dbc 	.word	0x20000dbc

0800506c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005078:	f7fe fd38 	bl	8003aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800507c:	4b58      	ldr	r3, [pc, #352]	; (80051e0 <pvPortMalloc+0x174>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005084:	f000 f910 	bl	80052a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005088:	4b56      	ldr	r3, [pc, #344]	; (80051e4 <pvPortMalloc+0x178>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 808e 	bne.w	80051b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01d      	beq.n	80050d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	3308      	adds	r3, #8
 80050b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <pvPortMalloc+0x6c>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	617b      	str	r3, [r7, #20]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d069      	beq.n	80051b2 <pvPortMalloc+0x146>
 80050de:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <pvPortMalloc+0x17c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d864      	bhi.n	80051b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <pvPortMalloc+0x180>)
 80050ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050ec:	4b3f      	ldr	r3, [pc, #252]	; (80051ec <pvPortMalloc+0x180>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050f2:	e004      	b.n	80050fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d903      	bls.n	8005110 <pvPortMalloc+0xa4>
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f1      	bne.n	80050f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005110:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <pvPortMalloc+0x174>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	429a      	cmp	r2, r3
 8005118:	d04b      	beq.n	80051b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2208      	movs	r2, #8
 8005120:	4413      	add	r3, r2
 8005122:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	2308      	movs	r3, #8
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	429a      	cmp	r2, r3
 800513a:	d91f      	bls.n	800517c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <pvPortMalloc+0xf8>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	613b      	str	r3, [r7, #16]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005176:	69b8      	ldr	r0, [r7, #24]
 8005178:	f000 f8f8 	bl	800536c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <pvPortMalloc+0x17c>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a18      	ldr	r2, [pc, #96]	; (80051e8 <pvPortMalloc+0x17c>)
 8005188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800518a:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <pvPortMalloc+0x17c>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <pvPortMalloc+0x184>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d203      	bcs.n	800519e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <pvPortMalloc+0x17c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <pvPortMalloc+0x184>)
 800519c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <pvPortMalloc+0x178>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051b2:	f7fe fca9 	bl	8003b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <pvPortMalloc+0x16a>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60fb      	str	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <pvPortMalloc+0x168>
	return pvReturn;
 80051d6:	69fb      	ldr	r3, [r7, #28]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20001dc8 	.word	0x20001dc8
 80051e4:	20001dd4 	.word	0x20001dd4
 80051e8:	20001dcc 	.word	0x20001dcc
 80051ec:	20001dc0 	.word	0x20001dc0
 80051f0:	20001dd0 	.word	0x20001dd0

080051f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d048      	beq.n	8005298 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005206:	2308      	movs	r3, #8
 8005208:	425b      	negs	r3, r3
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4413      	add	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <vPortFree+0xac>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <vPortFree+0x44>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <vPortFree+0x62>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60bb      	str	r3, [r7, #8]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <vPortFree+0xac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d115      	bne.n	8005298 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortFree+0xac>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	43db      	mvns	r3, r3
 8005276:	401a      	ands	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800527c:	f7fe fc36 	bl	8003aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <vPortFree+0xb0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4413      	add	r3, r2
 800528a:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <vPortFree+0xb0>)
 800528c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f000 f86c 	bl	800536c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005294:	f7fe fc38 	bl	8003b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20001dd4 	.word	0x20001dd4
 80052a4:	20001dcc 	.word	0x20001dcc

080052a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <prvHeapInit+0xac>)
 80052b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3307      	adds	r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0307 	bic.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <prvHeapInit+0xac>)
 80052d8:	4413      	add	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <prvHeapInit+0xb0>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052e6:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <prvHeapInit+0xb0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4413      	add	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052f4:	2208      	movs	r2, #8
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <prvHeapInit+0xb4>)
 8005308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <prvHeapInit+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <prvHeapInit+0xb4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	1ad2      	subs	r2, r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <prvHeapInit+0xb4>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <prvHeapInit+0xb8>)
 8005336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <prvHeapInit+0xbc>)
 800533e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <prvHeapInit+0xc0>)
 8005342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005346:	601a      	str	r2, [r3, #0]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000dc0 	.word	0x20000dc0
 8005358:	20001dc0 	.word	0x20001dc0
 800535c:	20001dc8 	.word	0x20001dc8
 8005360:	20001dd0 	.word	0x20001dd0
 8005364:	20001dcc 	.word	0x20001dcc
 8005368:	20001dd4 	.word	0x20001dd4

0800536c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <prvInsertBlockIntoFreeList+0xa8>)
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e002      	b.n	8005380 <prvInsertBlockIntoFreeList+0x14>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d8f7      	bhi.n	800537a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4413      	add	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d108      	bne.n	80053ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	441a      	add	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d118      	bne.n	80053f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <prvInsertBlockIntoFreeList+0xac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d00d      	beq.n	80053ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	441a      	add	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e008      	b.n	80053fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <prvInsertBlockIntoFreeList+0xac>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e003      	b.n	80053fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d002      	beq.n	800540a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	20001dc0 	.word	0x20001dc0
 8005418:	20001dc8 	.word	0x20001dc8

0800541c <memset>:
 800541c:	4603      	mov	r3, r0
 800541e:	4402      	add	r2, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2600      	movs	r6, #0
 8005430:	4d0c      	ldr	r5, [pc, #48]	; (8005464 <__libc_init_array+0x38>)
 8005432:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	f000 f828 	bl	8005490 <_init>
 8005440:	2600      	movs	r6, #0
 8005442:	4d0a      	ldr	r5, [pc, #40]	; (800546c <__libc_init_array+0x40>)
 8005444:	4c0a      	ldr	r4, [pc, #40]	; (8005470 <__libc_init_array+0x44>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f855 3b04 	ldr.w	r3, [r5], #4
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f855 3b04 	ldr.w	r3, [r5], #4
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	080055fc 	.word	0x080055fc
 8005468:	080055fc 	.word	0x080055fc
 800546c:	080055fc 	.word	0x080055fc
 8005470:	08005600 	.word	0x08005600

08005474 <memcpy>:
 8005474:	440a      	add	r2, r1
 8005476:	4291      	cmp	r1, r2
 8005478:	f100 33ff 	add.w	r3, r0, #4294967295
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	4770      	bx	lr
 8005480:	b510      	push	{r4, lr}
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	4291      	cmp	r1, r2
 8005488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548c:	d1f9      	bne.n	8005482 <memcpy+0xe>
 800548e:	bd10      	pop	{r4, pc}

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
