
Proyecto8A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004648  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004918  08004918  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004920  08004920  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dbc  20000010  08004938  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dcc  08004938  00021dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001177c  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aba  00000000  00000000  000317f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdc  00000000  00000000  00035360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d3  00000000  00000000  0003603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122c8  00000000  00000000  0003860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c12e9  00000000  00000000  0004a8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045a4  00000000  00000000  0010bbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00110164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08004820 	.word	0x08004820

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08004820 	.word	0x08004820

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14c      	bne.n	800030a <__udivmoddi4+0xaa>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d967      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b153      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	fa01 fe03 	lsl.w	lr, r1, r3
 8000288:	fa20 f202 	lsr.w	r2, r0, r2
 800028c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbbe f1f7 	udiv	r1, lr, r7
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a2:	fb01 f005 	mul.w	r0, r1, r5
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 3eff 	add.w	lr, r1, #4294967295
 80002b8:	f080 8119 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8116 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002cc:	fb07 2210 	mls	r2, r7, r0, r2
 80002d0:	fb00 f505 	mul.w	r5, r0, r5
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8104 	bcs.w	80004f2 <__udivmoddi4+0x292>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8101 	bls.w	80004f2 <__udivmoddi4+0x292>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xc0>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ea 	beq.w	80004e8 <__udivmoddi4+0x288>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d148      	bne.n	80003ba <__udivmoddi4+0x15a>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xd2>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4696      	mov	lr, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000340:	e9c6 4e00 	strd	r4, lr, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa6>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xea>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 808e 	bne.w	8000470 <__udivmoddi4+0x210>
 8000354:	1a88      	subs	r0, r1, r2
 8000356:	2101      	movs	r1, #1
 8000358:	0c17      	lsrs	r7, r2, #16
 800035a:	fa1f fe82 	uxth.w	lr, r2
 800035e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000362:	fb07 0015 	mls	r0, r7, r5, r0
 8000366:	0c22      	lsrs	r2, r4, #16
 8000368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036c:	fb0e f005 	mul.w	r0, lr, r5
 8000370:	4290      	cmp	r0, r2
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x126>
 8000374:	eb1c 0202 	adds.w	r2, ip, r2
 8000378:	f105 38ff 	add.w	r8, r5, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x124>
 800037e:	4290      	cmp	r0, r2
 8000380:	f200 80cc 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000384:	4645      	mov	r5, r8
 8000386:	1a12      	subs	r2, r2, r0
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039a:	45a6      	cmp	lr, r4
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x150>
 800039e:	eb1c 0404 	adds.w	r4, ip, r4
 80003a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x14e>
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	f200 80b4 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003ae:	4610      	mov	r0, r2
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e7a0      	b.n	80002fc <__udivmoddi4+0x9c>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	fbba f8f9 	udiv	r8, sl, r9
 80003d4:	408d      	lsls	r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	fb09 aa18 	mls	sl, r9, r8, sl
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	432b      	orrs	r3, r5
 80003e4:	fa00 f501 	lsl.w	r5, r0, r1
 80003e8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ec:	0c1c      	lsrs	r4, r3, #16
 80003ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f2:	42a0      	cmp	r0, r4
 80003f4:	fa02 f201 	lsl.w	r2, r2, r1
 80003f8:	d90b      	bls.n	8000412 <__udivmoddi4+0x1b2>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	f080 8086 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000406:	42a0      	cmp	r0, r4
 8000408:	f240 8083 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040c:	f1a8 0802 	sub.w	r8, r8, #2
 8000410:	4464      	add	r4, ip
 8000412:	1a24      	subs	r4, r4, r0
 8000414:	b298      	uxth	r0, r3
 8000416:	fbb4 f3f9 	udiv	r3, r4, r9
 800041a:	fb09 4413 	mls	r4, r9, r3, r4
 800041e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000422:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000426:	45a6      	cmp	lr, r4
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x1dc>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000432:	d26a      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000434:	45a6      	cmp	lr, r4
 8000436:	d968      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000438:	3b02      	subs	r3, #2
 800043a:	4464      	add	r4, ip
 800043c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000440:	fba0 9302 	umull	r9, r3, r0, r2
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	429c      	cmp	r4, r3
 800044a:	46c8      	mov	r8, r9
 800044c:	469e      	mov	lr, r3
 800044e:	d354      	bcc.n	80004fa <__udivmoddi4+0x29a>
 8000450:	d051      	beq.n	80004f6 <__udivmoddi4+0x296>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d067      	beq.n	8000526 <__udivmoddi4+0x2c6>
 8000456:	ebb5 0308 	subs.w	r3, r5, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	40cb      	lsrs	r3, r1
 8000460:	fa04 f707 	lsl.w	r7, r4, r7
 8000464:	431f      	orrs	r7, r3
 8000466:	40cc      	lsrs	r4, r1
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	2100      	movs	r1, #0
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0xa6>
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	f1c3 0020 	rsb	r0, r3, #32
 8000478:	40c1      	lsrs	r1, r0
 800047a:	409d      	lsls	r5, r3
 800047c:	fa24 f000 	lsr.w	r0, r4, r0
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	4328      	orrs	r0, r5
 8000486:	fbb1 f5f7 	udiv	r5, r1, r7
 800048a:	fb07 1115 	mls	r1, r7, r5, r1
 800048e:	fa1f fe8c 	uxth.w	lr, ip
 8000492:	0c02      	lsrs	r2, r0, #16
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	fa04 f403 	lsl.w	r4, r4, r3
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80004bc:	fb07 2211 	mls	r2, r7, r1, r2
 80004c0:	b280      	uxth	r0, r0
 80004c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004c6:	fb01 f20e 	mul.w	r2, r1, lr
 80004ca:	4282      	cmp	r2, r0
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x280>
 80004ce:	eb1c 0000 	adds.w	r0, ip, r0
 80004d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004d6:	d216      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d8:	4282      	cmp	r2, r0
 80004da:	d914      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004dc:	3902      	subs	r1, #2
 80004de:	4460      	add	r0, ip
 80004e0:	1a80      	subs	r0, r0, r2
 80004e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004e6:	e73a      	b.n	800035e <__udivmoddi4+0xfe>
 80004e8:	4631      	mov	r1, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e70b      	b.n	8000306 <__udivmoddi4+0xa6>
 80004ee:	4671      	mov	r1, lr
 80004f0:	e6e9      	b.n	80002c6 <__udivmoddi4+0x66>
 80004f2:	4610      	mov	r0, r2
 80004f4:	e6fe      	b.n	80002f4 <__udivmoddi4+0x94>
 80004f6:	454d      	cmp	r5, r9
 80004f8:	d2ab      	bcs.n	8000452 <__udivmoddi4+0x1f2>
 80004fa:	ebb9 0802 	subs.w	r8, r9, r2
 80004fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000502:	3801      	subs	r0, #1
 8000504:	e7a5      	b.n	8000452 <__udivmoddi4+0x1f2>
 8000506:	4641      	mov	r1, r8
 8000508:	e7ea      	b.n	80004e0 <__udivmoddi4+0x280>
 800050a:	4603      	mov	r3, r0
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1dc>
 800050e:	4645      	mov	r5, r8
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	46d0      	mov	r8, sl
 8000514:	e77d      	b.n	8000412 <__udivmoddi4+0x1b2>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e749      	b.n	80003b0 <__udivmoddi4+0x150>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e731      	b.n	8000386 <__udivmoddi4+0x126>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xdc>
 8000526:	4631      	mov	r1, r6
 8000528:	e6ed      	b.n	8000306 <__udivmoddi4+0xa6>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000534:	f000 fa06 	bl	8000944 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000538:	f000 f832 	bl	80005a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053c:	f000 f872 	bl	8000624 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000540:	f001 fc6a 	bl	8001e18 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x4c>)
 8000546:	2100      	movs	r1, #0
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0x50>)
 800054a:	f001 fccb 	bl	8001ee4 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <main+0x54>)
 8000552:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of ledVerde */
	ledVerdeHandle = osThreadNew(Start_led_verde, NULL, &ledVerde_attributes);
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <main+0x58>)
 8000556:	2100      	movs	r1, #0
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <main+0x5c>)
 800055a:	f001 fcc3 	bl	8001ee4 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <main+0x60>)
 8000562:	6013      	str	r3, [r2, #0]

	/* creation of ledAmarillo */
	ledAmarilloHandle = osThreadNew(Start_led_amarillo, NULL,
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <main+0x64>)
 8000566:	2100      	movs	r1, #0
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <main+0x68>)
 800056a:	f001 fcbb 	bl	8001ee4 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <main+0x6c>)
 8000572:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000574:	f001 fc82 	bl	8001e7c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000578:	e7fe      	b.n	8000578 <main+0x48>
 800057a:	bf00      	nop
 800057c:	08004874 	.word	0x08004874
 8000580:	080006d5 	.word	0x080006d5
 8000584:	2000002c 	.word	0x2000002c
 8000588:	08004898 	.word	0x08004898
 800058c:	080006e5 	.word	0x080006e5
 8000590:	20000030 	.word	0x20000030
 8000594:	080048bc 	.word	0x080048bc
 8000598:	08000719 	.word	0x08000719
 800059c:	20000034 	.word	0x20000034

080005a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2238      	movs	r2, #56	; 0x38
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f8fc 	bl	80047ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fc60 	bl	8000ea0 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x4a>
		Error_Handler();
 80005e6:	f000 f8c1 	bl	800076c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff62 	bl	80014cc <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x72>
		Error_Handler();
 800060e:	f000 f8ad 	bl	800076c <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <SystemClock_Config+0x80>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	42420070 	.word	0x42420070

08000624 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xa4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xa4>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xa4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_GPIO_Init+0xa4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_GPIO_Init+0xa4>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_GPIO_Init+0xa4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VERDE_Pin | AMARILLO_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	21c0      	movs	r1, #192	; 0xc0
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xa8>)
 800066e:	f000 fbff 	bl	8000e70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TAMPER_Pin */
	GPIO_InitStruct.Pin = TAMPER_Pin;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TAMPER_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0xa8>)
 8000688:	f000 fa6e 	bl	8000b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : WKUP_Pin */
	GPIO_InitStruct.Pin = WKUP_Pin;
 800068c:	2301      	movs	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0xac>)
 80006a0:	f000 fa62 	bl	8000b68 <HAL_GPIO_Init>

	/*Configure GPIO pins : VERDE_Pin AMARILLO_Pin */
	GPIO_InitStruct.Pin = VERDE_Pin | AMARILLO_Pin;
 80006a4:	23c0      	movs	r3, #192	; 0xc0
 80006a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0xa8>)
 80006bc:	f000 fa54 	bl	8000b68 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40010800 	.word	0x40010800

080006d4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 fcab 	bl	8002038 <osDelay>
 80006e2:	e7fb      	b.n	80006dc <StartDefaultTask+0x8>

080006e4 <Start_led_verde>:
 * @brief Function implementing the ledVerde thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_verde */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <Start_led_verde+0x30>)
 80006f2:	f000 fbbd 	bl	8000e70 <HAL_GPIO_WritePin>
		osDelay(300);
 80006f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006fa:	f001 fc9d 	bl	8002038 <osDelay>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <Start_led_verde+0x30>)
 8000704:	f000 fbb4 	bl	8000e70 <HAL_GPIO_WritePin>
		osDelay(300);
 8000708:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800070c:	f001 fc94 	bl	8002038 <osDelay>
		HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, GPIO_PIN_SET);
 8000710:	e7ec      	b.n	80006ec <Start_led_verde+0x8>
 8000712:	bf00      	nop
 8000714:	40011000 	.word	0x40011000

08000718 <Start_led_amarillo>:
 * @brief Function implementing the ledAmarillo thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_led_amarillo */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin,GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <Start_led_amarillo+0x2c>)
 8000726:	f000 fba3 	bl	8000e70 <HAL_GPIO_WritePin>
		osDelay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f001 fc84 	bl	8002038 <osDelay>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin,GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <Start_led_amarillo+0x2c>)
 8000736:	f000 fb9b 	bl	8000e70 <HAL_GPIO_WritePin>
		osDelay(200);
 800073a:	20c8      	movs	r0, #200	; 0xc8
 800073c:	f001 fc7c 	bl	8002038 <osDelay>
		HAL_GPIO_WritePin(AMARILLO_GPIO_Port, AMARILLO_Pin,GPIO_PIN_SET);
 8000740:	e7ee      	b.n	8000720 <Start_led_amarillo+0x8>
 8000742:	bf00      	nop
 8000744:	40011000 	.word	0x40011000

08000748 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800075a:	f000 f909 	bl	8000970 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40012c00 	.word	0x40012c00

0800076c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_MspInit+0x4c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_MspInit+0x4c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_MspInit+0x4c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_MspInit+0x4c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 f9ac 	bl	8000b12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <HAL_InitTick+0xd0>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <HAL_InitTick+0xd0>)
 80007e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_InitTick+0xd0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f6:	f107 020c 	add.w	r2, r7, #12
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f85f 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000806:	f001 f849 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 800080a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <HAL_InitTick+0xd4>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	0c9b      	lsrs	r3, r3, #18
 8000816:	3b01      	subs	r3, #1
 8000818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <HAL_InitTick+0xd8>)
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <HAL_InitTick+0xdc>)
 800081e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <HAL_InitTick+0xd8>)
 8000822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000826:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <HAL_InitTick+0xd8>)
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_InitTick+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_InitTick+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_InitTick+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000840:	4817      	ldr	r0, [pc, #92]	; (80008a0 <HAL_InitTick+0xd8>)
 8000842:	f001 f88d 	bl	8001960 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800084c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000850:	2b00      	cmp	r3, #0
 8000852:	d11b      	bne.n	800088c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <HAL_InitTick+0xd8>)
 8000856:	f001 f8db 	bl	8001a10 <HAL_TIM_Base_Start_IT>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000864:	2b00      	cmp	r3, #0
 8000866:	d111      	bne.n	800088c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000868:	2019      	movs	r0, #25
 800086a:	f000 f96e 	bl	8000b4a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d808      	bhi.n	8000886 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2019      	movs	r0, #25
 800087a:	f000 f94a 	bl	8000b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_InitTick+0xe0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	e002      	b.n	800088c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800088c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000890:	4618      	mov	r0, r3
 8000892:	3730      	adds	r7, #48	; 0x30
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	20000038 	.word	0x20000038
 80008a4:	40012c00 	.word	0x40012c00
 80008a8:	20000004 	.word	0x20000004

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
	...

080008d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM1_UP_IRQHandler+0x10>)
 80008de:	f001 f8f1 	bl	8001ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000038 	.word	0x20000038

080008ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff fff8 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fe:	490c      	ldr	r1, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000914:	4c09      	ldr	r4, [pc, #36]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000922:	f003 ff4b 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fe03 	bl	8000530 <main>
  bx lr
 800092a:	4770      	bx	lr
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000934:	08004928 	.word	0x08004928
  ldr r2, =_sbss
 8000938:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800093c:	20001dcc 	.word	0x20001dcc

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x28>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f8d1 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff ff34 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff ff0a 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x20>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000008 	.word	0x20000008
 8000990:	20000080 	.word	0x20000080

08000994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000080 	.word	0x20000080

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <__NVIC_EnableIRQ+0x34>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff4f 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff64 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ffb2 	bl	8000a98 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff81 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff57 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e169      	b.n	8000e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8158 	bne.w	8000e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a9a      	ldr	r2, [pc, #616]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d05e      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d875      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000baa:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d058      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bb0:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d86f      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d052      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bbc:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d869      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d04c      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d863      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bce:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d046      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a90      	ldr	r2, [pc, #576]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d85d      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d82a      	bhi.n	8000c34 <HAL_GPIO_Init+0xcc>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d859      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <HAL_GPIO_Init+0x80>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c3d 	.word	0x08000c3d
 8000bf0:	08000c4f 	.word	0x08000c4f
 8000bf4:	08000c91 	.word	0x08000c91
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000c97 	.word	0x08000c97
 8000c00:	08000c97 	.word	0x08000c97
 8000c04:	08000c97 	.word	0x08000c97
 8000c08:	08000c97 	.word	0x08000c97
 8000c0c:	08000c97 	.word	0x08000c97
 8000c10:	08000c97 	.word	0x08000c97
 8000c14:	08000c97 	.word	0x08000c97
 8000c18:	08000c97 	.word	0x08000c97
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c97 	.word	0x08000c97
 8000c24:	08000c97 	.word	0x08000c97
 8000c28:	08000c97 	.word	0x08000c97
 8000c2c:	08000c45 	.word	0x08000c45
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	4a79      	ldr	r2, [pc, #484]	; (8000e1c <HAL_GPIO_Init+0x2b4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3a:	e02c      	b.n	8000c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e029      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e024      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	3308      	adds	r3, #8
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e01f      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e01a      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e013      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d105      	bne.n	8000c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	611a      	str	r2, [r3, #16]
          break;
 8000c82:	e009      	b.n	8000c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	615a      	str	r2, [r3, #20]
          break;
 8000c8e:	e003      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          break;
 8000c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d801      	bhi.n	8000ca2 <HAL_GPIO_Init+0x13a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	e001      	b.n	8000ca6 <HAL_GPIO_Init+0x13e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2bff      	cmp	r3, #255	; 0xff
 8000cac:	d802      	bhi.n	8000cb4 <HAL_GPIO_Init+0x14c>
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x152>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	6a39      	ldr	r1, [r7, #32]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d013      	beq.n	8000d54 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d66:	492f      	ldr	r1, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	492c      	ldr	r1, [pc, #176]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4928      	ldr	r1, [pc, #160]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	4922      	ldr	r1, [pc, #136]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	491e      	ldr	r1, [pc, #120]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4918      	ldr	r1, [pc, #96]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d021      	beq.n	8000e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x2e2>
 8000e06:	bf00      	nop
 8000e08:	10320000 	.word	0x10320000
 8000e0c:	10310000 	.word	0x10310000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10120000 	.word	0x10120000
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4909      	ldr	r1, [pc, #36]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f ae8e 	bne.w	8000b7c <HAL_GPIO_Init+0x14>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	372c      	adds	r7, #44	; 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	611a      	str	r2, [r3, #16]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e304      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8087 	beq.w	8000fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec0:	4b92      	ldr	r3, [pc, #584]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d00c      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ecc:	4b8f      	ldr	r3, [pc, #572]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d112      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
 8000ed8:	4b8c      	ldr	r3, [pc, #560]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee4:	d10b      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee6:	4b89      	ldr	r3, [pc, #548]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d06c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x12c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d168      	bne.n	8000fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e2de      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x76>
 8000f08:	4b80      	ldr	r3, [pc, #512]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a7f      	ldr	r2, [pc, #508]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e02e      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x98>
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7a      	ldr	r2, [pc, #488]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b78      	ldr	r3, [pc, #480]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a77      	ldr	r2, [pc, #476]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0xbc>
 8000f42:	4b72      	ldr	r3, [pc, #456]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a71      	ldr	r2, [pc, #452]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6e      	ldr	r2, [pc, #440]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f5c:	4b6b      	ldr	r3, [pc, #428]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b68      	ldr	r3, [pc, #416]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a67      	ldr	r2, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fd0a 	bl	8000994 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fd06 	bl	8000994 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e292      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b5d      	ldr	r3, [pc, #372]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xe4>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcf6 	bl	8000994 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcf2 	bl	8000994 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e27e      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x10c>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e252      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4939      	ldr	r1, [pc, #228]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fcab 	bl	8000994 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fca7 	bl	8000994 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e233      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4927      	ldr	r1, [pc, #156]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc8a 	bl	8000994 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc86 	bl	8000994 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e212      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03a      	beq.n	8001124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d019      	beq.n	80010ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc6a 	bl	8000994 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc66 	bl	8000994 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1f2      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 fc1e 	bl	8001924 <RCC_Delay>
 80010e8:	e01c      	b.n	8001124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fc50 	bl	8000994 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc4c 	bl	8000994 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d908      	bls.n	8001118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1d8      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	42420000 	.word	0x42420000
 8001114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	4b9b      	ldr	r3, [pc, #620]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e9      	bne.n	80010f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a6 	beq.w	800127e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001136:	4b94      	ldr	r3, [pc, #592]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10d      	bne.n	800115e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b91      	ldr	r3, [pc, #580]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d118      	bne.n	800119c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001176:	f7ff fc0d 	bl	8000994 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117e:	f7ff fc09 	bl	8000994 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b64      	cmp	r3, #100	; 0x64
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e195      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x4ec>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x312>
 80011a4:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a77      	ldr	r2, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6213      	str	r3, [r2, #32]
 80011b0:	e02d      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x334>
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a72      	ldr	r2, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4b70      	ldr	r3, [pc, #448]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	e01c      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x356>
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	4b67      	ldr	r3, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a63      	ldr	r2, [pc, #396]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b61      	ldr	r3, [pc, #388]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a60      	ldr	r2, [pc, #384]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fbbd 	bl	8000994 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fbb9 	bl	8000994 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e143      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001234:	4b54      	ldr	r3, [pc, #336]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ee      	beq.n	800121e <HAL_RCC_OscConfig+0x37e>
 8001240:	e014      	b.n	800126c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fba7 	bl	8000994 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fba3 	bl	8000994 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e12d      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ee      	bne.n	800124a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b45      	ldr	r3, [pc, #276]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a44      	ldr	r2, [pc, #272]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 808c 	beq.w	80013a0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d10e      	bne.n	80012b4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80012aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e103      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d14e      	bne.n	800135a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0ef      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_RCC_OscConfig+0x4f0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb57 	bl	8000994 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80012ea:	f7ff fb53 	bl	8000994 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	; 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0df      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	491c      	ldr	r1, [pc, #112]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	4313      	orrs	r3, r2
 8001318:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4918      	ldr	r1, [pc, #96]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	4313      	orrs	r3, r2
 800132a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_RCC_OscConfig+0x4f0>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb2f 	bl	8000994 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800133a:	f7ff fb2b 	bl	8000994 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e0b7      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x49a>
 8001358:	e022      	b.n	80013a0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_RCC_OscConfig+0x4f0>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb12 	bl	8000994 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001372:	e00f      	b.n	8001394 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001374:	f7ff fb0e 	bl	8000994 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d908      	bls.n	8001394 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e09a      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e9      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8088 	beq.w	80014ba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013aa:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d068      	beq.n	8001488 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d14d      	bne.n	800145a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <HAL_RCC_OscConfig+0x628>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fae6 	bl	8000994 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fae2 	bl	8000994 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e06e      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f2:	d10f      	bne.n	8001414 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 80013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4931      	ldr	r1, [pc, #196]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	f023 020f 	bic.w	r2, r3, #15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	492d      	ldr	r1, [pc, #180]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001410:	4313      	orrs	r3, r2
 8001412:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	430b      	orrs	r3, r1
 8001426:	4927      	ldr	r1, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_RCC_OscConfig+0x628>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff faaf 	bl	8000994 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff faab 	bl	8000994 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e037      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x59a>
 8001458:	e02f      	b.n	80014ba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x628>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa98 	bl	8000994 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fa94 	bl	8000994 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e020      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c8>
 8001486:	e018      	b.n	80014ba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e013      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x624>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	42420060 	.word	0x42420060

080014cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0d0      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d910      	bls.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4965      	ldr	r1, [pc, #404]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a58      	ldr	r2, [pc, #352]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800154a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d040      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d115      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e073      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4936      	ldr	r1, [pc, #216]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff f9ea 	bl	8000994 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff f9e6 	bl	8000994 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e053      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d210      	bcs.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4922      	ldr	r1, [pc, #136]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1cc>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_ClockConfig+0x1d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f8a4 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	080048e0 	.word	0x080048e0
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b092      	sub	sp, #72	; 0x48
 80016a6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d002      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x3a>
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d003      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x40>
 80016d8:	e0c3      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80016de:	e0c3      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	f003 020f 	and.w	r2, r3, #15
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80ac 	beq.w	8001852 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80016fa:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f003 020f 	and.w	r2, r3, #15
 8001702:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 808c 	beq.w	800182e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	3301      	adds	r3, #1
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3302      	adds	r3, #2
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	2200      	movs	r2, #0
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	627a      	str	r2, [r7, #36]	; 0x24
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	2200      	movs	r2, #0
 800173e:	4618      	mov	r0, r3
 8001740:	4611      	mov	r1, r2
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fb00 f203 	mul.w	r2, r0, r3
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	fb03 f301 	mul.w	r3, r3, r1
 800174e:	4413      	add	r3, r2
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	fba2 4500 	umull	r4, r5, r2, r0
 8001756:	442b      	add	r3, r5
 8001758:	461d      	mov	r5, r3
 800175a:	4622      	mov	r2, r4
 800175c:	462b      	mov	r3, r5
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	0159      	lsls	r1, r3, #5
 8001768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800176c:	0150      	lsls	r0, r2, #5
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	ebb2 0a04 	subs.w	sl, r2, r4
 8001776:	eb63 0b05 	sbc.w	fp, r3, r5
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001786:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800178a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800178e:	ebb2 080a 	subs.w	r8, r2, sl
 8001792:	eb63 090b 	sbc.w	r9, r3, fp
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017aa:	4690      	mov	r8, r2
 80017ac:	4699      	mov	r9, r3
 80017ae:	eb18 0304 	adds.w	r3, r8, r4
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	eb49 0305 	adc.w	r3, r9, r5
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c6:	4629      	mov	r1, r5
 80017c8:	024b      	lsls	r3, r1, #9
 80017ca:	4620      	mov	r0, r4
 80017cc:	4629      	mov	r1, r5
 80017ce:	4604      	mov	r4, r0
 80017d0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80017d4:	4601      	mov	r1, r0
 80017d6:	024a      	lsls	r2, r1, #9
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017de:	2200      	movs	r2, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	617a      	str	r2, [r7, #20]
 80017e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e6:	2200      	movs	r2, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	60fa      	str	r2, [r7, #12]
 80017ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017f0:	4622      	mov	r2, r4
 80017f2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017f6:	4645      	mov	r5, r8
 80017f8:	fb05 f202 	mul.w	r2, r5, r2
 80017fc:	46cc      	mov	ip, r9
 80017fe:	4625      	mov	r5, r4
 8001800:	461c      	mov	r4, r3
 8001802:	4623      	mov	r3, r4
 8001804:	fb03 f30c 	mul.w	r3, r3, ip
 8001808:	4413      	add	r3, r2
 800180a:	4622      	mov	r2, r4
 800180c:	4644      	mov	r4, r8
 800180e:	fba2 2404 	umull	r2, r4, r2, r4
 8001812:	61fc      	str	r4, [r7, #28]
 8001814:	61ba      	str	r2, [r7, #24]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001820:	f7fe fd06 	bl	8000230 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
 800182c:	e007      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001832:	fb03 f202 	mul.w	r2, r3, r2
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001840:	7b5b      	ldrb	r3, [r3, #13]
 8001842:	461a      	mov	r2, r3
 8001844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001846:	4293      	cmp	r3, r2
 8001848:	d108      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 800184a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
 8001850:	e004      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001860:	e002      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800186a:	4618      	mov	r0, r3
 800186c:	3748      	adds	r7, #72	; 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	007a1200 	.word	0x007a1200
 800187c:	080048f8 	.word	0x080048f8
 8001880:	08004908 	.word	0x08004908
 8001884:	003d0900 	.word	0x003d0900

08001888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_RCC_GetHCLKFreq+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff fff2 	bl	8001888 <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	080048f0 	.word	0x080048f0

080018c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40022000 	.word	0x40022000

08001924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <RCC_Delay+0x34>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <RCC_Delay+0x38>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001940:	bf00      	nop
  }
  while (Delay --);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	60fa      	str	r2, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <RCC_Delay+0x1c>
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e041      	b.n	80019f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f839 	bl	80019fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 f9bc 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e03f      	b.n	8001aa8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xa4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_TIM_Base_Start_IT+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a52:	d00e      	beq.n	8001a72 <HAL_TIM_Base_Start_IT+0x62>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_TIM_Base_Start_IT+0xa8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d009      	beq.n	8001a72 <HAL_TIM_Base_Start_IT+0x62>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_TIM_Base_Start_IT+0xac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d004      	beq.n	8001a72 <HAL_TIM_Base_Start_IT+0x62>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d111      	bne.n	8001a96 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d010      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	e007      	b.n	8001aa6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40012c00 	.word	0x40012c00
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40000800 	.word	0x40000800
 8001ac0:	40000c00 	.word	0x40000c00

08001ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0202 	mvn.w	r2, #2
 8001af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8ed 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8e0 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8ef 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0204 	mvn.w	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8c3 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8b6 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8c5 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0208 	mvn.w	r2, #8
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f899 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f88c 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f89b 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0210 	mvn.w	r2, #16
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f86f 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f862 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f871 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0201 	mvn.w	r2, #1
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fd80 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d107      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8c9 	bl	8001e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f835 	bl	8001d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0220 	mvn.w	r2, #32
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f894 	bl	8001df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <TIM_Base_SetConfig+0xc8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00f      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3a:	d00b      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <TIM_Base_SetConfig+0xcc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a29      	ldr	r2, [pc, #164]	; (8001dec <TIM_Base_SetConfig+0xd0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <TIM_Base_SetConfig+0xd4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <TIM_Base_SetConfig+0xc8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0x72>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0x72>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <TIM_Base_SetConfig+0xcc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0x72>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <TIM_Base_SetConfig+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0x72>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <TIM_Base_SetConfig+0xd4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <TIM_Base_SetConfig+0xc8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800
 8001df0:	40000c00 	.word	0x40000c00

08001df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e1e:	f3ef 8305 	mrs	r3, IPSR
 8001e22:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e2e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <osKernelInitialize+0x32>
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <osKernelInitialize+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d109      	bne.n	8001e52 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e42:	603b      	str	r3, [r7, #0]
  return(result);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e4a:	f06f 0305 	mvn.w	r3, #5
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e00c      	b.n	8001e6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <osKernelInitialize+0x60>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <osKernelInitialize+0x60>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e002      	b.n	8001e6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000084 	.word	0x20000084

08001e7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e82:	f3ef 8305 	mrs	r3, IPSR
 8001e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e92:	607b      	str	r3, [r7, #4]
  return(result);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <osKernelStart+0x32>
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <osKernelStart+0x64>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d109      	bne.n	8001eb6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001eae:	f06f 0305 	mvn.w	r3, #5
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e00e      	b.n	8001ed4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <osKernelStart+0x64>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <osKernelStart+0x64>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001ec4:	f001 f878 	bl	8002fb8 <vTaskStartScheduler>
      stat = osOK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e002      	b.n	8001ed4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000084 	.word	0x20000084

08001ee4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b092      	sub	sp, #72	; 0x48
 8001ee8:	af04      	add	r7, sp, #16
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ef4:	f3ef 8305 	mrs	r3, IPSR
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 8094 	bne.w	800202a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f02:	f3ef 8310 	mrs	r3, PRIMASK
 8001f06:	623b      	str	r3, [r7, #32]
  return(result);
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 808d 	bne.w	800202a <osThreadNew+0x146>
 8001f10:	4b48      	ldr	r3, [pc, #288]	; (8002034 <osThreadNew+0x150>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d106      	bne.n	8001f26 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f18:	f3ef 8311 	mrs	r3, BASEPRI
 8001f1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 8082 	bne.w	800202a <osThreadNew+0x146>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d07e      	beq.n	800202a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001f30:	2318      	movs	r3, #24
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001f34:	2300      	movs	r3, #0
 8001f36:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001f38:	f107 031b 	add.w	r3, r7, #27
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d045      	beq.n	8001fd6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <osThreadNew+0x74>
        name = attr->name;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <osThreadNew+0x9a>
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	2b38      	cmp	r3, #56	; 0x38
 8001f70:	d805      	bhi.n	8001f7e <osThreadNew+0x9a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <osThreadNew+0x9e>
        return (NULL);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e054      	b.n	800202c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <osThreadNew+0xd4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b5b      	cmp	r3, #91	; 0x5b
 8001fa0:	d90a      	bls.n	8001fb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <osThreadNew+0xd4>
        mem = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb6:	e010      	b.n	8001fda <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <osThreadNew+0xf6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d108      	bne.n	8001fda <osThreadNew+0xf6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <osThreadNew+0xf6>
          mem = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd4:	e001      	b.n	8001fda <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d110      	bne.n	8002002 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe8:	9202      	str	r2, [sp, #8]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fe12 	bl	8002c20 <xTaskCreateStatic>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e013      	b.n	800202a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d110      	bne.n	800202a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	b29a      	uxth	r2, r3
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fe5c 	bl	8002cd8 <xTaskCreate>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <osThreadNew+0x146>
          hTask = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800202a:	697b      	ldr	r3, [r7, #20]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3738      	adds	r7, #56	; 0x38
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000084 	.word	0x20000084

08002038 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002040:	f3ef 8305 	mrs	r3, IPSR
 8002044:	613b      	str	r3, [r7, #16]
  return(result);
 8002046:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10f      	bne.n	800206c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204c:	f3ef 8310 	mrs	r3, PRIMASK
 8002050:	60fb      	str	r3, [r7, #12]
  return(result);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <osDelay+0x34>
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <osDelay+0x58>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d109      	bne.n	8002074 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002060:	f3ef 8311 	mrs	r3, BASEPRI
 8002064:	60bb      	str	r3, [r7, #8]
  return(result);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <osDelay+0x3c>
    stat = osErrorISR;
 800206c:	f06f 0305 	mvn.w	r3, #5
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e007      	b.n	8002084 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <osDelay+0x4c>
      vTaskDelay(ticks);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 ff66 	bl	8002f50 <vTaskDelay>
    }
  }

  return (stat);
 8002084:	697b      	ldr	r3, [r7, #20]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000084 	.word	0x20000084

08002094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a06      	ldr	r2, [pc, #24]	; (80020bc <vApplicationGetIdleTaskMemory+0x28>)
 80020a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80020aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000088 	.word	0x20000088
 80020c0:	200000e4 	.word	0x200000e4

080020c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80020d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <vApplicationGetTimerTaskMemory+0x30>)
 80020da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	200002e4 	.word	0x200002e4
 80020f4:	20000340 	.word	0x20000340

080020f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0208 	add.w	r2, r3, #8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d103      	bne.n	80021b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e00c      	b.n	80021ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3308      	adds	r3, #8
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <vListInsert+0x2e>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d2f6      	bcs.n	80021bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6892      	ldr	r2, [r2, #8]
 800221a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d103      	bne.n	8002238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002282:	f001 ffb9 	bl	80041f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	441a      	add	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	3b01      	subs	r3, #1
 80022b4:	68f9      	ldr	r1, [r7, #12]
 80022b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	441a      	add	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d114      	bne.n	8002302 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01a      	beq.n	8002316 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3310      	adds	r3, #16
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 f8f1 	bl	80034cc <xTaskRemoveFromEventList>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <xQueueGenericReset+0xcc>)
 80022f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	e009      	b.n	8002316 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3310      	adds	r3, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fef6 	bl	80020f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fef1 	bl	80020f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002316:	f001 ff9f 	bl	8004258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000ed04 	.word	0xe000ed04

08002328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800234e:	bf00      	nop
 8002350:	e7fe      	b.n	8002350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <xQueueGenericCreateStatic+0x52>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <xQueueGenericCreateStatic+0x56>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericCreateStatic+0x58>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <xQueueGenericCreateStatic+0x7e>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <xQueueGenericCreateStatic+0x82>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <xQueueGenericCreateStatic+0x84>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	61fb      	str	r3, [r7, #28]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023c6:	2350      	movs	r3, #80	; 0x50
 80023c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d00a      	beq.n	80023e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	61bb      	str	r3, [r7, #24]
}
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f805 	bl	8002416 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800240e:	4618      	mov	r0, r3
 8002410:	3730      	adds	r7, #48	; 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e002      	b.n	8002438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002444:	2101      	movs	r1, #1
 8002446:	69b8      	ldr	r0, [r7, #24]
 8002448:	f7ff ff06 	bl	8002258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericSend+0x32>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <xQueueGenericSend+0x40>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xQueueGenericSend+0x44>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <xQueueGenericSend+0x46>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <xQueueGenericSend+0x60>
	__asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d103      	bne.n	80024ca <xQueueGenericSend+0x6e>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <xQueueGenericSend+0x72>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueGenericSend+0x74>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericSend+0x8e>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	623b      	str	r3, [r7, #32]
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ea:	f001 f9b1 	bl	8003850 <xTaskGetSchedulerState>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <xQueueGenericSend+0x9e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSend+0xa2>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSend+0xa4>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0xbe>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61fb      	str	r3, [r7, #28]
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800251a:	f001 fe6d 	bl	80041f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <xQueueGenericSend+0xd4>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d129      	bne.n	8002584 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002536:	f000 fa07 	bl	8002948 <prvCopyDataToQueue>
 800253a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f000 ffbf 	bl	80034cc <xTaskRemoveFromEventList>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <xQueueGenericSend+0x1f8>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	e00a      	b.n	800257c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <xQueueGenericSend+0x1f8>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800257c:	f001 fe6c 	bl	8004258 <vPortExitCritical>
				return pdPASS;
 8002580:	2301      	movs	r3, #1
 8002582:	e063      	b.n	800264c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800258a:	f001 fe65 	bl	8004258 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800258e:	2300      	movs	r3, #0
 8002590:	e05c      	b.n	800264c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fff9 	bl	8003594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025a6:	f001 fe57 	bl	8004258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025aa:	f000 fd6b 	bl	8003084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025ae:	f001 fe23 	bl	80041f8 <vPortEnterCritical>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d103      	bne.n	80025c8 <xQueueGenericSend+0x16c>
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d103      	bne.n	80025de <xQueueGenericSend+0x182>
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025de:	f001 fe3b 	bl	8004258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025e2:	1d3a      	adds	r2, r7, #4
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ffe8 	bl	80035c0 <xTaskCheckForTimeOut>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d124      	bne.n	8002640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025f8:	f000 fa9e 	bl	8002b38 <prvIsQueueFull>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d018      	beq.n	8002634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	3310      	adds	r3, #16
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f000 ff0e 	bl	800342c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002612:	f000 fa29 	bl	8002a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002616:	f000 fd43 	bl	80030a0 <xTaskResumeAll>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f af7c 	bne.w	800251a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <xQueueGenericSend+0x1f8>)
 8002624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	e772      	b.n	800251a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002636:	f000 fa17 	bl	8002a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800263a:	f000 fd31 	bl	80030a0 <xTaskResumeAll>
 800263e:	e76c      	b.n	800251a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002642:	f000 fa11 	bl	8002a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002646:	f000 fd2b 	bl	80030a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800264a:	2300      	movs	r3, #0
		}
	}
}
 800264c:	4618      	mov	r0, r3
 800264e:	3738      	adds	r7, #56	; 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <xQueueGenericSendFromISR+0x3c>
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <xQueueGenericSendFromISR+0x40>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <xQueueGenericSendFromISR+0x42>
 8002698:	2300      	movs	r3, #0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	623b      	str	r3, [r7, #32]
}
 80026b0:	bf00      	nop
 80026b2:	e7fe      	b.n	80026b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d103      	bne.n	80026c2 <xQueueGenericSendFromISR+0x6a>
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <xQueueGenericSendFromISR+0x6e>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <xQueueGenericSendFromISR+0x70>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	61fb      	str	r3, [r7, #28]
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026e2:	f001 fe4d 	bl	8004380 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026e6:	f3ef 8211 	mrs	r2, BASEPRI
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	61ba      	str	r2, [r7, #24]
 80026fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <xQueueGenericSendFromISR+0xbc>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d12c      	bne.n	800276e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002724:	f000 f910 	bl	8002948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002728:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d112      	bne.n	8002758 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fec4 	bl	80034cc <xTaskRemoveFromEventList>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00e      	beq.n	8002768 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e007      	b.n	8002768 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800275c:	3301      	adds	r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	b25a      	sxtb	r2, r3
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002768:	2301      	movs	r3, #1
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800276c:	e001      	b.n	8002772 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800277c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002780:	4618      	mov	r0, r3
 8002782:	3738      	adds	r7, #56	; 0x38
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xQueueReceive+0x30>
	__asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	623b      	str	r3, [r7, #32]
}
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <xQueueReceive+0x3e>
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueReceive+0x42>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueReceive+0x44>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueReceive+0x5e>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	61fb      	str	r3, [r7, #28]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e6:	f001 f833 	bl	8003850 <xTaskGetSchedulerState>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <xQueueReceive+0x6e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <xQueueReceive+0x72>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueReceive+0x74>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueReceive+0x8e>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61bb      	str	r3, [r7, #24]
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002816:	f001 fcef 	bl	80041f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01f      	beq.n	8002866 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282a:	f000 f8f7 	bl	8002a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	3310      	adds	r3, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fe42 	bl	80034cc <xTaskRemoveFromEventList>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <xQueueReceive+0x1bc>)
 8002850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800285e:	f001 fcfb 	bl	8004258 <vPortExitCritical>
				return pdPASS;
 8002862:	2301      	movs	r3, #1
 8002864:	e069      	b.n	800293a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800286c:	f001 fcf4 	bl	8004258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002870:	2300      	movs	r3, #0
 8002872:	e062      	b.n	800293a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe88 	bl	8003594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002888:	f001 fce6 	bl	8004258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800288c:	f000 fbfa 	bl	8003084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002890:	f001 fcb2 	bl	80041f8 <vPortEnterCritical>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800289a:	b25b      	sxtb	r3, r3
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d103      	bne.n	80028aa <xQueueReceive+0x122>
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <xQueueReceive+0x138>
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c0:	f001 fcca 	bl	8004258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028c4:	1d3a      	adds	r2, r7, #4
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe77 	bl	80035c0 <xTaskCheckForTimeOut>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d123      	bne.n	8002920 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028da:	f000 f917 	bl	8002b0c <prvIsQueueEmpty>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd9d 	bl	800342c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f8b8 	bl	8002a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028f8:	f000 fbd2 	bl	80030a0 <xTaskResumeAll>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d189      	bne.n	8002816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <xQueueReceive+0x1bc>)
 8002904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	e780      	b.n	8002816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002916:	f000 f8a7 	bl	8002a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800291a:	f000 fbc1 	bl	80030a0 <xTaskResumeAll>
 800291e:	e77a      	b.n	8002816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002922:	f000 f8a1 	bl	8002a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002926:	f000 fbbb 	bl	80030a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800292a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292c:	f000 f8ee 	bl	8002b0c <prvIsQueueEmpty>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	f43f af6f 	beq.w	8002816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800293a:	4618      	mov	r0, r3
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d14d      	bne.n	8002a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 ff8a 	bl	800388c <xTaskPriorityDisinherit>
 8002978:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e043      	b.n	8002a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d119      	bne.n	80029bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6898      	ldr	r0, [r3, #8]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	461a      	mov	r2, r3
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	f001 ff36 	bl	8004804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	441a      	add	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d32b      	bcc.n	8002a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	e026      	b.n	8002a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68d8      	ldr	r0, [r3, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	461a      	mov	r2, r3
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	f001 ff1c 	bl	8004804 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	425b      	negs	r3, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	425b      	negs	r3, r3
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d105      	bne.n	8002a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a12:	697b      	ldr	r3, [r7, #20]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d018      	beq.n	8002a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	441a      	add	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d303      	bcc.n	8002a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6838      	ldr	r0, [r7, #0]
 8002a5c:	f001 fed2 	bl	8004804 <memcpy>
	}
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a70:	f001 fbc2 	bl	80041f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a7c:	e011      	b.n	8002aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d012      	beq.n	8002aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3324      	adds	r3, #36	; 0x24
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fd1e 	bl	80034cc <xTaskRemoveFromEventList>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a96:	f000 fdf5 	bl	8003684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	dce9      	bgt.n	8002a7e <prvUnlockQueue+0x16>
 8002aaa:	e000      	b.n	8002aae <prvUnlockQueue+0x46>
					break;
 8002aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ab6:	f001 fbcf 	bl	8004258 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002aba:	f001 fb9d 	bl	80041f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac6:	e011      	b.n	8002aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fcf9 	bl	80034cc <xTaskRemoveFromEventList>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ae0:	f000 fdd0 	bl	8003684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	dce9      	bgt.n	8002ac8 <prvUnlockQueue+0x60>
 8002af4:	e000      	b.n	8002af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	22ff      	movs	r2, #255	; 0xff
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b00:	f001 fbaa 	bl	8004258 <vPortExitCritical>
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b14:	f001 fb70 	bl	80041f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e001      	b.n	8002b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b2a:	f001 fb95 	bl	8004258 <vPortExitCritical>

	return xReturn;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b40:	f001 fb5a 	bl	80041f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d102      	bne.n	8002b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b50:	2301      	movs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e001      	b.n	8002b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b5a:	f001 fb7d 	bl	8004258 <vPortExitCritical>

	return xReturn;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e014      	b.n	8002ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <vQueueAddToRegistry+0x4c>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b84:	490b      	ldr	r1, [pc, #44]	; (8002bb4 <vQueueAddToRegistry+0x4c>)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <vQueueAddToRegistry+0x4c>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b9a:	e006      	b.n	8002baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b07      	cmp	r3, #7
 8002ba6:	d9e7      	bls.n	8002b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20000740 	.word	0x20000740

08002bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bc8:	f001 fb16 	bl	80041f8 <vPortEnterCritical>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <vQueueWaitForMessageRestricted+0x2a>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d103      	bne.n	8002bf8 <vQueueWaitForMessageRestricted+0x40>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf8:	f001 fb2e 	bl	8004258 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fc31 	bl	8003474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff28 	bl	8002a68 <prvUnlockQueue>
	}
 8002c18:	bf00      	nop
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	623b      	str	r3, [r7, #32]
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	61fb      	str	r3, [r7, #28]
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c66:	235c      	movs	r3, #92	; 0x5c
 8002c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c6e:	d00a      	beq.n	8002c86 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61bb      	str	r3, [r7, #24]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01e      	beq.n	8002cca <xTaskCreateStatic+0xaa>
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f850 	bl	8002d62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc4:	f000 f8d4 	bl	8002e70 <prvAddNewTaskToReadyList>
 8002cc8:	e001      	b.n	8002cce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cce:	697b      	ldr	r3, [r7, #20]
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af04      	add	r7, sp, #16
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fb85 	bl	80043fc <pvPortMalloc>
 8002cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cfa:	205c      	movs	r0, #92	; 0x5c
 8002cfc:	f001 fb7e 	bl	80043fc <pvPortMalloc>
 8002d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	e005      	b.n	8002d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f001 fc37 	bl	8004584 <vPortFree>
 8002d16:	e001      	b.n	8002d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d017      	beq.n	8002d52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9303      	str	r3, [sp, #12]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f80e 	bl	8002d62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d46:	69f8      	ldr	r0, [r7, #28]
 8002d48:	f000 f892 	bl	8002e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	e002      	b.n	8002d58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d58:	69bb      	ldr	r3, [r7, #24]
	}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b088      	sub	sp, #32
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	21a5      	movs	r1, #165	; 0xa5
 8002d7c:	f001 fd16 	bl	80047ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f023 0307 	bic.w	r3, r3, #7
 8002d98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <prvInitialiseNewTask+0x58>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	617b      	str	r3, [r7, #20]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e012      	b.n	8002de6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	7819      	ldrb	r1, [r3, #0]
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3334      	adds	r3, #52	; 0x34
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d9e9      	bls.n	8002dc0 <prvInitialiseNewTask+0x5e>
 8002dec:	e000      	b.n	8002df0 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002dee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b37      	cmp	r3, #55	; 0x37
 8002dfc:	d901      	bls.n	8002e02 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dfe:	2337      	movs	r3, #55	; 0x37
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	2200      	movs	r2, #0
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	3304      	adds	r3, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f98c 	bl	8002136 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	3318      	adds	r3, #24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f987 	bl	8002136 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2200      	movs	r2, #0
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	69b8      	ldr	r0, [r7, #24]
 8002e52:	f001 f8ef 	bl	8004034 <pxPortInitialiseStack>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e78:	f001 f9be 	bl	80041f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <prvAddNewTaskToReadyList+0xc4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d110      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e9c:	f000 fc16 	bl	80036cc <prvInitialiseTaskLists>
 8002ea0:	e00d      	b.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <prvAddNewTaskToReadyList+0xcc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eaa:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d802      	bhi.n	8002ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <prvAddNewTaskToReadyList+0xd0>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <prvAddNewTaskToReadyList+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d903      	bls.n	8002ee4 <prvAddNewTaskToReadyList+0x74>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <prvAddNewTaskToReadyList+0xd4>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <prvAddNewTaskToReadyList+0xd8>)
 8002ef2:	441a      	add	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7ff f927 	bl	800214e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f00:	f001 f9aa 	bl	8004258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <prvAddNewTaskToReadyList+0xcc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <prvAddNewTaskToReadyList+0xc8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d207      	bcs.n	8002f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <prvAddNewTaskToReadyList+0xdc>)
 8002f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000c54 	.word	0x20000c54
 8002f38:	20000780 	.word	0x20000780
 8002f3c:	20000c60 	.word	0x20000c60
 8002f40:	20000c70 	.word	0x20000c70
 8002f44:	20000c5c 	.word	0x20000c5c
 8002f48:	20000784 	.word	0x20000784
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d017      	beq.n	8002f92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <vTaskDelay+0x60>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <vTaskDelay+0x30>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	60bb      	str	r3, [r7, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	e7fe      	b.n	8002f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f80:	f000 f880 	bl	8003084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f84:	2100      	movs	r1, #0
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fcee 	bl	8003968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f8c:	f000 f888 	bl	80030a0 <xTaskResumeAll>
 8002f90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <vTaskDelay+0x64>)
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000c7c 	.word	0x20000c7c
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fc6:	463a      	mov	r2, r7
 8002fc8:	1d39      	adds	r1, r7, #4
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f860 	bl	8002094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	9202      	str	r2, [sp, #8]
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	4921      	ldr	r1, [pc, #132]	; (800306c <vTaskStartScheduler+0xb4>)
 8002fe8:	4821      	ldr	r0, [pc, #132]	; (8003070 <vTaskStartScheduler+0xb8>)
 8002fea:	f7ff fe19 	bl	8002c20 <xTaskCreateStatic>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <vTaskStartScheduler+0xbc>)
 8002ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <vTaskStartScheduler+0xbc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e001      	b.n	8003006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800300c:	f000 fd00 	bl	8003a10 <xTimerCreateTimerTask>
 8003010:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d116      	bne.n	8003046 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	613b      	str	r3, [r7, #16]
}
 800302a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <vTaskStartScheduler+0xc0>)
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <vTaskStartScheduler+0xc4>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <vTaskStartScheduler+0xc8>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003040:	f001 f87a 	bl	8004138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003044:	e00e      	b.n	8003064 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d10a      	bne.n	8003064 <vTaskStartScheduler+0xac>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	60fb      	str	r3, [r7, #12]
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <vTaskStartScheduler+0xaa>
}
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	0800485c 	.word	0x0800485c
 8003070:	0800369d 	.word	0x0800369d
 8003074:	20000c78 	.word	0x20000c78
 8003078:	20000c74 	.word	0x20000c74
 800307c:	20000c60 	.word	0x20000c60
 8003080:	20000c58 	.word	0x20000c58

08003084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <vTaskSuspendAll+0x18>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <vTaskSuspendAll+0x18>)
 8003090:	6013      	str	r3, [r2, #0]
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000c7c 	.word	0x20000c7c

080030a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030ae:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <xTaskResumeAll+0x118>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <xTaskResumeAll+0x2c>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	603b      	str	r3, [r7, #0]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030cc:	f001 f894 	bl	80041f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <xTaskResumeAll+0x118>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <xTaskResumeAll+0x118>)
 80030d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030da:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <xTaskResumeAll+0x118>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d162      	bne.n	80031a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <xTaskResumeAll+0x11c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d05e      	beq.n	80031a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ea:	e02f      	b.n	800314c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030ec:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <xTaskResumeAll+0x120>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3318      	adds	r3, #24
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff f883 	bl	8002204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f87e 	bl	8002204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <xTaskResumeAll+0x124>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d903      	bls.n	800311c <xTaskResumeAll+0x7c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <xTaskResumeAll+0x124>)
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <xTaskResumeAll+0x128>)
 800312a:	441a      	add	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff f80b 	bl	800214e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <xTaskResumeAll+0x12c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <xTaskResumeAll+0x130>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <xTaskResumeAll+0x120>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1cb      	bne.n	80030ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800315a:	f000 fb55 	bl	8003808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <xTaskResumeAll+0x134>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800316a:	f000 f845 	bl	80031f8 <xTaskIncrementTick>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <xTaskResumeAll+0x130>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3b01      	subs	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f1      	bne.n	800316a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <xTaskResumeAll+0x134>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <xTaskResumeAll+0x130>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <xTaskResumeAll+0x138>)
 800319a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031a8:	f001 f856 	bl	8004258 <vPortExitCritical>

	return xAlreadyYielded;
 80031ac:	68bb      	ldr	r3, [r7, #8]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000c7c 	.word	0x20000c7c
 80031bc:	20000c54 	.word	0x20000c54
 80031c0:	20000c14 	.word	0x20000c14
 80031c4:	20000c5c 	.word	0x20000c5c
 80031c8:	20000784 	.word	0x20000784
 80031cc:	20000780 	.word	0x20000780
 80031d0:	20000c68 	.word	0x20000c68
 80031d4:	20000c64 	.word	0x20000c64
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <xTaskGetTickCount+0x18>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031e8:	687b      	ldr	r3, [r7, #4]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	20000c58 	.word	0x20000c58

080031f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <xTaskIncrementTick+0x150>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 808e 	bne.w	8003328 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800320c:	4b4f      	ldr	r3, [pc, #316]	; (800334c <xTaskIncrementTick+0x154>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003214:	4a4d      	ldr	r2, [pc, #308]	; (800334c <xTaskIncrementTick+0x154>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d120      	bne.n	8003262 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003220:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <xTaskIncrementTick+0x158>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <xTaskIncrementTick+0x48>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	603b      	str	r3, [r7, #0]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xTaskIncrementTick+0x46>
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <xTaskIncrementTick+0x158>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <xTaskIncrementTick+0x15c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a41      	ldr	r2, [pc, #260]	; (8003350 <xTaskIncrementTick+0x158>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <xTaskIncrementTick+0x15c>)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <xTaskIncrementTick+0x160>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	4a3f      	ldr	r2, [pc, #252]	; (8003358 <xTaskIncrementTick+0x160>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	f000 fad3 	bl	8003808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <xTaskIncrementTick+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d34e      	bcc.n	800330a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326c:	4b38      	ldr	r3, [pc, #224]	; (8003350 <xTaskIncrementTick+0x158>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xTaskIncrementTick+0x82>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xTaskIncrementTick+0x84>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <xTaskIncrementTick+0x164>)
 8003282:	f04f 32ff 	mov.w	r2, #4294967295
 8003286:	601a      	str	r2, [r3, #0]
					break;
 8003288:	e03f      	b.n	800330a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800328a:	4b31      	ldr	r3, [pc, #196]	; (8003350 <xTaskIncrementTick+0x158>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d203      	bcs.n	80032aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032a2:	4a2e      	ldr	r2, [pc, #184]	; (800335c <xTaskIncrementTick+0x164>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6013      	str	r3, [r2, #0]
						break;
 80032a8:	e02f      	b.n	800330a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ffa8 	bl	8002204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3318      	adds	r3, #24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe ff9f 	bl	8002204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b25      	ldr	r3, [pc, #148]	; (8003360 <xTaskIncrementTick+0x168>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d903      	bls.n	80032da <xTaskIncrementTick+0xe2>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	4a22      	ldr	r2, [pc, #136]	; (8003360 <xTaskIncrementTick+0x168>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <xTaskIncrementTick+0x16c>)
 80032e8:	441a      	add	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fe ff2c 	bl	800214e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <xTaskIncrementTick+0x170>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d3b3      	bcc.n	800326c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003308:	e7b0      	b.n	800326c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <xTaskIncrementTick+0x170>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	4914      	ldr	r1, [pc, #80]	; (8003364 <xTaskIncrementTick+0x16c>)
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d907      	bls.n	8003332 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003322:	2301      	movs	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e004      	b.n	8003332 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <xTaskIncrementTick+0x174>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <xTaskIncrementTick+0x174>)
 8003330:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <xTaskIncrementTick+0x178>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800333a:	2301      	movs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000c7c 	.word	0x20000c7c
 800334c:	20000c58 	.word	0x20000c58
 8003350:	20000c0c 	.word	0x20000c0c
 8003354:	20000c10 	.word	0x20000c10
 8003358:	20000c6c 	.word	0x20000c6c
 800335c:	20000c74 	.word	0x20000c74
 8003360:	20000c5c 	.word	0x20000c5c
 8003364:	20000784 	.word	0x20000784
 8003368:	20000780 	.word	0x20000780
 800336c:	20000c64 	.word	0x20000c64
 8003370:	20000c68 	.word	0x20000c68

08003374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800337a:	4b27      	ldr	r3, [pc, #156]	; (8003418 <vTaskSwitchContext+0xa4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <vTaskSwitchContext+0xa8>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003388:	e041      	b.n	800340e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <vTaskSwitchContext+0xa8>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <vTaskSwitchContext+0xac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e010      	b.n	80033ba <vTaskSwitchContext+0x46>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	607b      	str	r3, [r7, #4]
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <vTaskSwitchContext+0x3e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	491a      	ldr	r1, [pc, #104]	; (8003424 <vTaskSwitchContext+0xb0>)
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0e4      	beq.n	8003398 <vTaskSwitchContext+0x24>
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <vTaskSwitchContext+0xb0>)
 80033da:	4413      	add	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3308      	adds	r3, #8
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d104      	bne.n	80033fe <vTaskSwitchContext+0x8a>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a08      	ldr	r2, [pc, #32]	; (8003428 <vTaskSwitchContext+0xb4>)
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <vTaskSwitchContext+0xac>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6013      	str	r3, [r2, #0]
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000c7c 	.word	0x20000c7c
 800341c:	20000c68 	.word	0x20000c68
 8003420:	20000c5c 	.word	0x20000c5c
 8003424:	20000784 	.word	0x20000784
 8003428:	20000780 	.word	0x20000780

0800342c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60fb      	str	r3, [r7, #12]
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <vTaskPlaceOnEventList+0x44>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3318      	adds	r3, #24
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fe9a 	bl	8002194 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003460:	2101      	movs	r1, #1
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	f000 fa80 	bl	8003968 <prvAddCurrentTaskToDelayedList>
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000780 	.word	0x20000780

08003474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	617b      	str	r3, [r7, #20]
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3318      	adds	r3, #24
 80034a2:	4619      	mov	r1, r3
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7fe fe52 	bl	800214e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	f000 fa55 	bl	8003968 <prvAddCurrentTaskToDelayedList>
	}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000780 	.word	0x20000780

080034cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	60fb      	str	r3, [r7, #12]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fe81 	bl	8002204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <xTaskRemoveFromEventList+0xb0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fe78 	bl	8002204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <xTaskRemoveFromEventList+0xb4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <xTaskRemoveFromEventList+0x5c>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a16      	ldr	r2, [pc, #88]	; (8003580 <xTaskRemoveFromEventList+0xb4>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <xTaskRemoveFromEventList+0xb8>)
 8003536:	441a      	add	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fe fe05 	bl	800214e <vListInsertEnd>
 8003544:	e005      	b.n	8003552 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3318      	adds	r3, #24
 800354a:	4619      	mov	r1, r3
 800354c:	480e      	ldr	r0, [pc, #56]	; (8003588 <xTaskRemoveFromEventList+0xbc>)
 800354e:	f7fe fdfe 	bl	800214e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <xTaskRemoveFromEventList+0xc0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d905      	bls.n	800356c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <xTaskRemoveFromEventList+0xc4>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e001      	b.n	8003570 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003570:	697b      	ldr	r3, [r7, #20]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000c7c 	.word	0x20000c7c
 8003580:	20000c5c 	.word	0x20000c5c
 8003584:	20000784 	.word	0x20000784
 8003588:	20000c14 	.word	0x20000c14
 800358c:	20000780 	.word	0x20000780
 8003590:	20000c68 	.word	0x20000c68

08003594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <vTaskInternalSetTimeOutState+0x24>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <vTaskInternalSetTimeOutState+0x28>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000c6c 	.word	0x20000c6c
 80035bc:	20000c58 	.word	0x20000c58

080035c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	613b      	str	r3, [r7, #16]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	60fb      	str	r3, [r7, #12]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003602:	f000 fdf9 	bl	80041f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <xTaskCheckForTimeOut+0xbc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e023      	b.n	800366e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <xTaskCheckForTimeOut+0xc0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d007      	beq.n	8003642 <xTaskCheckForTimeOut+0x82>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e015      	b.n	800366e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	d20b      	bcs.n	8003664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff9b 	bl	8003594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e004      	b.n	800366e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800366e:	f000 fdf3 	bl	8004258 <vPortExitCritical>

	return xReturn;
 8003672:	69fb      	ldr	r3, [r7, #28]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000c58 	.word	0x20000c58
 8003680:	20000c6c 	.word	0x20000c6c

08003684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <vTaskMissedYield+0x14>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000c68 	.word	0x20000c68

0800369c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036a4:	f000 f852 	bl	800374c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <prvIdleTask+0x28>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d9f9      	bls.n	80036a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <prvIdleTask+0x2c>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036c0:	e7f0      	b.n	80036a4 <prvIdleTask+0x8>
 80036c2:	bf00      	nop
 80036c4:	20000784 	.word	0x20000784
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e00c      	b.n	80036f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <prvInitialiseTaskLists+0x60>)
 80036e4:	4413      	add	r3, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fd06 	bl	80020f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b37      	cmp	r3, #55	; 0x37
 80036f6:	d9ef      	bls.n	80036d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036f8:	480d      	ldr	r0, [pc, #52]	; (8003730 <prvInitialiseTaskLists+0x64>)
 80036fa:	f7fe fcfd 	bl	80020f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036fe:	480d      	ldr	r0, [pc, #52]	; (8003734 <prvInitialiseTaskLists+0x68>)
 8003700:	f7fe fcfa 	bl	80020f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <prvInitialiseTaskLists+0x6c>)
 8003706:	f7fe fcf7 	bl	80020f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800370a:	480c      	ldr	r0, [pc, #48]	; (800373c <prvInitialiseTaskLists+0x70>)
 800370c:	f7fe fcf4 	bl	80020f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003710:	480b      	ldr	r0, [pc, #44]	; (8003740 <prvInitialiseTaskLists+0x74>)
 8003712:	f7fe fcf1 	bl	80020f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <prvInitialiseTaskLists+0x78>)
 8003718:	4a05      	ldr	r2, [pc, #20]	; (8003730 <prvInitialiseTaskLists+0x64>)
 800371a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <prvInitialiseTaskLists+0x7c>)
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <prvInitialiseTaskLists+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000784 	.word	0x20000784
 8003730:	20000be4 	.word	0x20000be4
 8003734:	20000bf8 	.word	0x20000bf8
 8003738:	20000c14 	.word	0x20000c14
 800373c:	20000c28 	.word	0x20000c28
 8003740:	20000c40 	.word	0x20000c40
 8003744:	20000c0c 	.word	0x20000c0c
 8003748:	20000c10 	.word	0x20000c10

0800374c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003752:	e019      	b.n	8003788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003754:	f000 fd50 	bl	80041f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <prvCheckTasksWaitingTermination+0x50>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fd4d 	bl	8002204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 8003772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800377c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800377e:	f000 fd6b 	bl	8004258 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f810 	bl	80037a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e1      	bne.n	8003754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000c28 	.word	0x20000c28
 80037a0:	20000c54 	.word	0x20000c54
 80037a4:	20000c3c 	.word	0x20000c3c

080037a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fee0 	bl	8004584 <vPortFree>
				vPortFree( pxTCB );
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fedd 	bl	8004584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037ca:	e018      	b.n	80037fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d103      	bne.n	80037de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fed4 	bl	8004584 <vPortFree>
	}
 80037dc:	e00f      	b.n	80037fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d00a      	beq.n	80037fe <prvDeleteTCB+0x56>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	60fb      	str	r3, [r7, #12]
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <prvDeleteTCB+0x54>
	}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <prvResetNextTaskUnblockTime+0x40>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <prvResetNextTaskUnblockTime+0x14>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <prvResetNextTaskUnblockTime+0x16>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <prvResetNextTaskUnblockTime+0x44>)
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800382a:	e008      	b.n	800383e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <prvResetNextTaskUnblockTime+0x40>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <prvResetNextTaskUnblockTime+0x44>)
 800383c:	6013      	str	r3, [r2, #0]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	20000c0c 	.word	0x20000c0c
 800384c:	20000c74 	.word	0x20000c74

08003850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <xTaskGetSchedulerState+0x34>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800385e:	2301      	movs	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	e008      	b.n	8003876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <xTaskGetSchedulerState+0x38>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800386c:	2302      	movs	r3, #2
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	e001      	b.n	8003876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003876:	687b      	ldr	r3, [r7, #4]
	}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000c60 	.word	0x20000c60
 8003888:	20000c7c 	.word	0x20000c7c

0800388c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d056      	beq.n	8003950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <xTaskPriorityDisinherit+0xd0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d00a      	beq.n	80038c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60fb      	str	r3, [r7, #12]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60bb      	str	r3, [r7, #8]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d02c      	beq.n	8003950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d128      	bne.n	8003950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fc7e 	bl	8002204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskPriorityDisinherit+0xd4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d903      	bls.n	8003930 <xTaskPriorityDisinherit+0xa4>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <xTaskPriorityDisinherit+0xd4>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4a09      	ldr	r2, [pc, #36]	; (8003964 <xTaskPriorityDisinherit+0xd8>)
 800393e:	441a      	add	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7fe fc01 	bl	800214e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003950:	697b      	ldr	r3, [r7, #20]
	}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000780 	.word	0x20000780
 8003960:	20000c5c 	.word	0x20000c5c
 8003964:	20000784 	.word	0x20000784

08003968 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003972:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <prvAddCurrentTaskToDelayedList+0x94>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc40 	bl	8002204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d10a      	bne.n	80039a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <prvAddCurrentTaskToDelayedList+0x94>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4819      	ldr	r0, [pc, #100]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800399c:	f7fe fbd7 	bl	800214e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039a0:	e026      	b.n	80039f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <prvAddCurrentTaskToDelayedList+0x94>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d209      	bcs.n	80039ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <prvAddCurrentTaskToDelayedList+0x94>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7fe fbe4 	bl	8002194 <vListInsert>
}
 80039cc:	e010      	b.n	80039f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <prvAddCurrentTaskToDelayedList+0x94>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe fbda 	bl	8002194 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d202      	bcs.n	80039f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000c58 	.word	0x20000c58
 80039fc:	20000780 	.word	0x20000780
 8003a00:	20000c40 	.word	0x20000c40
 8003a04:	20000c10 	.word	0x20000c10
 8003a08:	20000c0c 	.word	0x20000c0c
 8003a0c:	20000c74 	.word	0x20000c74

08003a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a1a:	f000 facb 	bl	8003fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <xTimerCreateTimerTask+0x80>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d021      	beq.n	8003a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a2e:	1d3a      	adds	r2, r7, #4
 8003a30:	f107 0108 	add.w	r1, r7, #8
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fb43 	bl	80020c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2302      	movs	r3, #2
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	460a      	mov	r2, r1
 8003a50:	4910      	ldr	r1, [pc, #64]	; (8003a94 <xTimerCreateTimerTask+0x84>)
 8003a52:	4811      	ldr	r0, [pc, #68]	; (8003a98 <xTimerCreateTimerTask+0x88>)
 8003a54:	f7ff f8e4 	bl	8002c20 <xTaskCreateStatic>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <xTimerCreateTimerTask+0x8c>)
 8003a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <xTimerCreateTimerTask+0x8c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a66:	2301      	movs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	613b      	str	r3, [r7, #16]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a86:	697b      	ldr	r3, [r7, #20]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000cb0 	.word	0x20000cb0
 8003a94:	08004864 	.word	0x08004864
 8003a98:	08003bbd 	.word	0x08003bbd
 8003a9c:	20000cb4 	.word	0x20000cb4

08003aa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	623b      	str	r3, [r7, #32]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <xTimerGenericCommand+0x98>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02a      	beq.n	8003b2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	dc18      	bgt.n	8003b1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ae8:	f7ff feb2 	bl	8003850 <xTaskGetSchedulerState>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d109      	bne.n	8003b06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <xTimerGenericCommand+0x98>)
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f107 0110 	add.w	r1, r7, #16
 8003afa:	2300      	movs	r3, #0
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	f7fe fcad 	bl	800245c <xQueueGenericSend>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24
 8003b04:	e012      	b.n	8003b2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <xTimerGenericCommand+0x98>)
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	f107 0110 	add.w	r1, r7, #16
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2200      	movs	r2, #0
 8003b12:	f7fe fca3 	bl	800245c <xQueueGenericSend>
 8003b16:	6278      	str	r0, [r7, #36]	; 0x24
 8003b18:	e008      	b.n	8003b2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <xTimerGenericCommand+0x98>)
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	f107 0110 	add.w	r1, r7, #16
 8003b22:	2300      	movs	r3, #0
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	f7fe fd97 	bl	8002658 <xQueueGenericSendFromISR>
 8003b2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3728      	adds	r7, #40	; 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000cb0 	.word	0x20000cb0

08003b3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <prvProcessExpiredTimer+0x7c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fb55 	bl	8002204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d122      	bne.n	8003ba8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	18d1      	adds	r1, r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f000 f8c8 	bl	8003d04 <prvInsertTimerInActiveList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2100      	movs	r1, #0
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f7ff ff8b 	bl	8003aa0 <xTimerGenericCommand>
 8003b8a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60fb      	str	r3, [r7, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	4798      	blx	r3
}
 8003bb0:	bf00      	nop
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000ca8 	.word	0x20000ca8

08003bbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f857 	bl	8003c7c <prvGetNextExpireTime>
 8003bce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f803 	bl	8003be0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bda:	f000 f8d5 	bl	8003d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bde:	e7f1      	b.n	8003bc4 <prvTimerTask+0x8>

08003be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bea:	f7ff fa4b 	bl	8003084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f866 	bl	8003cc4 <prvSampleTimeNow>
 8003bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d130      	bne.n	8003c62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <prvProcessTimerOrBlockTask+0x3c>
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d806      	bhi.n	8003c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c0e:	f7ff fa47 	bl	80030a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff91 	bl	8003b3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c1a:	e024      	b.n	8003c66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <prvProcessTimerOrBlockTask+0x90>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <prvProcessTimerOrBlockTask+0x94>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	f7fe ffb9 	bl	8002bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c46:	f7ff fa2b 	bl	80030a0 <xTaskResumeAll>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <prvProcessTimerOrBlockTask+0x98>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
}
 8003c60:	e001      	b.n	8003c66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c62:	f7ff fa1d 	bl	80030a0 <xTaskResumeAll>
}
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000cac 	.word	0x20000cac
 8003c74:	20000cb0 	.word	0x20000cb0
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <prvGetNextExpireTime+0x44>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <prvGetNextExpireTime+0x44>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e001      	b.n	8003cb2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000ca8 	.word	0x20000ca8

08003cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ccc:	f7ff fa86 	bl	80031dc <xTaskGetTickCount>
 8003cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <prvSampleTimeNow+0x3c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d205      	bcs.n	8003ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cdc:	f000 f908 	bl	8003ef0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <prvSampleTimeNow+0x3c>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000cb8 	.word	0x20000cb8

08003d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d812      	bhi.n	8003d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1ad2      	subs	r2, r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e01b      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <prvInsertTimerInActiveList+0x7c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f7fe fa23 	bl	8002194 <vListInsert>
 8003d4e:	e012      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d206      	bcs.n	8003d66 <prvInsertTimerInActiveList+0x62>
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e007      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <prvInsertTimerInActiveList+0x80>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe fa0f 	bl	8002194 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000cac 	.word	0x20000cac
 8003d84:	20000ca8 	.word	0x20000ca8

08003d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	; 0x38
 8003d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d8e:	e09d      	b.n	8003ecc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da18      	bge.n	8003dc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	3304      	adds	r3, #4
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	61fb      	str	r3, [r7, #28]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbe:	6850      	ldr	r0, [r2, #4]
 8003dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc2:	6892      	ldr	r2, [r2, #8]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db7e      	blt.n	8003ecc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fa10 	bl	8002204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003de4:	463b      	mov	r3, r7
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff6c 	bl	8003cc4 <prvSampleTimeNow>
 8003dec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	d86a      	bhi.n	8003eca <prvProcessReceivedCommands+0x142>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <prvProcessReceivedCommands+0x74>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e25 	.word	0x08003e25
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e25 	.word	0x08003e25
 8003e08:	08003ecd 	.word	0x08003ecd
 8003e0c:	08003e81 	.word	0x08003e81
 8003e10:	08003eb9 	.word	0x08003eb9
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e25 	.word	0x08003e25
 8003e1c:	08003ecd 	.word	0x08003ecd
 8003e20:	08003e81 	.word	0x08003e81
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	18d1      	adds	r1, r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f7ff ff67 	bl	8003d04 <prvInsertTimerInActiveList>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d047      	beq.n	8003ecc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d13f      	bne.n	8003ecc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	441a      	add	r2, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e5e:	f7ff fe1f 	bl	8003aa0 <xTimerGenericCommand>
 8003e62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d130      	bne.n	8003ecc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	61bb      	str	r3, [r7, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	617b      	str	r3, [r7, #20]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	18d1      	adds	r1, r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb2:	f7ff ff27 	bl	8003d04 <prvInsertTimerInActiveList>
					break;
 8003eb6:	e009      	b.n	8003ecc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec4:	f000 fb5e 	bl	8004584 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ec8:	e000      	b.n	8003ecc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003eca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ecc:	4b07      	ldr	r3, [pc, #28]	; (8003eec <prvProcessReceivedCommands+0x164>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1d39      	adds	r1, r7, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fc57 	bl	8002788 <xQueueReceive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af57 	bne.w	8003d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	3730      	adds	r7, #48	; 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000cb0 	.word	0x20000cb0

08003ef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef6:	e045      	b.n	8003f84 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f977 	bl	8002204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d12e      	bne.n	8003f84 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d90e      	bls.n	8003f56 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe f920 	bl	8002194 <vListInsert>
 8003f54:	e016      	b.n	8003f84 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fd9d 	bl	8003aa0 <xTimerGenericCommand>
 8003f66:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1b4      	bne.n	8003ef8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <prvSwitchTimerLists+0xbc>)
 8003f9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	6013      	str	r3, [r2, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000ca8 	.word	0x20000ca8
 8003fb0:	20000cac 	.word	0x20000cac

08003fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fba:	f000 f91d 	bl	80041f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <prvCheckForValidListAndQueue+0x60>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d120      	bne.n	8004008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fc6:	4814      	ldr	r0, [pc, #80]	; (8004018 <prvCheckForValidListAndQueue+0x64>)
 8003fc8:	f7fe f896 	bl	80020f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fcc:	4813      	ldr	r0, [pc, #76]	; (800401c <prvCheckForValidListAndQueue+0x68>)
 8003fce:	f7fe f893 	bl	80020f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <prvCheckForValidListAndQueue+0x6c>)
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <prvCheckForValidListAndQueue+0x64>)
 8003fd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <prvCheckForValidListAndQueue+0x70>)
 8003fda:	4a10      	ldr	r2, [pc, #64]	; (800401c <prvCheckForValidListAndQueue+0x68>)
 8003fdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <prvCheckForValidListAndQueue+0x74>)
 8003fe4:	4a11      	ldr	r2, [pc, #68]	; (800402c <prvCheckForValidListAndQueue+0x78>)
 8003fe6:	2110      	movs	r1, #16
 8003fe8:	200a      	movs	r0, #10
 8003fea:	f7fe f99d 	bl	8002328 <xQueueGenericCreateStatic>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <prvCheckForValidListAndQueue+0x60>)
 8003ff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <prvCheckForValidListAndQueue+0x60>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <prvCheckForValidListAndQueue+0x60>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	490b      	ldr	r1, [pc, #44]	; (8004030 <prvCheckForValidListAndQueue+0x7c>)
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fdb0 	bl	8002b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004008:	f000 f926 	bl	8004258 <vPortExitCritical>
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000cb0 	.word	0x20000cb0
 8004018:	20000c80 	.word	0x20000c80
 800401c:	20000c94 	.word	0x20000c94
 8004020:	20000ca8 	.word	0x20000ca8
 8004024:	20000cac 	.word	0x20000cac
 8004028:	20000d5c 	.word	0x20000d5c
 800402c:	20000cbc 	.word	0x20000cbc
 8004030:	0800486c 	.word	0x0800486c

08004034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b04      	subs	r3, #4
 8004044:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800404c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b04      	subs	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <pxPortInitialiseStack+0x54>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b14      	subs	r3, #20
 800406e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b20      	subs	r3, #32
 800407a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	0800408d 	.word	0x0800408d

0800408c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <prvTaskExitError+0x54>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d00a      	beq.n	80040b6 <prvTaskExitError+0x2a>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	60fb      	str	r3, [r7, #12]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <prvTaskExitError+0x28>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60bb      	str	r3, [r7, #8]
}
 80040c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ca:	bf00      	nop
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0fc      	beq.n	80040cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c
	...

080040f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	f04e 0e0d 	orr.w	lr, lr, #13
 800410e:	4770      	bx	lr

08004110 <pxCurrentTCBConst2>:
 8004110:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004118:	4806      	ldr	r0, [pc, #24]	; (8004134 <prvPortStartFirstTask+0x1c>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	b662      	cpsie	i
 8004124:	b661      	cpsie	f
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	df00      	svc	0
 8004130:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004132:	bf00      	nop
 8004134:	e000ed08 	.word	0xe000ed08

08004138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <xPortStartScheduler+0xac>)
 8004140:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <xPortStartScheduler+0xb0>)
 8004164:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <xPortStartScheduler+0xb4>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416c:	e009      	b.n	8004182 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <xPortStartScheduler+0xb4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <xPortStartScheduler+0xb4>)
 8004176:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d0ef      	beq.n	800416e <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800418e:	4b17      	ldr	r3, [pc, #92]	; (80041ec <xPortStartScheduler+0xb4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <xPortStartScheduler+0xb4>)
 8004196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <xPortStartScheduler+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a0:	4a12      	ldr	r2, [pc, #72]	; (80041ec <xPortStartScheduler+0xb4>)
 80041a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xPortStartScheduler+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0f      	ldr	r2, [pc, #60]	; (80041f0 <xPortStartScheduler+0xb8>)
 80041b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <xPortStartScheduler+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <xPortStartScheduler+0xb8>)
 80041be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041c4:	f000 f8ba 	bl	800433c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <xPortStartScheduler+0xbc>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ce:	f7ff ffa3 	bl	8004118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041d2:	f7ff f8cf 	bl	8003374 <vTaskSwitchContext>
	prvTaskExitError();
 80041d6:	f7ff ff59 	bl	800408c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	e000e400 	.word	0xe000e400
 80041e8:	20000dac 	.word	0x20000dac
 80041ec:	20000db0 	.word	0x20000db0
 80041f0:	e000ed20 	.word	0xe000ed20
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	607b      	str	r3, [r7, #4]
}
 8004210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <vPortEnterCritical+0x58>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <vPortEnterCritical+0x58>)
 800421a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <vPortEnterCritical+0x58>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10f      	bne.n	8004244 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <vPortEnterCritical+0x5c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <vPortEnterCritical+0x4c>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	603b      	str	r3, [r7, #0]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <vPortEnterCritical+0x4a>
	}
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2000000c 	.word	0x2000000c
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <vPortExitCritical+0x4c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <vPortExitCritical+0x24>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	607b      	str	r3, [r7, #4]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <vPortExitCritical+0x4c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3b01      	subs	r3, #1
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <vPortExitCritical+0x4c>)
 8004284:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <vPortExitCritical+0x4c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <vPortExitCritical+0x42>
 800428e:	2300      	movs	r3, #0
 8004290:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f383 8811 	msr	BASEPRI, r3
}
 8004298:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	2000000c 	.word	0x2000000c
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042c0:	6010      	str	r0, [r2, #0]
 80042c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042ca:	f380 8811 	msr	BASEPRI, r0
 80042ce:	f7ff f851 	bl	8003374 <vTaskSwitchContext>
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042e6:	f380 8809 	msr	PSP, r0
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	4770      	bx	lr

080042f0 <pxCurrentTCBConst>:
 80042f0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	607b      	str	r3, [r7, #4]
}
 8004310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004312:	f7fe ff71 	bl	80031f8 <xTaskIncrementTick>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <SysTick_Handler+0x40>)
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f383 8811 	msr	BASEPRI, r3
}
 800432e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <vPortSetupTimerInterrupt+0x30>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <vPortSetupTimerInterrupt+0x34>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <vPortSetupTimerInterrupt+0x38>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <vPortSetupTimerInterrupt+0x3c>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <vPortSetupTimerInterrupt+0x40>)
 800435a:	3b01      	subs	r3, #1
 800435c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435e:	4b03      	ldr	r3, [pc, #12]	; (800436c <vPortSetupTimerInterrupt+0x30>)
 8004360:	2207      	movs	r2, #7
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	e000e010 	.word	0xe000e010
 8004370:	e000e018 	.word	0xe000e018
 8004374:	20000000 	.word	0x20000000
 8004378:	10624dd3 	.word	0x10624dd3
 800437c:	e000e014 	.word	0xe000e014

08004380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004386:	f3ef 8305 	mrs	r3, IPSR
 800438a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d914      	bls.n	80043bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <vPortValidateInterruptPriority+0x6c>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <vPortValidateInterruptPriority+0x70>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	7afa      	ldrb	r2, [r7, #11]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d20a      	bcs.n	80043bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	607b      	str	r3, [r7, #4]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <vPortValidateInterruptPriority+0x74>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <vPortValidateInterruptPriority+0x78>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d90a      	bls.n	80043e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	603b      	str	r3, [r7, #0]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <vPortValidateInterruptPriority+0x60>
	}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e3f0 	.word	0xe000e3f0
 80043f0:	20000dac 	.word	0x20000dac
 80043f4:	e000ed0c 	.word	0xe000ed0c
 80043f8:	20000db0 	.word	0x20000db0

080043fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004408:	f7fe fe3c 	bl	8003084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800440c:	4b58      	ldr	r3, [pc, #352]	; (8004570 <pvPortMalloc+0x174>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004414:	f000 f910 	bl	8004638 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004418:	4b56      	ldr	r3, [pc, #344]	; (8004574 <pvPortMalloc+0x178>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 808e 	bne.w	8004542 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01d      	beq.n	8004468 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800442c:	2208      	movs	r2, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d014      	beq.n	8004468 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	3308      	adds	r3, #8
 8004446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <pvPortMalloc+0x6c>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	617b      	str	r3, [r7, #20]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d069      	beq.n	8004542 <pvPortMalloc+0x146>
 800446e:	4b42      	ldr	r3, [pc, #264]	; (8004578 <pvPortMalloc+0x17c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d864      	bhi.n	8004542 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004478:	4b40      	ldr	r3, [pc, #256]	; (800457c <pvPortMalloc+0x180>)
 800447a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <pvPortMalloc+0x180>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004482:	e004      	b.n	800448e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <pvPortMalloc+0xa4>
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f1      	bne.n	8004484 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <pvPortMalloc+0x174>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d04b      	beq.n	8004542 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2208      	movs	r2, #8
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	2308      	movs	r3, #8
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d91f      	bls.n	800450c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <pvPortMalloc+0xf8>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	613b      	str	r3, [r7, #16]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad2      	subs	r2, r2, r3
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004506:	69b8      	ldr	r0, [r7, #24]
 8004508:	f000 f8f8 	bl	80046fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <pvPortMalloc+0x17c>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <pvPortMalloc+0x17c>)
 8004518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <pvPortMalloc+0x17c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <pvPortMalloc+0x184>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d203      	bcs.n	800452e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <pvPortMalloc+0x17c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a15      	ldr	r2, [pc, #84]	; (8004580 <pvPortMalloc+0x184>)
 800452c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <pvPortMalloc+0x178>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	431a      	orrs	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004542:	f7fe fdad 	bl	80030a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <pvPortMalloc+0x16a>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <pvPortMalloc+0x168>
	return pvReturn;
 8004566:	69fb      	ldr	r3, [r7, #28]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	; 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20001dbc 	.word	0x20001dbc
 8004574:	20001dc8 	.word	0x20001dc8
 8004578:	20001dc0 	.word	0x20001dc0
 800457c:	20001db4 	.word	0x20001db4
 8004580:	20001dc4 	.word	0x20001dc4

08004584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d048      	beq.n	8004628 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004596:	2308      	movs	r3, #8
 8004598:	425b      	negs	r3, r3
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	4b21      	ldr	r3, [pc, #132]	; (8004630 <vPortFree+0xac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <vPortFree+0x44>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60fb      	str	r3, [r7, #12]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <vPortFree+0x62>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60bb      	str	r3, [r7, #8]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <vPortFree+0xac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <vPortFree+0xac>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800460c:	f7fe fd3a 	bl	8003084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <vPortFree+0xb0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4413      	add	r3, r2
 800461a:	4a06      	ldr	r2, [pc, #24]	; (8004634 <vPortFree+0xb0>)
 800461c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800461e:	6938      	ldr	r0, [r7, #16]
 8004620:	f000 f86c 	bl	80046fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004624:	f7fe fd3c 	bl	80030a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20001dc8 	.word	0x20001dc8
 8004634:	20001dc0 	.word	0x20001dc0

08004638 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800463e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004642:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <prvHeapInit+0xac>)
 8004646:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3307      	adds	r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <prvHeapInit+0xac>)
 8004668:	4413      	add	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <prvHeapInit+0xb0>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <prvHeapInit+0xb0>)
 8004678:	2200      	movs	r2, #0
 800467a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4413      	add	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004684:	2208      	movs	r2, #8
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0307 	bic.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a15      	ldr	r2, [pc, #84]	; (80046ec <prvHeapInit+0xb4>)
 8004698:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <prvHeapInit+0xb4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <prvHeapInit+0xb4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	1ad2      	subs	r2, r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <prvHeapInit+0xb4>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <prvHeapInit+0xb8>)
 80046c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <prvHeapInit+0xbc>)
 80046ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <prvHeapInit+0xc0>)
 80046d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000db4 	.word	0x20000db4
 80046e8:	20001db4 	.word	0x20001db4
 80046ec:	20001dbc 	.word	0x20001dbc
 80046f0:	20001dc4 	.word	0x20001dc4
 80046f4:	20001dc0 	.word	0x20001dc0
 80046f8:	20001dc8 	.word	0x20001dc8

080046fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <prvInsertBlockIntoFreeList+0xa8>)
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e002      	b.n	8004710 <prvInsertBlockIntoFreeList+0x14>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d8f7      	bhi.n	800470a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4413      	add	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d108      	bne.n	800473e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	441a      	add	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d118      	bne.n	8004784 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvInsertBlockIntoFreeList+0xac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d00d      	beq.n	800477a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e008      	b.n	800478c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <prvInsertBlockIntoFreeList+0xac>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e003      	b.n	800478c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d002      	beq.n	800479a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	20001db4 	.word	0x20001db4
 80047a8:	20001dbc 	.word	0x20001dbc

080047ac <memset>:
 80047ac:	4603      	mov	r3, r0
 80047ae:	4402      	add	r2, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	2600      	movs	r6, #0
 80047c0:	4d0c      	ldr	r5, [pc, #48]	; (80047f4 <__libc_init_array+0x38>)
 80047c2:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <__libc_init_array+0x3c>)
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	f000 f828 	bl	8004820 <_init>
 80047d0:	2600      	movs	r6, #0
 80047d2:	4d0a      	ldr	r5, [pc, #40]	; (80047fc <__libc_init_array+0x40>)
 80047d4:	4c0a      	ldr	r4, [pc, #40]	; (8004800 <__libc_init_array+0x44>)
 80047d6:	1b64      	subs	r4, r4, r5
 80047d8:	10a4      	asrs	r4, r4, #2
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	08004920 	.word	0x08004920
 80047f8:	08004920 	.word	0x08004920
 80047fc:	08004920 	.word	0x08004920
 8004800:	08004924 	.word	0x08004924

08004804 <memcpy>:
 8004804:	440a      	add	r2, r1
 8004806:	4291      	cmp	r1, r2
 8004808:	f100 33ff 	add.w	r3, r0, #4294967295
 800480c:	d100      	bne.n	8004810 <memcpy+0xc>
 800480e:	4770      	bx	lr
 8004810:	b510      	push	{r4, lr}
 8004812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004816:	4291      	cmp	r1, r2
 8004818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481c:	d1f9      	bne.n	8004812 <memcpy+0xe>
 800481e:	bd10      	pop	{r4, pc}

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
