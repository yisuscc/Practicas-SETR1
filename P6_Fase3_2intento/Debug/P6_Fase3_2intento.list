
P6_Fase3_2intento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009588  08009588  00019588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009638  08009638  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009640  08009640  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  20000118  08009760  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08009760  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d52f  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004270  00000000  00000000  0003d6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00041930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c6  00000000  00000000  000432e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a920  00000000  00000000  000446ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002077c  00000000  00000000  0006efce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5239  00000000  00000000  0008f74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c54  00000000  00000000  00184984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009570 	.word	0x08009570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08009570 	.word	0x08009570

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f001 fc69 	bl	8001da8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f001 f87a 	bl	80015d0 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f001 fc5f 	bl	8001da8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 f870 	bl	80015d0 <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <lcd_reset>:

void lcd_reset(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2104      	movs	r1, #4
 80004fc:	4820      	ldr	r0, [pc, #128]	; (8000580 <lcd_reset+0x8c>)
 80004fe:	f001 fc53 	bl	8001da8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fc4d 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fc47 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4818      	ldr	r0, [pc, #96]	; (8000580 <lcd_reset+0x8c>)
 8000520:	f001 fc42 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <lcd_reset+0x8c>)
 800052a:	f001 fc3d 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f001 fc36 	bl	8001da8 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f001 fc30 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <lcd_reset+0x8c>)
 800054e:	f001 fc2b 	bl	8001da8 <HAL_GPIO_WritePin>
    lcd_clock();
 8000552:	f7ff ffb7 	bl	80004c4 <lcd_clock>
    lcd_clock();
 8000556:	f7ff ffb5 	bl	80004c4 <lcd_clock>
    lcd_clock();
 800055a:	f7ff ffb3 	bl	80004c4 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 fc1f 	bl	8001da8 <HAL_GPIO_WritePin>
    lcd_clock();
 800056a:	f7ff ffab 	bl	80004c4 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	2104      	movs	r1, #4
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f001 fc17 	bl	8001da8 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	48000400 	.word	0x48000400

08000584 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	091b      	lsrs	r3, r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 fbfd 	bl	8001da8 <HAL_GPIO_WritePin>
 80005ae:	e005      	b.n	80005bc <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2108      	movs	r1, #8
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f001 fbf6 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4847      	ldr	r0, [pc, #284]	; (80006ec <lcd_write+0x168>)
 80005d0:	f001 fbea 	bl	8001da8 <HAL_GPIO_WritePin>
 80005d4:	e004      	b.n	80005e0 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	4844      	ldr	r0, [pc, #272]	; (80006ec <lcd_write+0x168>)
 80005dc:	f001 fbe4 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d005      	beq.n	80005fa <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2102      	movs	r1, #2
 80005f2:	483e      	ldr	r0, [pc, #248]	; (80006ec <lcd_write+0x168>)
 80005f4:	f001 fbd8 	bl	8001da8 <HAL_GPIO_WritePin>
 80005f8:	e004      	b.n	8000604 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2102      	movs	r1, #2
 80005fe:	483b      	ldr	r0, [pc, #236]	; (80006ec <lcd_write+0x168>)
 8000600:	f001 fbd2 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	09db      	lsrs	r3, r3, #7
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f001 fbc5 	bl	8001da8 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 fbbe 	bl	8001da8 <HAL_GPIO_WritePin>

    if(rs)
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d005      	beq.n	800063e <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	482d      	ldr	r0, [pc, #180]	; (80006ec <lcd_write+0x168>)
 8000638:	f001 fbb6 	bl	8001da8 <HAL_GPIO_WritePin>
 800063c:	e004      	b.n	8000648 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2104      	movs	r1, #4
 8000642:	482a      	ldr	r0, [pc, #168]	; (80006ec <lcd_write+0x168>)
 8000644:	f001 fbb0 	bl	8001da8 <HAL_GPIO_WritePin>

    lcd_clock();
 8000648:	f7ff ff3c 	bl	80004c4 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2108      	movs	r1, #8
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fba3 	bl	8001da8 <HAL_GPIO_WritePin>
 8000662:	e005      	b.n	8000670 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f001 fb9c 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	085b      	lsrs	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	2110      	movs	r1, #16
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <lcd_write+0x168>)
 8000684:	f001 fb90 	bl	8001da8 <HAL_GPIO_WritePin>
 8000688:	e004      	b.n	8000694 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2110      	movs	r1, #16
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <lcd_write+0x168>)
 8000690:	f001 fb8a 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2102      	movs	r1, #2
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <lcd_write+0x168>)
 80006a8:	f001 fb7e 	bl	8001da8 <HAL_GPIO_WritePin>
 80006ac:	e004      	b.n	80006b8 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <lcd_write+0x168>)
 80006b4:	f001 fb78 	bl	8001da8 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fb6b 	bl	8001da8 <HAL_GPIO_WritePin>
 80006d2:	e005      	b.n	80006e0 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 fb64 	bl	8001da8 <HAL_GPIO_WritePin>

    lcd_clock();
 80006e0:	f7ff fef0 	bl	80004c4 <lcd_clock>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	48000400 	.word	0x48000400

080006f0 <lcd_clear>:

void lcd_clear(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ff44 	bl	8000584 <lcd_write>
    _lcd_char = 0;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <lcd_clear+0x1c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <lcd_clear+0x20>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000013c 	.word	0x2000013c
 8000710:	2000013d 	.word	0x2000013d

08000714 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	460b      	mov	r3, r1
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	4613      	mov	r3, r2
 8000724:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	b25a      	sxtb	r2, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b25a      	sxtb	r2, r3
 800073c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000740:	4313      	orrs	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff1b 	bl	8000584 <lcd_write>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff0a 	bl	8000584 <lcd_write>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e055      	b.n	8000832 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <lcd_print+0xd0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d01c      	beq.n	80007c8 <lcd_print+0x50>
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b0a      	cmp	r3, #10
 8000798:	d116      	bne.n	80007c8 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <lcd_print+0xd4>)
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <lcd_print+0xd0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d242      	bcs.n	800082c <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <lcd_print+0xd8>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <lcd_print+0xd4>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	1c59      	adds	r1, r3, #1
 80007b0:	b2c8      	uxtb	r0, r1
 80007b2:	4926      	ldr	r1, [pc, #152]	; (800084c <lcd_print+0xd4>)
 80007b4:	7008      	strb	r0, [r1, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffcb 	bl	8000756 <lcd_display_address>
                _lcd_char = 0;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <lcd_print+0xdc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80007c6:	e031      	b.n	800082c <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <lcd_print+0xe0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01b      	beq.n	8000808 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <lcd_print+0xdc>)
 80007d2:	781a      	ldrb	r2, [r3, #0]
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <lcd_print+0xe0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d115      	bne.n	8000808 <lcd_print+0x90>
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <lcd_print+0xd4>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <lcd_print+0xd0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d20f      	bcs.n	8000808 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <lcd_print+0xd8>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <lcd_print+0xd4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	1c59      	adds	r1, r3, #1
 80007f2:	b2c8      	uxtb	r0, r1
 80007f4:	4915      	ldr	r1, [pc, #84]	; (800084c <lcd_print+0xd4>)
 80007f6:	7008      	strb	r0, [r1, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffaa 	bl	8000756 <lcd_display_address>
                    _lcd_char = 0;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <lcd_print+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff feb6 	bl	8000584 <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <lcd_print+0xe0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d005      	beq.n	800082c <lcd_print+0xb4>
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <lcd_print+0xdc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <lcd_print+0xdc>)
 800082a:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	3301      	adds	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1a3      	bne.n	8000786 <lcd_print+0xe>
        }
    }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000135 	.word	0x20000135
 800084c:	2000013d 	.word	0x2000013d
 8000850:	20000138 	.word	0x20000138
 8000854:	2000013c 	.word	0x2000013c
 8000858:	20000134 	.word	0x20000134

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fe40 	bl	80014e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f86d 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fa07 	bl	8000c7c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800086e:	f000 f8cb 	bl	8000a08 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000872:	f000 f901 	bl	8000a78 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000876:	f000 f93d 	bl	8000af4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800087a:	f000 f961 	bl	8000b40 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800087e:	f000 f99d 	bl	8000bbc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000882:	f000 f9cb 	bl	8000c1c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000886:	f008 f87b 	bl	8008980 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(5000);
 800088a:	f241 3088 	movw	r0, #5000	; 0x1388
 800088e:	f000 fe9f 	bl	80015d0 <HAL_Delay>
int i;
uint8_t dato[6];
dato[0]= 0;
 8000892:	2300      	movs	r3, #0
 8000894:	713b      	strb	r3, [r7, #4]
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1, dato, 6);
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	2306      	movs	r3, #6
 800089a:	2101      	movs	r1, #1
 800089c:	4826      	ldr	r0, [pc, #152]	; (8000938 <main+0xdc>)
 800089e:	f008 fd97 	bl	80093d0 <USBD_LL_PrepareReceive>
HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin,1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2104      	movs	r1, #4
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f001 fa7d 	bl	8001da8 <HAL_GPIO_WritePin>
lcd_reset();
 80008ae:	f7ff fe21 	bl	80004f4 <lcd_reset>
lcd_clear();
 80008b2:	f7ff ff1d 	bl	80006f0 <lcd_clear>
lcd_display_settings(1,0,0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ff2a 	bl	8000714 <lcd_display_settings>
lcd_print("Hola");
 80008c0:	481e      	ldr	r0, [pc, #120]	; (800093c <main+0xe0>)
 80008c2:	f7ff ff59 	bl	8000778 <lcd_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(miflag==1){
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0xe4>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <main+0x84>
		  USBD_LL_PrepareReceive(&hUsbDeviceFS, 1, dato, 6);
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	2306      	movs	r3, #6
 80008d2:	2101      	movs	r1, #1
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <main+0xdc>)
 80008d6:	f008 fd7b 	bl	80093d0 <USBD_LL_PrepareReceive>
		  	  miflag= 0;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <main+0xe4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
	  }
	  for(i = 0; i<50;i++){
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e00e      	b.n	8000904 <main+0xa8>
		 dato[1]=4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	717b      	strb	r3, [r7, #5]
		 dato[2]= 4;
 80008ea:	2304      	movs	r3, #4
 80008ec:	71bb      	strb	r3, [r7, #6]
		 USBD_CUSTOM_HID_SendReport_FS(dato, 6);
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2106      	movs	r1, #6
 80008f2:	4618      	mov	r0, r3
 80008f4:	f008 f898 	bl	8008a28 <USBD_CUSTOM_HID_SendReport_FS>
		 HAL_Delay(100);
 80008f8:	2064      	movs	r0, #100	; 0x64
 80008fa:	f000 fe69 	bl	80015d0 <HAL_Delay>
	  for(i = 0; i<50;i++){
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b31      	cmp	r3, #49	; 0x31
 8000908:	dded      	ble.n	80008e6 <main+0x8a>
	  }
	  for(i = 0; i<50;i++){
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e00e      	b.n	800092e <main+0xd2>
	  		 dato[1]=-4;
 8000910:	23fc      	movs	r3, #252	; 0xfc
 8000912:	717b      	strb	r3, [r7, #5]
	  		 dato[2]= -4;
 8000914:	23fc      	movs	r3, #252	; 0xfc
 8000916:	71bb      	strb	r3, [r7, #6]
	  		 USBD_CUSTOM_HID_SendReport_FS(dato, 6);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2106      	movs	r1, #6
 800091c:	4618      	mov	r0, r3
 800091e:	f008 f883 	bl	8008a28 <USBD_CUSTOM_HID_SendReport_FS>
	  		 HAL_Delay(100);
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f000 fe54 	bl	80015d0 <HAL_Delay>
	  for(i = 0; i<50;i++){
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b31      	cmp	r3, #49	; 0x31
 8000932:	dded      	ble.n	8000910 <main+0xb4>
	  if(miflag==1){
 8000934:	e7c7      	b.n	80008c6 <main+0x6a>
 8000936:	bf00      	nop
 8000938:	200003b4 	.word	0x200003b4
 800093c:	08009588 	.word	0x08009588
 8000940:	20000690 	.word	0x20000690

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b096      	sub	sp, #88	; 0x58
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2244      	movs	r2, #68	; 0x44
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f008 fde0 	bl	8009518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000966:	f44f 7000 	mov.w	r0, #512	; 0x200
 800096a:	f002 fd37 	bl	80033dc <HAL_PWREx_ControlVoltageScaling>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000974:	f000 fb06 	bl	8000f84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000978:	f002 fd12 	bl	80033a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <SystemClock_Config+0xc0>)
 800097e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000982:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <SystemClock_Config+0xc0>)
 8000984:	f023 0318 	bic.w	r3, r3, #24
 8000988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800098c:	2314      	movs	r3, #20
 800098e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009ac:	2328      	movs	r3, #40	; 0x28
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fe2d 	bl	8003620 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009cc:	f000 fada 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2303      	movs	r3, #3
 80009d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2104      	movs	r1, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 f9f5 	bl	8003dd8 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009f4:	f000 fac6 	bl	8000f84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009f8:	f003 fefc 	bl	80047f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009fc:	bf00      	nop
 80009fe:	3758      	adds	r7, #88	; 0x58
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <MX_DFSDM1_Init+0x6c>)
 8000a10:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_DFSDM1_Init+0x68>)
 8000a5e:	f000 feed 	bl	800183c <HAL_DFSDM_ChannelInit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000a68:	f000 fa8c 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000140 	.word	0x20000140
 8000a74:	40016020 	.word	0x40016020

08000a78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C2_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a84:	f640 6214 	movw	r2, #3604	; 0xe14
 8000a88:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ab6:	f001 f9b2 	bl	8001e1e <HAL_I2C_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fa60 	bl	8000f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ac8:	f001 fa44 	bl	8001f54 <HAL_I2CEx_ConfigAnalogFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ad2:	f000 fa57 	bl	8000f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ada:	f001 fa86 	bl	8001fea <HAL_I2CEx_ConfigDigitalFilter>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f000 fa4e 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000178 	.word	0x20000178
 8000af0:	40005800 	.word	0x40005800

08000af4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_QUADSPI_Init+0x48>)
 8000afc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b12:	2217      	movs	r2, #23
 8000b14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_QUADSPI_Init+0x44>)
 8000b24:	f002 fcc0 	bl	80034a8 <HAL_QSPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b2e:	f000 fa29 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200001cc 	.word	0x200001cc
 8000b3c:	a0001000 	.word	0xa0001000

08000b40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <MX_SPI3_Init+0x78>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b8e:	2207      	movs	r2, #7
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_SPI3_Init+0x74>)
 8000ba0:	f004 f80a 	bl	8004bb8 <HAL_SPI_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f9eb 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000210 	.word	0x20000210
 8000bb8:	40003c00 	.word	0x40003c00

08000bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART1_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000c00:	f004 f87d 	bl	8004cfe <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 f9bb 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000274 	.word	0x20000274
 8000c18:	40013800 	.word	0x40013800

08000c1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART3_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c60:	f004 f84d 	bl	8004cfe <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f000 f98b 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200002fc 	.word	0x200002fc
 8000c78:	40004800 	.word	0x40004800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	4bb7      	ldr	r3, [pc, #732]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4ab6      	ldr	r2, [pc, #728]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4bb4      	ldr	r3, [pc, #720]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4bb1      	ldr	r3, [pc, #708]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4ab0      	ldr	r2, [pc, #704]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4bae      	ldr	r3, [pc, #696]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4bab      	ldr	r3, [pc, #684]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4aaa      	ldr	r2, [pc, #680]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4ba8      	ldr	r3, [pc, #672]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4ba5      	ldr	r3, [pc, #660]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4aa4      	ldr	r2, [pc, #656]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4ba2      	ldr	r3, [pc, #648]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b9f      	ldr	r3, [pc, #636]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a9e      	ldr	r2, [pc, #632]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b9c      	ldr	r3, [pc, #624]	; (8000f70 <MX_GPIO_Init+0x2f4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d10:	4898      	ldr	r0, [pc, #608]	; (8000f74 <MX_GPIO_Init+0x2f8>)
 8000d12:	f001 f849 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000d16:	2200      	movs	r2, #0
 8000d18:	f248 111c 	movw	r1, #33052	; 0x811c
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f001 f842 	bl	8001da8 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f24f 0116 	movw	r1, #61462	; 0xf016
 8000d2a:	4893      	ldr	r0, [pc, #588]	; (8000f78 <MX_GPIO_Init+0x2fc>)
 8000d2c:	f001 f83c 	bl	8001da8 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d36:	4891      	ldr	r0, [pc, #580]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000d38:	f001 f836 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	488e      	ldr	r0, [pc, #568]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000d44:	f001 f830 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d4e:	488c      	ldr	r0, [pc, #560]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000d50:	f001 f82a 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	4887      	ldr	r0, [pc, #540]	; (8000f78 <MX_GPIO_Init+0x2fc>)
 8000d5a:	f001 f825 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	4884      	ldr	r0, [pc, #528]	; (8000f74 <MX_GPIO_Init+0x2f8>)
 8000d64:	f001 f820 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d68:	f240 1315 	movw	r3, #277	; 0x115
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	487c      	ldr	r0, [pc, #496]	; (8000f74 <MX_GPIO_Init+0x2f8>)
 8000d82:	f000 fe67 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d86:	236a      	movs	r3, #106	; 0x6a
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4876      	ldr	r0, [pc, #472]	; (8000f74 <MX_GPIO_Init+0x2f8>)
 8000d9c:	f000 fe5a 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4872      	ldr	r0, [pc, #456]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000db8:	f000 fe4c 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000dbc:	233f      	movs	r3, #63	; 0x3f
 8000dbe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	486c      	ldr	r0, [pc, #432]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000dd0:	f000 fe40 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000de4:	2308      	movs	r3, #8
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 fe2f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000df6:	f248 131c 	movw	r3, #33052	; 0x811c
 8000dfa:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f000 fe1f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000e16:	23e0      	movs	r3, #224	; 0xe0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fe0e 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	484a      	ldr	r0, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x2fc>)
 8000e4e:	f000 fe01 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000e52:	f24f 0336 	movw	r3, #61494	; 0xf036
 8000e56:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4843      	ldr	r0, [pc, #268]	; (8000f78 <MX_GPIO_Init+0x2fc>)
 8000e6c:	f000 fdf2 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e70:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e74:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	483d      	ldr	r0, [pc, #244]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000e88:	f000 fde4 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e8c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4835      	ldr	r0, [pc, #212]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000ea6:	f000 fdd5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482f      	ldr	r0, [pc, #188]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000ec4:	f000 fdc6 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ec8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4828      	ldr	r0, [pc, #160]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000ee0:	f000 fdb8 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	481f      	ldr	r0, [pc, #124]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000f00:	f000 fda8 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f04:	2378      	movs	r3, #120	; 0x78
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000f20:	f000 fd98 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_GPIO_Init+0x2fc>)
 8000f42:	f000 fd87 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f000 fc3f 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f50:	2017      	movs	r0, #23
 8000f52:	f000 fc58 	bl	8001806 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f000 fc37 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f000 fc50 	bl	8001806 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48001000 	.word	0x48001000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	48000800 	.word	0x48000800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ac      	sub	sp, #176	; 0xb0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2288      	movs	r2, #136	; 0x88
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 fa8d 	bl	8009518 <memset>
  if(DFSDM1_Init == 0)
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d142      	bne.n	800108c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f902 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001022:	f7ff ffaf 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800102c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001056:	f44f 7320 	mov.w	r3, #640	; 0x280
 800105a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001070:	2306      	movs	r3, #6
 8001072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800107e:	f000 fce9 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a02      	ldr	r2, [pc, #8]	; (8001094 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800108a:	6013      	str	r3, [r2, #0]
  }

}
 800108c:	bf00      	nop
 800108e:	37b0      	adds	r7, #176	; 0xb0
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000384 	.word	0x20000384
 8001098:	40021000 	.word	0x40021000
 800109c:	48001000 	.word	0x48001000

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ac      	sub	sp, #176	; 0xb0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2288      	movs	r2, #136	; 0x88
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 fa29 	bl	8009518 <memset>
  if(hi2c->Instance==I2C2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <HAL_I2C_MspInit+0xb0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d13b      	bne.n	8001148 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 f89f 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff ff4c 	bl	8000f84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001104:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110c:	2312      	movs	r3, #18
 800110e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800111e:	2304      	movs	r3, #4
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <HAL_I2C_MspInit+0xb8>)
 800112c:	f000 fc92 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 8001136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800113a:	6593      	str	r3, [r2, #88]	; 0x58
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_I2C_MspInit+0xb4>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	37b0      	adds	r7, #176	; 0xb0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40005800 	.word	0x40005800
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400

0800115c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_QSPI_MspInit+0x7c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d128      	bne.n	80011d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 8001180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6513      	str	r3, [r2, #80]	; 0x50
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_QSPI_MspInit+0x80>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80011ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80011b2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011c0:	230a      	movs	r3, #10
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_QSPI_MspInit+0x84>)
 80011cc:	f000 fc42 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	a0001000 	.word	0xa0001000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48001000 	.word	0x48001000

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_SPI_MspInit+0x7c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d128      	bne.n	8001258 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_SPI_MspInit+0x80>)
 800120c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_SPI_MspInit+0x80>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001236:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001248:	2306      	movs	r3, #6
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_SPI_MspInit+0x84>)
 8001254:	f000 fbfe 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40003c00 	.word	0x40003c00
 8001264:	40021000 	.word	0x40021000
 8001268:	48000800 	.word	0x48000800

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	; 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2288      	movs	r2, #136	; 0x88
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f008 f943 	bl	8009518 <memset>
  if(huart->Instance==USART1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a42      	ldr	r2, [pc, #264]	; (80013a0 <HAL_UART_MspInit+0x134>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d13b      	bne.n	8001314 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 ffb9 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b4:	f7ff fe66 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012bc:	4a39      	ldr	r2, [pc, #228]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6613      	str	r3, [r2, #96]	; 0x60
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_UART_MspInit+0x138>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	2307      	movs	r3, #7
 8001302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800130a:	4619      	mov	r1, r3
 800130c:	4826      	ldr	r0, [pc, #152]	; (80013a8 <HAL_UART_MspInit+0x13c>)
 800130e:	f000 fba1 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001312:	e040      	b.n	8001396 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_UART_MspInit+0x140>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d13b      	bne.n	8001396 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800131e:	2304      	movs	r3, #4
 8001320:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4618      	mov	r0, r3
 800132c:	f002 ff78 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001336:	f7ff fe25 	bl	8000f84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_UART_MspInit+0x138>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x138>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6593      	str	r3, [r2, #88]	; 0x58
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_UART_MspInit+0x138>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_UART_MspInit+0x138>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_UART_MspInit+0x138>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_UART_MspInit+0x138>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800136a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_UART_MspInit+0x144>)
 8001392:	f000 fb5f 	bl	8001a54 <HAL_GPIO_Init>
}
 8001396:	bf00      	nop
 8001398:	37b8      	adds	r7, #184	; 0xb8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	40004800 	.word	0x40004800
 80013b0:	48000c00 	.word	0x48000c00

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f8c6 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800140c:	2020      	movs	r0, #32
 800140e:	f000 fce3 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001412:	2040      	movs	r0, #64	; 0x40
 8001414:	f000 fce0 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001418:	2080      	movs	r0, #128	; 0x80
 800141a:	f000 fcdd 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800141e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001422:	f000 fcd9 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}

0800142a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800142e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001432:	f000 fcd1 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001436:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800143a:	f000 fccd 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800143e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001442:	f000 fcc9 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001446:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800144a:	f000 fcc5 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800144e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001452:	f000 fcc1 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <OTG_FS_IRQHandler+0x10>)
 8001462:	f000 ff61 	bl	8002328 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000894 	.word	0x20000894

08001470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001498:	f7ff ffea 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <LoopForever+0xe>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	; (80014e0 <LoopForever+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f008 f831 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c6:	f7ff f9c9 	bl	800085c <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80014d8:	08009648 	.word	0x08009648
  ldr r2, =_sbss
 80014dc:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80014e0:	20000dc0 	.word	0x20000dc0

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>

080014e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f961 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f80e 	bl	8001518 <HAL_InitTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	e001      	b.n	800150c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001508:	f7ff fd42 	bl	8000f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150c:	79fb      	ldrb	r3, [r7, #7]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_InitTick+0x6c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_InitTick+0x70>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_InitTick+0x6c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f96d 	bl	8001822 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10f      	bne.n	800156e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d809      	bhi.n	8001568 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 f937 	bl	80017ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_InitTick+0x74>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e007      	b.n	8001578 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e004      	b.n	8001578 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e001      	b.n	8001578 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000388 	.word	0x20000388

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000388 	.word	0x20000388

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff ffee 	bl	80015b8 <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffde 	bl	80015b8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff3e 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff8e 	bl	800170c <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5d 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff31 	bl	800167c <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0ac      	b.n	80019a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8b2 	bl	80019bc <DFSDM_GetChannelFromInstance>
 8001858:	4603      	mov	r3, r0
 800185a:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_DFSDM_ChannelInit+0x174>)
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e09f      	b.n	80019a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fbb5 	bl	8000fd8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001876:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_DFSDM_ChannelInit+0x178>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d125      	bne.n	80018cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800188a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4948      	ldr	r1, [pc, #288]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a46      	ldr	r2, [pc, #280]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018ae:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	493f      	ldr	r1, [pc, #252]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020f 	bic.w	r2, r2, #15
 8001908:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001930:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f002 0207 	and.w	r2, r2, #7
 800195c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001988:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f810 	bl	80019bc <DFSDM_GetChannelFromInstance>
 800199c:	4602      	mov	r2, r0
 800199e:	4904      	ldr	r1, [pc, #16]	; (80019b0 <HAL_DFSDM_ChannelInit+0x174>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000390 	.word	0x20000390
 80019b4:	2000038c 	.word	0x2000038c
 80019b8:	40016000 	.word	0x40016000

080019bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <DFSDM_GetChannelFromInstance+0x7c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e02b      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <DFSDM_GetChannelFromInstance+0x80>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d102      	bne.n	80019e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e024      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <DFSDM_GetChannelFromInstance+0x84>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e01d      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <DFSDM_GetChannelFromInstance+0x88>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e016      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a04:	2305      	movs	r3, #5
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e00f      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <DFSDM_GetChannelFromInstance+0x90>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d102      	bne.n	8001a18 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a12:	2306      	movs	r3, #6
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e008      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <DFSDM_GetChannelFromInstance+0x94>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a20:	2307      	movs	r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e001      	b.n	8001a2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a26:	2303      	movs	r3, #3
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40016000 	.word	0x40016000
 8001a3c:	40016020 	.word	0x40016020
 8001a40:	40016040 	.word	0x40016040
 8001a44:	40016080 	.word	0x40016080
 8001a48:	400160a0 	.word	0x400160a0
 8001a4c:	400160c0 	.word	0x400160c0
 8001a50:	400160e0 	.word	0x400160e0

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e17f      	b.n	8001d64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8171 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x40>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 0201 	and.w	r2, r3, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d118      	bne.n	8001b34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80ac 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6613      	str	r3, [r2, #96]	; 0x60
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x242>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x338>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_GPIO_Init+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x340>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_GPIO_Init+0x344>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_GPIO_Init+0x348>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x34c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c96:	2300      	movs	r3, #0
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca8:	4937      	ldr	r1, [pc, #220]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae78 	bne.w	8001a64 <HAL_GPIO_Init+0x10>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48001400 	.word	0x48001400
 8001da0:	48001800 	.word	0x48001800
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f806 	bl	8001e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e08d      	b.n	8001f4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f92b 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2224      	movs	r2, #36	; 0x24
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e006      	b.n	8001ea6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ea4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d108      	bne.n	8001ec0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	e007      	b.n	8001ed0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69d9      	ldr	r1, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d138      	bne.n	8001fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e032      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d139      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800200a:	2302      	movs	r3, #2
 800200c:	e033      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2224      	movs	r2, #36	; 0x24
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800203c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002084:	b08f      	sub	sp, #60	; 0x3c
 8002086:	af0a      	add	r7, sp, #40	; 0x28
 8002088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e116      	b.n	80022c2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f006 fdf0 	bl	8008c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fc09 	bl	80058ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	687e      	ldr	r6, [r7, #4]
 80020e0:	466d      	mov	r5, sp
 80020e2:	f106 0410 	add.w	r4, r6, #16
 80020e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f6:	1d33      	adds	r3, r6, #4
 80020f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	f003 fb1b 	bl	8005736 <USB_CoreInit>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0d7      	b.n	80022c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fbf7 	bl	800590c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e04a      	b.n	80021ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	333d      	adds	r3, #61	; 0x3d
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	333c      	adds	r3, #60	; 0x3c
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	b298      	uxth	r0, r3
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3356      	adds	r3, #86	; 0x56
 8002160:	4602      	mov	r2, r0
 8002162:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3340      	adds	r3, #64	; 0x40
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3344      	adds	r3, #68	; 0x44
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3348      	adds	r3, #72	; 0x48
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	334c      	adds	r3, #76	; 0x4c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	3301      	adds	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3af      	bcc.n	8002124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e044      	b.n	8002254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	3301      	adds	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d3b5      	bcc.n	80021ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	687e      	ldr	r6, [r7, #4]
 8002266:	466d      	mov	r5, sp
 8002268:	f106 0410 	add.w	r4, r6, #16
 800226c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002278:	e885 0003 	stmia.w	r5, {r0, r1}
 800227c:	1d33      	adds	r3, r6, #4
 800227e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f003 fb8f 	bl	80059a4 <USB_DevInit>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e014      	b.n	80022c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f001 f851 	bl	8003358 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fb3d 	bl	800693a <USB_DevDisconnect>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_Start+0x1c>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e01c      	b.n	8002320 <HAL_PCD_Start+0x56>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fade 	bl	80058c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 faf1 	bl	80068f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b08d      	sub	sp, #52	; 0x34
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fbaf 	bl	8006aa2 <USB_GetMode>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 847e 	bne.w	8002c48 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fb13 	bl	800697c <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8474 	beq.w	8002c46 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fb00 	bl	800697c <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 0202 	and.w	r2, r2, #2
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f004 faee 	bl	800697c <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d161      	bne.n	800246e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	0c5b      	lsrs	r3, r3, #17
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d124      	bne.n	8002430 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d035      	beq.n	800245e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6a38      	ldr	r0, [r7, #32]
 8002406:	f004 f925 	bl	8006654 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002416:	441a      	add	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002428:	441a      	add	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	615a      	str	r2, [r3, #20]
 800242e:	e016      	b.n	800245e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	0c5b      	lsrs	r3, r3, #17
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2b06      	cmp	r3, #6
 800243a:	d110      	bne.n	800245e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002442:	2208      	movs	r2, #8
 8002444:	4619      	mov	r1, r3
 8002446:	6a38      	ldr	r0, [r7, #32]
 8002448:	f004 f904 	bl	8006654 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002458:	441a      	add	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0210 	orr.w	r2, r2, #16
 800246c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fa82 	bl	800697c <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002482:	f040 80a7 	bne.w	80025d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f004 fa87 	bl	80069a2 <USB_ReadDevAllOutEpInterrupt>
 8002494:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002496:	e099      	b.n	80025cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 808e 	beq.w	80025c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 faab 	bl	8006a0a <USB_ReadDevOutEPInterrupt>
 80024b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2301      	movs	r3, #1
 80024d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fe65 	bl	80031a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2308      	movs	r3, #8
 80024f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fea1 	bl	8003240 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d030      	beq.n	8002586 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d109      	bne.n	8002544 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002542:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f006 fcf6 	bl	8008f60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002580:	461a      	mov	r2, r3
 8002582:	2302      	movs	r3, #2
 8002584:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259c:	461a      	mov	r2, r3
 800259e:	2320      	movs	r3, #32
 80025a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	3301      	adds	r3, #1
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af62 	bne.w	8002498 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 f9cf 	bl	800697c <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e8:	f040 80a4 	bne.w	8002734 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 f9f0 	bl	80069d6 <USB_ReadDevAllInEpInterrupt>
 80025f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025fc:	e096      	b.n	800272c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808b 	beq.w	8002720 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f004 fa16 	bl	8006a46 <USB_ReadDevInEPInterrupt>
 800261a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d020      	beq.n	8002668 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	2201      	movs	r2, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	69f9      	ldr	r1, [r7, #28]
 8002642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002646:	4013      	ands	r3, r2
 8002648:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2301      	movs	r3, #1
 800265a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 fbe7 	bl	8008e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	2308      	movs	r3, #8
 8002682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269a:	461a      	mov	r2, r3
 800269c:	2310      	movs	r3, #16
 800269e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b6:	461a      	mov	r2, r3
 80026b8:	2340      	movs	r3, #64	; 0x40
 80026ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d023      	beq.n	800270e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c8:	6a38      	ldr	r0, [r7, #32]
 80026ca:	f003 faad 	bl	8005c28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3338      	adds	r3, #56	; 0x38
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	3304      	adds	r3, #4
 80026e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	78db      	ldrb	r3, [r3, #3]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f006 fc44 	bl	8008f84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2302      	movs	r3, #2
 800270c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fcba 	bl	8003094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	3301      	adds	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f af65 	bne.w	80025fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f004 f91f 	bl	800697c <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002748:	d122      	bne.n	8002790 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002770:	2100      	movs	r1, #0
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f006 fe64 	bl	8009440 <HAL_PCDEx_LPM_Callback>
 8002778:	e002      	b.n	8002780 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f006 fbc8 	bl	8008f10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800278e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f004 f8f1 	bl	800697c <USB_ReadInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a4:	d112      	bne.n	80027cc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f006 fb84 	bl	8008ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 f8d3 	bl	800697c <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e0:	d121      	bne.n	8002826 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80027f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002816:	2101      	movs	r1, #1
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f006 fe11 	bl	8009440 <HAL_PCDEx_LPM_Callback>
 800281e:	e002      	b.n	8002826 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f006 fb4f 	bl	8008ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 f8a6 	bl	800697c <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	f040 80b5 	bne.w	80029a8 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2110      	movs	r1, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f9e5 	bl	8005c28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002862:	e046      	b.n	80028f2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002870:	461a      	mov	r2, r3
 8002872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002876:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	440a      	add	r2, r1
 800288e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028bc:	0151      	lsls	r1, r2, #5
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	440a      	add	r2, r1
 80028c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	3301      	adds	r3, #1
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3b3      	bcc.n	8002864 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800290e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002928:	f043 030b 	orr.w	r3, r3, #11
 800292c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293e:	f043 030b 	orr.w	r3, r3, #11
 8002942:	6453      	str	r3, [r2, #68]	; 0x44
 8002944:	e015      	b.n	8002972 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002958:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800295c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296c:	f043 030b 	orr.w	r3, r3, #11
 8002970:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002980:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002984:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f004 f8b6 	bl	8006b04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 ffe5 	bl	800697c <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029bc:	d124      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 f87b 	bl	8006abe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 f9a8 	bl	8005d22 <USB_GetDevSpeed>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681c      	ldr	r4, [r3, #0]
 80029de:	f001 fb87 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 80029e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	4620      	mov	r0, r4
 80029ee:	f002 fecf 	bl	8005790 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f006 fa47 	bl	8008e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 ffb5 	bl	800697c <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d10a      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f006 fa24 	bl	8008e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 0208 	and.w	r2, r2, #8
 8002a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 ffa0 	bl	800697c <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d122      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e014      	b.n	8002a82 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fadb 	bl	8003032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	3301      	adds	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3e5      	bcc.n	8002a58 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 ff73 	bl	800697c <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa0:	d13b      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	e02b      	b.n	8002b00 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3340      	adds	r3, #64	; 0x40
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d115      	bne.n	8002afa <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ace:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da12      	bge.n	8002afa <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	333f      	adds	r3, #63	; 0x3f
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa9c 	bl	8003032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	3301      	adds	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3ce      	bcc.n	8002aa8 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 ff2c 	bl	800697c <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2e:	d155      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b30:	2301      	movs	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
 8002b34:	e045      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d12e      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da2b      	bge.n	8002bbc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d121      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb8:	6053      	str	r3, [r2, #4]
            break;
 8002bba:	e007      	b.n	8002bcc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3b4      	bcc.n	8002b36 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fecb 	bl	800697c <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d10a      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f006 f9d8 	bl	8008fa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 feb5 	bl	800697c <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d115      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f006 f9c8 	bl	8008fc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	e000      	b.n	8002c48 <HAL_PCD_IRQHandler+0x920>
      return;
 8002c46:	bf00      	nop
    }
  }
}
 8002c48:	3734      	adds	r7, #52	; 0x34
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_SetAddress+0x1a>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e013      	b.n	8002c90 <HAL_PCD_SetAddress+0x42>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fe13 	bl	80068ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	70fb      	strb	r3, [r7, #3]
 8002caa:	460b      	mov	r3, r1
 8002cac:	803b      	strh	r3, [r7, #0]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da0f      	bge.n	8002cde <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	f003 020f 	and.w	r2, r3, #15
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	3338      	adds	r3, #56	; 0x38
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	705a      	strb	r2, [r3, #1]
 8002cdc:	e00f      	b.n	8002cfe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d0a:	883a      	ldrh	r2, [r7, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	78ba      	ldrb	r2, [r7, #2]
 8002d14:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d28:	78bb      	ldrb	r3, [r7, #2]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_EP_Open+0xaa>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00e      	b.n	8002d60 <HAL_PCD_EP_Open+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 f805 	bl	8005d60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da0f      	bge.n	8002d9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
 8002d9a:	e00f      	b.n	8002dbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	3304      	adds	r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_Close+0x6e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_Close+0x8c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 f843 	bl	8005e70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f003 020f 	and.w	r2, r3, #15
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f8e9 	bl	8006028 <USB_EPStartXfer>

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 f8b8 	bl	8006028 <USB_EPStartXfer>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d901      	bls.n	8002ee0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04e      	b.n	8002f7e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0f      	bge.n	8002f08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3338      	adds	r3, #56	; 0x38
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	705a      	strb	r2, [r3, #1]
 8002f06:	e00d      	b.n	8002f24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_SetStall+0x82>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e01c      	b.n	8002f7e <HAL_PCD_EP_SetStall+0xbc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fbd6 	bl	8006704 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f003 fdc8 	bl	8006b04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d901      	bls.n	8002fa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e042      	b.n	800302a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da0f      	bge.n	8002fcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00f      	b.n	8002fec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_PCD_EP_ClrStall+0x86>
 8003008:	2302      	movs	r3, #2
 800300a:	e00e      	b.n	800302a <HAL_PCD_EP_ClrStall+0xa4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fbe0 	bl	80067e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0c      	bge.n	8003060 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3338      	adds	r3, #56	; 0x38
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e00c      	b.n	800307a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	4618      	mov	r0, r3
 8003082:	f003 fa03 	bl	800648c <USB_EPStopXfer>
 8003086:	4603      	mov	r3, r0
 8003088:	72fb      	strb	r3, [r7, #11]

  return ret;
 800308a:	7afb      	ldrb	r3, [r7, #11]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	3338      	adds	r3, #56	; 0x38
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d901      	bls.n	80030cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e067      	b.n	800319c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d902      	bls.n	80030e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3303      	adds	r3, #3
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f0:	e026      	b.n	8003140 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3303      	adds	r3, #3
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68d9      	ldr	r1, [r3, #12]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	b29b      	uxth	r3, r3
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f003 fa5c 	bl	80065e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d809      	bhi.n	800316a <PCD_WriteEmptyTxFifo+0xd6>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800315e:	429a      	cmp	r2, r3
 8003160:	d203      	bcs.n	800316a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1c3      	bne.n	80030f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d811      	bhi.n	800319a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	2201      	movs	r2, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	43db      	mvns	r3, r3
 8003190:	6939      	ldr	r1, [r7, #16]
 8003192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003196:	4013      	ands	r3, r2
 8003198:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	333c      	adds	r3, #60	; 0x3c
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <PCD_EP_OutXfrComplete_int+0x98>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d124      	bne.n	8003224 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	e01a      	b.n	8003230 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	2320      	movs	r3, #32
 8003214:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f005 fdef 	bl	8008e00 <HAL_PCD_DataOutStageCallback>
 8003222:	e005      	b.n	8003230 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f005 fde8 	bl	8008e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	4f54310a 	.word	0x4f54310a

08003240 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	333c      	adds	r3, #60	; 0x3c
 8003258:	3304      	adds	r3, #4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <PCD_EP_OutSetupPacket_int+0x64>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d90e      	bls.n	8003294 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f005 fda1 	bl	8008ddc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	4f54300a 	.word	0x4f54300a

080032a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
 80032b4:	4613      	mov	r3, r2
 80032b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	0419      	lsls	r1, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
 80032d4:	e028      	b.n	8003328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e00d      	b.n	8003306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3340      	adds	r3, #64	; 0x40
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	3301      	adds	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	3b01      	subs	r3, #1
 800330c:	429a      	cmp	r2, r3
 800330e:	d3ec      	bcc.n	80032ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003310:	883b      	ldrh	r3, [r7, #0]
 8003312:	0418      	lsls	r0, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4302      	orrs	r2, r0
 8003320:	3340      	adds	r3, #64	; 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338a:	f043 0303 	orr.w	r3, r3, #3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40007000 	.word	0x40007000

080033c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000

080033dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d130      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d038      	beq.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2232      	movs	r2, #50	; 0x32
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9b      	lsrs	r3, r3, #18
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003420:	e002      	b.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b01      	subs	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d102      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f2      	bne.n	8003422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003448:	d110      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e00f      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d007      	beq.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000
 8003480:	20000000 	.word	0x20000000
 8003484:	431bde83 	.word	0x431bde83

08003488 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003496:	6053      	str	r3, [r2, #4]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40007000 	.word	0x40007000

080034a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80034b0:	f7fe f882 	bl	80015b8 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e063      	b.n	8003588 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd fe41 	bl	800115c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80034da:	f241 3188 	movw	r1, #5000	; 0x1388
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f858 	bl	8003594 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	2120      	movs	r1, #32
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f850 	bl	80035b0 <QSPI_WaitFlagStateUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d131      	bne.n	800357e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003524:	f023 0310 	bic.w	r3, r3, #16
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6852      	ldr	r2, [r2, #4]
 800352c:	0611      	lsls	r1, r2, #24
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68d2      	ldr	r2, [r2, #12]
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	430b      	orrs	r3, r1
 800353a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_QSPI_Init+0xe8>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6912      	ldr	r2, [r2, #16]
 800354a:	0411      	lsls	r1, r2, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6952      	ldr	r2, [r2, #20]
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6992      	ldr	r2, [r2, #24]
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	430b      	orrs	r3, r1
 800355e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003586:	7afb      	ldrb	r3, [r7, #11]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	ffe0f8fe 	.word	0xffe0f8fe

08003594 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035c0:	e01a      	b.n	80035f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d016      	beq.n	80035f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fd fff5 	bl	80015b8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00e      	b.n	8003616 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	429a      	cmp	r2, r3
 8003612:	d1d6      	bne.n	80035c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e3ca      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b97      	ldr	r3, [pc, #604]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b94      	ldr	r3, [pc, #592]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80e4 	beq.w	800381c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_RCC_OscConfig+0x4a>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	f040 808b 	bne.w	8003778 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 8087 	bne.w	8003778 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e3a2      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	4b82      	ldr	r3, [pc, #520]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_RCC_OscConfig+0x7c>
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369a:	e005      	b.n	80036a8 <HAL_RCC_OscConfig+0x88>
 800369c:	4b7c      	ldr	r3, [pc, #496]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d223      	bcs.n	80036f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fd55 	bl	8004160 <RCC_SetFlashLatencyFromMSIRange>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e383      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c0:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a72      	ldr	r2, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b70      	ldr	r3, [pc, #448]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	496d      	ldr	r1, [pc, #436]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	4968      	ldr	r1, [pc, #416]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e025      	b.n	8003740 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f4:	4b66      	ldr	r3, [pc, #408]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4960      	ldr	r1, [pc, #384]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003712:	4b5f      	ldr	r3, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	495b      	ldr	r1, [pc, #364]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd15 	bl	8004160 <RCC_SetFlashLatencyFromMSIRange>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e343      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003740:	f000 fc4a 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	4950      	ldr	r1, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x274>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <HAL_RCC_OscConfig+0x278>)
 800375e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <HAL_RCC_OscConfig+0x27c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd fed7 	bl	8001518 <HAL_InitTick>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d052      	beq.n	800381a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	e327      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a42      	ldr	r2, [pc, #264]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800378c:	f7fd ff14 	bl	80015b8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003794:	f7fd ff10 	bl	80015b8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e310      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a36      	ldr	r2, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4931      	ldr	r1, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d0:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	492c      	ldr	r1, [pc, #176]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	e01a      	b.n	800381c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fee1 	bl	80015b8 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037fa:	f7fd fedd 	bl	80015b8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e2dd      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x1da>
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800381a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d074      	beq.n	8003912 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x21a>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d10e      	bne.n	8003852 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d10b      	bne.n	8003852 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d064      	beq.n	8003910 <HAL_RCC_OscConfig+0x2f0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d160      	bne.n	8003910 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e2ba      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x24a>
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e026      	b.n	80038b8 <HAL_RCC_OscConfig+0x298>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_OscConfig+0x280>
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800387a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a02      	ldr	r2, [pc, #8]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x298>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	080095f0 	.word	0x080095f0
 8003898:	20000000 	.word	0x20000000
 800389c:	20000004 	.word	0x20000004
 80038a0:	4ba0      	ldr	r3, [pc, #640]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a9f      	ldr	r2, [pc, #636]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b9d      	ldr	r3, [pc, #628]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a9c      	ldr	r2, [pc, #624]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fe7a 	bl	80015b8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd fe76 	bl	80015b8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e276      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038da:	4b92      	ldr	r3, [pc, #584]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2a8>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fe66 	bl	80015b8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd fe62 	bl	80015b8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e262      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003902:	4b88      	ldr	r3, [pc, #544]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d0>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d060      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d005      	beq.n	8003930 <HAL_RCC_OscConfig+0x310>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d119      	bne.n	800395e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d116      	bne.n	800395e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003930:	4b7c      	ldr	r3, [pc, #496]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_OscConfig+0x328>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e23f      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	4973      	ldr	r1, [pc, #460]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	e040      	b.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d023      	beq.n	80039ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd fe21 	bl	80015b8 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397a:	f7fd fe1d 	bl	80015b8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e21d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398c:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	495f      	ldr	r1, [pc, #380]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	e018      	b.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5c      	ldr	r2, [pc, #368]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fd fdfd 	bl	80015b8 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fd fdf9 	bl	80015b8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1f9      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f0      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d03c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd fdd8 	bl	80015b8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fdd4 	bl	80015b8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1d4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <HAL_RCC_OscConfig+0x3ec>
 8003a2c:	e01b      	b.n	8003a66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fdbb 	bl	80015b8 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fd fdb7 	bl	80015b8 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1b7      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ef      	bne.n	8003a46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a6 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d118      	bne.n	8003ade <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aac:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fd7e 	bl	80015b8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fd fd7a 	bl	80015b8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e17a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4d8>
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af6:	e029      	b.n	8003b4c <HAL_RCC_OscConfig+0x52c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d115      	bne.n	8003b2c <HAL_RCC_OscConfig+0x50c>
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b20:	e014      	b.n	8003b4c <HAL_RCC_OscConfig+0x52c>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	4a9b      	ldr	r2, [pc, #620]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3c:	4b98      	ldr	r3, [pc, #608]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a97      	ldr	r2, [pc, #604]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fd30 	bl	80015b8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fd2c 	bl	80015b8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e12a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	4b8b      	ldr	r3, [pc, #556]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ed      	beq.n	8003b5c <HAL_RCC_OscConfig+0x53c>
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd fd19 	bl	80015b8 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fd15 	bl	80015b8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e113      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba0:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ed      	bne.n	8003b8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	4a79      	ldr	r2, [pc, #484]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80fe 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 80d0 	bne.w	8003d74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd4:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d130      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d127      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c14:	2a07      	cmp	r2, #7
 8003c16:	bf14      	ite	ne
 8003c18:	2201      	movne	r2, #1
 8003c1a:	2200      	moveq	r2, #0
 8003c1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d113      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	3b01      	subs	r3, #1
 8003c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d06e      	beq.n	8003d28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d069      	beq.n	8003d24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c50:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0ad      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c78:	f7fd fc9e 	bl	80015b8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fc9a 	bl	80015b8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e09a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c92:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9e:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <HAL_RCC_OscConfig+0x784>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb8:	0212      	lsls	r2, r2, #8
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc0:	0852      	lsrs	r2, r2, #1
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	0552      	lsls	r2, r2, #21
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ccc:	0852      	lsrs	r2, r2, #1
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	0652      	lsls	r2, r2, #25
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cd8:	0912      	lsrs	r2, r2, #4
 8003cda:	0452      	lsls	r2, r2, #17
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	4930      	ldr	r1, [pc, #192]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cfc:	f7fd fc5c 	bl	80015b8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd fc58 	bl	80015b8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e058      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d22:	e050      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e04f      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d148      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d4c:	f7fd fc34 	bl	80015b8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd fc30 	bl	80015b8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e030      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x734>
 8003d72:	e028      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d023      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd fc17 	bl	80015b8 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd fc13 	bl	80015b8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d905      	bls.n	8003da8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e013      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ec      	bne.n	8003d8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	4905      	ldr	r1, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCC_OscConfig+0x7b4>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
 8003dc0:	e001      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	feeefffc 	.word	0xfeeefffc

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0e7      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d910      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0207 	bic.w	r2, r3, #7
 8003e02:	4970      	ldr	r1, [pc, #448]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0cf      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d908      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4960      	ldr	r1, [pc, #384]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d04c      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	4b5a      	ldr	r3, [pc, #360]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d121      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0a6      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e76:	4b54      	ldr	r3, [pc, #336]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e09a      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e8e:	4b4e      	ldr	r3, [pc, #312]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e08e      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e086      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4943      	ldr	r1, [pc, #268]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fb7a 	bl	80015b8 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fd fb76 	bl	80015b8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e06e      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d208      	bcs.n	8003f1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	492b      	ldr	r1, [pc, #172]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d210      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0207 	bic.w	r2, r3, #7
 8003f34:	4923      	ldr	r1, [pc, #140]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e036      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8c:	f000 f824 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1f4>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1fc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd fab1 	bl	8001518 <HAL_InitTick>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fba:	7afb      	ldrb	r3, [r7, #11]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	080095f0 	.word	0x080095f0
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d121      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11e      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e005      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d102      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e004      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d101      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d134      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xa6>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d003      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xac>
 800407c:	e005      	b.n	800408a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004080:	617b      	str	r3, [r7, #20]
      break;
 8004082:	e005      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004086:	617b      	str	r3, [r7, #20]
      break;
 8004088:	e002      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	617b      	str	r3, [r7, #20]
      break;
 800408e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0e5b      	lsrs	r3, r3, #25
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	3301      	adds	r3, #1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d0:	69bb      	ldr	r3, [r7, #24]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08009608 	.word	0x08009608
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	08009600 	.word	0x08009600

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004138:	f7ff ffda 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0adb      	lsrs	r3, r3, #11
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08009600 	.word	0x08009600

08004160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800416c:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004178:	f7ff f922 	bl	80033c0 <HAL_PWREx_GetVoltageRange>
 800417c:	6178      	str	r0, [r7, #20]
 800417e:	e014      	b.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004198:	f7ff f912 	bl	80033c0 <HAL_PWREx_GetVoltageRange>
 800419c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d10b      	bne.n	80041ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d919      	bls.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2ba0      	cmp	r3, #160	; 0xa0
 80041bc:	d902      	bls.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041be:	2302      	movs	r3, #2
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e013      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c4:	2301      	movs	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	e010      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d902      	bls.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d0:	2303      	movs	r3, #3
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	e00a      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d102      	bne.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041dc:	2302      	movs	r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e004      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b70      	cmp	r3, #112	; 0x70
 80041e6:	d101      	bne.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 0207 	bic.w	r2, r3, #7
 80041f4:	4909      	ldr	r1, [pc, #36]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	40022000 	.word	0x40022000

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004228:	2300      	movs	r3, #0
 800422a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800422c:	2300      	movs	r3, #0
 800422e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	2b00      	cmp	r3, #0
 800423a:	d041      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004244:	d02a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800424a:	d824      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800424c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004250:	d008      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004256:	d81e      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004260:	d010      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004262:	e018      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004264:	4b86      	ldr	r3, [pc, #536]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a85      	ldr	r2, [pc, #532]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004270:	e015      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 facb 	bl	8004814 <RCCEx_PLLSAI1_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004282:	e00c      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3320      	adds	r3, #32
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fbb6 	bl	80049fc <RCCEx_PLLSAI2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	74fb      	strb	r3, [r7, #19]
      break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800429c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a4:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	4973      	ldr	r1, [pc, #460]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ba:	e001      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d041      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d4:	d02a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042da:	d824      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e0:	d008      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e6:	d81e      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f0:	d010      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f2:	e018      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f4:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a61      	ldr	r2, [pc, #388]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004300:	e015      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fa83 	bl	8004814 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004312:	e00c      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3320      	adds	r3, #32
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fb6e 	bl	80049fc <RCCEx_PLLSAI2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	74fb      	strb	r3, [r7, #19]
      break;
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800432c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	494f      	ldr	r1, [pc, #316]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800434a:	e001      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a0 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004378:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	4a40      	ldr	r2, [pc, #256]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
 8004384:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004390:	2301      	movs	r3, #1
 8004392:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3a      	ldr	r2, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a0:	f7fd f90a 	bl	80015b8 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043a6:	e009      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fd f906 	bl	80015b8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d902      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ef      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d15c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ce:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d019      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	4b21      	ldr	r3, [pc, #132]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	4a20      	ldr	r2, [pc, #128]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd f8c5 	bl	80015b8 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	e00b      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd f8c1 	bl	80015b8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d902      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	74fb      	strb	r3, [r7, #19]
            break;
 8004448:	e006      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ec      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7c7b      	ldrb	r3, [r7, #17]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b9e      	ldr	r3, [pc, #632]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4a9d      	ldr	r2, [pc, #628]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044aa:	4b98      	ldr	r3, [pc, #608]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f023 0203 	bic.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	4994      	ldr	r1, [pc, #592]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044cc:	4b8f      	ldr	r3, [pc, #572]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 020c 	bic.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	498c      	ldr	r1, [pc, #560]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ee:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4983      	ldr	r1, [pc, #524]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004510:	4b7e      	ldr	r3, [pc, #504]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	4972      	ldr	r1, [pc, #456]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004554:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	496a      	ldr	r1, [pc, #424]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004576:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	4961      	ldr	r1, [pc, #388]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004598:	4b5c      	ldr	r3, [pc, #368]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	4959      	ldr	r1, [pc, #356]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ba:	4b54      	ldr	r3, [pc, #336]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	4950      	ldr	r1, [pc, #320]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	4948      	ldr	r1, [pc, #288]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	493f      	ldr	r1, [pc, #252]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d028      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004620:	4b3a      	ldr	r3, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	4937      	ldr	r1, [pc, #220]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a31      	ldr	r2, [pc, #196]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	e011      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004656:	d10c      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8d8 	bl	8004814 <RCCEx_PLLSAI1_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d028      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	491f      	ldr	r1, [pc, #124]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469c:	d106      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a8:	60d3      	str	r3, [r2, #12]
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f8a9 	bl	8004814 <RCCEx_PLLSAI1_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e014      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f877 	bl	8004814 <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02f      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474e:	4928      	ldr	r1, [pc, #160]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475e:	d10d      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2102      	movs	r1, #2
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f854 	bl	8004814 <RCCEx_PLLSAI1_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d014      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	74bb      	strb	r3, [r7, #18]
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3320      	adds	r3, #32
 800478a:	2102      	movs	r1, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f935 	bl	80049fc <RCCEx_PLLSAI2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ba:	490d      	ldr	r1, [pc, #52]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047de:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000

08004814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004822:	4b75      	ldr	r3, [pc, #468]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800482e:	4b72      	ldr	r3, [pc, #456]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0203 	and.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d10d      	bne.n	800485a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
       ||
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004846:	4b6c      	ldr	r3, [pc, #432]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
       ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d047      	beq.n	80048ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	e044      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d018      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x86>
 8004868:	2b03      	cmp	r3, #3
 800486a:	d825      	bhi.n	80048b8 <RCCEx_PLLSAI1_Config+0xa4>
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <RCCEx_PLLSAI1_Config+0x62>
 8004870:	2b02      	cmp	r3, #2
 8004872:	d009      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x74>
 8004874:	e020      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004876:	4b60      	ldr	r3, [pc, #384]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11d      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004886:	e01a      	b.n	80048be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004898:	e013      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800489a:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a6:	4b54      	ldr	r3, [pc, #336]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b6:	e006      	b.n	80048c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	e004      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10d      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	3b01      	subs	r3, #1
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	430b      	orrs	r3, r1
 80048e4:	4944      	ldr	r1, [pc, #272]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d17d      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048f0:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fc:	f7fc fe5c 	bl	80015b8 <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004902:	e009      	b.n	8004918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004904:	f7fc fe58 	bl	80015b8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	73fb      	strb	r3, [r7, #15]
        break;
 8004916:	e005      	b.n	8004924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004918:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ef      	bne.n	8004904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d160      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d111      	bne.n	8004954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	0211      	lsls	r1, r2, #8
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	0912      	lsrs	r2, r2, #4
 8004948:	0452      	lsls	r2, r2, #17
 800494a:	430a      	orrs	r2, r1
 800494c:	492a      	ldr	r1, [pc, #168]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	610b      	str	r3, [r1, #16]
 8004952:	e027      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d112      	bne.n	8004980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004962:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6892      	ldr	r2, [r2, #8]
 800496a:	0211      	lsls	r1, r2, #8
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6912      	ldr	r2, [r2, #16]
 8004970:	0852      	lsrs	r2, r2, #1
 8004972:	3a01      	subs	r2, #1
 8004974:	0552      	lsls	r2, r2, #21
 8004976:	430a      	orrs	r2, r1
 8004978:	491f      	ldr	r1, [pc, #124]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]
 800497e:	e011      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004980:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6952      	ldr	r2, [r2, #20]
 8004996:	0852      	lsrs	r2, r2, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	0652      	lsls	r2, r2, #25
 800499c:	430a      	orrs	r2, r1
 800499e:	4916      	ldr	r1, [pc, #88]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fc fe02 	bl	80015b8 <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b6:	e009      	b.n	80049cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b8:	f7fc fdfe 	bl	80015b8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d902      	bls.n	80049cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ca:	e005      	b.n	80049d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ef      	beq.n	80049b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	4904      	ldr	r1, [pc, #16]	; (80049f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000

080049fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a16:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0203 	and.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10d      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
       ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a2e:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d047      	beq.n	8004ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	e044      	b.n	8004ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d018      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0x86>
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d825      	bhi.n	8004aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <RCCEx_PLLSAI2_Config+0x62>
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d009      	beq.n	8004a70 <RCCEx_PLLSAI2_Config+0x74>
 8004a5c:	e020      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a5e:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11d      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6e:	e01a      	b.n	8004aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a80:	e013      	b.n	8004aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a82:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a8e:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a9e:	e006      	b.n	8004aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa4:	e004      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e002      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	430b      	orrs	r3, r1
 8004acc:	4939      	ldr	r1, [pc, #228]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d167      	bne.n	8004ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ad8:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a35      	ldr	r2, [pc, #212]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae4:	f7fc fd68 	bl	80015b8 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aea:	e009      	b.n	8004b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aec:	f7fc fd64 	bl	80015b8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d902      	bls.n	8004b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	73fb      	strb	r3, [r7, #15]
        break;
 8004afe:	e005      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b00:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ef      	bne.n	8004aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d14a      	bne.n	8004ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b18:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	0211      	lsls	r1, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	0912      	lsrs	r2, r2, #4
 8004b30:	0452      	lsls	r2, r2, #17
 8004b32:	430a      	orrs	r2, r1
 8004b34:	491f      	ldr	r1, [pc, #124]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	614b      	str	r3, [r1, #20]
 8004b3a:	e011      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6892      	ldr	r2, [r2, #8]
 8004b4c:	0211      	lsls	r1, r2, #8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6912      	ldr	r2, [r2, #16]
 8004b52:	0852      	lsrs	r2, r2, #1
 8004b54:	3a01      	subs	r2, #1
 8004b56:	0652      	lsls	r2, r2, #25
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b60:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fc fd24 	bl	80015b8 <HAL_GetTick>
 8004b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b72:	e009      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b74:	f7fc fd20 	bl	80015b8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d902      	bls.n	8004b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	73fb      	strb	r3, [r7, #15]
          break;
 8004b86:	e005      	b.n	8004b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ef      	beq.n	8004b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e095      	b.n	8004cf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d009      	beq.n	8004bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc faea 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c30:	d902      	bls.n	8004c38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e002      	b.n	8004c3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c46:	d007      	beq.n	8004c58 <HAL_SPI_Init+0xa0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	ea42 0103 	orr.w	r1, r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	f003 0204 	and.w	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cd4:	ea42 0103 	orr.w	r1, r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e040      	b.n	8004d92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc faa3 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fae1 	bl	800530c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f826 	bl	8004d9c <UART_SetConfig>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e01b      	b.n	8004d92 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb60 	bl	8005450 <UART_CheckIdleState>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da0:	b08a      	sub	sp, #40	; 0x28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4ba4      	ldr	r3, [pc, #656]	; (800505c <UART_SetConfig+0x2c0>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a99      	ldr	r2, [pc, #612]	; (8005060 <UART_SetConfig+0x2c4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	4313      	orrs	r3, r2
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a90      	ldr	r2, [pc, #576]	; (8005064 <UART_SetConfig+0x2c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d126      	bne.n	8004e74 <UART_SetConfig+0xd8>
 8004e26:	4b90      	ldr	r3, [pc, #576]	; (8005068 <UART_SetConfig+0x2cc>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d81b      	bhi.n	8004e6c <UART_SetConfig+0xd0>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0xa0>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e65 	.word	0x08004e65
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e116      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e112      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e10e      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e10a      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e106      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a7c      	ldr	r2, [pc, #496]	; (800506c <UART_SetConfig+0x2d0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d138      	bne.n	8004ef0 <UART_SetConfig+0x154>
 8004e7e:	4b7a      	ldr	r3, [pc, #488]	; (8005068 <UART_SetConfig+0x2cc>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d82d      	bhi.n	8004ee8 <UART_SetConfig+0x14c>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0xf8>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004ee9 	.word	0x08004ee9
 8004e9c:	08004ee9 	.word	0x08004ee9
 8004ea0:	08004ee9 	.word	0x08004ee9
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ee9 	.word	0x08004ee9
 8004eac:	08004ee9 	.word	0x08004ee9
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ee9 	.word	0x08004ee9
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e0d8      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e0d4      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e0d0      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e0cc      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e0c8      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5e      	ldr	r2, [pc, #376]	; (8005070 <UART_SetConfig+0x2d4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d125      	bne.n	8004f46 <UART_SetConfig+0x1aa>
 8004efa:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <UART_SetConfig+0x2cc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d016      	beq.n	8004f36 <UART_SetConfig+0x19a>
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d818      	bhi.n	8004f3e <UART_SetConfig+0x1a2>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d00a      	beq.n	8004f26 <UART_SetConfig+0x18a>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d814      	bhi.n	8004f3e <UART_SetConfig+0x1a2>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <UART_SetConfig+0x182>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d008      	beq.n	8004f2e <UART_SetConfig+0x192>
 8004f1c:	e00f      	b.n	8004f3e <UART_SetConfig+0x1a2>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f24:	e0ad      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f26:	2302      	movs	r3, #2
 8004f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2c:	e0a9      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f34:	e0a5      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f36:	2308      	movs	r3, #8
 8004f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3c:	e0a1      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f3e:	2310      	movs	r3, #16
 8004f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f44:	e09d      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4a      	ldr	r2, [pc, #296]	; (8005074 <UART_SetConfig+0x2d8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d125      	bne.n	8004f9c <UART_SetConfig+0x200>
 8004f50:	4b45      	ldr	r3, [pc, #276]	; (8005068 <UART_SetConfig+0x2cc>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f5c:	d016      	beq.n	8004f8c <UART_SetConfig+0x1f0>
 8004f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f60:	d818      	bhi.n	8004f94 <UART_SetConfig+0x1f8>
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d00a      	beq.n	8004f7c <UART_SetConfig+0x1e0>
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d814      	bhi.n	8004f94 <UART_SetConfig+0x1f8>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <UART_SetConfig+0x1d8>
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d008      	beq.n	8004f84 <UART_SetConfig+0x1e8>
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x1f8>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e082      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e07e      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e07a      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e076      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e072      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a35      	ldr	r2, [pc, #212]	; (8005078 <UART_SetConfig+0x2dc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d12a      	bne.n	8004ffc <UART_SetConfig+0x260>
 8004fa6:	4b30      	ldr	r3, [pc, #192]	; (8005068 <UART_SetConfig+0x2cc>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb4:	d01a      	beq.n	8004fec <UART_SetConfig+0x250>
 8004fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fba:	d81b      	bhi.n	8004ff4 <UART_SetConfig+0x258>
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc0:	d00c      	beq.n	8004fdc <UART_SetConfig+0x240>
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d815      	bhi.n	8004ff4 <UART_SetConfig+0x258>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x238>
 8004fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd0:	d008      	beq.n	8004fe4 <UART_SetConfig+0x248>
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x258>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e052      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e04e      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e04a      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e046      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e042      	b.n	8005082 <UART_SetConfig+0x2e6>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <UART_SetConfig+0x2c4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d13a      	bne.n	800507c <UART_SetConfig+0x2e0>
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <UART_SetConfig+0x2cc>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005014:	d01a      	beq.n	800504c <UART_SetConfig+0x2b0>
 8005016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800501a:	d81b      	bhi.n	8005054 <UART_SetConfig+0x2b8>
 800501c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005020:	d00c      	beq.n	800503c <UART_SetConfig+0x2a0>
 8005022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005026:	d815      	bhi.n	8005054 <UART_SetConfig+0x2b8>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <UART_SetConfig+0x298>
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	d008      	beq.n	8005044 <UART_SetConfig+0x2a8>
 8005032:	e00f      	b.n	8005054 <UART_SetConfig+0x2b8>
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e022      	b.n	8005082 <UART_SetConfig+0x2e6>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e01e      	b.n	8005082 <UART_SetConfig+0x2e6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e01a      	b.n	8005082 <UART_SetConfig+0x2e6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e016      	b.n	8005082 <UART_SetConfig+0x2e6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	e012      	b.n	8005082 <UART_SetConfig+0x2e6>
 800505c:	efff69f3 	.word	0xefff69f3
 8005060:	40008000 	.word	0x40008000
 8005064:	40013800 	.word	0x40013800
 8005068:	40021000 	.word	0x40021000
 800506c:	40004400 	.word	0x40004400
 8005070:	40004800 	.word	0x40004800
 8005074:	40004c00 	.word	0x40004c00
 8005078:	40005000 	.word	0x40005000
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a9f      	ldr	r2, [pc, #636]	; (8005304 <UART_SetConfig+0x568>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d17a      	bne.n	8005182 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800508c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005090:	2b08      	cmp	r3, #8
 8005092:	d824      	bhi.n	80050de <UART_SetConfig+0x342>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x300>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050df 	.word	0x080050df
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050df 	.word	0x080050df
 80050ac:	080050cf 	.word	0x080050cf
 80050b0:	080050df 	.word	0x080050df
 80050b4:	080050df 	.word	0x080050df
 80050b8:	080050df 	.word	0x080050df
 80050bc:	080050d7 	.word	0x080050d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7ff f822 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80050c4:	61f8      	str	r0, [r7, #28]
        break;
 80050c6:	e010      	b.n	80050ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c8:	4b8f      	ldr	r3, [pc, #572]	; (8005308 <UART_SetConfig+0x56c>)
 80050ca:	61fb      	str	r3, [r7, #28]
        break;
 80050cc:	e00d      	b.n	80050ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ce:	f7fe ff83 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80050d2:	61f8      	str	r0, [r7, #28]
        break;
 80050d4:	e009      	b.n	80050ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050da:	61fb      	str	r3, [r7, #28]
        break;
 80050dc:	e005      	b.n	80050ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80fb 	beq.w	80052e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d305      	bcc.n	800510e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	429a      	cmp	r2, r3
 800510c:	d903      	bls.n	8005116 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005114:	e0e8      	b.n	80052e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2200      	movs	r2, #0
 800511a:	461c      	mov	r4, r3
 800511c:	4615      	mov	r5, r2
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	022b      	lsls	r3, r5, #8
 8005128:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800512c:	0222      	lsls	r2, r4, #8
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	6849      	ldr	r1, [r1, #4]
 8005132:	0849      	lsrs	r1, r1, #1
 8005134:	2000      	movs	r0, #0
 8005136:	4688      	mov	r8, r1
 8005138:	4681      	mov	r9, r0
 800513a:	eb12 0a08 	adds.w	sl, r2, r8
 800513e:	eb43 0b09 	adc.w	fp, r3, r9
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f838 	bl	80001c8 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005166:	d308      	bcc.n	800517a <UART_SetConfig+0x3de>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d204      	bcs.n	800517a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e0b6      	b.n	80052e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005180:	e0b2      	b.n	80052e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d15e      	bne.n	800524a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800518c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005190:	2b08      	cmp	r3, #8
 8005192:	d828      	bhi.n	80051e6 <UART_SetConfig+0x44a>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x400>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d7 	.word	0x080051d7
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051e7 	.word	0x080051e7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe ffa2 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e014      	b.n	80051f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe ffb4 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 80051cc:	61f8      	str	r0, [r7, #28]
        break;
 80051ce:	e010      	b.n	80051f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <UART_SetConfig+0x56c>)
 80051d2:	61fb      	str	r3, [r7, #28]
        break;
 80051d4:	e00d      	b.n	80051f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fe feff 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80051da:	61f8      	str	r0, [r7, #28]
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	61fb      	str	r3, [r7, #28]
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d077      	beq.n	80052e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005a      	lsls	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	441a      	add	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b0f      	cmp	r3, #15
 8005212:	d916      	bls.n	8005242 <UART_SetConfig+0x4a6>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d212      	bcs.n	8005242 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f023 030f 	bic.w	r3, r3, #15
 8005224:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	b29a      	uxth	r2, r3
 8005232:	8afb      	ldrh	r3, [r7, #22]
 8005234:	4313      	orrs	r3, r2
 8005236:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	8afa      	ldrh	r2, [r7, #22]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e052      	b.n	80052e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005248:	e04e      	b.n	80052e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800524e:	2b08      	cmp	r3, #8
 8005250:	d827      	bhi.n	80052a2 <UART_SetConfig+0x506>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x4bc>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800528d 	.word	0x0800528d
 8005264:	080052a3 	.word	0x080052a3
 8005268:	08005293 	.word	0x08005293
 800526c:	080052a3 	.word	0x080052a3
 8005270:	080052a3 	.word	0x080052a3
 8005274:	080052a3 	.word	0x080052a3
 8005278:	0800529b 	.word	0x0800529b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe ff44 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8005280:	61f8      	str	r0, [r7, #28]
        break;
 8005282:	e014      	b.n	80052ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fe ff56 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8005288:	61f8      	str	r0, [r7, #28]
        break;
 800528a:	e010      	b.n	80052ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <UART_SetConfig+0x56c>)
 800528e:	61fb      	str	r3, [r7, #28]
        break;
 8005290:	e00d      	b.n	80052ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe fea1 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8005296:	61f8      	str	r0, [r7, #28]
        break;
 8005298:	e009      	b.n	80052ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	61fb      	str	r3, [r7, #28]
        break;
 80052a0:	e005      	b.n	80052ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052ac:	bf00      	nop
    }

    if (pclk != 0U)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d019      	beq.n	80052e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	085a      	lsrs	r2, r3, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d909      	bls.n	80052e2 <UART_SetConfig+0x546>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d205      	bcs.n	80052e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e002      	b.n	80052e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	40008000 	.word	0x40008000
 8005308:	00f42400 	.word	0x00f42400

0800530c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01a      	beq.n	8005422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540a:	d10a      	bne.n	8005422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]
  }
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b098      	sub	sp, #96	; 0x60
 8005454:	af02      	add	r7, sp, #8
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005460:	f7fc f8aa 	bl	80015b8 <HAL_GetTick>
 8005464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d12e      	bne.n	80054d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	2200      	movs	r2, #0
 800547e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f88c 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d021      	beq.n	80054d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a2:	653b      	str	r3, [r7, #80]	; 0x50
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
 80054ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e062      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d149      	bne.n	8005574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f856 	bl	80055a0 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d03c      	beq.n	8005574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	623b      	str	r3, [r7, #32]
   return(result);
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 800551a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800551e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60fb      	str	r3, [r7, #12]
   return(result);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	64bb      	str	r3, [r7, #72]	; 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554c:	61fa      	str	r2, [r7, #28]
 800554e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	617b      	str	r3, [r7, #20]
   return(result);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e011      	b.n	8005598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3758      	adds	r7, #88	; 0x58
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	e049      	b.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d045      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fb fffd 	bl	80015b8 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e048      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d031      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d110      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f838 	bl	800566e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2208      	movs	r2, #8
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e029      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005620:	d111      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f81e 	bl	800566e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e00f      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4013      	ands	r3, r2
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	429a      	cmp	r2, r3
 8005662:	d0a6      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800566e:	b480      	push	{r7}
 8005670:	b095      	sub	sp, #84	; 0x54
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
 8005696:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800569a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3308      	adds	r3, #8
 80056ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d118      	bne.n	8005716 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 0310 	bic.w	r3, r3, #16
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	613b      	str	r3, [r7, #16]
   return(result);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	669a      	str	r2, [r3, #104]	; 0x68
}
 800572a:	bf00      	nop
 800572c:	3754      	adds	r7, #84	; 0x54
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005736:	b084      	sub	sp, #16
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	f107 001c 	add.w	r0, r7, #28
 8005744:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fa1d 	bl	8006b94 <USB_CoreReset>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
 8005770:	e005      	b.n	800577e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578a:	b004      	add	sp, #16
 800578c:	4770      	bx	lr
	...

08005790 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d165      	bne.n	8005870 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <USB_SetTurnaroundTime+0x110>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d906      	bls.n	80057ba <USB_SetTurnaroundTime+0x2a>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a3d      	ldr	r2, [pc, #244]	; (80058a4 <USB_SetTurnaroundTime+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d202      	bcs.n	80057ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057b4:	230f      	movs	r3, #15
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e05c      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <USB_SetTurnaroundTime+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d306      	bcc.n	80057d0 <USB_SetTurnaroundTime+0x40>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <USB_SetTurnaroundTime+0x118>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d202      	bcs.n	80057d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057ca:	230e      	movs	r3, #14
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e051      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <USB_SetTurnaroundTime+0x118>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d306      	bcc.n	80057e6 <USB_SetTurnaroundTime+0x56>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a34      	ldr	r2, [pc, #208]	; (80058ac <USB_SetTurnaroundTime+0x11c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d202      	bcs.n	80057e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057e0:	230d      	movs	r3, #13
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e046      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a30      	ldr	r2, [pc, #192]	; (80058ac <USB_SetTurnaroundTime+0x11c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d306      	bcc.n	80057fc <USB_SetTurnaroundTime+0x6c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <USB_SetTurnaroundTime+0x120>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d802      	bhi.n	80057fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057f6:	230c      	movs	r3, #12
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e03b      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <USB_SetTurnaroundTime+0x120>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d906      	bls.n	8005812 <USB_SetTurnaroundTime+0x82>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <USB_SetTurnaroundTime+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d802      	bhi.n	8005812 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800580c:	230b      	movs	r3, #11
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e030      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <USB_SetTurnaroundTime+0x124>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d906      	bls.n	8005828 <USB_SetTurnaroundTime+0x98>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <USB_SetTurnaroundTime+0x128>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005822:	230a      	movs	r3, #10
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e025      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <USB_SetTurnaroundTime+0x128>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d906      	bls.n	800583e <USB_SetTurnaroundTime+0xae>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a22      	ldr	r2, [pc, #136]	; (80058bc <USB_SetTurnaroundTime+0x12c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d202      	bcs.n	800583e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005838:	2309      	movs	r3, #9
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e01a      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <USB_SetTurnaroundTime+0x12c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d306      	bcc.n	8005854 <USB_SetTurnaroundTime+0xc4>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <USB_SetTurnaroundTime+0x130>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d802      	bhi.n	8005854 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800584e:	2308      	movs	r3, #8
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e00f      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a1a      	ldr	r2, [pc, #104]	; (80058c0 <USB_SetTurnaroundTime+0x130>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d906      	bls.n	800586a <USB_SetTurnaroundTime+0xda>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <USB_SetTurnaroundTime+0x134>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d202      	bcs.n	800586a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005864:	2307      	movs	r3, #7
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e004      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800586a:	2306      	movs	r3, #6
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e001      	b.n	8005874 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005870:	2309      	movs	r3, #9
 8005872:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	029b      	lsls	r3, r3, #10
 8005888:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800588c:	431a      	orrs	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	00d8acbf 	.word	0x00d8acbf
 80058a4:	00e4e1c0 	.word	0x00e4e1c0
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	01067380 	.word	0x01067380
 80058b0:	011a499f 	.word	0x011a499f
 80058b4:	01312cff 	.word	0x01312cff
 80058b8:	014ca43f 	.word	0x014ca43f
 80058bc:	016e3600 	.word	0x016e3600
 80058c0:	01a6ab1f 	.word	0x01a6ab1f
 80058c4:	01e84800 	.word	0x01e84800

080058c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f043 0201 	orr.w	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d115      	bne.n	800595a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800593a:	2001      	movs	r0, #1
 800593c:	f7fb fe48 	bl	80015d0 <HAL_Delay>
      ms++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 f8ab 	bl	8006aa2 <USB_GetMode>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d01e      	beq.n	8005990 <USB_SetCurrentMode+0x84>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b31      	cmp	r3, #49	; 0x31
 8005956:	d9f0      	bls.n	800593a <USB_SetCurrentMode+0x2e>
 8005958:	e01a      	b.n	8005990 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d115      	bne.n	800598c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800596c:	2001      	movs	r0, #1
 800596e:	f7fb fe2f 	bl	80015d0 <HAL_Delay>
      ms++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 f892 	bl	8006aa2 <USB_GetMode>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <USB_SetCurrentMode+0x84>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b31      	cmp	r3, #49	; 0x31
 8005988:	d9f0      	bls.n	800596c <USB_SetCurrentMode+0x60>
 800598a:	e001      	b.n	8005990 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e005      	b.n	800599c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b32      	cmp	r3, #50	; 0x32
 8005994:	d101      	bne.n	800599a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a4:	b084      	sub	sp, #16
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e009      	b.n	80059d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3301      	adds	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b0e      	cmp	r3, #14
 80059dc:	d9f2      	bls.n	80059c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11c      	bne.n	8005a1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e005      	b.n	8005a2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a36:	2103      	movs	r1, #3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f959 	bl	8005cf0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a3e:	2110      	movs	r1, #16
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8f1 	bl	8005c28 <USB_FlushTxFifo>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f91d 	bl	8005c90 <USB_FlushRxFifo>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e043      	b.n	8005b12 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa0:	d118      	bne.n	8005ad4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e013      	b.n	8005ae6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e008      	b.n	8005ae6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	461a      	mov	r2, r3
 8005af4:	2300      	movs	r3, #0
 8005af6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3b7      	bcc.n	8005a8a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	e043      	b.n	8005ba8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b36:	d118      	bne.n	8005b6a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e013      	b.n	8005b7c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e008      	b.n	8005b7c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ba0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d3b7      	bcc.n	8005b20 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f043 0210 	orr.w	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <USB_DevInit+0x280>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f043 0208 	orr.w	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c1e:	b004      	add	sp, #16
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	803c3800 	.word	0x803c3800

08005c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <USB_FlushTxFifo+0x64>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e01b      	b.n	8005c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	daf2      	bge.n	8005c36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	019b      	lsls	r3, r3, #6
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <USB_FlushTxFifo+0x64>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d0f0      	beq.n	8005c60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	00030d40 	.word	0x00030d40

08005c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <USB_FlushRxFifo+0x5c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e018      	b.n	8005ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	daf2      	bge.n	8005c9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a08      	ldr	r2, [pc, #32]	; (8005cec <USB_FlushRxFifo+0x5c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e006      	b.n	8005ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d0f0      	beq.n	8005cc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	00030d40 	.word	0x00030d40

08005cf0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b087      	sub	sp, #28
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0306 	and.w	r3, r3, #6
 8005d3a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d002      	beq.n	8005d48 <USB_GetDevSpeed+0x26>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b06      	cmp	r3, #6
 8005d46:	d102      	bne.n	8005d4e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	75fb      	strb	r3, [r7, #23]
 8005d4c:	e001      	b.n	8005d52 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005d4e:	230f      	movs	r3, #15
 8005d50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d13a      	bne.n	8005df2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	68f9      	ldr	r1, [r7, #12]
 8005d96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d155      	bne.n	8005e60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	791b      	ldrb	r3, [r3, #4]
 8005dce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	059b      	lsls	r3, r3, #22
 8005dd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e036      	b.n	8005e60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11a      	bne.n	8005e60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	791b      	ldrb	r3, [r3, #4]
 8005e44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e46:	430b      	orrs	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d161      	bne.n	8005f50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea2:	d11f      	bne.n	8005ee4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ec2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f04:	4013      	ands	r3, r2
 8005f06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	2101      	movs	r1, #1
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	43db      	mvns	r3, r3
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	0159      	lsls	r1, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	440b      	add	r3, r1
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	4619      	mov	r1, r3
 8005f48:	4b35      	ldr	r3, [pc, #212]	; (8006020 <USB_DeactivateEndpoint+0x1b0>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
 8005f4e:	e060      	b.n	8006012 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f66:	d11f      	bne.n	8005fa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc8:	4013      	ands	r3, r2
 8005fca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fec:	4013      	ands	r3, r2
 8005fee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0159      	lsls	r1, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	440b      	add	r3, r1
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	4619      	mov	r1, r3
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <USB_DeactivateEndpoint+0x1b4>)
 800600e:	4013      	ands	r3, r2
 8006010:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	ec337800 	.word	0xec337800
 8006024:	eff37800 	.word	0xeff37800

08006028 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 8128 	bne.w	8006296 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d132      	bne.n	80060b4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800606c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ac:	0cdb      	lsrs	r3, r3, #19
 80060ae:	04db      	lsls	r3, r3, #19
 80060b0:	6113      	str	r3, [r2, #16]
 80060b2:	e092      	b.n	80061da <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	0cdb      	lsrs	r3, r3, #19
 80060d0:	04db      	lsls	r3, r3, #19
 80060d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11a      	bne.n	8006134 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d903      	bls.n	8006112 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006130:	6113      	str	r3, [r2, #16]
 8006132:	e01b      	b.n	800616c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6919      	ldr	r1, [r3, #16]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	440b      	add	r3, r1
 800614c:	1e59      	subs	r1, r3, #1
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	fbb1 f3f3 	udiv	r3, r1, r3
 8006156:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006158:	4b8d      	ldr	r3, [pc, #564]	; (8006390 <USB_EPStartXfer+0x368>)
 800615a:	400b      	ands	r3, r1
 800615c:	6939      	ldr	r1, [r7, #16]
 800615e:	0148      	lsls	r0, r1, #5
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	4401      	add	r1, r0
 8006164:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006168:	4313      	orrs	r3, r2
 800616a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006182:	6939      	ldr	r1, [r7, #16]
 8006184:	0148      	lsls	r0, r1, #5
 8006186:	6979      	ldr	r1, [r7, #20]
 8006188:	4401      	add	r1, r0
 800618a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d11f      	bne.n	80061da <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	791b      	ldrb	r3, [r3, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d015      	beq.n	800622e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8139 	beq.w	800647e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f303 	lsl.w	r3, r1, r3
 8006222:	6979      	ldr	r1, [r7, #20]
 8006224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006228:	4313      	orrs	r3, r2
 800622a:	634b      	str	r3, [r1, #52]	; 0x34
 800622c:	e127      	b.n	800647e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d110      	bne.n	8006260 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e00f      	b.n	8006280 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800627e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68d9      	ldr	r1, [r3, #12]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781a      	ldrb	r2, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	b29b      	uxth	r3, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9a6 	bl	80065e0 <USB_WritePacket>
 8006294:	e0f3      	b.n	800647e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b0:	0cdb      	lsrs	r3, r3, #19
 80062b2:	04db      	lsls	r3, r3, #19
 80062b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062d8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d12f      	bne.n	8006340 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630e:	6939      	ldr	r1, [r7, #16]
 8006310:	0148      	lsls	r0, r1, #5
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	4401      	add	r1, r0
 8006316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800631a:	4313      	orrs	r3, r2
 800631c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800633c:	6113      	str	r3, [r2, #16]
 800633e:	e061      	b.n	8006404 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d125      	bne.n	8006394 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	0148      	lsls	r0, r1, #5
 8006362:	6979      	ldr	r1, [r7, #20]
 8006364:	4401      	add	r1, r0
 8006366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800636a:	4313      	orrs	r3, r2
 800636c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800638c:	6113      	str	r3, [r2, #16]
 800638e:	e039      	b.n	8006404 <USB_EPStartXfer+0x3dc>
 8006390:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4413      	add	r3, r2
 800639e:	1e5a      	subs	r2, r3, #1
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	89fa      	ldrh	r2, [r7, #14]
 80063b0:	fb03 f202 	mul.w	r2, r3, r2
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	89fb      	ldrh	r3, [r7, #14]
 80063c8:	04d9      	lsls	r1, r3, #19
 80063ca:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <USB_EPStartXfer+0x460>)
 80063cc:	400b      	ands	r3, r1
 80063ce:	6939      	ldr	r1, [r7, #16]
 80063d0:	0148      	lsls	r0, r1, #5
 80063d2:	6979      	ldr	r1, [r7, #20]
 80063d4:	4401      	add	r1, r0
 80063d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063da:	4313      	orrs	r3, r2
 80063dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f4:	6939      	ldr	r1, [r7, #16]
 80063f6:	0148      	lsls	r0, r1, #5
 80063f8:	6979      	ldr	r1, [r7, #20]
 80063fa:	4401      	add	r1, r0
 80063fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006400:	4313      	orrs	r3, r2
 8006402:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d128      	bne.n	800645e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	2b00      	cmp	r3, #0
 800641a:	d110      	bne.n	800643e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e00f      	b.n	800645e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800647c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	1ff80000 	.word	0x1ff80000

0800648c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d14a      	bne.n	8006540 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c2:	f040 8086 	bne.w	80065d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f242 7210 	movw	r2, #10000	; 0x2710
 800651a:	4293      	cmp	r3, r2
 800651c:	d902      	bls.n	8006524 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
          break;
 8006522:	e056      	b.n	80065d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653c:	d0e7      	beq.n	800650e <USB_EPStopXfer+0x82>
 800653e:	e048      	b.n	80065d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006558:	d13b      	bne.n	80065d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	7812      	ldrb	r2, [r2, #0]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800657c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d902      	bls.n	80065b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
          break;
 80065b6:	e00c      	b.n	80065d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d0e7      	beq.n	80065a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b089      	sub	sp, #36	; 0x24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4611      	mov	r1, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	460b      	mov	r3, r1
 80065f0:	71fb      	strb	r3, [r7, #7]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80065fe:	88bb      	ldrh	r3, [r7, #4]
 8006600:	3303      	adds	r3, #3
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	e018      	b.n	800663e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	031a      	lsls	r2, r3, #12
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4413      	add	r3, r2
 8006614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006618:	461a      	mov	r2, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	3301      	adds	r3, #1
 8006636:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	3301      	adds	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d3e2      	bcc.n	800660c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3724      	adds	r7, #36	; 0x24
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	; 0x2c
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	089b      	lsrs	r3, r3, #2
 800666e:	b29b      	uxth	r3, r3
 8006670:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e014      	b.n	80066aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	601a      	str	r2, [r3, #0]
    pDest++;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	3301      	adds	r3, #1
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	3301      	adds	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	3301      	adds	r3, #1
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	3301      	adds	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	3301      	adds	r3, #1
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3e6      	bcc.n	8006680 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066b2:	8bfb      	ldrh	r3, [r7, #30]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01e      	beq.n	80066f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c2:	461a      	mov	r2, r3
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	701a      	strb	r2, [r3, #0]
      i++;
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	3301      	adds	r3, #1
 80066e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066ea:	8bfb      	ldrh	r3, [r7, #30]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066f0:	8bfb      	ldrh	r3, [r7, #30]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ea      	bne.n	80066cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	372c      	adds	r7, #44	; 0x2c
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d12c      	bne.n	800677a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	db12      	blt.n	8006758 <USB_EPSetStall+0x54>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006756:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e02b      	b.n	80067d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db12      	blt.n	80067b2 <USB_EPSetStall+0xae>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00f      	beq.n	80067b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800681a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	791b      	ldrb	r3, [r3, #4]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d003      	beq.n	800682c <USB_EPClearStall+0x4c>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	791b      	ldrb	r3, [r3, #4]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d138      	bne.n	800689e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e027      	b.n	800689e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800686c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	791b      	ldrb	r3, [r3, #4]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d003      	beq.n	800687e <USB_EPClearStall+0x9e>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d10f      	bne.n	800689e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068e0:	68f9      	ldr	r1, [r7, #12]
 80068e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e6:	4313      	orrs	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006926:	f023 0302 	bic.w	r3, r3, #2
 800692a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006968:	f043 0302 	orr.w	r3, r3, #2
 800696c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4013      	ands	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006994:	68fb      	ldr	r3, [r7, #12]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	0c1b      	lsrs	r3, r3, #16
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	b29b      	uxth	r3, r3
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	4013      	ands	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a38:	68bb      	ldr	r3, [r7, #8]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	fa22 f303 	lsr.w	r3, r2, r3
 8006a76:	01db      	lsls	r3, r3, #7
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4013      	ands	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a94:	68bb      	ldr	r3, [r7, #8]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0301 	and.w	r3, r3, #1
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	333c      	adds	r3, #60	; 0x3c
 8006b16:	3304      	adds	r3, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <USB_EP0_OutStart+0x8c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d90a      	bls.n	8006b3a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b34:	d101      	bne.n	8006b3a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e024      	b.n	8006b84 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b68:	f043 0318 	orr.w	r3, r3, #24
 8006b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b80:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	4f54300a 	.word	0x4f54300a

08006b94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <USB_CoreReset+0x64>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e01b      	b.n	8006bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	daf2      	bge.n	8006ba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <USB_CoreReset+0x64>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e006      	b.n	8006bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d0f0      	beq.n	8006bca <USB_CoreReset+0x36>

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	00030d40 	.word	0x00030d40

08006bfc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006c08:	201c      	movs	r0, #28
 8006c0a:	f002 fc67 	bl	80094dc <USBD_static_malloc>
 8006c0e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	; 0xb0
 8006c20:	2100      	movs	r1, #0
 8006c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c26:	2302      	movs	r3, #2
 8006c28:	e08a      	b.n	8006d40 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	32b0      	adds	r2, #176	; 0xb0
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	32b0      	adds	r2, #176	; 0xb0
 8006c44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7c1b      	ldrb	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11b      	bne.n	8006c8e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c56:	4b3c      	ldr	r3, [pc, #240]	; (8006d48 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	3326      	adds	r3, #38	; 0x26
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <USBD_CUSTOM_HID_Init+0x150>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 020f 	and.w	r2, r3, #15
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006c88:	2205      	movs	r2, #5
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e01a      	b.n	8006cc4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c8e:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <USBD_CUSTOM_HID_Init+0x14c>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3326      	adds	r3, #38	; 0x26
 8006ca4:	2205      	movs	r2, #5
 8006ca6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <USBD_CUSTOM_HID_Init+0x150>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006cc4:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <USBD_CUSTOM_HID_Init+0x14c>)
 8006cc6:	7819      	ldrb	r1, [r3, #0]
 8006cc8:	2302      	movs	r3, #2
 8006cca:	2203      	movs	r2, #3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f002 fa05 	bl	80090dc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <USBD_CUSTOM_HID_Init+0x14c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 020f 	and.w	r2, r3, #15
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	3324      	adds	r3, #36	; 0x24
 8006ce8:	2201      	movs	r2, #1
 8006cea:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006cec:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <USBD_CUSTOM_HID_Init+0x150>)
 8006cee:	7819      	ldrb	r1, [r3, #0]
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f002 f9f1 	bl	80090dc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <USBD_CUSTOM_HID_Init+0x150>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d12:	2201      	movs	r2, #1
 8006d14:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	33b0      	adds	r3, #176	; 0xb0
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <USBD_CUSTOM_HID_Init+0x150>)
 8006d32:	7819      	ldrb	r1, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	2306      	movs	r3, #6
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f002 fb49 	bl	80093d0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000086 	.word	0x20000086
 8006d4c:	20000087 	.word	0x20000087

08006d50 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006d5c:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f002 f9f8 	bl	8009158 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006d68:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006d82:	4b2e      	ldr	r3, [pc, #184]	; (8006e3c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3326      	adds	r3, #38	; 0x26
 8006d98:	2200      	movs	r2, #0
 8006d9a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006d9c:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 f9d8 	bl	8009158 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006dc4:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ddc:	2200      	movs	r2, #0
 8006dde:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01f      	beq.n	8006e32 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	33b0      	adds	r3, #176	; 0xb0
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	32b0      	adds	r2, #176	; 0xb0
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f002 fb6f 	bl	80094f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	; 0xb0
 8006e24:	2100      	movs	r1, #0
 8006e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000086 	.word	0x20000086
 8006e40:	20000087 	.word	0x20000087

08006e44 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32b0      	adds	r2, #176	; 0xb0
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e0f8      	b.n	800706a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d056      	beq.n	8006f32 <USBD_CUSTOM_HID_Setup+0xee>
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	f040 80e8 	bne.w	800705a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	2b09      	cmp	r3, #9
 8006e92:	d846      	bhi.n	8006f22 <USBD_CUSTOM_HID_Setup+0xde>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <USBD_CUSTOM_HID_Setup+0x58>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006f23 	.word	0x08006f23
 8006ea8:	08006f23 	.word	0x08006f23
 8006eac:	08006f23 	.word	0x08006f23
 8006eb0:	08006f23 	.word	0x08006f23
 8006eb4:	08006f23 	.word	0x08006f23
 8006eb8:	08006f05 	.word	0x08006f05
 8006ebc:	08006ee3 	.word	0x08006ee3
 8006ec0:	08006ec5 	.word	0x08006ec5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	885b      	ldrh	r3, [r3, #2]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	609a      	str	r2, [r3, #8]
          break;
 8006ed0:	e02e      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fcd0 	bl	8008880 <USBD_CtlSendData>
          break;
 8006ee0:	e026      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	60da      	str	r2, [r3, #12]
          break;
 8006ef2:	e01d      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fcbf 	bl	8008880 <USBD_CtlSendData>
          break;
 8006f02:	e015      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2201      	movs	r2, #1
 8006f08:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006f0a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	88db      	ldrh	r3, [r3, #6]
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	bf28      	it	cs
 8006f14:	2306      	movcs	r3, #6
 8006f16:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fcdc 	bl	80088d8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006f20:	e006      	b.n	8006f30 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fc3a 	bl	800879e <USBD_CtlError>
          ret = USBD_FAIL;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2e:	bf00      	nop
      }
      break;
 8006f30:	e09a      	b.n	8007068 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b0b      	cmp	r3, #11
 8006f38:	f200 8086 	bhi.w	8007048 <USBD_CUSTOM_HID_Setup+0x204>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <USBD_CUSTOM_HID_Setup+0x100>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f75 	.word	0x08006f75
 8006f48:	08007057 	.word	0x08007057
 8006f4c:	08007049 	.word	0x08007049
 8006f50:	08007049 	.word	0x08007049
 8006f54:	08007049 	.word	0x08007049
 8006f58:	08007049 	.word	0x08007049
 8006f5c:	08006f9f 	.word	0x08006f9f
 8006f60:	08007049 	.word	0x08007049
 8006f64:	08007049 	.word	0x08007049
 8006f68:	08007049 	.word	0x08007049
 8006f6c:	08006ff7 	.word	0x08006ff7
 8006f70:	08007021 	.word	0x08007021
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d107      	bne.n	8006f90 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f80:	f107 030e 	add.w	r3, r7, #14
 8006f84:	2202      	movs	r2, #2
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fc79 	bl	8008880 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f8e:	e063      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fc03 	bl	800879e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f9c:	e05c      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	885b      	ldrh	r3, [r3, #2]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b22      	cmp	r3, #34	; 0x22
 8006fa8:	d110      	bne.n	8006fcc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b1d      	cmp	r3, #29
 8006fb0:	bf28      	it	cs
 8006fb2:	231d      	movcs	r3, #29
 8006fb4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	33b0      	adds	r3, #176	; 0xb0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e00d      	b.n	8006fe8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b21      	cmp	r3, #33	; 0x21
 8006fd6:	d107      	bne.n	8006fe8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006fd8:	4b26      	ldr	r3, [pc, #152]	; (8007074 <USBD_CUSTOM_HID_Setup+0x230>)
 8006fda:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	88db      	ldrh	r3, [r3, #6]
 8006fe0:	2b09      	cmp	r3, #9
 8006fe2:	bf28      	it	cs
 8006fe4:	2309      	movcs	r3, #9
 8006fe6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fe8:	8bfb      	ldrh	r3, [r7, #30]
 8006fea:	461a      	mov	r2, r3
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fc46 	bl	8008880 <USBD_CtlSendData>
          break;
 8006ff4:	e030      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3310      	adds	r3, #16
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fc38 	bl	8008880 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007010:	e022      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fbc2 	bl	800879e <USBD_CtlError>
            ret = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	75fb      	strb	r3, [r7, #23]
          break;
 800701e:	e01b      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d106      	bne.n	800703a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007038:	e00e      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fbae 	bl	800879e <USBD_CtlError>
            ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	75fb      	strb	r3, [r7, #23]
          break;
 8007046:	e007      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fba7 	bl	800879e <USBD_CtlError>
          ret = USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	75fb      	strb	r3, [r7, #23]
          break;
 8007054:	e000      	b.n	8007058 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8007056:	bf00      	nop
      }
      break;
 8007058:	e006      	b.n	8007068 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fb9e 	bl	800879e <USBD_CtlError>
      ret = USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	bf00      	nop
  }
  return (uint8_t)ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000070 	.word	0x20000070

08007078 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	32b0      	adds	r2, #176	; 0xb0
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800709c:	2303      	movs	r3, #3
 800709e:	e017      	b.n	80070d0 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d110      	bne.n	80070ce <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	7e1b      	ldrb	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2201      	movs	r2, #1
 80070b8:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <USBD_CUSTOM_HID_SendReport+0x60>)
 80070bc:	7819      	ldrb	r1, [r3, #0]
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f002 f94c 	bl	8009360 <USBD_LL_Transmit>
 80070c8:	e001      	b.n	80070ce <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000086 	.word	0x20000086

080070dc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80070e4:	2181      	movs	r1, #129	; 0x81
 80070e6:	4815      	ldr	r0, [pc, #84]	; (800713c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80070e8:	f000 fcf7 	bl	8007ada <USBD_GetEpDesc>
 80070ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80070ee:	2101      	movs	r1, #1
 80070f0:	4812      	ldr	r0, [pc, #72]	; (800713c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80070f2:	f000 fcf2 	bl	8007ada <USBD_GetEpDesc>
 80070f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f042 0202 	orr.w	r2, r2, #2
 8007106:	711a      	strb	r2, [r3, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2205      	movs	r2, #5
 8007110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	f042 0202 	orr.w	r2, r2, #2
 8007120:	711a      	strb	r2, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2205      	movs	r2, #5
 800712a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2229      	movs	r2, #41	; 0x29
 8007130:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007132:	4b02      	ldr	r3, [pc, #8]	; (800713c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000044 	.word	0x20000044

08007140 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007148:	2181      	movs	r1, #129	; 0x81
 800714a:	4815      	ldr	r0, [pc, #84]	; (80071a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800714c:	f000 fcc5 	bl	8007ada <USBD_GetEpDesc>
 8007150:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007152:	2101      	movs	r1, #1
 8007154:	4812      	ldr	r0, [pc, #72]	; (80071a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007156:	f000 fcc0 	bl	8007ada <USBD_GetEpDesc>
 800715a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f042 0202 	orr.w	r2, r2, #2
 800716a:	711a      	strb	r2, [r3, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2205      	movs	r2, #5
 8007174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2200      	movs	r2, #0
 8007180:	f042 0202 	orr.w	r2, r2, #2
 8007184:	711a      	strb	r2, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2205      	movs	r2, #5
 800718e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2229      	movs	r2, #41	; 0x29
 8007194:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007196:	4b02      	ldr	r3, [pc, #8]	; (80071a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000044 	.word	0x20000044

080071a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80071ac:	2181      	movs	r1, #129	; 0x81
 80071ae:	4815      	ldr	r0, [pc, #84]	; (8007204 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80071b0:	f000 fc93 	bl	8007ada <USBD_GetEpDesc>
 80071b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80071b6:	2101      	movs	r1, #1
 80071b8:	4812      	ldr	r0, [pc, #72]	; (8007204 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80071ba:	f000 fc8e 	bl	8007ada <USBD_GetEpDesc>
 80071be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f042 0202 	orr.w	r2, r2, #2
 80071ce:	711a      	strb	r2, [r3, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2205      	movs	r2, #5
 80071d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f042 0202 	orr.w	r2, r2, #2
 80071e8:	711a      	strb	r2, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2205      	movs	r2, #5
 80071f2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2229      	movs	r2, #41	; 0x29
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80071fa:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000044 	.word	0x20000044

08007208 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32b0      	adds	r2, #176	; 0xb0
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	2200      	movs	r2, #0
 8007224:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32b0      	adds	r2, #176	; 0xb0
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	e017      	b.n	8007286 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	32b0      	adds	r2, #176	; 0xb0
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	33b0      	adds	r3, #176	; 0xb0
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	7810      	ldrb	r0, [r2, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	7852      	ldrb	r2, [r2, #1]
 8007280:	4611      	mov	r1, r2
 8007282:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	32b0      	adds	r2, #176	; 0xb0
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e016      	b.n	80072de <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d111      	bne.n	80072dc <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	33b0      	adds	r3, #176	; 0xb0
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	7810      	ldrb	r0, [r2, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	7852      	ldrb	r2, [r2, #1]
 80072d2:	4611      	mov	r1, r2
 80072d4:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	220a      	movs	r2, #10
 80072f4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80072f6:	4b03      	ldr	r3, [pc, #12]	; (8007304 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	2000007c 	.word	0x2000007c

08007308 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	e009      	b.n	8007330 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	33b0      	adds	r3, #176	; 0xb0
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007350:	2303      	movs	r3, #3
 8007352:	e01f      	b.n	8007394 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	79fa      	ldrb	r2, [r7, #7]
 8007386:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fe29 	bl	8008fe0 <USBD_LL_Init>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e025      	b.n	8007400 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32ae      	adds	r2, #174	; 0xae
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00f      	beq.n	80073f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	32ae      	adds	r2, #174	; 0xae
 80073da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	f107 020e 	add.w	r2, r7, #14
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	4602      	mov	r2, r0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fe31 	bl	8009078 <USBD_LL_Start>
 8007416:	4603      	mov	r3, r0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	4611      	mov	r1, r2
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	4611      	mov	r1, r2
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 f938 	bl	800872a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d01a      	beq.n	8007514 <USBD_LL_SetupStage+0x72>
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d822      	bhi.n	8007528 <USBD_LL_SetupStage+0x86>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <USBD_LL_SetupStage+0x4a>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d00a      	beq.n	8007500 <USBD_LL_SetupStage+0x5e>
 80074ea:	e01d      	b.n	8007528 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fb65 	bl	8007bc4 <USBD_StdDevReq>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
      break;
 80074fe:	e020      	b.n	8007542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbcd 	bl	8007ca8 <USBD_StdItfReq>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
      break;
 8007512:	e016      	b.n	8007542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc2f 	bl	8007d80 <USBD_StdEPReq>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
      break;
 8007526:	e00c      	b.n	8007542 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800752e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fe44 	bl	80091c4 <USBD_LL_StallEP>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
      break;
 8007540:	bf00      	nop
  }

  return ret;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d16e      	bne.n	8007642 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800756a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007572:	2b03      	cmp	r3, #3
 8007574:	f040 8098 	bne.w	80076a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	429a      	cmp	r2, r3
 8007582:	d913      	bls.n	80075ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	1ad2      	subs	r2, r2, r3
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	4293      	cmp	r3, r2
 800759c:	bf28      	it	cs
 800759e:	4613      	movcs	r3, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f001 f9b4 	bl	8008912 <USBD_CtlContinueRx>
 80075aa:	e07d      	b.n	80076a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d014      	beq.n	80075e4 <USBD_LL_DataOutStage+0x98>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d81d      	bhi.n	80075fa <USBD_LL_DataOutStage+0xae>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <USBD_LL_DataOutStage+0x7c>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d003      	beq.n	80075ce <USBD_LL_DataOutStage+0x82>
 80075c6:	e018      	b.n	80075fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	75bb      	strb	r3, [r7, #22]
            break;
 80075cc:	e018      	b.n	8007600 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fa64 	bl	8007aa6 <USBD_CoreFindIF>
 80075de:	4603      	mov	r3, r0
 80075e0:	75bb      	strb	r3, [r7, #22]
            break;
 80075e2:	e00d      	b.n	8007600 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa66 	bl	8007ac0 <USBD_CoreFindEP>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75bb      	strb	r3, [r7, #22]
            break;
 80075f8:	e002      	b.n	8007600 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75bb      	strb	r3, [r7, #22]
            break;
 80075fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007600:	7dbb      	ldrb	r3, [r7, #22]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d119      	bne.n	800763a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d113      	bne.n	800763a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007612:	7dba      	ldrb	r2, [r7, #22]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	32ae      	adds	r2, #174	; 0xae
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00b      	beq.n	800763a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007622:	7dba      	ldrb	r2, [r7, #22]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800762a:	7dba      	ldrb	r2, [r7, #22]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 f97a 	bl	8008934 <USBD_CtlSendStatus>
 8007640:	e032      	b.n	80076a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007648:	b2db      	uxtb	r3, r3
 800764a:	4619      	mov	r1, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa37 	bl	8007ac0 <USBD_CoreFindEP>
 8007652:	4603      	mov	r3, r0
 8007654:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007656:	7dbb      	ldrb	r3, [r7, #22]
 8007658:	2bff      	cmp	r3, #255	; 0xff
 800765a:	d025      	beq.n	80076a8 <USBD_LL_DataOutStage+0x15c>
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d122      	bne.n	80076a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b03      	cmp	r3, #3
 800766c:	d117      	bne.n	800769e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800766e:	7dba      	ldrb	r2, [r7, #22]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	32ae      	adds	r2, #174	; 0xae
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00f      	beq.n	800769e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800767e:	7dba      	ldrb	r2, [r7, #22]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007686:	7dba      	ldrb	r2, [r7, #22]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	32ae      	adds	r2, #174	; 0xae
 800768c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	7afa      	ldrb	r2, [r7, #11]
 8007694:	4611      	mov	r1, r2
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	e000      	b.n	80076aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	460b      	mov	r3, r1
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d16f      	bne.n	80077a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3314      	adds	r3, #20
 80076ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d15a      	bne.n	800778c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d914      	bls.n	800770c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 f8dc 	bl	80088b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076fe:	2300      	movs	r3, #0
 8007700:	2200      	movs	r2, #0
 8007702:	2100      	movs	r1, #0
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f001 fe63 	bl	80093d0 <USBD_LL_PrepareReceive>
 800770a:	e03f      	b.n	800778c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d11c      	bne.n	8007752 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007720:	429a      	cmp	r2, r3
 8007722:	d316      	bcc.n	8007752 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800772e:	429a      	cmp	r2, r3
 8007730:	d20f      	bcs.n	8007752 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007732:	2200      	movs	r2, #0
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f001 f8bd 	bl	80088b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007744:	2300      	movs	r3, #0
 8007746:	2200      	movs	r2, #0
 8007748:	2100      	movs	r1, #0
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f001 fe40 	bl	80093d0 <USBD_LL_PrepareReceive>
 8007750:	e01c      	b.n	800778c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d10f      	bne.n	800777e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800777e:	2180      	movs	r1, #128	; 0x80
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 fd1f 	bl	80091c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f001 f8e7 	bl	800895a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d03a      	beq.n	800780c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fe42 	bl	8007420 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077a4:	e032      	b.n	800780c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	4619      	mov	r1, r3
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f985 	bl	8007ac0 <USBD_CoreFindEP>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2bff      	cmp	r3, #255	; 0xff
 80077be:	d025      	beq.n	800780c <USBD_LL_DataInStage+0x15a>
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d122      	bne.n	800780c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d11c      	bne.n	800780c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80077d2:	7dfa      	ldrb	r2, [r7, #23]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	32ae      	adds	r2, #174	; 0xae
 80077d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d014      	beq.n	800780c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077e2:	7dfa      	ldrb	r2, [r7, #23]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077ea:	7dfa      	ldrb	r2, [r7, #23]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	32ae      	adds	r2, #174	; 0xae
 80077f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	7afa      	ldrb	r2, [r7, #11]
 80077f8:	4611      	mov	r1, r2
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	4798      	blx	r3
 80077fe:	4603      	mov	r3, r0
 8007800:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007802:	7dbb      	ldrb	r3, [r7, #22]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007808:	7dbb      	ldrb	r3, [r7, #22]
 800780a:	e000      	b.n	800780e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d014      	beq.n	800787c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6852      	ldr	r2, [r2, #4]
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	4611      	mov	r1, r2
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	2200      	movs	r2, #0
 8007880:	2100      	movs	r1, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fc2a 	bl	80090dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2240      	movs	r2, #64	; 0x40
 8007894:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	2200      	movs	r2, #0
 800789c:	2180      	movs	r1, #128	; 0x80
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fc1c 	bl	80090dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2240      	movs	r2, #64	; 0x40
 80078ae:	621a      	str	r2, [r3, #32]

  return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d006      	beq.n	80078fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2204      	movs	r2, #4
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b04      	cmp	r3, #4
 8007924:	d106      	bne.n	8007934 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800792c:	b2da      	uxtb	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b03      	cmp	r3, #3
 8007954:	d110      	bne.n	8007978 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32ae      	adds	r2, #174	; 0xae
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e01c      	b.n	80079de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d115      	bne.n	80079dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	; 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	4611      	mov	r1, r2
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	32ae      	adds	r2, #174	; 0xae
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e01c      	b.n	8007a42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d115      	bne.n	8007a40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	32ae      	adds	r2, #174	; 0xae
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	32ae      	adds	r2, #174	; 0xae
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6852      	ldr	r2, [r2, #4]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ab2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007acc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d920      	bls.n	8007b44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b0a:	e013      	b.n	8007b34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b0c:	f107 030a 	add.w	r3, r7, #10
 8007b10:	4619      	mov	r1, r3
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	f000 f81b 	bl	8007b4e <USBD_GetNextDesc>
 8007b18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b05      	cmp	r3, #5
 8007b20:	d108      	bne.n	8007b34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d008      	beq.n	8007b42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d8e5      	bhi.n	8007b0c <USBD_GetEpDesc+0x32>
 8007b40:	e000      	b.n	8007b44 <USBD_GetEpDesc+0x6a>
          break;
 8007b42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b44:	693b      	ldr	r3, [r7, #16]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	881a      	ldrh	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4413      	add	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ba6:	8a3b      	ldrh	r3, [r7, #16]
 8007ba8:	021b      	lsls	r3, r3, #8
 8007baa:	b21a      	sxth	r2, r3
 8007bac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b21b      	sxth	r3, r3
 8007bb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bb6:	89fb      	ldrh	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d005      	beq.n	8007bea <USBD_StdDevReq+0x26>
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d857      	bhi.n	8007c92 <USBD_StdDevReq+0xce>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00f      	beq.n	8007c06 <USBD_StdDevReq+0x42>
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d153      	bne.n	8007c92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	32ae      	adds	r2, #174	; 0xae
 8007bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e04a      	b.n	8007c9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b09      	cmp	r3, #9
 8007c0c:	d83b      	bhi.n	8007c86 <USBD_StdDevReq+0xc2>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBD_StdDevReq+0x50>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c69 	.word	0x08007c69
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007c87 	.word	0x08007c87
 8007c20:	08007c73 	.word	0x08007c73
 8007c24:	08007c87 	.word	0x08007c87
 8007c28:	08007c47 	.word	0x08007c47
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c87 	.word	0x08007c87
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c51 	.word	0x08007c51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa3c 	bl	80080bc <USBD_GetDescriptor>
          break;
 8007c44:	e024      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fbcb 	bl	80083e4 <USBD_SetAddress>
          break;
 8007c4e:	e01f      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fc0a 	bl	800846c <USBD_SetConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c5c:	e018      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fcad 	bl	80085c0 <USBD_GetConfig>
          break;
 8007c66:	e013      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fcde 	bl	800862c <USBD_GetStatus>
          break;
 8007c70:	e00e      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fd0d 	bl	8008694 <USBD_SetFeature>
          break;
 8007c7a:	e009      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fd31 	bl	80086e6 <USBD_ClrFeature>
          break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fd88 	bl	800879e <USBD_CtlError>
          break;
 8007c8e:	bf00      	nop
      }
      break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fd82 	bl	800879e <USBD_CtlError>
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d005      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d852      	bhi.n	8007d6c <USBD_StdItfReq+0xc4>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d14e      	bne.n	8007d6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d840      	bhi.n	8007d5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	889b      	ldrh	r3, [r3, #4]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d836      	bhi.n	8007d54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fed9 	bl	8007aa6 <USBD_CoreFindIF>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2bff      	cmp	r3, #255	; 0xff
 8007cfc:	d01d      	beq.n	8007d3a <USBD_StdItfReq+0x92>
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d11a      	bne.n	8007d3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d04:	7bba      	ldrb	r2, [r7, #14]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	32ae      	adds	r2, #174	; 0xae
 8007d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00f      	beq.n	8007d34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d14:	7bba      	ldrb	r2, [r7, #14]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d1c:	7bba      	ldrb	r2, [r7, #14]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	32ae      	adds	r2, #174	; 0xae
 8007d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d32:	e004      	b.n	8007d3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d38:	e001      	b.n	8007d3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	88db      	ldrh	r3, [r3, #6]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d110      	bne.n	8007d68 <USBD_StdItfReq+0xc0>
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10d      	bne.n	8007d68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fdf1 	bl	8008934 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d52:	e009      	b.n	8007d68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fd21 	bl	800879e <USBD_CtlError>
          break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fd1c 	bl	800879e <USBD_CtlError>
          break;
 8007d66:	e000      	b.n	8007d6a <USBD_StdItfReq+0xc2>
          break;
 8007d68:	bf00      	nop
      }
      break;
 8007d6a:	e004      	b.n	8007d76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fd15 	bl	800879e <USBD_CtlError>
      break;
 8007d74:	bf00      	nop
  }

  return ret;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	889b      	ldrh	r3, [r3, #4]
 8007d92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d007      	beq.n	8007db0 <USBD_StdEPReq+0x30>
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	f200 817f 	bhi.w	80080a4 <USBD_StdEPReq+0x324>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02a      	beq.n	8007e00 <USBD_StdEPReq+0x80>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	f040 817a 	bne.w	80080a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fe83 	bl	8007ac0 <USBD_CoreFindEP>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dbe:	7b7b      	ldrb	r3, [r7, #13]
 8007dc0:	2bff      	cmp	r3, #255	; 0xff
 8007dc2:	f000 8174 	beq.w	80080ae <USBD_StdEPReq+0x32e>
 8007dc6:	7b7b      	ldrb	r3, [r7, #13]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8170 	bne.w	80080ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007dce:	7b7a      	ldrb	r2, [r7, #13]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007dd6:	7b7a      	ldrb	r2, [r7, #13]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32ae      	adds	r2, #174	; 0xae
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8163 	beq.w	80080ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007de8:	7b7a      	ldrb	r2, [r7, #13]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	32ae      	adds	r2, #174	; 0xae
 8007dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dfe:	e156      	b.n	80080ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d008      	beq.n	8007e1a <USBD_StdEPReq+0x9a>
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	f300 8145 	bgt.w	8008098 <USBD_StdEPReq+0x318>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 809b 	beq.w	8007f4a <USBD_StdEPReq+0x1ca>
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d03c      	beq.n	8007e92 <USBD_StdEPReq+0x112>
 8007e18:	e13e      	b.n	8008098 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d002      	beq.n	8007e2c <USBD_StdEPReq+0xac>
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d016      	beq.n	8007e58 <USBD_StdEPReq+0xd8>
 8007e2a:	e02c      	b.n	8007e86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <USBD_StdEPReq+0xce>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d00a      	beq.n	8007e4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f9c1 	bl	80091c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e42:	2180      	movs	r1, #128	; 0x80
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f9bd 	bl	80091c4 <USBD_LL_StallEP>
 8007e4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e4c:	e020      	b.n	8007e90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fca4 	bl	800879e <USBD_CtlError>
              break;
 8007e56:	e01b      	b.n	8007e90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10e      	bne.n	8007e7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <USBD_StdEPReq+0xfe>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d008      	beq.n	8007e7e <USBD_StdEPReq+0xfe>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f9a3 	bl	80091c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fd58 	bl	8008934 <USBD_CtlSendStatus>

              break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc88 	bl	800879e <USBD_CtlError>
              break;
 8007e8e:	bf00      	nop
          }
          break;
 8007e90:	e107      	b.n	80080a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d002      	beq.n	8007ea4 <USBD_StdEPReq+0x124>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d016      	beq.n	8007ed0 <USBD_StdEPReq+0x150>
 8007ea2:	e04b      	b.n	8007f3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00d      	beq.n	8007ec6 <USBD_StdEPReq+0x146>
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d00a      	beq.n	8007ec6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f985 	bl	80091c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f981 	bl	80091c4 <USBD_LL_StallEP>
 8007ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ec4:	e040      	b.n	8007f48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc68 	bl	800879e <USBD_CtlError>
              break;
 8007ece:	e03b      	b.n	8007f48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	885b      	ldrh	r3, [r3, #2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d136      	bne.n	8007f46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f9a2 	bl	8009230 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fd21 	bl	8008934 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fde2 	bl	8007ac0 <USBD_CoreFindEP>
 8007efc:	4603      	mov	r3, r0
 8007efe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f00:	7b7b      	ldrb	r3, [r7, #13]
 8007f02:	2bff      	cmp	r3, #255	; 0xff
 8007f04:	d01f      	beq.n	8007f46 <USBD_StdEPReq+0x1c6>
 8007f06:	7b7b      	ldrb	r3, [r7, #13]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11c      	bne.n	8007f46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f14:	7b7a      	ldrb	r2, [r7, #13]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32ae      	adds	r2, #174	; 0xae
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d010      	beq.n	8007f46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f24:	7b7a      	ldrb	r2, [r7, #13]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	; 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f3a:	e004      	b.n	8007f46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fc2d 	bl	800879e <USBD_CtlError>
              break;
 8007f44:	e000      	b.n	8007f48 <USBD_StdEPReq+0x1c8>
              break;
 8007f46:	bf00      	nop
          }
          break;
 8007f48:	e0ab      	b.n	80080a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d002      	beq.n	8007f5c <USBD_StdEPReq+0x1dc>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d032      	beq.n	8007fc0 <USBD_StdEPReq+0x240>
 8007f5a:	e097      	b.n	800808c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <USBD_StdEPReq+0x1f2>
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d004      	beq.n	8007f72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fc17 	bl	800879e <USBD_CtlError>
                break;
 8007f70:	e091      	b.n	8008096 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da0b      	bge.n	8007f92 <USBD_StdEPReq+0x212>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	3310      	adds	r3, #16
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	e00b      	b.n	8007faa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3304      	adds	r3, #4
 8007faa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fc61 	bl	8008880 <USBD_CtlSendData>
              break;
 8007fbe:	e06a      	b.n	8008096 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da11      	bge.n	8007fec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	3324      	adds	r3, #36	; 0x24
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d117      	bne.n	8008012 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fbda 	bl	800879e <USBD_CtlError>
                  break;
 8007fea:	e054      	b.n	8008096 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	f003 020f 	and.w	r2, r3, #15
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fbc7 	bl	800879e <USBD_CtlError>
                  break;
 8008010:	e041      	b.n	8008096 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	da0b      	bge.n	8008032 <USBD_StdEPReq+0x2b2>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	3310      	adds	r3, #16
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	3304      	adds	r3, #4
 8008030:	e00b      	b.n	800804a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	3304      	adds	r3, #4
 800804a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <USBD_StdEPReq+0x2d8>
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b80      	cmp	r3, #128	; 0x80
 8008056:	d103      	bne.n	8008060 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e00e      	b.n	800807e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f919 	bl	800929c <USBD_LL_IsStallEP>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2201      	movs	r2, #1
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	e002      	b.n	800807e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2202      	movs	r2, #2
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbfb 	bl	8008880 <USBD_CtlSendData>
              break;
 800808a:	e004      	b.n	8008096 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb85 	bl	800879e <USBD_CtlError>
              break;
 8008094:	bf00      	nop
          }
          break;
 8008096:	e004      	b.n	80080a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb7f 	bl	800879e <USBD_CtlError>
          break;
 80080a0:	bf00      	nop
      }
      break;
 80080a2:	e005      	b.n	80080b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fb79 	bl	800879e <USBD_CtlError>
      break;
 80080ac:	e000      	b.n	80080b0 <USBD_StdEPReq+0x330>
      break;
 80080ae:	bf00      	nop
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	2b0e      	cmp	r3, #14
 80080de:	f200 8152 	bhi.w	8008386 <USBD_GetDescriptor+0x2ca>
 80080e2:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <USBD_GetDescriptor+0x2c>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	08008159 	.word	0x08008159
 80080ec:	08008171 	.word	0x08008171
 80080f0:	080081b1 	.word	0x080081b1
 80080f4:	08008387 	.word	0x08008387
 80080f8:	08008387 	.word	0x08008387
 80080fc:	08008327 	.word	0x08008327
 8008100:	08008353 	.word	0x08008353
 8008104:	08008387 	.word	0x08008387
 8008108:	08008387 	.word	0x08008387
 800810c:	08008387 	.word	0x08008387
 8008110:	08008387 	.word	0x08008387
 8008114:	08008387 	.word	0x08008387
 8008118:	08008387 	.word	0x08008387
 800811c:	08008387 	.word	0x08008387
 8008120:	08008125 	.word	0x08008125
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7c12      	ldrb	r2, [r2, #16]
 800813c:	f107 0108 	add.w	r1, r7, #8
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008146:	e126      	b.n	8008396 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb27 	bl	800879e <USBD_CtlError>
        err++;
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	3301      	adds	r3, #1
 8008154:	72fb      	strb	r3, [r7, #11]
      break;
 8008156:	e11e      	b.n	8008396 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
      break;
 800816e:	e112      	b.n	8008396 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7c1b      	ldrb	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10d      	bne.n	8008194 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	f107 0208 	add.w	r2, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	2202      	movs	r2, #2
 8008190:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008192:	e100      	b.n	8008396 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f107 0208 	add.w	r2, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]
      break;
 80081ae:	e0f2      	b.n	8008396 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	f200 80ac 	bhi.w	8008314 <USBD_GetDescriptor+0x258>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBD_GetDescriptor+0x108>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081dd 	.word	0x080081dd
 80081c8:	08008211 	.word	0x08008211
 80081cc:	08008245 	.word	0x08008245
 80081d0:	08008279 	.word	0x08008279
 80081d4:	080082ad 	.word	0x080082ad
 80081d8:	080082e1 	.word	0x080082e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7c12      	ldrb	r2, [r2, #16]
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fe:	e091      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 facb 	bl	800879e <USBD_CtlError>
            err++;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	3301      	adds	r3, #1
 800820c:	72fb      	strb	r3, [r7, #11]
          break;
 800820e:	e089      	b.n	8008324 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008232:	e077      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fab1 	bl	800879e <USBD_CtlError>
            err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
          break;
 8008242:	e06f      	b.n	8008324 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7c12      	ldrb	r2, [r2, #16]
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008266:	e05d      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa97 	bl	800879e <USBD_CtlError>
            err++;
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	3301      	adds	r3, #1
 8008274:	72fb      	strb	r3, [r7, #11]
          break;
 8008276:	e055      	b.n	8008324 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7c12      	ldrb	r2, [r2, #16]
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
 8008298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829a:	e043      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa7d 	bl	800879e <USBD_CtlError>
            err++;
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	3301      	adds	r3, #1
 80082a8:	72fb      	strb	r3, [r7, #11]
          break;
 80082aa:	e03b      	b.n	8008324 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	7c12      	ldrb	r2, [r2, #16]
 80082c4:	f107 0108 	add.w	r1, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ce:	e029      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa63 	bl	800879e <USBD_CtlError>
            err++;
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	3301      	adds	r3, #1
 80082dc:	72fb      	strb	r3, [r7, #11]
          break;
 80082de:	e021      	b.n	8008324 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e00f      	b.n	8008324 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa49 	bl	800879e <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e007      	b.n	8008324 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa41 	bl	800879e <USBD_CtlError>
          err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008322:	bf00      	nop
      }
      break;
 8008324:	e037      	b.n	8008396 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7c1b      	ldrb	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	f107 0208 	add.w	r2, r7, #8
 800833a:	4610      	mov	r0, r2
 800833c:	4798      	blx	r3
 800833e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008340:	e029      	b.n	8008396 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa2a 	bl	800879e <USBD_CtlError>
        err++;
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	3301      	adds	r3, #1
 800834e:	72fb      	strb	r3, [r7, #11]
      break;
 8008350:	e021      	b.n	8008396 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f107 0208 	add.w	r2, r7, #8
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	2207      	movs	r2, #7
 8008372:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008374:	e00f      	b.n	8008396 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa10 	bl	800879e <USBD_CtlError>
        err++;
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	3301      	adds	r3, #1
 8008382:	72fb      	strb	r3, [r7, #11]
      break;
 8008384:	e007      	b.n	8008396 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa08 	bl	800879e <USBD_CtlError>
      err++;
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	3301      	adds	r3, #1
 8008392:	72fb      	strb	r3, [r7, #11]
      break;
 8008394:	bf00      	nop
  }

  if (err != 0U)
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11e      	bne.n	80083da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	88db      	ldrh	r3, [r3, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d016      	beq.n	80083d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80083a4:	893b      	ldrh	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	88da      	ldrh	r2, [r3, #6]
 80083ae:	893b      	ldrh	r3, [r7, #8]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	bf28      	it	cs
 80083b4:	4613      	movcs	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083ba:	893b      	ldrh	r3, [r7, #8]
 80083bc:	461a      	mov	r2, r3
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa5d 	bl	8008880 <USBD_CtlSendData>
 80083c6:	e009      	b.n	80083dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f9e7 	bl	800879e <USBD_CtlError>
 80083d0:	e004      	b.n	80083dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 faae 	bl	8008934 <USBD_CtlSendStatus>
 80083d8:	e000      	b.n	80083dc <USBD_GetDescriptor+0x320>
    return;
 80083da:	bf00      	nop
  }
}
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop

080083e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	889b      	ldrh	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d131      	bne.n	800845a <USBD_SetAddress+0x76>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d12d      	bne.n	800845a <USBD_SetAddress+0x76>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	2b7f      	cmp	r3, #127	; 0x7f
 8008404:	d829      	bhi.n	800845a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	885b      	ldrh	r3, [r3, #2]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008410:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d104      	bne.n	8008428 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9bc 	bl	800879e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008426:	e01d      	b.n	8008464 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7bfa      	ldrb	r2, [r7, #15]
 800842c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 ff5d 	bl	80092f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa7a 	bl	8008934 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	e009      	b.n	8008464 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	e004      	b.n	8008464 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f99e 	bl	800879e <USBD_CtlError>
  }
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b4e      	ldr	r3, [pc, #312]	; (80085bc <USBD_SetConfig+0x150>)
 8008482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008484:	4b4d      	ldr	r3, [pc, #308]	; (80085bc <USBD_SetConfig+0x150>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d905      	bls.n	8008498 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f985 	bl	800879e <USBD_CtlError>
    return USBD_FAIL;
 8008494:	2303      	movs	r3, #3
 8008496:	e08c      	b.n	80085b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d002      	beq.n	80084aa <USBD_SetConfig+0x3e>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d029      	beq.n	80084fc <USBD_SetConfig+0x90>
 80084a8:	e075      	b.n	8008596 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084aa:	4b44      	ldr	r3, [pc, #272]	; (80085bc <USBD_SetConfig+0x150>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d020      	beq.n	80084f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084b2:	4b42      	ldr	r3, [pc, #264]	; (80085bc <USBD_SetConfig+0x150>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084bc:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <USBD_SetConfig+0x150>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fe ffb7 	bl	8007436 <USBD_SetClassConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f962 	bl	800879e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084e2:	e065      	b.n	80085b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa25 	bl	8008934 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2203      	movs	r2, #3
 80084ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084f2:	e05d      	b.n	80085b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fa1d 	bl	8008934 <USBD_CtlSendStatus>
      break;
 80084fa:	e059      	b.n	80085b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084fc:	4b2f      	ldr	r3, [pc, #188]	; (80085bc <USBD_SetConfig+0x150>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d112      	bne.n	800852a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800850c:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <USBD_SetConfig+0x150>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008516:	4b29      	ldr	r3, [pc, #164]	; (80085bc <USBD_SetConfig+0x150>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fe ffa6 	bl	800746e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa06 	bl	8008934 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008528:	e042      	b.n	80085b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <USBD_SetConfig+0x150>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d02a      	beq.n	800858e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fe ff94 	bl	800746e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <USBD_SetConfig+0x150>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008550:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <USBD_SetConfig+0x150>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fe ff6d 	bl	8007436 <USBD_SetClassConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00f      	beq.n	8008586 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f918 	bl	800879e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe ff79 	bl	800746e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008584:	e014      	b.n	80085b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9d4 	bl	8008934 <USBD_CtlSendStatus>
      break;
 800858c:	e010      	b.n	80085b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9d0 	bl	8008934 <USBD_CtlSendStatus>
      break;
 8008594:	e00c      	b.n	80085b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f900 	bl	800879e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <USBD_SetConfig+0x150>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fe ff62 	bl	800746e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085aa:	2303      	movs	r3, #3
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	bf00      	nop
  }

  return ret;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200003b0 	.word	0x200003b0

080085c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d004      	beq.n	80085dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f8e2 	bl	800879e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085da:	e023      	b.n	8008624 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	dc02      	bgt.n	80085ee <USBD_GetConfig+0x2e>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc03      	bgt.n	80085f4 <USBD_GetConfig+0x34>
 80085ec:	e015      	b.n	800861a <USBD_GetConfig+0x5a>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d00b      	beq.n	800860a <USBD_GetConfig+0x4a>
 80085f2:	e012      	b.n	800861a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3308      	adds	r3, #8
 80085fe:	2201      	movs	r2, #1
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f93c 	bl	8008880 <USBD_CtlSendData>
        break;
 8008608:	e00c      	b.n	8008624 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	2201      	movs	r2, #1
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f934 	bl	8008880 <USBD_CtlSendData>
        break;
 8008618:	e004      	b.n	8008624 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8be 	bl	800879e <USBD_CtlError>
        break;
 8008622:	bf00      	nop
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863c:	b2db      	uxtb	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	2b02      	cmp	r3, #2
 8008642:	d81e      	bhi.n	8008682 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	88db      	ldrh	r3, [r3, #6]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d004      	beq.n	8008656 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8a5 	bl	800879e <USBD_CtlError>
        break;
 8008654:	e01a      	b.n	800868c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f043 0202 	orr.w	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	330c      	adds	r3, #12
 8008676:	2202      	movs	r2, #2
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f900 	bl	8008880 <USBD_CtlSendData>
      break;
 8008680:	e004      	b.n	800868c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f88a 	bl	800879e <USBD_CtlError>
      break;
 800868a:	bf00      	nop
  }
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	885b      	ldrh	r3, [r3, #2]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d107      	bne.n	80086b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f940 	bl	8008934 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086b4:	e013      	b.n	80086de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d10b      	bne.n	80086d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	889b      	ldrh	r3, [r3, #4]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f930 	bl	8008934 <USBD_CtlSendStatus>
}
 80086d4:	e003      	b.n	80086de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f860 	bl	800879e <USBD_CtlError>
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d80b      	bhi.n	8008716 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	885b      	ldrh	r3, [r3, #2]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10c      	bne.n	8008720 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f910 	bl	8008934 <USBD_CtlSendStatus>
      }
      break;
 8008714:	e004      	b.n	8008720 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f840 	bl	800879e <USBD_CtlError>
      break;
 800871e:	e000      	b.n	8008722 <USBD_ClrFeature+0x3c>
      break;
 8008720:	bf00      	nop
  }
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff fa17 	bl	8007b88 <SWAPBYTE>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fa0a 	bl	8007b88 <SWAPBYTE>
 8008774:	4603      	mov	r3, r0
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3301      	adds	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff f9fd 	bl	8007b88 <SWAPBYTE>
 800878e:	4603      	mov	r3, r0
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	80da      	strh	r2, [r3, #6]
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a8:	2180      	movs	r1, #128	; 0x80
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fd0a 	bl	80091c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087b0:	2100      	movs	r1, #0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fd06 	bl	80091c4 <USBD_LL_StallEP>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d036      	beq.n	8008844 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f000 f836 	bl	800884c <USBD_GetLen>
 80087e0:	4603      	mov	r3, r0
 80087e2:	3301      	adds	r3, #1
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	4413      	add	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	3301      	adds	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	2203      	movs	r2, #3
 8008808:	701a      	strb	r2, [r3, #0]
  idx++;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	3301      	adds	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008810:	e013      	b.n	800883a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	4413      	add	r3, r2
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	7812      	ldrb	r2, [r2, #0]
 800881c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	613b      	str	r3, [r7, #16]
    idx++;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	3301      	adds	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4413      	add	r3, r2
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
    idx++;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	3301      	adds	r3, #1
 8008838:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e7      	bne.n	8008812 <USBD_GetString+0x52>
 8008842:	e000      	b.n	8008846 <USBD_GetString+0x86>
    return;
 8008844:	bf00      	nop
  }
}
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800885c:	e005      	b.n	800886a <USBD_GetLen+0x1e>
  {
    len++;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	3301      	adds	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3301      	adds	r3, #1
 8008868:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f5      	bne.n	800885e <USBD_GetLen+0x12>
  }

  return len;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2202      	movs	r2, #2
 8008890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	2100      	movs	r1, #0
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fd5a 	bl	8009360 <USBD_LL_Transmit>

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	2100      	movs	r1, #0
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fd49 	bl	8009360 <USBD_LL_Transmit>

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2203      	movs	r2, #3
 80088e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	2100      	movs	r1, #0
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fd64 	bl	80093d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	2100      	movs	r1, #0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fd53 	bl	80093d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2204      	movs	r2, #4
 8008940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fd08 	bl	8009360 <USBD_LL_Transmit>

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2205      	movs	r2, #5
 8008966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800896a:	2300      	movs	r3, #0
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fd2d 	bl	80093d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008984:	2200      	movs	r2, #0
 8008986:	4912      	ldr	r1, [pc, #72]	; (80089d0 <MX_USB_DEVICE_Init+0x50>)
 8008988:	4812      	ldr	r0, [pc, #72]	; (80089d4 <MX_USB_DEVICE_Init+0x54>)
 800898a:	f7fe fcd7 	bl	800733c <USBD_Init>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008994:	f7f8 faf6 	bl	8000f84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008998:	490f      	ldr	r1, [pc, #60]	; (80089d8 <MX_USB_DEVICE_Init+0x58>)
 800899a:	480e      	ldr	r0, [pc, #56]	; (80089d4 <MX_USB_DEVICE_Init+0x54>)
 800899c:	f7fe fcfe 	bl	800739c <USBD_RegisterClass>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089a6:	f7f8 faed 	bl	8000f84 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80089aa:	490c      	ldr	r1, [pc, #48]	; (80089dc <MX_USB_DEVICE_Init+0x5c>)
 80089ac:	4809      	ldr	r0, [pc, #36]	; (80089d4 <MX_USB_DEVICE_Init+0x54>)
 80089ae:	f7fe fcab 	bl	8007308 <USBD_CUSTOM_HID_RegisterInterface>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089b8:	f7f8 fae4 	bl	8000f84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089bc:	4805      	ldr	r0, [pc, #20]	; (80089d4 <MX_USB_DEVICE_Init+0x54>)
 80089be:	f7fe fd23 	bl	8007408 <USBD_Start>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089c8:	f7f8 fadc 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089cc:	bf00      	nop
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	200000b8 	.word	0x200000b8
 80089d4:	200003b4 	.word	0x200003b4
 80089d8:	2000000c 	.word	0x2000000c
 80089dc:	200000a8 	.word	0x200000a8

080089e0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80089f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	460a      	mov	r2, r1
 8008a0a:	71fb      	strb	r3, [r7, #7]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  miflag = 1;
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <CUSTOM_HID_OutEvent_FS+0x24>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
 // USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 8008a16:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	20000690 	.word	0x20000690

08008a28 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8008a34:	887b      	ldrh	r3, [r7, #2]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4804      	ldr	r0, [pc, #16]	; (8008a4c <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8008a3c:	f7fe fb1c 	bl	8007078 <USBD_CUSTOM_HID_SendReport>
 8008a40:	4603      	mov	r3, r0
 8008a42:	b25b      	sxtb	r3, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200003b4 	.word	0x200003b4

08008a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	6039      	str	r1, [r7, #0]
 8008a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2212      	movs	r2, #18
 8008a60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a62:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	200000d8 	.word	0x200000d8

08008a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2204      	movs	r2, #4
 8008a84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a86:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	200000f8 	.word	0x200000f8

08008a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d105      	bne.n	8008ab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4907      	ldr	r1, [pc, #28]	; (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aae:	4808      	ldr	r0, [pc, #32]	; (8008ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ab0:	f7ff fe86 	bl	80087c0 <USBD_GetString>
 8008ab4:	e004      	b.n	8008ac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	4904      	ldr	r1, [pc, #16]	; (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aba:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008abc:	f7ff fe80 	bl	80087c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac0:	4b02      	ldr	r3, [pc, #8]	; (8008acc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000694 	.word	0x20000694
 8008ad0:	08009590 	.word	0x08009590

08008ad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	4904      	ldr	r1, [pc, #16]	; (8008af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ae4:	4804      	ldr	r0, [pc, #16]	; (8008af8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ae6:	f7ff fe6b 	bl	80087c0 <USBD_GetString>
  return USBD_StrDesc;
 8008aea:	4b02      	ldr	r3, [pc, #8]	; (8008af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000694 	.word	0x20000694
 8008af8:	080095b0 	.word	0x080095b0

08008afc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	221a      	movs	r2, #26
 8008b0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b0e:	f000 f855 	bl	8008bbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b12:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	200000fc 	.word	0x200000fc

08008b20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d105      	bne.n	8008b3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4907      	ldr	r1, [pc, #28]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b36:	4808      	ldr	r0, [pc, #32]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b38:	f7ff fe42 	bl	80087c0 <USBD_GetString>
 8008b3c:	e004      	b.n	8008b48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4904      	ldr	r1, [pc, #16]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b44:	f7ff fe3c 	bl	80087c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000694 	.word	0x20000694
 8008b58:	080095c4 	.word	0x080095c4

08008b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4907      	ldr	r1, [pc, #28]	; (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b72:	4808      	ldr	r0, [pc, #32]	; (8008b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b74:	f7ff fe24 	bl	80087c0 <USBD_GetString>
 8008b78:	e004      	b.n	8008b84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4904      	ldr	r1, [pc, #16]	; (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b80:	f7ff fe1e 	bl	80087c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000694 	.word	0x20000694
 8008b94:	080095d8 	.word	0x080095d8

08008b98 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	220c      	movs	r2, #12
 8008ba8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008baa:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200000ec 	.word	0x200000ec

08008bbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <Get_SerialNum+0x44>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <Get_SerialNum+0x48>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <Get_SerialNum+0x4c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008be2:	2208      	movs	r2, #8
 8008be4:	4909      	ldr	r1, [pc, #36]	; (8008c0c <Get_SerialNum+0x50>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f814 	bl	8008c14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bec:	2204      	movs	r2, #4
 8008bee:	4908      	ldr	r1, [pc, #32]	; (8008c10 <Get_SerialNum+0x54>)
 8008bf0:	68b8      	ldr	r0, [r7, #8]
 8008bf2:	f000 f80f 	bl	8008c14 <IntToUnicode>
  }
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	1fff7590 	.word	0x1fff7590
 8008c04:	1fff7594 	.word	0x1fff7594
 8008c08:	1fff7598 	.word	0x1fff7598
 8008c0c:	200000fe 	.word	0x200000fe
 8008c10:	2000010e 	.word	0x2000010e

08008c14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	75fb      	strb	r3, [r7, #23]
 8008c2a:	e027      	b.n	8008c7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	0f1b      	lsrs	r3, r3, #28
 8008c30:	2b09      	cmp	r3, #9
 8008c32:	d80b      	bhi.n	8008c4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	0f1b      	lsrs	r3, r3, #28
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	440b      	add	r3, r1
 8008c44:	3230      	adds	r2, #48	; 0x30
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e00a      	b.n	8008c62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	0f1b      	lsrs	r3, r3, #28
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	4619      	mov	r1, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3237      	adds	r2, #55	; 0x37
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4413      	add	r3, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]
 8008c7c:	7dfa      	ldrb	r2, [r7, #23]
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d3d3      	bcc.n	8008c2c <IntToUnicode+0x18>
  }
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b0ac      	sub	sp, #176	; 0xb0
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	605a      	str	r2, [r3, #4]
 8008ca6:	609a      	str	r2, [r3, #8]
 8008ca8:	60da      	str	r2, [r3, #12]
 8008caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	2288      	movs	r2, #136	; 0x88
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fc2f 	bl	8009518 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc2:	f040 8085 	bne.w	8008dd0 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008ccc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008cdc:	2318      	movs	r3, #24
 8008cde:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008ce0:	2307      	movs	r3, #7
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008cec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cf2:	f107 0314 	add.w	r3, r7, #20
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fb fa92 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8008d02:	f7f8 f93f 	bl	8000f84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d06:	4b34      	ldr	r3, [pc, #208]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0a:	4a33      	ldr	r2, [pc, #204]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d12:	4b31      	ldr	r3, [pc, #196]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8008d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008d36:	4619      	mov	r1, r3
 8008d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d3c:	f7f8 fe8a 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008d40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d54:	2303      	movs	r3, #3
 8008d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d5a:	230a      	movs	r3, #10
 8008d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d6a:	f7f8 fe73 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d72:	4a19      	ldr	r2, [pc, #100]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d7a:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d114      	bne.n	8008dbc <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d92:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	4a10      	ldr	r2, [pc, #64]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	60bb      	str	r3, [r7, #8]
 8008da8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008daa:	f7fa fb6d 	bl	8003488 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db2:	4a09      	ldr	r2, [pc, #36]	; (8008dd8 <HAL_PCD_MspInit+0x144>)
 8008db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db8:	6593      	str	r3, [r2, #88]	; 0x58
 8008dba:	e001      	b.n	8008dc0 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008dbc:	f7fa fb64 	bl	8003488 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	2043      	movs	r0, #67	; 0x43
 8008dc6:	f7f8 fd02 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dca:	2043      	movs	r0, #67	; 0x43
 8008dcc:	f7f8 fd1b 	bl	8001806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	37b0      	adds	r7, #176	; 0xb0
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	40021000 	.word	0x40021000

08008ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fe fb55 	bl	80074a2 <USBD_LL_SetupStage>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f7fe fb8f 	bl	800754c <USBD_LL_DataOutStage>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3348      	adds	r3, #72	; 0x48
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7fe fc28 	bl	80076b2 <USBD_LL_DataInStage>
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fd62 	bl	8007942 <USBD_LL_SOF>
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d001      	beq.n	8008e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e9a:	f7f8 f873 	bl	8000f84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea4:	7bfa      	ldrb	r2, [r7, #15]
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fd06 	bl	80078ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fcae 	bl	8007816 <USBD_LL_Reset>
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fcf5 	bl	80078da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <HAL_PCD_SuspendCallback+0x48>)
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	4a03      	ldr	r2, [pc, #12]	; (8008f0c <HAL_PCD_SuspendCallback+0x48>)
 8008efe:	f043 0306 	orr.w	r3, r3, #6
 8008f02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	e000ed00 	.word	0xe000ed00

08008f10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6812      	ldr	r2, [r2, #0]
 8008f26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d007      	beq.n	8008f48 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <HAL_PCD_ResumeCallback+0x4c>)
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	4a07      	ldr	r2, [pc, #28]	; (8008f5c <HAL_PCD_ResumeCallback+0x4c>)
 8008f3e:	f023 0306 	bic.w	r3, r3, #6
 8008f42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f44:	f000 fae2 	bl	800950c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fcdf 	bl	8007912 <USBD_LL_Resume>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	e000ed00 	.word	0xe000ed00

08008f60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fd35 	bl	80079e6 <USBD_LL_IsoOUTIncomplete>
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fcf1 	bl	8007982 <USBD_LL_IsoINIncomplete>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fd47 	bl	8007a4a <USBD_LL_DevConnected>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fd44 	bl	8007a60 <USBD_LL_DevDisconnected>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d13c      	bne.n	800906a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ff0:	4a20      	ldr	r2, [pc, #128]	; (8009074 <USBD_LL_Init+0x94>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a1e      	ldr	r2, [pc, #120]	; (8009074 <USBD_LL_Init+0x94>)
 8008ffc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009000:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <USBD_LL_Init+0x94>)
 8009002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009006:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009008:	4b1a      	ldr	r3, [pc, #104]	; (8009074 <USBD_LL_Init+0x94>)
 800900a:	2206      	movs	r2, #6
 800900c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <USBD_LL_Init+0x94>)
 8009010:	2202      	movs	r2, #2
 8009012:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009014:	4b17      	ldr	r3, [pc, #92]	; (8009074 <USBD_LL_Init+0x94>)
 8009016:	2202      	movs	r2, #2
 8009018:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <USBD_LL_Init+0x94>)
 800901c:	2200      	movs	r2, #0
 800901e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009020:	4b14      	ldr	r3, [pc, #80]	; (8009074 <USBD_LL_Init+0x94>)
 8009022:	2200      	movs	r2, #0
 8009024:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <USBD_LL_Init+0x94>)
 8009028:	2200      	movs	r2, #0
 800902a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <USBD_LL_Init+0x94>)
 800902e:	2200      	movs	r2, #0
 8009030:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009032:	4b10      	ldr	r3, [pc, #64]	; (8009074 <USBD_LL_Init+0x94>)
 8009034:	2200      	movs	r2, #0
 8009036:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <USBD_LL_Init+0x94>)
 800903a:	2200      	movs	r2, #0
 800903c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800903e:	480d      	ldr	r0, [pc, #52]	; (8009074 <USBD_LL_Init+0x94>)
 8009040:	f7f9 f81f 	bl	8002082 <HAL_PCD_Init>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800904a:	f7f7 ff9b 	bl	8000f84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	4808      	ldr	r0, [pc, #32]	; (8009074 <USBD_LL_Init+0x94>)
 8009052:	f7fa f970 	bl	8003336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009056:	2240      	movs	r2, #64	; 0x40
 8009058:	2100      	movs	r1, #0
 800905a:	4806      	ldr	r0, [pc, #24]	; (8009074 <USBD_LL_Init+0x94>)
 800905c:	f7fa f924 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009060:	2280      	movs	r2, #128	; 0x80
 8009062:	2101      	movs	r1, #1
 8009064:	4803      	ldr	r0, [pc, #12]	; (8009074 <USBD_LL_Init+0x94>)
 8009066:	f7fa f91f 	bl	80032a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000894 	.word	0x20000894

08009078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800908e:	4618      	mov	r0, r3
 8009090:	f7f9 f91b 	bl	80022ca <HAL_PCD_Start>
 8009094:	4603      	mov	r3, r0
 8009096:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b03      	cmp	r3, #3
 800909c:	d816      	bhi.n	80090cc <USBD_LL_Start+0x54>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <USBD_LL_Start+0x2c>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090b5 	.word	0x080090b5
 80090a8:	080090bb 	.word	0x080090bb
 80090ac:	080090c1 	.word	0x080090c1
 80090b0:	080090c7 	.word	0x080090c7
    case HAL_OK :
      usb_status = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e00b      	b.n	80090d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ba:	2303      	movs	r3, #3
 80090bc:	73fb      	strb	r3, [r7, #15]
    break;
 80090be:	e008      	b.n	80090d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090c0:	2301      	movs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	e005      	b.n	80090d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090c6:	2303      	movs	r3, #3
 80090c8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ca:	e002      	b.n	80090d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	73fb      	strb	r3, [r7, #15]
    break;
 80090d0:	bf00      	nop
  }
  return usb_status;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	70fb      	strb	r3, [r7, #3]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70bb      	strb	r3, [r7, #2]
 80090f2:	4613      	mov	r3, r2
 80090f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009104:	78bb      	ldrb	r3, [r7, #2]
 8009106:	883a      	ldrh	r2, [r7, #0]
 8009108:	78f9      	ldrb	r1, [r7, #3]
 800910a:	f7f9 fdc5 	bl	8002c98 <HAL_PCD_EP_Open>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b03      	cmp	r3, #3
 8009116:	d817      	bhi.n	8009148 <USBD_LL_OpenEP+0x6c>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBD_LL_OpenEP+0x44>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009131 	.word	0x08009131
 8009124:	08009137 	.word	0x08009137
 8009128:	0800913d 	.word	0x0800913d
 800912c:	08009143 	.word	0x08009143
    case HAL_OK :
      usb_status = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
    break;
 8009134:	e00b      	b.n	800914e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009136:	2303      	movs	r3, #3
 8009138:	73fb      	strb	r3, [r7, #15]
    break;
 800913a:	e008      	b.n	800914e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800913c:	2301      	movs	r3, #1
 800913e:	73fb      	strb	r3, [r7, #15]
    break;
 8009140:	e005      	b.n	800914e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009142:	2303      	movs	r3, #3
 8009144:	73fb      	strb	r3, [r7, #15]
    break;
 8009146:	e002      	b.n	800914e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009148:	2303      	movs	r3, #3
 800914a:	73fb      	strb	r3, [r7, #15]
    break;
 800914c:	bf00      	nop
  }
  return usb_status;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009172:	78fa      	ldrb	r2, [r7, #3]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7f9 fdf6 	bl	8002d68 <HAL_PCD_EP_Close>
 800917c:	4603      	mov	r3, r0
 800917e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b03      	cmp	r3, #3
 8009184:	d816      	bhi.n	80091b4 <USBD_LL_CloseEP+0x5c>
 8009186:	a201      	add	r2, pc, #4	; (adr r2, 800918c <USBD_LL_CloseEP+0x34>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	0800919d 	.word	0x0800919d
 8009190:	080091a3 	.word	0x080091a3
 8009194:	080091a9 	.word	0x080091a9
 8009198:	080091af 	.word	0x080091af
    case HAL_OK :
      usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
    break;
 80091a0:	e00b      	b.n	80091ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	73fb      	strb	r3, [r7, #15]
    break;
 80091a6:	e008      	b.n	80091ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091a8:	2301      	movs	r3, #1
 80091aa:	73fb      	strb	r3, [r7, #15]
    break;
 80091ac:	e005      	b.n	80091ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ae:	2303      	movs	r3, #3
 80091b0:	73fb      	strb	r3, [r7, #15]
    break;
 80091b2:	e002      	b.n	80091ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	73fb      	strb	r3, [r7, #15]
    break;
 80091b8:	bf00      	nop
  }
  return usb_status;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f9 fe6d 	bl	8002ec2 <HAL_PCD_EP_SetStall>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d816      	bhi.n	8009220 <USBD_LL_StallEP+0x5c>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <USBD_LL_StallEP+0x34>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009209 	.word	0x08009209
 80091fc:	0800920f 	.word	0x0800920f
 8009200:	08009215 	.word	0x08009215
 8009204:	0800921b 	.word	0x0800921b
    case HAL_OK :
      usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
    break;
 800920c:	e00b      	b.n	8009226 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
    break;
 8009212:	e008      	b.n	8009226 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
    break;
 8009218:	e005      	b.n	8009226 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800921a:	2303      	movs	r3, #3
 800921c:	73fb      	strb	r3, [r7, #15]
    break;
 800921e:	e002      	b.n	8009226 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009220:	2303      	movs	r3, #3
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	bf00      	nop
  }
  return usb_status;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7f9 fe99 	bl	8002f86 <HAL_PCD_EP_ClrStall>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b03      	cmp	r3, #3
 800925c:	d816      	bhi.n	800928c <USBD_LL_ClearStallEP+0x5c>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_LL_ClearStallEP+0x34>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009275 	.word	0x08009275
 8009268:	0800927b 	.word	0x0800927b
 800926c:	08009281 	.word	0x08009281
 8009270:	08009287 	.word	0x08009287
    case HAL_OK :
      usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
    break;
 8009278:	e00b      	b.n	8009292 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800927a:	2303      	movs	r3, #3
 800927c:	73fb      	strb	r3, [r7, #15]
    break;
 800927e:	e008      	b.n	8009292 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
    break;
 8009284:	e005      	b.n	8009292 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009286:	2303      	movs	r3, #3
 8009288:	73fb      	strb	r3, [r7, #15]
    break;
 800928a:	e002      	b.n	8009292 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	bf00      	nop
  }
  return usb_status;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da0b      	bge.n	80092d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	333e      	adds	r3, #62	; 0x3e
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	e00b      	b.n	80092e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	4611      	mov	r1, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7f9 fc9b 	bl	8002c4e <HAL_PCD_SetAddress>
 8009318:	4603      	mov	r3, r0
 800931a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b03      	cmp	r3, #3
 8009320:	d816      	bhi.n	8009350 <USBD_LL_SetUSBAddress+0x5c>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <USBD_LL_SetUSBAddress+0x34>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009339 	.word	0x08009339
 800932c:	0800933f 	.word	0x0800933f
 8009330:	08009345 	.word	0x08009345
 8009334:	0800934b 	.word	0x0800934b
    case HAL_OK :
      usb_status = USBD_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	e00b      	b.n	8009356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800933e:	2303      	movs	r3, #3
 8009340:	73fb      	strb	r3, [r7, #15]
    break;
 8009342:	e008      	b.n	8009356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
    break;
 8009348:	e005      	b.n	8009356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	73fb      	strb	r3, [r7, #15]
    break;
 800934e:	e002      	b.n	8009356 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	73fb      	strb	r3, [r7, #15]
    break;
 8009354:	bf00      	nop
  }
  return usb_status;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	607a      	str	r2, [r7, #4]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	460b      	mov	r3, r1
 800936e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800937e:	7af9      	ldrb	r1, [r7, #11]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	f7f9 fd6c 	bl	8002e60 <HAL_PCD_EP_Transmit>
 8009388:	4603      	mov	r3, r0
 800938a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800938c:	7dbb      	ldrb	r3, [r7, #22]
 800938e:	2b03      	cmp	r3, #3
 8009390:	d816      	bhi.n	80093c0 <USBD_LL_Transmit+0x60>
 8009392:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <USBD_LL_Transmit+0x38>)
 8009394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093af 	.word	0x080093af
 80093a0:	080093b5 	.word	0x080093b5
 80093a4:	080093bb 	.word	0x080093bb
    case HAL_OK :
      usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	75fb      	strb	r3, [r7, #23]
    break;
 80093ac:	e00b      	b.n	80093c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	75fb      	strb	r3, [r7, #23]
    break;
 80093b2:	e008      	b.n	80093c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093b4:	2301      	movs	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
    break;
 80093b8:	e005      	b.n	80093c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ba:	2303      	movs	r3, #3
 80093bc:	75fb      	strb	r3, [r7, #23]
    break;
 80093be:	e002      	b.n	80093c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80093c0:	2303      	movs	r3, #3
 80093c2:	75fb      	strb	r3, [r7, #23]
    break;
 80093c4:	bf00      	nop
  }
  return usb_status;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	460b      	mov	r3, r1
 80093de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093ee:	7af9      	ldrb	r1, [r7, #11]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	f7f9 fd02 	bl	8002dfc <HAL_PCD_EP_Receive>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80093fc:	7dbb      	ldrb	r3, [r7, #22]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d816      	bhi.n	8009430 <USBD_LL_PrepareReceive+0x60>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBD_LL_PrepareReceive+0x38>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009419 	.word	0x08009419
 800940c:	0800941f 	.word	0x0800941f
 8009410:	08009425 	.word	0x08009425
 8009414:	0800942b 	.word	0x0800942b
    case HAL_OK :
      usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
    break;
 800941c:	e00b      	b.n	8009436 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800941e:	2303      	movs	r3, #3
 8009420:	75fb      	strb	r3, [r7, #23]
    break;
 8009422:	e008      	b.n	8009436 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
    break;
 8009428:	e005      	b.n	8009436 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800942a:	2303      	movs	r3, #3
 800942c:	75fb      	strb	r3, [r7, #23]
    break;
 800942e:	e002      	b.n	8009436 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009430:	2303      	movs	r3, #3
 8009432:	75fb      	strb	r3, [r7, #23]
    break;
 8009434:	bf00      	nop
  }
  return usb_status;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_PCDEx_LPM_Callback+0x18>
 8009452:	2b01      	cmp	r3, #1
 8009454:	d01f      	beq.n	8009496 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009456:	e03b      	b.n	80094d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009460:	f000 f854 	bl	800950c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009464:	4b1c      	ldr	r3, [pc, #112]	; (80094d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	4a1b      	ldr	r2, [pc, #108]	; (80094d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800946a:	f023 0306 	bic.w	r3, r3, #6
 800946e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fa3f 	bl	8007912 <USBD_LL_Resume>
    break;
 8009494:	e01c      	b.n	80094d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094a8:	f043 0301 	orr.w	r3, r3, #1
 80094ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe fa10 	bl	80078da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	4a04      	ldr	r2, [pc, #16]	; (80094d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80094c8:	f043 0306 	orr.w	r3, r3, #6
 80094cc:	6113      	str	r3, [r2, #16]
    break;
 80094ce:	bf00      	nop
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	e000ed00 	.word	0xe000ed00

080094dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_static_malloc+0x18>)
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20000da0 	.word	0x20000da0

080094f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009510:	f7f7 fa18 	bl	8000944 <SystemClock_Config>
}
 8009514:	bf00      	nop
 8009516:	bd80      	pop	{r7, pc}

08009518 <memset>:
 8009518:	4402      	add	r2, r0
 800951a:	4603      	mov	r3, r0
 800951c:	4293      	cmp	r3, r2
 800951e:	d100      	bne.n	8009522 <memset+0xa>
 8009520:	4770      	bx	lr
 8009522:	f803 1b01 	strb.w	r1, [r3], #1
 8009526:	e7f9      	b.n	800951c <memset+0x4>

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4d0d      	ldr	r5, [pc, #52]	; (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 800952e:	1b64      	subs	r4, r4, r5
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2600      	movs	r6, #0
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4d0b      	ldr	r5, [pc, #44]	; (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	; (800956c <__libc_init_array+0x44>)
 800953c:	f000 f818 	bl	8009570 <_init>
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2600      	movs	r6, #0
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	08009640 	.word	0x08009640
 8009564:	08009640 	.word	0x08009640
 8009568:	08009640 	.word	0x08009640
 800956c:	08009644 	.word	0x08009644

08009570 <_init>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr

0800957c <_fini>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr
